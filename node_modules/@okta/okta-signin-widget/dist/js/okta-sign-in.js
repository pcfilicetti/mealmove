(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["OktaSignIn"] = factory();
	else
		root["OktaSignIn"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	__webpack_require__(327);
	module.exports = __webpack_require__(613);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";
	
	__webpack_require__(2);
	
	__webpack_require__(323);
	
	__webpack_require__(324);
	
	if (global._babelPolyfill) {
	  throw new Error("only one instance of babel-polyfill is allowed");
	}
	global._babelPolyfill = true;
	
	var DEFINE_PROPERTY = "defineProperty";
	function define(O, key, value) {
	  O[key] || Object[DEFINE_PROPERTY](O, key, {
	    writable: true,
	    configurable: true,
	    value: value
	  });
	}
	
	define(String.prototype, "padLeft", "".padStart);
	define(String.prototype, "padRight", "".padEnd);
	
	"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {
	  [][key] && define(Array, key, Function.call.bind([][key]));
	});
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(3);
	__webpack_require__(51);
	__webpack_require__(52);
	__webpack_require__(53);
	__webpack_require__(54);
	__webpack_require__(56);
	__webpack_require__(59);
	__webpack_require__(60);
	__webpack_require__(61);
	__webpack_require__(62);
	__webpack_require__(63);
	__webpack_require__(64);
	__webpack_require__(65);
	__webpack_require__(66);
	__webpack_require__(67);
	__webpack_require__(69);
	__webpack_require__(71);
	__webpack_require__(73);
	__webpack_require__(75);
	__webpack_require__(78);
	__webpack_require__(79);
	__webpack_require__(80);
	__webpack_require__(84);
	__webpack_require__(86);
	__webpack_require__(88);
	__webpack_require__(91);
	__webpack_require__(92);
	__webpack_require__(93);
	__webpack_require__(94);
	__webpack_require__(96);
	__webpack_require__(97);
	__webpack_require__(98);
	__webpack_require__(99);
	__webpack_require__(100);
	__webpack_require__(101);
	__webpack_require__(102);
	__webpack_require__(104);
	__webpack_require__(105);
	__webpack_require__(106);
	__webpack_require__(108);
	__webpack_require__(109);
	__webpack_require__(110);
	__webpack_require__(112);
	__webpack_require__(114);
	__webpack_require__(115);
	__webpack_require__(116);
	__webpack_require__(117);
	__webpack_require__(118);
	__webpack_require__(119);
	__webpack_require__(120);
	__webpack_require__(121);
	__webpack_require__(122);
	__webpack_require__(123);
	__webpack_require__(124);
	__webpack_require__(125);
	__webpack_require__(126);
	__webpack_require__(131);
	__webpack_require__(132);
	__webpack_require__(136);
	__webpack_require__(137);
	__webpack_require__(138);
	__webpack_require__(139);
	__webpack_require__(141);
	__webpack_require__(142);
	__webpack_require__(143);
	__webpack_require__(144);
	__webpack_require__(145);
	__webpack_require__(146);
	__webpack_require__(147);
	__webpack_require__(148);
	__webpack_require__(149);
	__webpack_require__(150);
	__webpack_require__(151);
	__webpack_require__(152);
	__webpack_require__(153);
	__webpack_require__(154);
	__webpack_require__(155);
	__webpack_require__(157);
	__webpack_require__(158);
	__webpack_require__(160);
	__webpack_require__(161);
	__webpack_require__(167);
	__webpack_require__(168);
	__webpack_require__(170);
	__webpack_require__(171);
	__webpack_require__(172);
	__webpack_require__(176);
	__webpack_require__(177);
	__webpack_require__(178);
	__webpack_require__(179);
	__webpack_require__(180);
	__webpack_require__(182);
	__webpack_require__(183);
	__webpack_require__(184);
	__webpack_require__(185);
	__webpack_require__(188);
	__webpack_require__(190);
	__webpack_require__(191);
	__webpack_require__(192);
	__webpack_require__(194);
	__webpack_require__(196);
	__webpack_require__(198);
	__webpack_require__(199);
	__webpack_require__(200);
	__webpack_require__(202);
	__webpack_require__(203);
	__webpack_require__(204);
	__webpack_require__(205);
	__webpack_require__(215);
	__webpack_require__(219);
	__webpack_require__(220);
	__webpack_require__(222);
	__webpack_require__(223);
	__webpack_require__(227);
	__webpack_require__(228);
	__webpack_require__(230);
	__webpack_require__(231);
	__webpack_require__(232);
	__webpack_require__(233);
	__webpack_require__(234);
	__webpack_require__(235);
	__webpack_require__(236);
	__webpack_require__(237);
	__webpack_require__(238);
	__webpack_require__(239);
	__webpack_require__(240);
	__webpack_require__(241);
	__webpack_require__(242);
	__webpack_require__(243);
	__webpack_require__(244);
	__webpack_require__(245);
	__webpack_require__(246);
	__webpack_require__(247);
	__webpack_require__(248);
	__webpack_require__(250);
	__webpack_require__(251);
	__webpack_require__(252);
	__webpack_require__(253);
	__webpack_require__(254);
	__webpack_require__(256);
	__webpack_require__(257);
	__webpack_require__(258);
	__webpack_require__(261);
	__webpack_require__(262);
	__webpack_require__(263);
	__webpack_require__(264);
	__webpack_require__(265);
	__webpack_require__(266);
	__webpack_require__(267);
	__webpack_require__(268);
	__webpack_require__(270);
	__webpack_require__(271);
	__webpack_require__(273);
	__webpack_require__(274);
	__webpack_require__(275);
	__webpack_require__(276);
	__webpack_require__(279);
	__webpack_require__(280);
	__webpack_require__(282);
	__webpack_require__(283);
	__webpack_require__(284);
	__webpack_require__(285);
	__webpack_require__(287);
	__webpack_require__(288);
	__webpack_require__(289);
	__webpack_require__(290);
	__webpack_require__(291);
	__webpack_require__(292);
	__webpack_require__(293);
	__webpack_require__(294);
	__webpack_require__(295);
	__webpack_require__(296);
	__webpack_require__(298);
	__webpack_require__(299);
	__webpack_require__(300);
	__webpack_require__(301);
	__webpack_require__(302);
	__webpack_require__(303);
	__webpack_require__(304);
	__webpack_require__(305);
	__webpack_require__(306);
	__webpack_require__(307);
	__webpack_require__(308);
	__webpack_require__(310);
	__webpack_require__(311);
	__webpack_require__(312);
	__webpack_require__(313);
	__webpack_require__(314);
	__webpack_require__(315);
	__webpack_require__(316);
	__webpack_require__(317);
	__webpack_require__(318);
	__webpack_require__(319);
	__webpack_require__(320);
	__webpack_require__(321);
	__webpack_require__(322);
	module.exports = __webpack_require__(9);


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim
	var global = __webpack_require__(4);
	var has = __webpack_require__(5);
	var DESCRIPTORS = __webpack_require__(6);
	var $export = __webpack_require__(8);
	var redefine = __webpack_require__(18);
	var META = __webpack_require__(22).KEY;
	var $fails = __webpack_require__(7);
	var shared = __webpack_require__(23);
	var setToStringTag = __webpack_require__(24);
	var uid = __webpack_require__(19);
	var wks = __webpack_require__(25);
	var wksExt = __webpack_require__(26);
	var wksDefine = __webpack_require__(27);
	var enumKeys = __webpack_require__(29);
	var isArray = __webpack_require__(44);
	var anObject = __webpack_require__(12);
	var isObject = __webpack_require__(13);
	var toIObject = __webpack_require__(32);
	var toPrimitive = __webpack_require__(16);
	var createDesc = __webpack_require__(17);
	var _create = __webpack_require__(45);
	var gOPNExt = __webpack_require__(48);
	var $GOPD = __webpack_require__(50);
	var $DP = __webpack_require__(11);
	var $keys = __webpack_require__(30);
	var gOPD = $GOPD.f;
	var dP = $DP.f;
	var gOPN = gOPNExt.f;
	var $Symbol = global.Symbol;
	var $JSON = global.JSON;
	var _stringify = $JSON && $JSON.stringify;
	var PROTOTYPE = 'prototype';
	var HIDDEN = wks('_hidden');
	var TO_PRIMITIVE = wks('toPrimitive');
	var isEnum = {}.propertyIsEnumerable;
	var SymbolRegistry = shared('symbol-registry');
	var AllSymbols = shared('symbols');
	var OPSymbols = shared('op-symbols');
	var ObjectProto = Object[PROTOTYPE];
	var USE_NATIVE = typeof $Symbol == 'function';
	var QObject = global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
	
	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function () {
	  return _create(dP({}, 'a', {
	    get: function () { return dP(this, 'a', { value: 7 }).a; }
	  })).a != 7;
	}) ? function (it, key, D) {
	  var protoDesc = gOPD(ObjectProto, key);
	  if (protoDesc) delete ObjectProto[key];
	  dP(it, key, D);
	  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
	} : dP;
	
	var wrap = function (tag) {
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  return sym;
	};
	
	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
	  return typeof it == 'symbol';
	} : function (it) {
	  return it instanceof $Symbol;
	};
	
	var $defineProperty = function defineProperty(it, key, D) {
	  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if (has(AllSymbols, key)) {
	    if (!D.enumerable) {
	      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
	      D = _create(D, { enumerable: createDesc(0, false) });
	    } return setSymbolDesc(it, key, D);
	  } return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P) {
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P));
	  var i = 0;
	  var l = keys.length;
	  var key;
	  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P) {
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key) {
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
	  it = toIObject(it);
	  key = toPrimitive(key, true);
	  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
	  var D = gOPD(it, key);
	  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it) {
	  var names = gOPN(toIObject(it));
	  var result = [];
	  var i = 0;
	  var key;
	  while (names.length > i) {
	    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
	  } return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
	  var IS_OP = it === ObjectProto;
	  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
	  var result = [];
	  var i = 0;
	  var key;
	  while (names.length > i) {
	    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
	  } return result;
	};
	
	// 19.4.1.1 Symbol([description])
	if (!USE_NATIVE) {
	  $Symbol = function Symbol() {
	    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function (value) {
	      if (this === ObjectProto) $set.call(OPSymbols, value);
	      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    };
	    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
	    return wrap(tag);
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
	    return this._k;
	  });
	
	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f = $defineProperty;
	  __webpack_require__(49).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(43).f = $propertyIsEnumerable;
	  __webpack_require__(42).f = $getOwnPropertySymbols;
	
	  if (DESCRIPTORS && !__webpack_require__(28)) {
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }
	
	  wksExt.f = function (name) {
	    return wrap(wks(name));
	  };
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });
	
	for (var es6Symbols = (
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);
	
	for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);
	
	$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function (key) {
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(sym) {
	    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
	    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
	  },
	  useSetter: function () { setter = true; },
	  useSimple: function () { setter = false; }
	});
	
	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});
	
	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it) {
	    var args = [it];
	    var i = 1;
	    var replacer, $replacer;
	    while (arguments.length > i) args.push(arguments[i++]);
	    $replacer = replacer = args[1];
	    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
	    if (!isArray(replacer)) replacer = function (key, value) {
	      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
	      if (!isSymbol(value)) return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});
	
	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(10)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);


/***/ },
/* 4 */
/***/ function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self
	  // eslint-disable-next-line no-new-func
	  : Function('return this')();
	if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ },
/* 5 */
/***/ function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function (it, key) {
	  return hasOwnProperty.call(it, key);
	};


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(7)(function () {
	  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
	});


/***/ },
/* 7 */
/***/ function(module, exports) {

	module.exports = function (exec) {
	  try {
	    return !!exec();
	  } catch (e) {
	    return true;
	  }
	};


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(4);
	var core = __webpack_require__(9);
	var hide = __webpack_require__(10);
	var redefine = __webpack_require__(18);
	var ctx = __webpack_require__(20);
	var PROTOTYPE = 'prototype';
	
	var $export = function (type, name, source) {
	  var IS_FORCED = type & $export.F;
	  var IS_GLOBAL = type & $export.G;
	  var IS_STATIC = type & $export.S;
	  var IS_PROTO = type & $export.P;
	  var IS_BIND = type & $export.B;
	  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
	  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
	  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
	  var key, own, out, exp;
	  if (IS_GLOBAL) source = name;
	  for (key in source) {
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    // export native or passed
	    out = (own ? target : source)[key];
	    // bind timers to global for call from export context
	    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // extend global
	    if (target) redefine(target, key, out, type & $export.U);
	    // export
	    if (exports[key] != out) hide(exports, key, exp);
	    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
	  }
	};
	global.core = core;
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library`
	module.exports = $export;


/***/ },
/* 9 */
/***/ function(module, exports) {

	var core = module.exports = { version: '2.5.5' };
	if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	var dP = __webpack_require__(11);
	var createDesc = __webpack_require__(17);
	module.exports = __webpack_require__(6) ? function (object, key, value) {
	  return dP.f(object, key, createDesc(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	var anObject = __webpack_require__(12);
	var IE8_DOM_DEFINE = __webpack_require__(14);
	var toPrimitive = __webpack_require__(16);
	var dP = Object.defineProperty;
	
	exports.f = __webpack_require__(6) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if (IE8_DOM_DEFINE) try {
	    return dP(O, P, Attributes);
	  } catch (e) { /* empty */ }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};


/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(13);
	module.exports = function (it) {
	  if (!isObject(it)) throw TypeError(it + ' is not an object!');
	  return it;
	};


/***/ },
/* 13 */
/***/ function(module, exports) {

	module.exports = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = !__webpack_require__(6) && !__webpack_require__(7)(function () {
	  return Object.defineProperty(__webpack_require__(15)('div'), 'a', { get: function () { return 7; } }).a != 7;
	});


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(13);
	var document = __webpack_require__(4).document;
	// typeof document.createElement is 'object' in old IE
	var is = isObject(document) && isObject(document.createElement);
	module.exports = function (it) {
	  return is ? document.createElement(it) : {};
	};


/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(13);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function (it, S) {
	  if (!isObject(it)) return it;
	  var fn, val;
	  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};


/***/ },
/* 17 */
/***/ function(module, exports) {

	module.exports = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(4);
	var hide = __webpack_require__(10);
	var has = __webpack_require__(5);
	var SRC = __webpack_require__(19)('src');
	var TO_STRING = 'toString';
	var $toString = Function[TO_STRING];
	var TPL = ('' + $toString).split(TO_STRING);
	
	__webpack_require__(9).inspectSource = function (it) {
	  return $toString.call(it);
	};
	
	(module.exports = function (O, key, val, safe) {
	  var isFunction = typeof val == 'function';
	  if (isFunction) has(val, 'name') || hide(val, 'name', key);
	  if (O[key] === val) return;
	  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
	  if (O === global) {
	    O[key] = val;
	  } else if (!safe) {
	    delete O[key];
	    hide(O, key, val);
	  } else if (O[key]) {
	    O[key] = val;
	  } else {
	    hide(O, key, val);
	  }
	// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
	})(Function.prototype, TO_STRING, function toString() {
	  return typeof this == 'function' && this[SRC] || $toString.call(this);
	});


/***/ },
/* 19 */
/***/ function(module, exports) {

	var id = 0;
	var px = Math.random();
	module.exports = function (key) {
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(21);
	module.exports = function (fn, that, length) {
	  aFunction(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 1: return function (a) {
	      return fn.call(that, a);
	    };
	    case 2: return function (a, b) {
	      return fn.call(that, a, b);
	    };
	    case 3: return function (a, b, c) {
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};


/***/ },
/* 21 */
/***/ function(module, exports) {

	module.exports = function (it) {
	  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
	  return it;
	};


/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	var META = __webpack_require__(19)('meta');
	var isObject = __webpack_require__(13);
	var has = __webpack_require__(5);
	var setDesc = __webpack_require__(11).f;
	var id = 0;
	var isExtensible = Object.isExtensible || function () {
	  return true;
	};
	var FREEZE = !__webpack_require__(7)(function () {
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function (it) {
	  setDesc(it, META, { value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  } });
	};
	var fastKey = function (it, create) {
	  // return primitive with prefix
	  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if (!has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return 'F';
	    // not necessary to add metadata
	    if (!create) return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function (it, create) {
	  if (!has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return true;
	    // not necessary to add metadata
	    if (!create) return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function (it) {
	  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY: META,
	  NEED: false,
	  fastKey: fastKey,
	  getWeak: getWeak,
	  onFreeze: onFreeze
	};


/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(4);
	var SHARED = '__core-js_shared__';
	var store = global[SHARED] || (global[SHARED] = {});
	module.exports = function (key) {
	  return store[key] || (store[key] = {});
	};


/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	var def = __webpack_require__(11).f;
	var has = __webpack_require__(5);
	var TAG = __webpack_require__(25)('toStringTag');
	
	module.exports = function (it, tag, stat) {
	  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
	};


/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	var store = __webpack_require__(23)('wks');
	var uid = __webpack_require__(19);
	var Symbol = __webpack_require__(4).Symbol;
	var USE_SYMBOL = typeof Symbol == 'function';
	
	var $exports = module.exports = function (name) {
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};
	
	$exports.store = store;


/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	exports.f = __webpack_require__(25);


/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(4);
	var core = __webpack_require__(9);
	var LIBRARY = __webpack_require__(28);
	var wksExt = __webpack_require__(26);
	var defineProperty = __webpack_require__(11).f;
	module.exports = function (name) {
	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
	  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
	};


/***/ },
/* 28 */
/***/ function(module, exports) {

	module.exports = false;


/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(30);
	var gOPS = __webpack_require__(42);
	var pIE = __webpack_require__(43);
	module.exports = function (it) {
	  var result = getKeys(it);
	  var getSymbols = gOPS.f;
	  if (getSymbols) {
	    var symbols = getSymbols(it);
	    var isEnum = pIE.f;
	    var i = 0;
	    var key;
	    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
	  } return result;
	};


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys = __webpack_require__(31);
	var enumBugKeys = __webpack_require__(41);
	
	module.exports = Object.keys || function keys(O) {
	  return $keys(O, enumBugKeys);
	};


/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	var has = __webpack_require__(5);
	var toIObject = __webpack_require__(32);
	var arrayIndexOf = __webpack_require__(36)(false);
	var IE_PROTO = __webpack_require__(40)('IE_PROTO');
	
	module.exports = function (object, names) {
	  var O = toIObject(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while (names.length > i) if (has(O, key = names[i++])) {
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};


/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(33);
	var defined = __webpack_require__(35);
	module.exports = function (it) {
	  return IObject(defined(it));
	};


/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(34);
	// eslint-disable-next-line no-prototype-builtins
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};


/***/ },
/* 34 */
/***/ function(module, exports) {

	var toString = {}.toString;
	
	module.exports = function (it) {
	  return toString.call(it).slice(8, -1);
	};


/***/ },
/* 35 */
/***/ function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on  " + it);
	  return it;
	};


/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(32);
	var toLength = __webpack_require__(37);
	var toAbsoluteIndex = __webpack_require__(39);
	module.exports = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIObject($this);
	    var length = toLength(O.length);
	    var index = toAbsoluteIndex(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare
	      if (value != value) return true;
	    // Array#indexOf ignores holes, Array#includes - not
	    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
	      if (O[index] === el) return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(38);
	var min = Math.min;
	module.exports = function (it) {
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};


/***/ },
/* 38 */
/***/ function(module, exports) {

	// 7.1.4 ToInteger
	var ceil = Math.ceil;
	var floor = Math.floor;
	module.exports = function (it) {
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};


/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(38);
	var max = Math.max;
	var min = Math.min;
	module.exports = function (index, length) {
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};


/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(23)('keys');
	var uid = __webpack_require__(19);
	module.exports = function (key) {
	  return shared[key] || (shared[key] = uid(key));
	};


/***/ },
/* 41 */
/***/ function(module, exports) {

	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');


/***/ },
/* 42 */
/***/ function(module, exports) {

	exports.f = Object.getOwnPropertySymbols;


/***/ },
/* 43 */
/***/ function(module, exports) {

	exports.f = {}.propertyIsEnumerable;


/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(34);
	module.exports = Array.isArray || function isArray(arg) {
	  return cof(arg) == 'Array';
	};


/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject = __webpack_require__(12);
	var dPs = __webpack_require__(46);
	var enumBugKeys = __webpack_require__(41);
	var IE_PROTO = __webpack_require__(40)('IE_PROTO');
	var Empty = function () { /* empty */ };
	var PROTOTYPE = 'prototype';
	
	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function () {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(15)('iframe');
	  var i = enumBugKeys.length;
	  var lt = '<';
	  var gt = '>';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(47).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};
	
	module.exports = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty();
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};


/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	var dP = __webpack_require__(11);
	var anObject = __webpack_require__(12);
	var getKeys = __webpack_require__(30);
	
	module.exports = __webpack_require__(6) ? Object.defineProperties : function defineProperties(O, Properties) {
	  anObject(O);
	  var keys = getKeys(Properties);
	  var length = keys.length;
	  var i = 0;
	  var P;
	  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};


/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	var document = __webpack_require__(4).document;
	module.exports = document && document.documentElement;


/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(32);
	var gOPN = __webpack_require__(49).f;
	var toString = {}.toString;
	
	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];
	
	var getWindowNames = function (it) {
	  try {
	    return gOPN(it);
	  } catch (e) {
	    return windowNames.slice();
	  }
	};
	
	module.exports.f = function getOwnPropertyNames(it) {
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};


/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys = __webpack_require__(31);
	var hiddenKeys = __webpack_require__(41).concat('length', 'prototype');
	
	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return $keys(O, hiddenKeys);
	};


/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	var pIE = __webpack_require__(43);
	var createDesc = __webpack_require__(17);
	var toIObject = __webpack_require__(32);
	var toPrimitive = __webpack_require__(16);
	var has = __webpack_require__(5);
	var IE8_DOM_DEFINE = __webpack_require__(14);
	var gOPD = Object.getOwnPropertyDescriptor;
	
	exports.f = __webpack_require__(6) ? gOPD : function getOwnPropertyDescriptor(O, P) {
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if (IE8_DOM_DEFINE) try {
	    return gOPD(O, P);
	  } catch (e) { /* empty */ }
	  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
	};


/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	$export($export.S, 'Object', { create: __webpack_require__(45) });


/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export($export.S + $export.F * !__webpack_require__(6), 'Object', { defineProperty: __webpack_require__(11).f });


/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
	$export($export.S + $export.F * !__webpack_require__(6), 'Object', { defineProperties: __webpack_require__(46) });


/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	var toIObject = __webpack_require__(32);
	var $getOwnPropertyDescriptor = __webpack_require__(50).f;
	
	__webpack_require__(55)('getOwnPropertyDescriptor', function () {
	  return function getOwnPropertyDescriptor(it, key) {
	    return $getOwnPropertyDescriptor(toIObject(it), key);
	  };
	});


/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(8);
	var core = __webpack_require__(9);
	var fails = __webpack_require__(7);
	module.exports = function (KEY, exec) {
	  var fn = (core.Object || {})[KEY] || Object[KEY];
	  var exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
	};


/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 Object.getPrototypeOf(O)
	var toObject = __webpack_require__(57);
	var $getPrototypeOf = __webpack_require__(58);
	
	__webpack_require__(55)('getPrototypeOf', function () {
	  return function getPrototypeOf(it) {
	    return $getPrototypeOf(toObject(it));
	  };
	});


/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(35);
	module.exports = function (it) {
	  return Object(defined(it));
	};


/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has = __webpack_require__(5);
	var toObject = __webpack_require__(57);
	var IE_PROTO = __webpack_require__(40)('IE_PROTO');
	var ObjectProto = Object.prototype;
	
	module.exports = Object.getPrototypeOf || function (O) {
	  O = toObject(O);
	  if (has(O, IE_PROTO)) return O[IE_PROTO];
	  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};


/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 Object.keys(O)
	var toObject = __webpack_require__(57);
	var $keys = __webpack_require__(30);
	
	__webpack_require__(55)('keys', function () {
	  return function keys(it) {
	    return $keys(toObject(it));
	  };
	});


/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.7 Object.getOwnPropertyNames(O)
	__webpack_require__(55)('getOwnPropertyNames', function () {
	  return __webpack_require__(48).f;
	});


/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.5 Object.freeze(O)
	var isObject = __webpack_require__(13);
	var meta = __webpack_require__(22).onFreeze;
	
	__webpack_require__(55)('freeze', function ($freeze) {
	  return function freeze(it) {
	    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
	  };
	});


/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.17 Object.seal(O)
	var isObject = __webpack_require__(13);
	var meta = __webpack_require__(22).onFreeze;
	
	__webpack_require__(55)('seal', function ($seal) {
	  return function seal(it) {
	    return $seal && isObject(it) ? $seal(meta(it)) : it;
	  };
	});


/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.15 Object.preventExtensions(O)
	var isObject = __webpack_require__(13);
	var meta = __webpack_require__(22).onFreeze;
	
	__webpack_require__(55)('preventExtensions', function ($preventExtensions) {
	  return function preventExtensions(it) {
	    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
	  };
	});


/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.12 Object.isFrozen(O)
	var isObject = __webpack_require__(13);
	
	__webpack_require__(55)('isFrozen', function ($isFrozen) {
	  return function isFrozen(it) {
	    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
	  };
	});


/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.13 Object.isSealed(O)
	var isObject = __webpack_require__(13);
	
	__webpack_require__(55)('isSealed', function ($isSealed) {
	  return function isSealed(it) {
	    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
	  };
	});


/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.11 Object.isExtensible(O)
	var isObject = __webpack_require__(13);
	
	__webpack_require__(55)('isExtensible', function ($isExtensible) {
	  return function isExtensible(it) {
	    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
	  };
	});


/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.1 Object.assign(target, source)
	var $export = __webpack_require__(8);
	
	$export($export.S + $export.F, 'Object', { assign: __webpack_require__(68) });


/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.2.1 Object.assign(target, source, ...)
	var getKeys = __webpack_require__(30);
	var gOPS = __webpack_require__(42);
	var pIE = __webpack_require__(43);
	var toObject = __webpack_require__(57);
	var IObject = __webpack_require__(33);
	var $assign = Object.assign;
	
	// should work with symbols and should have deterministic property order (V8 bug)
	module.exports = !$assign || __webpack_require__(7)(function () {
	  var A = {};
	  var B = {};
	  // eslint-disable-next-line no-undef
	  var S = Symbol();
	  var K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function (k) { B[k] = k; });
	  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
	}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
	  var T = toObject(target);
	  var aLen = arguments.length;
	  var index = 1;
	  var getSymbols = gOPS.f;
	  var isEnum = pIE.f;
	  while (aLen > index) {
	    var S = IObject(arguments[index++]);
	    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
	    var length = keys.length;
	    var j = 0;
	    var key;
	    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
	  } return T;
	} : $assign;


/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.10 Object.is(value1, value2)
	var $export = __webpack_require__(8);
	$export($export.S, 'Object', { is: __webpack_require__(70) });


/***/ },
/* 70 */
/***/ function(module, exports) {

	// 7.2.9 SameValue(x, y)
	module.exports = Object.is || function is(x, y) {
	  // eslint-disable-next-line no-self-compare
	  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
	};


/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = __webpack_require__(8);
	$export($export.S, 'Object', { setPrototypeOf: __webpack_require__(72).set });


/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var isObject = __webpack_require__(13);
	var anObject = __webpack_require__(12);
	var check = function (O, proto) {
	  anObject(O);
	  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function (test, buggy, set) {
	      try {
	        set = __webpack_require__(20)(Function.call, __webpack_require__(50).f(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch (e) { buggy = true; }
	      return function setPrototypeOf(O, proto) {
	        check(O, proto);
	        if (buggy) O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};


/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.3.6 Object.prototype.toString()
	var classof = __webpack_require__(74);
	var test = {};
	test[__webpack_require__(25)('toStringTag')] = 'z';
	if (test + '' != '[object z]') {
	  __webpack_require__(18)(Object.prototype, 'toString', function toString() {
	    return '[object ' + classof(this) + ']';
	  }, true);
	}


/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(34);
	var TAG = __webpack_require__(25)('toStringTag');
	// ES3 wrong here
	var ARG = cof(function () { return arguments; }()) == 'Arguments';
	
	// fallback for IE11 Script Access Denied error
	var tryGet = function (it, key) {
	  try {
	    return it[key];
	  } catch (e) { /* empty */ }
	};
	
	module.exports = function (it) {
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};


/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
	var $export = __webpack_require__(8);
	
	$export($export.P, 'Function', { bind: __webpack_require__(76) });


/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var aFunction = __webpack_require__(21);
	var isObject = __webpack_require__(13);
	var invoke = __webpack_require__(77);
	var arraySlice = [].slice;
	var factories = {};
	
	var construct = function (F, len, args) {
	  if (!(len in factories)) {
	    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
	    // eslint-disable-next-line no-new-func
	    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
	  } return factories[len](F, args);
	};
	
	module.exports = Function.bind || function bind(that /* , ...args */) {
	  var fn = aFunction(this);
	  var partArgs = arraySlice.call(arguments, 1);
	  var bound = function (/* args... */) {
	    var args = partArgs.concat(arraySlice.call(arguments));
	    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
	  };
	  if (isObject(fn.prototype)) bound.prototype = fn.prototype;
	  return bound;
	};


/***/ },
/* 77 */
/***/ function(module, exports) {

	// fast apply, http://jsperf.lnkit.com/fast-apply/5
	module.exports = function (fn, args, that) {
	  var un = that === undefined;
	  switch (args.length) {
	    case 0: return un ? fn()
	                      : fn.call(that);
	    case 1: return un ? fn(args[0])
	                      : fn.call(that, args[0]);
	    case 2: return un ? fn(args[0], args[1])
	                      : fn.call(that, args[0], args[1]);
	    case 3: return un ? fn(args[0], args[1], args[2])
	                      : fn.call(that, args[0], args[1], args[2]);
	    case 4: return un ? fn(args[0], args[1], args[2], args[3])
	                      : fn.call(that, args[0], args[1], args[2], args[3]);
	  } return fn.apply(that, args);
	};


/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	var dP = __webpack_require__(11).f;
	var FProto = Function.prototype;
	var nameRE = /^\s*function ([^ (]*)/;
	var NAME = 'name';
	
	// 19.2.4.2 name
	NAME in FProto || __webpack_require__(6) && dP(FProto, NAME, {
	  configurable: true,
	  get: function () {
	    try {
	      return ('' + this).match(nameRE)[1];
	    } catch (e) {
	      return '';
	    }
	  }
	});


/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var isObject = __webpack_require__(13);
	var getPrototypeOf = __webpack_require__(58);
	var HAS_INSTANCE = __webpack_require__(25)('hasInstance');
	var FunctionProto = Function.prototype;
	// 19.2.3.6 Function.prototype[@@hasInstance](V)
	if (!(HAS_INSTANCE in FunctionProto)) __webpack_require__(11).f(FunctionProto, HAS_INSTANCE, { value: function (O) {
	  if (typeof this != 'function' || !isObject(O)) return false;
	  if (!isObject(this.prototype)) return O instanceof this;
	  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
	  while (O = getPrototypeOf(O)) if (this.prototype === O) return true;
	  return false;
	} });


/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	var $parseInt = __webpack_require__(81);
	// 18.2.5 parseInt(string, radix)
	$export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });


/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	var $parseInt = __webpack_require__(4).parseInt;
	var $trim = __webpack_require__(82).trim;
	var ws = __webpack_require__(83);
	var hex = /^[-+]?0[xX]/;
	
	module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
	  var string = $trim(String(str), 3);
	  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
	} : $parseInt;


/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	var defined = __webpack_require__(35);
	var fails = __webpack_require__(7);
	var spaces = __webpack_require__(83);
	var space = '[' + spaces + ']';
	var non = '\u200b\u0085';
	var ltrim = RegExp('^' + space + space + '*');
	var rtrim = RegExp(space + space + '*$');
	
	var exporter = function (KEY, exec, ALIAS) {
	  var exp = {};
	  var FORCE = fails(function () {
	    return !!spaces[KEY]() || non[KEY]() != non;
	  });
	  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
	  if (ALIAS) exp[ALIAS] = fn;
	  $export($export.P + $export.F * FORCE, 'String', exp);
	};
	
	// 1 -> String#trimLeft
	// 2 -> String#trimRight
	// 3 -> String#trim
	var trim = exporter.trim = function (string, TYPE) {
	  string = String(defined(string));
	  if (TYPE & 1) string = string.replace(ltrim, '');
	  if (TYPE & 2) string = string.replace(rtrim, '');
	  return string;
	};
	
	module.exports = exporter;


/***/ },
/* 83 */
/***/ function(module, exports) {

	module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
	  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';


/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	var $parseFloat = __webpack_require__(85);
	// 18.2.4 parseFloat(string)
	$export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });


/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	var $parseFloat = __webpack_require__(4).parseFloat;
	var $trim = __webpack_require__(82).trim;
	
	module.exports = 1 / $parseFloat(__webpack_require__(83) + '-0') !== -Infinity ? function parseFloat(str) {
	  var string = $trim(String(str), 3);
	  var result = $parseFloat(string);
	  return result === 0 && string.charAt(0) == '-' ? -0 : result;
	} : $parseFloat;


/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global = __webpack_require__(4);
	var has = __webpack_require__(5);
	var cof = __webpack_require__(34);
	var inheritIfRequired = __webpack_require__(87);
	var toPrimitive = __webpack_require__(16);
	var fails = __webpack_require__(7);
	var gOPN = __webpack_require__(49).f;
	var gOPD = __webpack_require__(50).f;
	var dP = __webpack_require__(11).f;
	var $trim = __webpack_require__(82).trim;
	var NUMBER = 'Number';
	var $Number = global[NUMBER];
	var Base = $Number;
	var proto = $Number.prototype;
	// Opera ~12 has broken Object#toString
	var BROKEN_COF = cof(__webpack_require__(45)(proto)) == NUMBER;
	var TRIM = 'trim' in String.prototype;
	
	// 7.1.3 ToNumber(argument)
	var toNumber = function (argument) {
	  var it = toPrimitive(argument, false);
	  if (typeof it == 'string' && it.length > 2) {
	    it = TRIM ? it.trim() : $trim(it, 3);
	    var first = it.charCodeAt(0);
	    var third, radix, maxCode;
	    if (first === 43 || first === 45) {
	      third = it.charCodeAt(2);
	      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
	    } else if (first === 48) {
	      switch (it.charCodeAt(1)) {
	        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
	        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
	        default: return +it;
	      }
	      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
	        code = digits.charCodeAt(i);
	        // parseInt parses a string to a first unavailable symbol
	        // but ToNumber should return NaN if a string contains unavailable symbols
	        if (code < 48 || code > maxCode) return NaN;
	      } return parseInt(digits, radix);
	    }
	  } return +it;
	};
	
	if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
	  $Number = function Number(value) {
	    var it = arguments.length < 1 ? 0 : value;
	    var that = this;
	    return that instanceof $Number
	      // check on 1..constructor(foo) case
	      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)
	        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
	  };
	  for (var keys = __webpack_require__(6) ? gOPN(Base) : (
	    // ES3:
	    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
	    // ES6 (in case, if modules with ES6 Number statics required before):
	    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
	    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
	  ).split(','), j = 0, key; keys.length > j; j++) {
	    if (has(Base, key = keys[j]) && !has($Number, key)) {
	      dP($Number, key, gOPD(Base, key));
	    }
	  }
	  $Number.prototype = proto;
	  proto.constructor = $Number;
	  __webpack_require__(18)(global, NUMBER, $Number);
	}


/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(13);
	var setPrototypeOf = __webpack_require__(72).set;
	module.exports = function (that, target, C) {
	  var S = target.constructor;
	  var P;
	  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
	    setPrototypeOf(that, P);
	  } return that;
	};


/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var toInteger = __webpack_require__(38);
	var aNumberValue = __webpack_require__(89);
	var repeat = __webpack_require__(90);
	var $toFixed = 1.0.toFixed;
	var floor = Math.floor;
	var data = [0, 0, 0, 0, 0, 0];
	var ERROR = 'Number.toFixed: incorrect invocation!';
	var ZERO = '0';
	
	var multiply = function (n, c) {
	  var i = -1;
	  var c2 = c;
	  while (++i < 6) {
	    c2 += n * data[i];
	    data[i] = c2 % 1e7;
	    c2 = floor(c2 / 1e7);
	  }
	};
	var divide = function (n) {
	  var i = 6;
	  var c = 0;
	  while (--i >= 0) {
	    c += data[i];
	    data[i] = floor(c / n);
	    c = (c % n) * 1e7;
	  }
	};
	var numToString = function () {
	  var i = 6;
	  var s = '';
	  while (--i >= 0) {
	    if (s !== '' || i === 0 || data[i] !== 0) {
	      var t = String(data[i]);
	      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
	    }
	  } return s;
	};
	var pow = function (x, n, acc) {
	  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
	};
	var log = function (x) {
	  var n = 0;
	  var x2 = x;
	  while (x2 >= 4096) {
	    n += 12;
	    x2 /= 4096;
	  }
	  while (x2 >= 2) {
	    n += 1;
	    x2 /= 2;
	  } return n;
	};
	
	$export($export.P + $export.F * (!!$toFixed && (
	  0.00008.toFixed(3) !== '0.000' ||
	  0.9.toFixed(0) !== '1' ||
	  1.255.toFixed(2) !== '1.25' ||
	  1000000000000000128.0.toFixed(0) !== '1000000000000000128'
	) || !__webpack_require__(7)(function () {
	  // V8 ~ Android 4.3-
	  $toFixed.call({});
	})), 'Number', {
	  toFixed: function toFixed(fractionDigits) {
	    var x = aNumberValue(this, ERROR);
	    var f = toInteger(fractionDigits);
	    var s = '';
	    var m = ZERO;
	    var e, z, j, k;
	    if (f < 0 || f > 20) throw RangeError(ERROR);
	    // eslint-disable-next-line no-self-compare
	    if (x != x) return 'NaN';
	    if (x <= -1e21 || x >= 1e21) return String(x);
	    if (x < 0) {
	      s = '-';
	      x = -x;
	    }
	    if (x > 1e-21) {
	      e = log(x * pow(2, 69, 1)) - 69;
	      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
	      z *= 0x10000000000000;
	      e = 52 - e;
	      if (e > 0) {
	        multiply(0, z);
	        j = f;
	        while (j >= 7) {
	          multiply(1e7, 0);
	          j -= 7;
	        }
	        multiply(pow(10, j, 1), 0);
	        j = e - 1;
	        while (j >= 23) {
	          divide(1 << 23);
	          j -= 23;
	        }
	        divide(1 << j);
	        multiply(1, 1);
	        divide(2);
	        m = numToString();
	      } else {
	        multiply(0, z);
	        multiply(1 << -e, 0);
	        m = numToString() + repeat.call(ZERO, f);
	      }
	    }
	    if (f > 0) {
	      k = m.length;
	      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
	    } else {
	      m = s + m;
	    } return m;
	  }
	});


/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	var cof = __webpack_require__(34);
	module.exports = function (it, msg) {
	  if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
	  return +it;
	};


/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var toInteger = __webpack_require__(38);
	var defined = __webpack_require__(35);
	
	module.exports = function repeat(count) {
	  var str = String(defined(this));
	  var res = '';
	  var n = toInteger(count);
	  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
	  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
	  return res;
	};


/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var $fails = __webpack_require__(7);
	var aNumberValue = __webpack_require__(89);
	var $toPrecision = 1.0.toPrecision;
	
	$export($export.P + $export.F * ($fails(function () {
	  // IE7-
	  return $toPrecision.call(1, undefined) !== '1';
	}) || !$fails(function () {
	  // V8 ~ Android 4.3-
	  $toPrecision.call({});
	})), 'Number', {
	  toPrecision: function toPrecision(precision) {
	    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
	    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
	  }
	});


/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.1 Number.EPSILON
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });


/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.2 Number.isFinite(number)
	var $export = __webpack_require__(8);
	var _isFinite = __webpack_require__(4).isFinite;
	
	$export($export.S, 'Number', {
	  isFinite: function isFinite(it) {
	    return typeof it == 'number' && _isFinite(it);
	  }
	});


/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.3 Number.isInteger(number)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Number', { isInteger: __webpack_require__(95) });


/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.3 Number.isInteger(number)
	var isObject = __webpack_require__(13);
	var floor = Math.floor;
	module.exports = function isInteger(it) {
	  return !isObject(it) && isFinite(it) && floor(it) === it;
	};


/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.4 Number.isNaN(number)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Number', {
	  isNaN: function isNaN(number) {
	    // eslint-disable-next-line no-self-compare
	    return number != number;
	  }
	});


/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.5 Number.isSafeInteger(number)
	var $export = __webpack_require__(8);
	var isInteger = __webpack_require__(95);
	var abs = Math.abs;
	
	$export($export.S, 'Number', {
	  isSafeInteger: function isSafeInteger(number) {
	    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
	  }
	});


/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.6 Number.MAX_SAFE_INTEGER
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });


/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.10 Number.MIN_SAFE_INTEGER
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });


/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	var $parseFloat = __webpack_require__(85);
	// 20.1.2.12 Number.parseFloat(string)
	$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });


/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	var $parseInt = __webpack_require__(81);
	// 20.1.2.13 Number.parseInt(string, radix)
	$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });


/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.3 Math.acosh(x)
	var $export = __webpack_require__(8);
	var log1p = __webpack_require__(103);
	var sqrt = Math.sqrt;
	var $acosh = Math.acosh;
	
	$export($export.S + $export.F * !($acosh
	  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
	  && Math.floor($acosh(Number.MAX_VALUE)) == 710
	  // Tor Browser bug: Math.acosh(Infinity) -> NaN
	  && $acosh(Infinity) == Infinity
	), 'Math', {
	  acosh: function acosh(x) {
	    return (x = +x) < 1 ? NaN : x > 94906265.62425156
	      ? Math.log(x) + Math.LN2
	      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
	  }
	});


/***/ },
/* 103 */
/***/ function(module, exports) {

	// 20.2.2.20 Math.log1p(x)
	module.exports = Math.log1p || function log1p(x) {
	  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
	};


/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.5 Math.asinh(x)
	var $export = __webpack_require__(8);
	var $asinh = Math.asinh;
	
	function asinh(x) {
	  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
	}
	
	// Tor Browser bug: Math.asinh(0) -> -0
	$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });


/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.7 Math.atanh(x)
	var $export = __webpack_require__(8);
	var $atanh = Math.atanh;
	
	// Tor Browser bug: Math.atanh(-0) -> 0
	$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
	  atanh: function atanh(x) {
	    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
	  }
	});


/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.9 Math.cbrt(x)
	var $export = __webpack_require__(8);
	var sign = __webpack_require__(107);
	
	$export($export.S, 'Math', {
	  cbrt: function cbrt(x) {
	    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
	  }
	});


/***/ },
/* 107 */
/***/ function(module, exports) {

	// 20.2.2.28 Math.sign(x)
	module.exports = Math.sign || function sign(x) {
	  // eslint-disable-next-line no-self-compare
	  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
	};


/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.11 Math.clz32(x)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  clz32: function clz32(x) {
	    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
	  }
	});


/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.12 Math.cosh(x)
	var $export = __webpack_require__(8);
	var exp = Math.exp;
	
	$export($export.S, 'Math', {
	  cosh: function cosh(x) {
	    return (exp(x = +x) + exp(-x)) / 2;
	  }
	});


/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.14 Math.expm1(x)
	var $export = __webpack_require__(8);
	var $expm1 = __webpack_require__(111);
	
	$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });


/***/ },
/* 111 */
/***/ function(module, exports) {

	// 20.2.2.14 Math.expm1(x)
	var $expm1 = Math.expm1;
	module.exports = (!$expm1
	  // Old FF bug
	  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
	  // Tor Browser bug
	  || $expm1(-2e-17) != -2e-17
	) ? function expm1(x) {
	  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
	} : $expm1;


/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.16 Math.fround(x)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', { fround: __webpack_require__(113) });


/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.16 Math.fround(x)
	var sign = __webpack_require__(107);
	var pow = Math.pow;
	var EPSILON = pow(2, -52);
	var EPSILON32 = pow(2, -23);
	var MAX32 = pow(2, 127) * (2 - EPSILON32);
	var MIN32 = pow(2, -126);
	
	var roundTiesToEven = function (n) {
	  return n + 1 / EPSILON - 1 / EPSILON;
	};
	
	module.exports = Math.fround || function fround(x) {
	  var $abs = Math.abs(x);
	  var $sign = sign(x);
	  var a, result;
	  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
	  a = (1 + EPSILON32 / EPSILON) * $abs;
	  result = a - (a - $abs);
	  // eslint-disable-next-line no-self-compare
	  if (result > MAX32 || result != result) return $sign * Infinity;
	  return $sign * result;
	};


/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
	var $export = __webpack_require__(8);
	var abs = Math.abs;
	
	$export($export.S, 'Math', {
	  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
	    var sum = 0;
	    var i = 0;
	    var aLen = arguments.length;
	    var larg = 0;
	    var arg, div;
	    while (i < aLen) {
	      arg = abs(arguments[i++]);
	      if (larg < arg) {
	        div = larg / arg;
	        sum = sum * div * div + 1;
	        larg = arg;
	      } else if (arg > 0) {
	        div = arg / larg;
	        sum += div * div;
	      } else sum += arg;
	    }
	    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
	  }
	});


/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.18 Math.imul(x, y)
	var $export = __webpack_require__(8);
	var $imul = Math.imul;
	
	// some WebKit versions fails with big numbers, some has wrong arity
	$export($export.S + $export.F * __webpack_require__(7)(function () {
	  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
	}), 'Math', {
	  imul: function imul(x, y) {
	    var UINT16 = 0xffff;
	    var xn = +x;
	    var yn = +y;
	    var xl = UINT16 & xn;
	    var yl = UINT16 & yn;
	    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
	  }
	});


/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.21 Math.log10(x)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  log10: function log10(x) {
	    return Math.log(x) * Math.LOG10E;
	  }
	});


/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.20 Math.log1p(x)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', { log1p: __webpack_require__(103) });


/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.22 Math.log2(x)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  log2: function log2(x) {
	    return Math.log(x) / Math.LN2;
	  }
	});


/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.28 Math.sign(x)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', { sign: __webpack_require__(107) });


/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.30 Math.sinh(x)
	var $export = __webpack_require__(8);
	var expm1 = __webpack_require__(111);
	var exp = Math.exp;
	
	// V8 near Chromium 38 has a problem with very small numbers
	$export($export.S + $export.F * __webpack_require__(7)(function () {
	  return !Math.sinh(-2e-17) != -2e-17;
	}), 'Math', {
	  sinh: function sinh(x) {
	    return Math.abs(x = +x) < 1
	      ? (expm1(x) - expm1(-x)) / 2
	      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
	  }
	});


/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.33 Math.tanh(x)
	var $export = __webpack_require__(8);
	var expm1 = __webpack_require__(111);
	var exp = Math.exp;
	
	$export($export.S, 'Math', {
	  tanh: function tanh(x) {
	    var a = expm1(x = +x);
	    var b = expm1(-x);
	    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
	  }
	});


/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.34 Math.trunc(x)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  trunc: function trunc(it) {
	    return (it > 0 ? Math.floor : Math.ceil)(it);
	  }
	});


/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	var toAbsoluteIndex = __webpack_require__(39);
	var fromCharCode = String.fromCharCode;
	var $fromCodePoint = String.fromCodePoint;
	
	// length should be 1, old FF problem
	$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
	  // 21.1.2.2 String.fromCodePoint(...codePoints)
	  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
	    var res = [];
	    var aLen = arguments.length;
	    var i = 0;
	    var code;
	    while (aLen > i) {
	      code = +arguments[i++];
	      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
	      res.push(code < 0x10000
	        ? fromCharCode(code)
	        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
	      );
	    } return res.join('');
	  }
	});


/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	var toIObject = __webpack_require__(32);
	var toLength = __webpack_require__(37);
	
	$export($export.S, 'String', {
	  // 21.1.2.4 String.raw(callSite, ...substitutions)
	  raw: function raw(callSite) {
	    var tpl = toIObject(callSite.raw);
	    var len = toLength(tpl.length);
	    var aLen = arguments.length;
	    var res = [];
	    var i = 0;
	    while (len > i) {
	      res.push(String(tpl[i++]));
	      if (i < aLen) res.push(String(arguments[i]));
	    } return res.join('');
	  }
	});


/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 21.1.3.25 String.prototype.trim()
	__webpack_require__(82)('trim', function ($trim) {
	  return function trim() {
	    return $trim(this, 3);
	  };
	});


/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $at = __webpack_require__(127)(true);
	
	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(128)(String, 'String', function (iterated) {
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var index = this._i;
	  var point;
	  if (index >= O.length) return { value: undefined, done: true };
	  point = $at(O, index);
	  this._i += point.length;
	  return { value: point, done: false };
	});


/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(38);
	var defined = __webpack_require__(35);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function (TO_STRING) {
	  return function (that, pos) {
	    var s = String(defined(that));
	    var i = toInteger(pos);
	    var l = s.length;
	    var a, b;
	    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};


/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY = __webpack_require__(28);
	var $export = __webpack_require__(8);
	var redefine = __webpack_require__(18);
	var hide = __webpack_require__(10);
	var Iterators = __webpack_require__(129);
	var $iterCreate = __webpack_require__(130);
	var setToStringTag = __webpack_require__(24);
	var getPrototypeOf = __webpack_require__(58);
	var ITERATOR = __webpack_require__(25)('iterator');
	var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
	var FF_ITERATOR = '@@iterator';
	var KEYS = 'keys';
	var VALUES = 'values';
	
	var returnThis = function () { return this; };
	
	module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function (kind) {
	    if (!BUGGY && kind in proto) return proto[kind];
	    switch (kind) {
	      case KEYS: return function keys() { return new Constructor(this, kind); };
	      case VALUES: return function values() { return new Constructor(this, kind); };
	    } return function entries() { return new Constructor(this, kind); };
	  };
	  var TAG = NAME + ' Iterator';
	  var DEF_VALUES = DEFAULT == VALUES;
	  var VALUES_BUG = false;
	  var proto = Base.prototype;
	  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
	  var $default = $native || getMethod(DEFAULT);
	  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
	  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
	  var methods, key, IteratorPrototype;
	  // Fix native
	  if ($anyNative) {
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
	    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if (DEF_VALUES && $native && $native.name !== VALUES) {
	    VALUES_BUG = true;
	    $default = function values() { return $native.call(this); };
	  }
	  // Define iterator
	  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG] = returnThis;
	  if (DEFAULT) {
	    methods = {
	      values: DEF_VALUES ? $default : getMethod(VALUES),
	      keys: IS_SET ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if (FORCED) for (key in methods) {
	      if (!(key in proto)) redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};


/***/ },
/* 129 */
/***/ function(module, exports) {

	module.exports = {};


/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var create = __webpack_require__(45);
	var descriptor = __webpack_require__(17);
	var setToStringTag = __webpack_require__(24);
	var IteratorPrototype = {};
	
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(10)(IteratorPrototype, __webpack_require__(25)('iterator'), function () { return this; });
	
	module.exports = function (Constructor, NAME, next) {
	  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
	  setToStringTag(Constructor, NAME + ' Iterator');
	};


/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var $at = __webpack_require__(127)(false);
	$export($export.P, 'String', {
	  // 21.1.3.3 String.prototype.codePointAt(pos)
	  codePointAt: function codePointAt(pos) {
	    return $at(this, pos);
	  }
	});


/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
	'use strict';
	var $export = __webpack_require__(8);
	var toLength = __webpack_require__(37);
	var context = __webpack_require__(133);
	var ENDS_WITH = 'endsWith';
	var $endsWith = ''[ENDS_WITH];
	
	$export($export.P + $export.F * __webpack_require__(135)(ENDS_WITH), 'String', {
	  endsWith: function endsWith(searchString /* , endPosition = @length */) {
	    var that = context(this, searchString, ENDS_WITH);
	    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
	    var len = toLength(that.length);
	    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
	    var search = String(searchString);
	    return $endsWith
	      ? $endsWith.call(that, search, end)
	      : that.slice(end - search.length, end) === search;
	  }
	});


/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	// helper for String#{startsWith, endsWith, includes}
	var isRegExp = __webpack_require__(134);
	var defined = __webpack_require__(35);
	
	module.exports = function (that, searchString, NAME) {
	  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
	  return String(defined(that));
	};


/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	// 7.2.8 IsRegExp(argument)
	var isObject = __webpack_require__(13);
	var cof = __webpack_require__(34);
	var MATCH = __webpack_require__(25)('match');
	module.exports = function (it) {
	  var isRegExp;
	  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
	};


/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	var MATCH = __webpack_require__(25)('match');
	module.exports = function (KEY) {
	  var re = /./;
	  try {
	    '/./'[KEY](re);
	  } catch (e) {
	    try {
	      re[MATCH] = false;
	      return !'/./'[KEY](re);
	    } catch (f) { /* empty */ }
	  } return true;
	};


/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	// 21.1.3.7 String.prototype.includes(searchString, position = 0)
	'use strict';
	var $export = __webpack_require__(8);
	var context = __webpack_require__(133);
	var INCLUDES = 'includes';
	
	$export($export.P + $export.F * __webpack_require__(135)(INCLUDES), 'String', {
	  includes: function includes(searchString /* , position = 0 */) {
	    return !!~context(this, searchString, INCLUDES)
	      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});


/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	
	$export($export.P, 'String', {
	  // 21.1.3.13 String.prototype.repeat(count)
	  repeat: __webpack_require__(90)
	});


/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	// 21.1.3.18 String.prototype.startsWith(searchString [, position ])
	'use strict';
	var $export = __webpack_require__(8);
	var toLength = __webpack_require__(37);
	var context = __webpack_require__(133);
	var STARTS_WITH = 'startsWith';
	var $startsWith = ''[STARTS_WITH];
	
	$export($export.P + $export.F * __webpack_require__(135)(STARTS_WITH), 'String', {
	  startsWith: function startsWith(searchString /* , position = 0 */) {
	    var that = context(this, searchString, STARTS_WITH);
	    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
	    var search = String(searchString);
	    return $startsWith
	      ? $startsWith.call(that, search, index)
	      : that.slice(index, index + search.length) === search;
	  }
	});


/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.2 String.prototype.anchor(name)
	__webpack_require__(140)('anchor', function (createHTML) {
	  return function anchor(name) {
	    return createHTML(this, 'a', 'name', name);
	  };
	});


/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	var fails = __webpack_require__(7);
	var defined = __webpack_require__(35);
	var quot = /"/g;
	// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
	var createHTML = function (string, tag, attribute, value) {
	  var S = String(defined(string));
	  var p1 = '<' + tag;
	  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
	  return p1 + '>' + S + '</' + tag + '>';
	};
	module.exports = function (NAME, exec) {
	  var O = {};
	  O[NAME] = exec(createHTML);
	  $export($export.P + $export.F * fails(function () {
	    var test = ''[NAME]('"');
	    return test !== test.toLowerCase() || test.split('"').length > 3;
	  }), 'String', O);
	};


/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.3 String.prototype.big()
	__webpack_require__(140)('big', function (createHTML) {
	  return function big() {
	    return createHTML(this, 'big', '', '');
	  };
	});


/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.4 String.prototype.blink()
	__webpack_require__(140)('blink', function (createHTML) {
	  return function blink() {
	    return createHTML(this, 'blink', '', '');
	  };
	});


/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.5 String.prototype.bold()
	__webpack_require__(140)('bold', function (createHTML) {
	  return function bold() {
	    return createHTML(this, 'b', '', '');
	  };
	});


/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.6 String.prototype.fixed()
	__webpack_require__(140)('fixed', function (createHTML) {
	  return function fixed() {
	    return createHTML(this, 'tt', '', '');
	  };
	});


/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.7 String.prototype.fontcolor(color)
	__webpack_require__(140)('fontcolor', function (createHTML) {
	  return function fontcolor(color) {
	    return createHTML(this, 'font', 'color', color);
	  };
	});


/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.8 String.prototype.fontsize(size)
	__webpack_require__(140)('fontsize', function (createHTML) {
	  return function fontsize(size) {
	    return createHTML(this, 'font', 'size', size);
	  };
	});


/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.9 String.prototype.italics()
	__webpack_require__(140)('italics', function (createHTML) {
	  return function italics() {
	    return createHTML(this, 'i', '', '');
	  };
	});


/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.10 String.prototype.link(url)
	__webpack_require__(140)('link', function (createHTML) {
	  return function link(url) {
	    return createHTML(this, 'a', 'href', url);
	  };
	});


/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.11 String.prototype.small()
	__webpack_require__(140)('small', function (createHTML) {
	  return function small() {
	    return createHTML(this, 'small', '', '');
	  };
	});


/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.12 String.prototype.strike()
	__webpack_require__(140)('strike', function (createHTML) {
	  return function strike() {
	    return createHTML(this, 'strike', '', '');
	  };
	});


/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.13 String.prototype.sub()
	__webpack_require__(140)('sub', function (createHTML) {
	  return function sub() {
	    return createHTML(this, 'sub', '', '');
	  };
	});


/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.14 String.prototype.sup()
	__webpack_require__(140)('sup', function (createHTML) {
	  return function sup() {
	    return createHTML(this, 'sup', '', '');
	  };
	});


/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	// 20.3.3.1 / 15.9.4.4 Date.now()
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Date', { now: function () { return new Date().getTime(); } });


/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var toObject = __webpack_require__(57);
	var toPrimitive = __webpack_require__(16);
	
	$export($export.P + $export.F * __webpack_require__(7)(function () {
	  return new Date(NaN).toJSON() !== null
	    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;
	}), 'Date', {
	  // eslint-disable-next-line no-unused-vars
	  toJSON: function toJSON(key) {
	    var O = toObject(this);
	    var pv = toPrimitive(O);
	    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
	  }
	});


/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
	var $export = __webpack_require__(8);
	var toISOString = __webpack_require__(156);
	
	// PhantomJS / old WebKit has a broken implementations
	$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {
	  toISOString: toISOString
	});


/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
	var fails = __webpack_require__(7);
	var getTime = Date.prototype.getTime;
	var $toISOString = Date.prototype.toISOString;
	
	var lz = function (num) {
	  return num > 9 ? num : '0' + num;
	};
	
	// PhantomJS / old WebKit has a broken implementations
	module.exports = (fails(function () {
	  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
	}) || !fails(function () {
	  $toISOString.call(new Date(NaN));
	})) ? function toISOString() {
	  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
	  var d = this;
	  var y = d.getUTCFullYear();
	  var m = d.getUTCMilliseconds();
	  var s = y < 0 ? '-' : y > 9999 ? '+' : '';
	  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
	    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
	    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
	    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
	} : $toISOString;


/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	var DateProto = Date.prototype;
	var INVALID_DATE = 'Invalid Date';
	var TO_STRING = 'toString';
	var $toString = DateProto[TO_STRING];
	var getTime = DateProto.getTime;
	if (new Date(NaN) + '' != INVALID_DATE) {
	  __webpack_require__(18)(DateProto, TO_STRING, function toString() {
	    var value = getTime.call(this);
	    // eslint-disable-next-line no-self-compare
	    return value === value ? $toString.call(this) : INVALID_DATE;
	  });
	}


/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	var TO_PRIMITIVE = __webpack_require__(25)('toPrimitive');
	var proto = Date.prototype;
	
	if (!(TO_PRIMITIVE in proto)) __webpack_require__(10)(proto, TO_PRIMITIVE, __webpack_require__(159));


/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var anObject = __webpack_require__(12);
	var toPrimitive = __webpack_require__(16);
	var NUMBER = 'number';
	
	module.exports = function (hint) {
	  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
	  return toPrimitive(anObject(this), hint != NUMBER);
	};


/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Array', { isArray: __webpack_require__(44) });


/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var ctx = __webpack_require__(20);
	var $export = __webpack_require__(8);
	var toObject = __webpack_require__(57);
	var call = __webpack_require__(162);
	var isArrayIter = __webpack_require__(163);
	var toLength = __webpack_require__(37);
	var createProperty = __webpack_require__(164);
	var getIterFn = __webpack_require__(165);
	
	$export($export.S + $export.F * !__webpack_require__(166)(function (iter) { Array.from(iter); }), 'Array', {
	  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
	  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
	    var O = toObject(arrayLike);
	    var C = typeof this == 'function' ? this : Array;
	    var aLen = arguments.length;
	    var mapfn = aLen > 1 ? arguments[1] : undefined;
	    var mapping = mapfn !== undefined;
	    var index = 0;
	    var iterFn = getIterFn(O);
	    var length, result, step, iterator;
	    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
	    // if object isn't iterable or it's array with default iterator - use simple case
	    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
	      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
	        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
	      }
	    } else {
	      length = toLength(O.length);
	      for (result = new C(length); length > index; index++) {
	        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
	      }
	    }
	    result.length = index;
	    return result;
	  }
	});


/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	// call something on iterator step with safe closing on error
	var anObject = __webpack_require__(12);
	module.exports = function (iterator, fn, value, entries) {
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch (e) {
	    var ret = iterator['return'];
	    if (ret !== undefined) anObject(ret.call(iterator));
	    throw e;
	  }
	};


/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	// check on default Array iterator
	var Iterators = __webpack_require__(129);
	var ITERATOR = __webpack_require__(25)('iterator');
	var ArrayProto = Array.prototype;
	
	module.exports = function (it) {
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};


/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $defineProperty = __webpack_require__(11);
	var createDesc = __webpack_require__(17);
	
	module.exports = function (object, index, value) {
	  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
	  else object[index] = value;
	};


/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	var classof = __webpack_require__(74);
	var ITERATOR = __webpack_require__(25)('iterator');
	var Iterators = __webpack_require__(129);
	module.exports = __webpack_require__(9).getIteratorMethod = function (it) {
	  if (it != undefined) return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};


/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	var ITERATOR = __webpack_require__(25)('iterator');
	var SAFE_CLOSING = false;
	
	try {
	  var riter = [7][ITERATOR]();
	  riter['return'] = function () { SAFE_CLOSING = true; };
	  // eslint-disable-next-line no-throw-literal
	  Array.from(riter, function () { throw 2; });
	} catch (e) { /* empty */ }
	
	module.exports = function (exec, skipClosing) {
	  if (!skipClosing && !SAFE_CLOSING) return false;
	  var safe = false;
	  try {
	    var arr = [7];
	    var iter = arr[ITERATOR]();
	    iter.next = function () { return { done: safe = true }; };
	    arr[ITERATOR] = function () { return iter; };
	    exec(arr);
	  } catch (e) { /* empty */ }
	  return safe;
	};


/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var createProperty = __webpack_require__(164);
	
	// WebKit Array.of isn't generic
	$export($export.S + $export.F * __webpack_require__(7)(function () {
	  function F() { /* empty */ }
	  return !(Array.of.call(F) instanceof F);
	}), 'Array', {
	  // 22.1.2.3 Array.of( ...items)
	  of: function of(/* ...args */) {
	    var index = 0;
	    var aLen = arguments.length;
	    var result = new (typeof this == 'function' ? this : Array)(aLen);
	    while (aLen > index) createProperty(result, index, arguments[index++]);
	    result.length = aLen;
	    return result;
	  }
	});


/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 22.1.3.13 Array.prototype.join(separator)
	var $export = __webpack_require__(8);
	var toIObject = __webpack_require__(32);
	var arrayJoin = [].join;
	
	// fallback for not array-like strings
	$export($export.P + $export.F * (__webpack_require__(33) != Object || !__webpack_require__(169)(arrayJoin)), 'Array', {
	  join: function join(separator) {
	    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
	  }
	});


/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var fails = __webpack_require__(7);
	
	module.exports = function (method, arg) {
	  return !!method && fails(function () {
	    // eslint-disable-next-line no-useless-call
	    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);
	  });
	};


/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var html = __webpack_require__(47);
	var cof = __webpack_require__(34);
	var toAbsoluteIndex = __webpack_require__(39);
	var toLength = __webpack_require__(37);
	var arraySlice = [].slice;
	
	// fallback for not array-like ES3 strings and DOM objects
	$export($export.P + $export.F * __webpack_require__(7)(function () {
	  if (html) arraySlice.call(html);
	}), 'Array', {
	  slice: function slice(begin, end) {
	    var len = toLength(this.length);
	    var klass = cof(this);
	    end = end === undefined ? len : end;
	    if (klass == 'Array') return arraySlice.call(this, begin, end);
	    var start = toAbsoluteIndex(begin, len);
	    var upTo = toAbsoluteIndex(end, len);
	    var size = toLength(upTo - start);
	    var cloned = new Array(size);
	    var i = 0;
	    for (; i < size; i++) cloned[i] = klass == 'String'
	      ? this.charAt(start + i)
	      : this[start + i];
	    return cloned;
	  }
	});


/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var aFunction = __webpack_require__(21);
	var toObject = __webpack_require__(57);
	var fails = __webpack_require__(7);
	var $sort = [].sort;
	var test = [1, 2, 3];
	
	$export($export.P + $export.F * (fails(function () {
	  // IE8-
	  test.sort(undefined);
	}) || !fails(function () {
	  // V8 bug
	  test.sort(null);
	  // Old WebKit
	}) || !__webpack_require__(169)($sort)), 'Array', {
	  // 22.1.3.25 Array.prototype.sort(comparefn)
	  sort: function sort(comparefn) {
	    return comparefn === undefined
	      ? $sort.call(toObject(this))
	      : $sort.call(toObject(this), aFunction(comparefn));
	  }
	});


/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var $forEach = __webpack_require__(173)(0);
	var STRICT = __webpack_require__(169)([].forEach, true);
	
	$export($export.P + $export.F * !STRICT, 'Array', {
	  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
	  forEach: function forEach(callbackfn /* , thisArg */) {
	    return $forEach(this, callbackfn, arguments[1]);
	  }
	});


/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	// 0 -> Array#forEach
	// 1 -> Array#map
	// 2 -> Array#filter
	// 3 -> Array#some
	// 4 -> Array#every
	// 5 -> Array#find
	// 6 -> Array#findIndex
	var ctx = __webpack_require__(20);
	var IObject = __webpack_require__(33);
	var toObject = __webpack_require__(57);
	var toLength = __webpack_require__(37);
	var asc = __webpack_require__(174);
	module.exports = function (TYPE, $create) {
	  var IS_MAP = TYPE == 1;
	  var IS_FILTER = TYPE == 2;
	  var IS_SOME = TYPE == 3;
	  var IS_EVERY = TYPE == 4;
	  var IS_FIND_INDEX = TYPE == 6;
	  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
	  var create = $create || asc;
	  return function ($this, callbackfn, that) {
	    var O = toObject($this);
	    var self = IObject(O);
	    var f = ctx(callbackfn, that, 3);
	    var length = toLength(self.length);
	    var index = 0;
	    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
	    var val, res;
	    for (;length > index; index++) if (NO_HOLES || index in self) {
	      val = self[index];
	      res = f(val, index, O);
	      if (TYPE) {
	        if (IS_MAP) result[index] = res;   // map
	        else if (res) switch (TYPE) {
	          case 3: return true;             // some
	          case 5: return val;              // find
	          case 6: return index;            // findIndex
	          case 2: result.push(val);        // filter
	        } else if (IS_EVERY) return false; // every
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
	  };
	};


/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
	var speciesConstructor = __webpack_require__(175);
	
	module.exports = function (original, length) {
	  return new (speciesConstructor(original))(length);
	};


/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(13);
	var isArray = __webpack_require__(44);
	var SPECIES = __webpack_require__(25)('species');
	
	module.exports = function (original) {
	  var C;
	  if (isArray(original)) {
	    C = original.constructor;
	    // cross-realm fallback
	    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
	    if (isObject(C)) {
	      C = C[SPECIES];
	      if (C === null) C = undefined;
	    }
	  } return C === undefined ? Array : C;
	};


/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var $map = __webpack_require__(173)(1);
	
	$export($export.P + $export.F * !__webpack_require__(169)([].map, true), 'Array', {
	  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
	  map: function map(callbackfn /* , thisArg */) {
	    return $map(this, callbackfn, arguments[1]);
	  }
	});


/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var $filter = __webpack_require__(173)(2);
	
	$export($export.P + $export.F * !__webpack_require__(169)([].filter, true), 'Array', {
	  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
	  filter: function filter(callbackfn /* , thisArg */) {
	    return $filter(this, callbackfn, arguments[1]);
	  }
	});


/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var $some = __webpack_require__(173)(3);
	
	$export($export.P + $export.F * !__webpack_require__(169)([].some, true), 'Array', {
	  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
	  some: function some(callbackfn /* , thisArg */) {
	    return $some(this, callbackfn, arguments[1]);
	  }
	});


/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var $every = __webpack_require__(173)(4);
	
	$export($export.P + $export.F * !__webpack_require__(169)([].every, true), 'Array', {
	  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
	  every: function every(callbackfn /* , thisArg */) {
	    return $every(this, callbackfn, arguments[1]);
	  }
	});


/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var $reduce = __webpack_require__(181);
	
	$export($export.P + $export.F * !__webpack_require__(169)([].reduce, true), 'Array', {
	  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
	  reduce: function reduce(callbackfn /* , initialValue */) {
	    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
	  }
	});


/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	var aFunction = __webpack_require__(21);
	var toObject = __webpack_require__(57);
	var IObject = __webpack_require__(33);
	var toLength = __webpack_require__(37);
	
	module.exports = function (that, callbackfn, aLen, memo, isRight) {
	  aFunction(callbackfn);
	  var O = toObject(that);
	  var self = IObject(O);
	  var length = toLength(O.length);
	  var index = isRight ? length - 1 : 0;
	  var i = isRight ? -1 : 1;
	  if (aLen < 2) for (;;) {
	    if (index in self) {
	      memo = self[index];
	      index += i;
	      break;
	    }
	    index += i;
	    if (isRight ? index < 0 : length <= index) {
	      throw TypeError('Reduce of empty array with no initial value');
	    }
	  }
	  for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {
	    memo = callbackfn(memo, self[index], index, O);
	  }
	  return memo;
	};


/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var $reduce = __webpack_require__(181);
	
	$export($export.P + $export.F * !__webpack_require__(169)([].reduceRight, true), 'Array', {
	  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
	  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
	    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
	  }
	});


/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var $indexOf = __webpack_require__(36)(false);
	var $native = [].indexOf;
	var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;
	
	$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(169)($native)), 'Array', {
	  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
	  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
	    return NEGATIVE_ZERO
	      // convert -0 to +0
	      ? $native.apply(this, arguments) || 0
	      : $indexOf(this, searchElement, arguments[1]);
	  }
	});


/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var toIObject = __webpack_require__(32);
	var toInteger = __webpack_require__(38);
	var toLength = __webpack_require__(37);
	var $native = [].lastIndexOf;
	var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;
	
	$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(169)($native)), 'Array', {
	  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
	  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
	    // convert -0 to +0
	    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
	    var O = toIObject(this);
	    var length = toLength(O.length);
	    var index = length - 1;
	    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
	    if (index < 0) index = length + index;
	    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;
	    return -1;
	  }
	});


/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
	var $export = __webpack_require__(8);
	
	$export($export.P, 'Array', { copyWithin: __webpack_require__(186) });
	
	__webpack_require__(187)('copyWithin');


/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
	'use strict';
	var toObject = __webpack_require__(57);
	var toAbsoluteIndex = __webpack_require__(39);
	var toLength = __webpack_require__(37);
	
	module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
	  var O = toObject(this);
	  var len = toLength(O.length);
	  var to = toAbsoluteIndex(target, len);
	  var from = toAbsoluteIndex(start, len);
	  var end = arguments.length > 2 ? arguments[2] : undefined;
	  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
	  var inc = 1;
	  if (from < to && to < from + count) {
	    inc = -1;
	    from += count - 1;
	    to += count - 1;
	  }
	  while (count-- > 0) {
	    if (from in O) O[to] = O[from];
	    else delete O[to];
	    to += inc;
	    from += inc;
	  } return O;
	};


/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.3.31 Array.prototype[@@unscopables]
	var UNSCOPABLES = __webpack_require__(25)('unscopables');
	var ArrayProto = Array.prototype;
	if (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__(10)(ArrayProto, UNSCOPABLES, {});
	module.exports = function (key) {
	  ArrayProto[UNSCOPABLES][key] = true;
	};


/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
	var $export = __webpack_require__(8);
	
	$export($export.P, 'Array', { fill: __webpack_require__(189) });
	
	__webpack_require__(187)('fill');


/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
	'use strict';
	var toObject = __webpack_require__(57);
	var toAbsoluteIndex = __webpack_require__(39);
	var toLength = __webpack_require__(37);
	module.exports = function fill(value /* , start = 0, end = @length */) {
	  var O = toObject(this);
	  var length = toLength(O.length);
	  var aLen = arguments.length;
	  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
	  var end = aLen > 2 ? arguments[2] : undefined;
	  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
	  while (endPos > index) O[index++] = value;
	  return O;
	};


/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
	var $export = __webpack_require__(8);
	var $find = __webpack_require__(173)(5);
	var KEY = 'find';
	var forced = true;
	// Shouldn't skip holes
	if (KEY in []) Array(1)[KEY](function () { forced = false; });
	$export($export.P + $export.F * forced, 'Array', {
	  find: function find(callbackfn /* , that = undefined */) {
	    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	__webpack_require__(187)(KEY);


/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
	var $export = __webpack_require__(8);
	var $find = __webpack_require__(173)(6);
	var KEY = 'findIndex';
	var forced = true;
	// Shouldn't skip holes
	if (KEY in []) Array(1)[KEY](function () { forced = false; });
	$export($export.P + $export.F * forced, 'Array', {
	  findIndex: function findIndex(callbackfn /* , that = undefined */) {
	    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	__webpack_require__(187)(KEY);


/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(193)('Array');


/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global = __webpack_require__(4);
	var dP = __webpack_require__(11);
	var DESCRIPTORS = __webpack_require__(6);
	var SPECIES = __webpack_require__(25)('species');
	
	module.exports = function (KEY) {
	  var C = global[KEY];
	  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
	    configurable: true,
	    get: function () { return this; }
	  });
	};


/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var addToUnscopables = __webpack_require__(187);
	var step = __webpack_require__(195);
	var Iterators = __webpack_require__(129);
	var toIObject = __webpack_require__(32);
	
	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(128)(Array, 'Array', function (iterated, kind) {
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var kind = this._k;
	  var index = this._i++;
	  if (!O || index >= O.length) {
	    this._t = undefined;
	    return step(1);
	  }
	  if (kind == 'keys') return step(0, index);
	  if (kind == 'values') return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');
	
	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;
	
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');


/***/ },
/* 195 */
/***/ function(module, exports) {

	module.exports = function (done, value) {
	  return { value: value, done: !!done };
	};


/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(4);
	var inheritIfRequired = __webpack_require__(87);
	var dP = __webpack_require__(11).f;
	var gOPN = __webpack_require__(49).f;
	var isRegExp = __webpack_require__(134);
	var $flags = __webpack_require__(197);
	var $RegExp = global.RegExp;
	var Base = $RegExp;
	var proto = $RegExp.prototype;
	var re1 = /a/g;
	var re2 = /a/g;
	// "new" creates a new object, old webkit buggy here
	var CORRECT_NEW = new $RegExp(re1) !== re1;
	
	if (__webpack_require__(6) && (!CORRECT_NEW || __webpack_require__(7)(function () {
	  re2[__webpack_require__(25)('match')] = false;
	  // RegExp constructor can alter flags and IsRegExp works correct with @@match
	  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
	}))) {
	  $RegExp = function RegExp(p, f) {
	    var tiRE = this instanceof $RegExp;
	    var piRE = isRegExp(p);
	    var fiU = f === undefined;
	    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
	      : inheritIfRequired(CORRECT_NEW
	        ? new Base(piRE && !fiU ? p.source : p, f)
	        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
	      , tiRE ? this : proto, $RegExp);
	  };
	  var proxy = function (key) {
	    key in $RegExp || dP($RegExp, key, {
	      configurable: true,
	      get: function () { return Base[key]; },
	      set: function (it) { Base[key] = it; }
	    });
	  };
	  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
	  proto.constructor = $RegExp;
	  $RegExp.prototype = proto;
	  __webpack_require__(18)(global, 'RegExp', $RegExp);
	}
	
	__webpack_require__(193)('RegExp');


/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 21.2.5.3 get RegExp.prototype.flags
	var anObject = __webpack_require__(12);
	module.exports = function () {
	  var that = anObject(this);
	  var result = '';
	  if (that.global) result += 'g';
	  if (that.ignoreCase) result += 'i';
	  if (that.multiline) result += 'm';
	  if (that.unicode) result += 'u';
	  if (that.sticky) result += 'y';
	  return result;
	};


/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	__webpack_require__(199);
	var anObject = __webpack_require__(12);
	var $flags = __webpack_require__(197);
	var DESCRIPTORS = __webpack_require__(6);
	var TO_STRING = 'toString';
	var $toString = /./[TO_STRING];
	
	var define = function (fn) {
	  __webpack_require__(18)(RegExp.prototype, TO_STRING, fn, true);
	};
	
	// 21.2.5.14 RegExp.prototype.toString()
	if (__webpack_require__(7)(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {
	  define(function toString() {
	    var R = anObject(this);
	    return '/'.concat(R.source, '/',
	      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
	  });
	// FF44- RegExp#toString has a wrong name
	} else if ($toString.name != TO_STRING) {
	  define(function toString() {
	    return $toString.call(this);
	  });
	}


/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	// 21.2.5.3 get RegExp.prototype.flags()
	if (__webpack_require__(6) && /./g.flags != 'g') __webpack_require__(11).f(RegExp.prototype, 'flags', {
	  configurable: true,
	  get: __webpack_require__(197)
	});


/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	// @@match logic
	__webpack_require__(201)('match', 1, function (defined, MATCH, $match) {
	  // 21.1.3.11 String.prototype.match(regexp)
	  return [function match(regexp) {
	    'use strict';
	    var O = defined(this);
	    var fn = regexp == undefined ? undefined : regexp[MATCH];
	    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
	  }, $match];
	});


/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var hide = __webpack_require__(10);
	var redefine = __webpack_require__(18);
	var fails = __webpack_require__(7);
	var defined = __webpack_require__(35);
	var wks = __webpack_require__(25);
	
	module.exports = function (KEY, length, exec) {
	  var SYMBOL = wks(KEY);
	  var fns = exec(defined, SYMBOL, ''[KEY]);
	  var strfn = fns[0];
	  var rxfn = fns[1];
	  if (fails(function () {
	    var O = {};
	    O[SYMBOL] = function () { return 7; };
	    return ''[KEY](O) != 7;
	  })) {
	    redefine(String.prototype, KEY, strfn);
	    hide(RegExp.prototype, SYMBOL, length == 2
	      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
	      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
	      ? function (string, arg) { return rxfn.call(string, this, arg); }
	      // 21.2.5.6 RegExp.prototype[@@match](string)
	      // 21.2.5.9 RegExp.prototype[@@search](string)
	      : function (string) { return rxfn.call(string, this); }
	    );
	  }
	};


/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	// @@replace logic
	__webpack_require__(201)('replace', 2, function (defined, REPLACE, $replace) {
	  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
	  return [function replace(searchValue, replaceValue) {
	    'use strict';
	    var O = defined(this);
	    var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
	    return fn !== undefined
	      ? fn.call(searchValue, O, replaceValue)
	      : $replace.call(String(O), searchValue, replaceValue);
	  }, $replace];
	});


/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	// @@search logic
	__webpack_require__(201)('search', 1, function (defined, SEARCH, $search) {
	  // 21.1.3.15 String.prototype.search(regexp)
	  return [function search(regexp) {
	    'use strict';
	    var O = defined(this);
	    var fn = regexp == undefined ? undefined : regexp[SEARCH];
	    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
	  }, $search];
	});


/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	// @@split logic
	__webpack_require__(201)('split', 2, function (defined, SPLIT, $split) {
	  'use strict';
	  var isRegExp = __webpack_require__(134);
	  var _split = $split;
	  var $push = [].push;
	  var $SPLIT = 'split';
	  var LENGTH = 'length';
	  var LAST_INDEX = 'lastIndex';
	  if (
	    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
	    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
	    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
	    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
	    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
	    ''[$SPLIT](/.?/)[LENGTH]
	  ) {
	    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
	    // based on es5-shim implementation, need to rework it
	    $split = function (separator, limit) {
	      var string = String(this);
	      if (separator === undefined && limit === 0) return [];
	      // If `separator` is not a regex, use native split
	      if (!isRegExp(separator)) return _split.call(string, separator, limit);
	      var output = [];
	      var flags = (separator.ignoreCase ? 'i' : '') +
	                  (separator.multiline ? 'm' : '') +
	                  (separator.unicode ? 'u' : '') +
	                  (separator.sticky ? 'y' : '');
	      var lastLastIndex = 0;
	      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
	      // Make `global` and avoid `lastIndex` issues by working with a copy
	      var separatorCopy = new RegExp(separator.source, flags + 'g');
	      var separator2, match, lastIndex, lastLength, i;
	      // Doesn't need flags gy, but they don't hurt
	      if (!NPCG) separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
	      while (match = separatorCopy.exec(string)) {
	        // `separatorCopy.lastIndex` is not reliable cross-browser
	        lastIndex = match.index + match[0][LENGTH];
	        if (lastIndex > lastLastIndex) {
	          output.push(string.slice(lastLastIndex, match.index));
	          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
	          // eslint-disable-next-line no-loop-func
	          if (!NPCG && match[LENGTH] > 1) match[0].replace(separator2, function () {
	            for (i = 1; i < arguments[LENGTH] - 2; i++) if (arguments[i] === undefined) match[i] = undefined;
	          });
	          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
	          lastLength = match[0][LENGTH];
	          lastLastIndex = lastIndex;
	          if (output[LENGTH] >= splitLimit) break;
	        }
	        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
	      }
	      if (lastLastIndex === string[LENGTH]) {
	        if (lastLength || !separatorCopy.test('')) output.push('');
	      } else output.push(string.slice(lastLastIndex));
	      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
	    };
	  // Chakra, V8
	  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
	    $split = function (separator, limit) {
	      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
	    };
	  }
	  // 21.1.3.17 String.prototype.split(separator, limit)
	  return [function split(separator, limit) {
	    var O = defined(this);
	    var fn = separator == undefined ? undefined : separator[SPLIT];
	    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
	  }, $split];
	});


/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY = __webpack_require__(28);
	var global = __webpack_require__(4);
	var ctx = __webpack_require__(20);
	var classof = __webpack_require__(74);
	var $export = __webpack_require__(8);
	var isObject = __webpack_require__(13);
	var aFunction = __webpack_require__(21);
	var anInstance = __webpack_require__(206);
	var forOf = __webpack_require__(207);
	var speciesConstructor = __webpack_require__(208);
	var task = __webpack_require__(209).set;
	var microtask = __webpack_require__(210)();
	var newPromiseCapabilityModule = __webpack_require__(211);
	var perform = __webpack_require__(212);
	var promiseResolve = __webpack_require__(213);
	var PROMISE = 'Promise';
	var TypeError = global.TypeError;
	var process = global.process;
	var $Promise = global[PROMISE];
	var isNode = classof(process) == 'process';
	var empty = function () { /* empty */ };
	var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
	var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;
	
	var USE_NATIVE = !!function () {
	  try {
	    // correct subclassing with @@species support
	    var promise = $Promise.resolve(1);
	    var FakePromise = (promise.constructor = {})[__webpack_require__(25)('species')] = function (exec) {
	      exec(empty, empty);
	    };
	    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
	  } catch (e) { /* empty */ }
	}();
	
	// helpers
	var isThenable = function (it) {
	  var then;
	  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};
	var notify = function (promise, isReject) {
	  if (promise._n) return;
	  promise._n = true;
	  var chain = promise._c;
	  microtask(function () {
	    var value = promise._v;
	    var ok = promise._s == 1;
	    var i = 0;
	    var run = function (reaction) {
	      var handler = ok ? reaction.ok : reaction.fail;
	      var resolve = reaction.resolve;
	      var reject = reaction.reject;
	      var domain = reaction.domain;
	      var result, then, exited;
	      try {
	        if (handler) {
	          if (!ok) {
	            if (promise._h == 2) onHandleUnhandled(promise);
	            promise._h = 1;
	          }
	          if (handler === true) result = value;
	          else {
	            if (domain) domain.enter();
	            result = handler(value); // may throw
	            if (domain) {
	              domain.exit();
	              exited = true;
	            }
	          }
	          if (result === reaction.promise) {
	            reject(TypeError('Promise-chain cycle'));
	          } else if (then = isThenable(result)) {
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch (e) {
	        if (domain && !exited) domain.exit();
	        reject(e);
	      }
	    };
	    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
	    promise._c = [];
	    promise._n = false;
	    if (isReject && !promise._h) onUnhandled(promise);
	  });
	};
	var onUnhandled = function (promise) {
	  task.call(global, function () {
	    var value = promise._v;
	    var unhandled = isUnhandled(promise);
	    var result, handler, console;
	    if (unhandled) {
	      result = perform(function () {
	        if (isNode) {
	          process.emit('unhandledRejection', value, promise);
	        } else if (handler = global.onunhandledrejection) {
	          handler({ promise: promise, reason: value });
	        } else if ((console = global.console) && console.error) {
	          console.error('Unhandled promise rejection', value);
	        }
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
	    } promise._a = undefined;
	    if (unhandled && result.e) throw result.v;
	  });
	};
	var isUnhandled = function (promise) {
	  return promise._h !== 1 && (promise._a || promise._c).length === 0;
	};
	var onHandleUnhandled = function (promise) {
	  task.call(global, function () {
	    var handler;
	    if (isNode) {
	      process.emit('rejectionHandled', promise);
	    } else if (handler = global.onrejectionhandled) {
	      handler({ promise: promise, reason: promise._v });
	    }
	  });
	};
	var $reject = function (value) {
	  var promise = this;
	  if (promise._d) return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  promise._v = value;
	  promise._s = 2;
	  if (!promise._a) promise._a = promise._c.slice();
	  notify(promise, true);
	};
	var $resolve = function (value) {
	  var promise = this;
	  var then;
	  if (promise._d) return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  try {
	    if (promise === value) throw TypeError("Promise can't be resolved itself");
	    if (then = isThenable(value)) {
	      microtask(function () {
	        var wrapper = { _w: promise, _d: false }; // wrap
	        try {
	          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
	        } catch (e) {
	          $reject.call(wrapper, e);
	        }
	      });
	    } else {
	      promise._v = value;
	      promise._s = 1;
	      notify(promise, false);
	    }
	  } catch (e) {
	    $reject.call({ _w: promise, _d: false }, e); // wrap
	  }
	};
	
	// constructor polyfill
	if (!USE_NATIVE) {
	  // 25.4.3.1 Promise(executor)
	  $Promise = function Promise(executor) {
	    anInstance(this, $Promise, PROMISE, '_h');
	    aFunction(executor);
	    Internal.call(this);
	    try {
	      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
	    } catch (err) {
	      $reject.call(this, err);
	    }
	  };
	  // eslint-disable-next-line no-unused-vars
	  Internal = function Promise(executor) {
	    this._c = [];             // <- awaiting reactions
	    this._a = undefined;      // <- checked in isUnhandled reactions
	    this._s = 0;              // <- state
	    this._d = false;          // <- done
	    this._v = undefined;      // <- value
	    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
	    this._n = false;          // <- notify
	  };
	  Internal.prototype = __webpack_require__(214)($Promise.prototype, {
	    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
	    then: function then(onFulfilled, onRejected) {
	      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
	      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail = typeof onRejected == 'function' && onRejected;
	      reaction.domain = isNode ? process.domain : undefined;
	      this._c.push(reaction);
	      if (this._a) this._a.push(reaction);
	      if (this._s) notify(this, false);
	      return reaction.promise;
	    },
	    // 25.4.5.1 Promise.prototype.catch(onRejected)
	    'catch': function (onRejected) {
	      return this.then(undefined, onRejected);
	    }
	  });
	  OwnPromiseCapability = function () {
	    var promise = new Internal();
	    this.promise = promise;
	    this.resolve = ctx($resolve, promise, 1);
	    this.reject = ctx($reject, promise, 1);
	  };
	  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
	    return C === $Promise || C === Wrapper
	      ? new OwnPromiseCapability(C)
	      : newGenericPromiseCapability(C);
	  };
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
	__webpack_require__(24)($Promise, PROMISE);
	__webpack_require__(193)(PROMISE);
	Wrapper = __webpack_require__(9)[PROMISE];
	
	// statics
	$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
	  // 25.4.4.5 Promise.reject(r)
	  reject: function reject(r) {
	    var capability = newPromiseCapability(this);
	    var $$reject = capability.reject;
	    $$reject(r);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
	  // 25.4.4.6 Promise.resolve(x)
	  resolve: function resolve(x) {
	    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
	  }
	});
	$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(166)(function (iter) {
	  $Promise.all(iter)['catch'](empty);
	})), PROMISE, {
	  // 25.4.4.1 Promise.all(iterable)
	  all: function all(iterable) {
	    var C = this;
	    var capability = newPromiseCapability(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = perform(function () {
	      var values = [];
	      var index = 0;
	      var remaining = 1;
	      forOf(iterable, false, function (promise) {
	        var $index = index++;
	        var alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        C.resolve(promise).then(function (value) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[$index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if (result.e) reject(result.v);
	    return capability.promise;
	  },
	  // 25.4.4.4 Promise.race(iterable)
	  race: function race(iterable) {
	    var C = this;
	    var capability = newPromiseCapability(C);
	    var reject = capability.reject;
	    var result = perform(function () {
	      forOf(iterable, false, function (promise) {
	        C.resolve(promise).then(capability.resolve, reject);
	      });
	    });
	    if (result.e) reject(result.v);
	    return capability.promise;
	  }
	});


/***/ },
/* 206 */
/***/ function(module, exports) {

	module.exports = function (it, Constructor, name, forbiddenField) {
	  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
	    throw TypeError(name + ': incorrect invocation!');
	  } return it;
	};


/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	var ctx = __webpack_require__(20);
	var call = __webpack_require__(162);
	var isArrayIter = __webpack_require__(163);
	var anObject = __webpack_require__(12);
	var toLength = __webpack_require__(37);
	var getIterFn = __webpack_require__(165);
	var BREAK = {};
	var RETURN = {};
	var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
	  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
	  var f = ctx(fn, that, entries ? 2 : 1);
	  var index = 0;
	  var length, step, iterator, result;
	  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
	  // fast case for arrays with default iterator
	  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
	    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	    if (result === BREAK || result === RETURN) return result;
	  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
	    result = call(iterator, f, step.value, entries);
	    if (result === BREAK || result === RETURN) return result;
	  }
	};
	exports.BREAK = BREAK;
	exports.RETURN = RETURN;


/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	// 7.3.20 SpeciesConstructor(O, defaultConstructor)
	var anObject = __webpack_require__(12);
	var aFunction = __webpack_require__(21);
	var SPECIES = __webpack_require__(25)('species');
	module.exports = function (O, D) {
	  var C = anObject(O).constructor;
	  var S;
	  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
	};


/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	var ctx = __webpack_require__(20);
	var invoke = __webpack_require__(77);
	var html = __webpack_require__(47);
	var cel = __webpack_require__(15);
	var global = __webpack_require__(4);
	var process = global.process;
	var setTask = global.setImmediate;
	var clearTask = global.clearImmediate;
	var MessageChannel = global.MessageChannel;
	var Dispatch = global.Dispatch;
	var counter = 0;
	var queue = {};
	var ONREADYSTATECHANGE = 'onreadystatechange';
	var defer, channel, port;
	var run = function () {
	  var id = +this;
	  // eslint-disable-next-line no-prototype-builtins
	  if (queue.hasOwnProperty(id)) {
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};
	var listener = function (event) {
	  run.call(event.data);
	};
	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if (!setTask || !clearTask) {
	  setTask = function setImmediate(fn) {
	    var args = [];
	    var i = 1;
	    while (arguments.length > i) args.push(arguments[i++]);
	    queue[++counter] = function () {
	      // eslint-disable-next-line no-new-func
	      invoke(typeof fn == 'function' ? fn : Function(fn), args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clearTask = function clearImmediate(id) {
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if (__webpack_require__(34)(process) == 'process') {
	    defer = function (id) {
	      process.nextTick(ctx(run, id, 1));
	    };
	  // Sphere (JS game engine) Dispatch API
	  } else if (Dispatch && Dispatch.now) {
	    defer = function (id) {
	      Dispatch.now(ctx(run, id, 1));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  } else if (MessageChannel) {
	    channel = new MessageChannel();
	    port = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = ctx(port.postMessage, port, 1);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
	    defer = function (id) {
	      global.postMessage(id + '', '*');
	    };
	    global.addEventListener('message', listener, false);
	  // IE8-
	  } else if (ONREADYSTATECHANGE in cel('script')) {
	    defer = function (id) {
	      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
	        html.removeChild(this);
	        run.call(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function (id) {
	      setTimeout(ctx(run, id, 1), 0);
	    };
	  }
	}
	module.exports = {
	  set: setTask,
	  clear: clearTask
	};


/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(4);
	var macrotask = __webpack_require__(209).set;
	var Observer = global.MutationObserver || global.WebKitMutationObserver;
	var process = global.process;
	var Promise = global.Promise;
	var isNode = __webpack_require__(34)(process) == 'process';
	
	module.exports = function () {
	  var head, last, notify;
	
	  var flush = function () {
	    var parent, fn;
	    if (isNode && (parent = process.domain)) parent.exit();
	    while (head) {
	      fn = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch (e) {
	        if (head) notify();
	        else last = undefined;
	        throw e;
	      }
	    } last = undefined;
	    if (parent) parent.enter();
	  };
	
	  // Node.js
	  if (isNode) {
	    notify = function () {
	      process.nextTick(flush);
	    };
	  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
	  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
	    var toggle = true;
	    var node = document.createTextNode('');
	    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
	    notify = function () {
	      node.data = toggle = !toggle;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if (Promise && Promise.resolve) {
	    var promise = Promise.resolve();
	    notify = function () {
	      promise.then(flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessag
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    notify = function () {
	      // strange IE + webpack dev server bug - use .call(global)
	      macrotask.call(global, flush);
	    };
	  }
	
	  return function (fn) {
	    var task = { fn: fn, next: undefined };
	    if (last) last.next = task;
	    if (!head) {
	      head = task;
	      notify();
	    } last = task;
	  };
	};


/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 25.4.1.5 NewPromiseCapability(C)
	var aFunction = __webpack_require__(21);
	
	function PromiseCapability(C) {
	  var resolve, reject;
	  this.promise = new C(function ($$resolve, $$reject) {
	    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject = $$reject;
	  });
	  this.resolve = aFunction(resolve);
	  this.reject = aFunction(reject);
	}
	
	module.exports.f = function (C) {
	  return new PromiseCapability(C);
	};


/***/ },
/* 212 */
/***/ function(module, exports) {

	module.exports = function (exec) {
	  try {
	    return { e: false, v: exec() };
	  } catch (e) {
	    return { e: true, v: e };
	  }
	};


/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	var anObject = __webpack_require__(12);
	var isObject = __webpack_require__(13);
	var newPromiseCapability = __webpack_require__(211);
	
	module.exports = function (C, x) {
	  anObject(C);
	  if (isObject(x) && x.constructor === C) return x;
	  var promiseCapability = newPromiseCapability.f(C);
	  var resolve = promiseCapability.resolve;
	  resolve(x);
	  return promiseCapability.promise;
	};


/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	var redefine = __webpack_require__(18);
	module.exports = function (target, src, safe) {
	  for (var key in src) redefine(target, key, src[key], safe);
	  return target;
	};


/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(216);
	var validate = __webpack_require__(217);
	var MAP = 'Map';
	
	// 23.1 Map Objects
	module.exports = __webpack_require__(218)(MAP, function (get) {
	  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.1.3.6 Map.prototype.get(key)
	  get: function get(key) {
	    var entry = strong.getEntry(validate(this, MAP), key);
	    return entry && entry.v;
	  },
	  // 23.1.3.9 Map.prototype.set(key, value)
	  set: function set(key, value) {
	    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
	  }
	}, strong, true);


/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var dP = __webpack_require__(11).f;
	var create = __webpack_require__(45);
	var redefineAll = __webpack_require__(214);
	var ctx = __webpack_require__(20);
	var anInstance = __webpack_require__(206);
	var forOf = __webpack_require__(207);
	var $iterDefine = __webpack_require__(128);
	var step = __webpack_require__(195);
	var setSpecies = __webpack_require__(193);
	var DESCRIPTORS = __webpack_require__(6);
	var fastKey = __webpack_require__(22).fastKey;
	var validate = __webpack_require__(217);
	var SIZE = DESCRIPTORS ? '_s' : 'size';
	
	var getEntry = function (that, key) {
	  // fast case
	  var index = fastKey(key);
	  var entry;
	  if (index !== 'F') return that._i[index];
	  // frozen object case
	  for (entry = that._f; entry; entry = entry.n) {
	    if (entry.k == key) return entry;
	  }
	};
	
	module.exports = {
	  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
	    var C = wrapper(function (that, iterable) {
	      anInstance(that, C, NAME, '_i');
	      that._t = NAME;         // collection type
	      that._i = create(null); // index
	      that._f = undefined;    // first entry
	      that._l = undefined;    // last entry
	      that[SIZE] = 0;         // size
	      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    redefineAll(C.prototype, {
	      // 23.1.3.1 Map.prototype.clear()
	      // 23.2.3.2 Set.prototype.clear()
	      clear: function clear() {
	        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
	          entry.r = true;
	          if (entry.p) entry.p = entry.p.n = undefined;
	          delete data[entry.i];
	        }
	        that._f = that._l = undefined;
	        that[SIZE] = 0;
	      },
	      // 23.1.3.3 Map.prototype.delete(key)
	      // 23.2.3.4 Set.prototype.delete(value)
	      'delete': function (key) {
	        var that = validate(this, NAME);
	        var entry = getEntry(that, key);
	        if (entry) {
	          var next = entry.n;
	          var prev = entry.p;
	          delete that._i[entry.i];
	          entry.r = true;
	          if (prev) prev.n = next;
	          if (next) next.p = prev;
	          if (that._f == entry) that._f = next;
	          if (that._l == entry) that._l = prev;
	          that[SIZE]--;
	        } return !!entry;
	      },
	      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
	      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
	      forEach: function forEach(callbackfn /* , that = undefined */) {
	        validate(this, NAME);
	        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
	        var entry;
	        while (entry = entry ? entry.n : this._f) {
	          f(entry.v, entry.k, this);
	          // revert to the last existing entry
	          while (entry && entry.r) entry = entry.p;
	        }
	      },
	      // 23.1.3.7 Map.prototype.has(key)
	      // 23.2.3.7 Set.prototype.has(value)
	      has: function has(key) {
	        return !!getEntry(validate(this, NAME), key);
	      }
	    });
	    if (DESCRIPTORS) dP(C.prototype, 'size', {
	      get: function () {
	        return validate(this, NAME)[SIZE];
	      }
	    });
	    return C;
	  },
	  def: function (that, key, value) {
	    var entry = getEntry(that, key);
	    var prev, index;
	    // change existing entry
	    if (entry) {
	      entry.v = value;
	    // create new entry
	    } else {
	      that._l = entry = {
	        i: index = fastKey(key, true), // <- index
	        k: key,                        // <- key
	        v: value,                      // <- value
	        p: prev = that._l,             // <- previous entry
	        n: undefined,                  // <- next entry
	        r: false                       // <- removed
	      };
	      if (!that._f) that._f = entry;
	      if (prev) prev.n = entry;
	      that[SIZE]++;
	      // add to index
	      if (index !== 'F') that._i[index] = entry;
	    } return that;
	  },
	  getEntry: getEntry,
	  setStrong: function (C, NAME, IS_MAP) {
	    // add .keys, .values, .entries, [@@iterator]
	    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
	    $iterDefine(C, NAME, function (iterated, kind) {
	      this._t = validate(iterated, NAME); // target
	      this._k = kind;                     // kind
	      this._l = undefined;                // previous
	    }, function () {
	      var that = this;
	      var kind = that._k;
	      var entry = that._l;
	      // revert to the last existing entry
	      while (entry && entry.r) entry = entry.p;
	      // get next entry
	      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
	        // or finish the iteration
	        that._t = undefined;
	        return step(1);
	      }
	      // return step by kind
	      if (kind == 'keys') return step(0, entry.k);
	      if (kind == 'values') return step(0, entry.v);
	      return step(0, [entry.k, entry.v]);
	    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);
	
	    // add [@@species], 23.1.2.2, 23.2.2.2
	    setSpecies(NAME);
	  }
	};


/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(13);
	module.exports = function (it, TYPE) {
	  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
	  return it;
	};


/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global = __webpack_require__(4);
	var $export = __webpack_require__(8);
	var redefine = __webpack_require__(18);
	var redefineAll = __webpack_require__(214);
	var meta = __webpack_require__(22);
	var forOf = __webpack_require__(207);
	var anInstance = __webpack_require__(206);
	var isObject = __webpack_require__(13);
	var fails = __webpack_require__(7);
	var $iterDetect = __webpack_require__(166);
	var setToStringTag = __webpack_require__(24);
	var inheritIfRequired = __webpack_require__(87);
	
	module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
	  var Base = global[NAME];
	  var C = Base;
	  var ADDER = IS_MAP ? 'set' : 'add';
	  var proto = C && C.prototype;
	  var O = {};
	  var fixMethod = function (KEY) {
	    var fn = proto[KEY];
	    redefine(proto, KEY,
	      KEY == 'delete' ? function (a) {
	        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'has' ? function has(a) {
	        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'get' ? function get(a) {
	        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }
	        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }
	    );
	  };
	  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
	    new C().entries().next();
	  }))) {
	    // create collection constructor
	    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
	    redefineAll(C.prototype, methods);
	    meta.NEED = true;
	  } else {
	    var instance = new C();
	    // early implementations not supports chaining
	    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
	    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
	    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
	    // most early implementations doesn't supports iterables, most modern - not close it correctly
	    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new
	    // for early implementations -0 and +0 not the same
	    var BUGGY_ZERO = !IS_WEAK && fails(function () {
	      // V8 ~ Chromium 42- fails only with 5+ elements
	      var $instance = new C();
	      var index = 5;
	      while (index--) $instance[ADDER](index, index);
	      return !$instance.has(-0);
	    });
	    if (!ACCEPT_ITERABLES) {
	      C = wrapper(function (target, iterable) {
	        anInstance(target, C, NAME);
	        var that = inheritIfRequired(new Base(), target, C);
	        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
	        return that;
	      });
	      C.prototype = proto;
	      proto.constructor = C;
	    }
	    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
	      fixMethod('delete');
	      fixMethod('has');
	      IS_MAP && fixMethod('get');
	    }
	    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
	    // weak collections should not contains .clear method
	    if (IS_WEAK && proto.clear) delete proto.clear;
	  }
	
	  setToStringTag(C, NAME);
	
	  O[NAME] = C;
	  $export($export.G + $export.W + $export.F * (C != Base), O);
	
	  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);
	
	  return C;
	};


/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(216);
	var validate = __webpack_require__(217);
	var SET = 'Set';
	
	// 23.2 Set Objects
	module.exports = __webpack_require__(218)(SET, function (get) {
	  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.2.3.1 Set.prototype.add(value)
	  add: function add(value) {
	    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
	  }
	}, strong);


/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var each = __webpack_require__(173)(0);
	var redefine = __webpack_require__(18);
	var meta = __webpack_require__(22);
	var assign = __webpack_require__(68);
	var weak = __webpack_require__(221);
	var isObject = __webpack_require__(13);
	var fails = __webpack_require__(7);
	var validate = __webpack_require__(217);
	var WEAK_MAP = 'WeakMap';
	var getWeak = meta.getWeak;
	var isExtensible = Object.isExtensible;
	var uncaughtFrozenStore = weak.ufstore;
	var tmp = {};
	var InternalMap;
	
	var wrapper = function (get) {
	  return function WeakMap() {
	    return get(this, arguments.length > 0 ? arguments[0] : undefined);
	  };
	};
	
	var methods = {
	  // 23.3.3.3 WeakMap.prototype.get(key)
	  get: function get(key) {
	    if (isObject(key)) {
	      var data = getWeak(key);
	      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
	      return data ? data[this._i] : undefined;
	    }
	  },
	  // 23.3.3.5 WeakMap.prototype.set(key, value)
	  set: function set(key, value) {
	    return weak.def(validate(this, WEAK_MAP), key, value);
	  }
	};
	
	// 23.3 WeakMap Objects
	var $WeakMap = module.exports = __webpack_require__(218)(WEAK_MAP, wrapper, methods, weak, true, true);
	
	// IE11 WeakMap frozen keys fix
	if (fails(function () { return new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7; })) {
	  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
	  assign(InternalMap.prototype, methods);
	  meta.NEED = true;
	  each(['delete', 'has', 'get', 'set'], function (key) {
	    var proto = $WeakMap.prototype;
	    var method = proto[key];
	    redefine(proto, key, function (a, b) {
	      // store frozen objects on internal weakmap shim
	      if (isObject(a) && !isExtensible(a)) {
	        if (!this._f) this._f = new InternalMap();
	        var result = this._f[key](a, b);
	        return key == 'set' ? this : result;
	      // store all the rest on native weakmap
	      } return method.call(this, a, b);
	    });
	  });
	}


/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var redefineAll = __webpack_require__(214);
	var getWeak = __webpack_require__(22).getWeak;
	var anObject = __webpack_require__(12);
	var isObject = __webpack_require__(13);
	var anInstance = __webpack_require__(206);
	var forOf = __webpack_require__(207);
	var createArrayMethod = __webpack_require__(173);
	var $has = __webpack_require__(5);
	var validate = __webpack_require__(217);
	var arrayFind = createArrayMethod(5);
	var arrayFindIndex = createArrayMethod(6);
	var id = 0;
	
	// fallback for uncaught frozen keys
	var uncaughtFrozenStore = function (that) {
	  return that._l || (that._l = new UncaughtFrozenStore());
	};
	var UncaughtFrozenStore = function () {
	  this.a = [];
	};
	var findUncaughtFrozen = function (store, key) {
	  return arrayFind(store.a, function (it) {
	    return it[0] === key;
	  });
	};
	UncaughtFrozenStore.prototype = {
	  get: function (key) {
	    var entry = findUncaughtFrozen(this, key);
	    if (entry) return entry[1];
	  },
	  has: function (key) {
	    return !!findUncaughtFrozen(this, key);
	  },
	  set: function (key, value) {
	    var entry = findUncaughtFrozen(this, key);
	    if (entry) entry[1] = value;
	    else this.a.push([key, value]);
	  },
	  'delete': function (key) {
	    var index = arrayFindIndex(this.a, function (it) {
	      return it[0] === key;
	    });
	    if (~index) this.a.splice(index, 1);
	    return !!~index;
	  }
	};
	
	module.exports = {
	  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
	    var C = wrapper(function (that, iterable) {
	      anInstance(that, C, NAME, '_i');
	      that._t = NAME;      // collection type
	      that._i = id++;      // collection id
	      that._l = undefined; // leak store for uncaught frozen objects
	      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    redefineAll(C.prototype, {
	      // 23.3.3.2 WeakMap.prototype.delete(key)
	      // 23.4.3.3 WeakSet.prototype.delete(value)
	      'delete': function (key) {
	        if (!isObject(key)) return false;
	        var data = getWeak(key);
	        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
	        return data && $has(data, this._i) && delete data[this._i];
	      },
	      // 23.3.3.4 WeakMap.prototype.has(key)
	      // 23.4.3.4 WeakSet.prototype.has(value)
	      has: function has(key) {
	        if (!isObject(key)) return false;
	        var data = getWeak(key);
	        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
	        return data && $has(data, this._i);
	      }
	    });
	    return C;
	  },
	  def: function (that, key, value) {
	    var data = getWeak(anObject(key), true);
	    if (data === true) uncaughtFrozenStore(that).set(key, value);
	    else data[that._i] = value;
	    return that;
	  },
	  ufstore: uncaughtFrozenStore
	};


/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var weak = __webpack_require__(221);
	var validate = __webpack_require__(217);
	var WEAK_SET = 'WeakSet';
	
	// 23.4 WeakSet Objects
	__webpack_require__(218)(WEAK_SET, function (get) {
	  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.4.3.1 WeakSet.prototype.add(value)
	  add: function add(value) {
	    return weak.def(validate(this, WEAK_SET), value, true);
	  }
	}, weak, false, true);


/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var $typed = __webpack_require__(224);
	var buffer = __webpack_require__(225);
	var anObject = __webpack_require__(12);
	var toAbsoluteIndex = __webpack_require__(39);
	var toLength = __webpack_require__(37);
	var isObject = __webpack_require__(13);
	var ArrayBuffer = __webpack_require__(4).ArrayBuffer;
	var speciesConstructor = __webpack_require__(208);
	var $ArrayBuffer = buffer.ArrayBuffer;
	var $DataView = buffer.DataView;
	var $isView = $typed.ABV && ArrayBuffer.isView;
	var $slice = $ArrayBuffer.prototype.slice;
	var VIEW = $typed.VIEW;
	var ARRAY_BUFFER = 'ArrayBuffer';
	
	$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });
	
	$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
	  // 24.1.3.1 ArrayBuffer.isView(arg)
	  isView: function isView(it) {
	    return $isView && $isView(it) || isObject(it) && VIEW in it;
	  }
	});
	
	$export($export.P + $export.U + $export.F * __webpack_require__(7)(function () {
	  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
	}), ARRAY_BUFFER, {
	  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
	  slice: function slice(start, end) {
	    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix
	    var len = anObject(this).byteLength;
	    var first = toAbsoluteIndex(start, len);
	    var final = toAbsoluteIndex(end === undefined ? len : end, len);
	    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(final - first));
	    var viewS = new $DataView(this);
	    var viewT = new $DataView(result);
	    var index = 0;
	    while (first < final) {
	      viewT.setUint8(index++, viewS.getUint8(first++));
	    } return result;
	  }
	});
	
	__webpack_require__(193)(ARRAY_BUFFER);


/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(4);
	var hide = __webpack_require__(10);
	var uid = __webpack_require__(19);
	var TYPED = uid('typed_array');
	var VIEW = uid('view');
	var ABV = !!(global.ArrayBuffer && global.DataView);
	var CONSTR = ABV;
	var i = 0;
	var l = 9;
	var Typed;
	
	var TypedArrayConstructors = (
	  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
	).split(',');
	
	while (i < l) {
	  if (Typed = global[TypedArrayConstructors[i++]]) {
	    hide(Typed.prototype, TYPED, true);
	    hide(Typed.prototype, VIEW, true);
	  } else CONSTR = false;
	}
	
	module.exports = {
	  ABV: ABV,
	  CONSTR: CONSTR,
	  TYPED: TYPED,
	  VIEW: VIEW
	};


/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global = __webpack_require__(4);
	var DESCRIPTORS = __webpack_require__(6);
	var LIBRARY = __webpack_require__(28);
	var $typed = __webpack_require__(224);
	var hide = __webpack_require__(10);
	var redefineAll = __webpack_require__(214);
	var fails = __webpack_require__(7);
	var anInstance = __webpack_require__(206);
	var toInteger = __webpack_require__(38);
	var toLength = __webpack_require__(37);
	var toIndex = __webpack_require__(226);
	var gOPN = __webpack_require__(49).f;
	var dP = __webpack_require__(11).f;
	var arrayFill = __webpack_require__(189);
	var setToStringTag = __webpack_require__(24);
	var ARRAY_BUFFER = 'ArrayBuffer';
	var DATA_VIEW = 'DataView';
	var PROTOTYPE = 'prototype';
	var WRONG_LENGTH = 'Wrong length!';
	var WRONG_INDEX = 'Wrong index!';
	var $ArrayBuffer = global[ARRAY_BUFFER];
	var $DataView = global[DATA_VIEW];
	var Math = global.Math;
	var RangeError = global.RangeError;
	// eslint-disable-next-line no-shadow-restricted-names
	var Infinity = global.Infinity;
	var BaseBuffer = $ArrayBuffer;
	var abs = Math.abs;
	var pow = Math.pow;
	var floor = Math.floor;
	var log = Math.log;
	var LN2 = Math.LN2;
	var BUFFER = 'buffer';
	var BYTE_LENGTH = 'byteLength';
	var BYTE_OFFSET = 'byteOffset';
	var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
	var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
	var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;
	
	// IEEE754 conversions based on https://github.com/feross/ieee754
	function packIEEE754(value, mLen, nBytes) {
	  var buffer = new Array(nBytes);
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
	  var i = 0;
	  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
	  var e, m, c;
	  value = abs(value);
	  // eslint-disable-next-line no-self-compare
	  if (value != value || value === Infinity) {
	    // eslint-disable-next-line no-self-compare
	    m = value != value ? 1 : 0;
	    e = eMax;
	  } else {
	    e = floor(log(value) / LN2);
	    if (value * (c = pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }
	    if (e + eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * pow(2, 1 - eBias);
	    }
	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }
	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * pow(2, eBias - 1) * pow(2, mLen);
	      e = 0;
	    }
	  }
	  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
	  e = e << mLen | m;
	  eLen += mLen;
	  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
	  buffer[--i] |= s * 128;
	  return buffer;
	}
	function unpackIEEE754(buffer, mLen, nBytes) {
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var nBits = eLen - 7;
	  var i = nBytes - 1;
	  var s = buffer[i--];
	  var e = s & 127;
	  var m;
	  s >>= 7;
	  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
	  m = e & (1 << -nBits) - 1;
	  e >>= -nBits;
	  nBits += mLen;
	  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : s ? -Infinity : Infinity;
	  } else {
	    m = m + pow(2, mLen);
	    e = e - eBias;
	  } return (s ? -1 : 1) * m * pow(2, e - mLen);
	}
	
	function unpackI32(bytes) {
	  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
	}
	function packI8(it) {
	  return [it & 0xff];
	}
	function packI16(it) {
	  return [it & 0xff, it >> 8 & 0xff];
	}
	function packI32(it) {
	  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
	}
	function packF64(it) {
	  return packIEEE754(it, 52, 8);
	}
	function packF32(it) {
	  return packIEEE754(it, 23, 4);
	}
	
	function addGetter(C, key, internal) {
	  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });
	}
	
	function get(view, bytes, index, isLittleEndian) {
	  var numIndex = +index;
	  var intIndex = toIndex(numIndex);
	  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
	  var store = view[$BUFFER]._b;
	  var start = intIndex + view[$OFFSET];
	  var pack = store.slice(start, start + bytes);
	  return isLittleEndian ? pack : pack.reverse();
	}
	function set(view, bytes, index, conversion, value, isLittleEndian) {
	  var numIndex = +index;
	  var intIndex = toIndex(numIndex);
	  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
	  var store = view[$BUFFER]._b;
	  var start = intIndex + view[$OFFSET];
	  var pack = conversion(+value);
	  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
	}
	
	if (!$typed.ABV) {
	  $ArrayBuffer = function ArrayBuffer(length) {
	    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
	    var byteLength = toIndex(length);
	    this._b = arrayFill.call(new Array(byteLength), 0);
	    this[$LENGTH] = byteLength;
	  };
	
	  $DataView = function DataView(buffer, byteOffset, byteLength) {
	    anInstance(this, $DataView, DATA_VIEW);
	    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
	    var bufferLength = buffer[$LENGTH];
	    var offset = toInteger(byteOffset);
	    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
	    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
	    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
	    this[$BUFFER] = buffer;
	    this[$OFFSET] = offset;
	    this[$LENGTH] = byteLength;
	  };
	
	  if (DESCRIPTORS) {
	    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
	    addGetter($DataView, BUFFER, '_b');
	    addGetter($DataView, BYTE_LENGTH, '_l');
	    addGetter($DataView, BYTE_OFFSET, '_o');
	  }
	
	  redefineAll($DataView[PROTOTYPE], {
	    getInt8: function getInt8(byteOffset) {
	      return get(this, 1, byteOffset)[0] << 24 >> 24;
	    },
	    getUint8: function getUint8(byteOffset) {
	      return get(this, 1, byteOffset)[0];
	    },
	    getInt16: function getInt16(byteOffset /* , littleEndian */) {
	      var bytes = get(this, 2, byteOffset, arguments[1]);
	      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
	    },
	    getUint16: function getUint16(byteOffset /* , littleEndian */) {
	      var bytes = get(this, 2, byteOffset, arguments[1]);
	      return bytes[1] << 8 | bytes[0];
	    },
	    getInt32: function getInt32(byteOffset /* , littleEndian */) {
	      return unpackI32(get(this, 4, byteOffset, arguments[1]));
	    },
	    getUint32: function getUint32(byteOffset /* , littleEndian */) {
	      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
	    },
	    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
	      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
	    },
	    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
	      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
	    },
	    setInt8: function setInt8(byteOffset, value) {
	      set(this, 1, byteOffset, packI8, value);
	    },
	    setUint8: function setUint8(byteOffset, value) {
	      set(this, 1, byteOffset, packI8, value);
	    },
	    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
	      set(this, 2, byteOffset, packI16, value, arguments[2]);
	    },
	    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
	      set(this, 2, byteOffset, packI16, value, arguments[2]);
	    },
	    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
	      set(this, 4, byteOffset, packI32, value, arguments[2]);
	    },
	    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
	      set(this, 4, byteOffset, packI32, value, arguments[2]);
	    },
	    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
	      set(this, 4, byteOffset, packF32, value, arguments[2]);
	    },
	    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
	      set(this, 8, byteOffset, packF64, value, arguments[2]);
	    }
	  });
	} else {
	  if (!fails(function () {
	    $ArrayBuffer(1);
	  }) || !fails(function () {
	    new $ArrayBuffer(-1); // eslint-disable-line no-new
	  }) || fails(function () {
	    new $ArrayBuffer(); // eslint-disable-line no-new
	    new $ArrayBuffer(1.5); // eslint-disable-line no-new
	    new $ArrayBuffer(NaN); // eslint-disable-line no-new
	    return $ArrayBuffer.name != ARRAY_BUFFER;
	  })) {
	    $ArrayBuffer = function ArrayBuffer(length) {
	      anInstance(this, $ArrayBuffer);
	      return new BaseBuffer(toIndex(length));
	    };
	    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
	    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
	      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
	    }
	    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
	  }
	  // iOS Safari 7.x bug
	  var view = new $DataView(new $ArrayBuffer(2));
	  var $setInt8 = $DataView[PROTOTYPE].setInt8;
	  view.setInt8(0, 2147483648);
	  view.setInt8(1, 2147483649);
	  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
	    setInt8: function setInt8(byteOffset, value) {
	      $setInt8.call(this, byteOffset, value << 24 >> 24);
	    },
	    setUint8: function setUint8(byteOffset, value) {
	      $setInt8.call(this, byteOffset, value << 24 >> 24);
	    }
	  }, true);
	}
	setToStringTag($ArrayBuffer, ARRAY_BUFFER);
	setToStringTag($DataView, DATA_VIEW);
	hide($DataView[PROTOTYPE], $typed.VIEW, true);
	exports[ARRAY_BUFFER] = $ArrayBuffer;
	exports[DATA_VIEW] = $DataView;


/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	// https://tc39.github.io/ecma262/#sec-toindex
	var toInteger = __webpack_require__(38);
	var toLength = __webpack_require__(37);
	module.exports = function (it) {
	  if (it === undefined) return 0;
	  var number = toInteger(it);
	  var length = toLength(number);
	  if (number !== length) throw RangeError('Wrong length!');
	  return length;
	};


/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	$export($export.G + $export.W + $export.F * !__webpack_require__(224).ABV, {
	  DataView: __webpack_require__(225).DataView
	});


/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(229)('Int8', 1, function (init) {
	  return function Int8Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});


/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	if (__webpack_require__(6)) {
	  var LIBRARY = __webpack_require__(28);
	  var global = __webpack_require__(4);
	  var fails = __webpack_require__(7);
	  var $export = __webpack_require__(8);
	  var $typed = __webpack_require__(224);
	  var $buffer = __webpack_require__(225);
	  var ctx = __webpack_require__(20);
	  var anInstance = __webpack_require__(206);
	  var propertyDesc = __webpack_require__(17);
	  var hide = __webpack_require__(10);
	  var redefineAll = __webpack_require__(214);
	  var toInteger = __webpack_require__(38);
	  var toLength = __webpack_require__(37);
	  var toIndex = __webpack_require__(226);
	  var toAbsoluteIndex = __webpack_require__(39);
	  var toPrimitive = __webpack_require__(16);
	  var has = __webpack_require__(5);
	  var classof = __webpack_require__(74);
	  var isObject = __webpack_require__(13);
	  var toObject = __webpack_require__(57);
	  var isArrayIter = __webpack_require__(163);
	  var create = __webpack_require__(45);
	  var getPrototypeOf = __webpack_require__(58);
	  var gOPN = __webpack_require__(49).f;
	  var getIterFn = __webpack_require__(165);
	  var uid = __webpack_require__(19);
	  var wks = __webpack_require__(25);
	  var createArrayMethod = __webpack_require__(173);
	  var createArrayIncludes = __webpack_require__(36);
	  var speciesConstructor = __webpack_require__(208);
	  var ArrayIterators = __webpack_require__(194);
	  var Iterators = __webpack_require__(129);
	  var $iterDetect = __webpack_require__(166);
	  var setSpecies = __webpack_require__(193);
	  var arrayFill = __webpack_require__(189);
	  var arrayCopyWithin = __webpack_require__(186);
	  var $DP = __webpack_require__(11);
	  var $GOPD = __webpack_require__(50);
	  var dP = $DP.f;
	  var gOPD = $GOPD.f;
	  var RangeError = global.RangeError;
	  var TypeError = global.TypeError;
	  var Uint8Array = global.Uint8Array;
	  var ARRAY_BUFFER = 'ArrayBuffer';
	  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
	  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
	  var PROTOTYPE = 'prototype';
	  var ArrayProto = Array[PROTOTYPE];
	  var $ArrayBuffer = $buffer.ArrayBuffer;
	  var $DataView = $buffer.DataView;
	  var arrayForEach = createArrayMethod(0);
	  var arrayFilter = createArrayMethod(2);
	  var arraySome = createArrayMethod(3);
	  var arrayEvery = createArrayMethod(4);
	  var arrayFind = createArrayMethod(5);
	  var arrayFindIndex = createArrayMethod(6);
	  var arrayIncludes = createArrayIncludes(true);
	  var arrayIndexOf = createArrayIncludes(false);
	  var arrayValues = ArrayIterators.values;
	  var arrayKeys = ArrayIterators.keys;
	  var arrayEntries = ArrayIterators.entries;
	  var arrayLastIndexOf = ArrayProto.lastIndexOf;
	  var arrayReduce = ArrayProto.reduce;
	  var arrayReduceRight = ArrayProto.reduceRight;
	  var arrayJoin = ArrayProto.join;
	  var arraySort = ArrayProto.sort;
	  var arraySlice = ArrayProto.slice;
	  var arrayToString = ArrayProto.toString;
	  var arrayToLocaleString = ArrayProto.toLocaleString;
	  var ITERATOR = wks('iterator');
	  var TAG = wks('toStringTag');
	  var TYPED_CONSTRUCTOR = uid('typed_constructor');
	  var DEF_CONSTRUCTOR = uid('def_constructor');
	  var ALL_CONSTRUCTORS = $typed.CONSTR;
	  var TYPED_ARRAY = $typed.TYPED;
	  var VIEW = $typed.VIEW;
	  var WRONG_LENGTH = 'Wrong length!';
	
	  var $map = createArrayMethod(1, function (O, length) {
	    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
	  });
	
	  var LITTLE_ENDIAN = fails(function () {
	    // eslint-disable-next-line no-undef
	    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
	  });
	
	  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
	    new Uint8Array(1).set({});
	  });
	
	  var toOffset = function (it, BYTES) {
	    var offset = toInteger(it);
	    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
	    return offset;
	  };
	
	  var validate = function (it) {
	    if (isObject(it) && TYPED_ARRAY in it) return it;
	    throw TypeError(it + ' is not a typed array!');
	  };
	
	  var allocate = function (C, length) {
	    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
	      throw TypeError('It is not a typed array constructor!');
	    } return new C(length);
	  };
	
	  var speciesFromList = function (O, list) {
	    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
	  };
	
	  var fromList = function (C, list) {
	    var index = 0;
	    var length = list.length;
	    var result = allocate(C, length);
	    while (length > index) result[index] = list[index++];
	    return result;
	  };
	
	  var addGetter = function (it, key, internal) {
	    dP(it, key, { get: function () { return this._d[internal]; } });
	  };
	
	  var $from = function from(source /* , mapfn, thisArg */) {
	    var O = toObject(source);
	    var aLen = arguments.length;
	    var mapfn = aLen > 1 ? arguments[1] : undefined;
	    var mapping = mapfn !== undefined;
	    var iterFn = getIterFn(O);
	    var i, length, values, result, step, iterator;
	    if (iterFn != undefined && !isArrayIter(iterFn)) {
	      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
	        values.push(step.value);
	      } O = values;
	    }
	    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
	    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
	      result[i] = mapping ? mapfn(O[i], i) : O[i];
	    }
	    return result;
	  };
	
	  var $of = function of(/* ...items */) {
	    var index = 0;
	    var length = arguments.length;
	    var result = allocate(this, length);
	    while (length > index) result[index] = arguments[index++];
	    return result;
	  };
	
	  // iOS Safari 6.x fails here
	  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });
	
	  var $toLocaleString = function toLocaleString() {
	    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
	  };
	
	  var proto = {
	    copyWithin: function copyWithin(target, start /* , end */) {
	      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    every: function every(callbackfn /* , thisArg */) {
	      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars
	      return arrayFill.apply(validate(this), arguments);
	    },
	    filter: function filter(callbackfn /* , thisArg */) {
	      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
	        arguments.length > 1 ? arguments[1] : undefined));
	    },
	    find: function find(predicate /* , thisArg */) {
	      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    findIndex: function findIndex(predicate /* , thisArg */) {
	      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    forEach: function forEach(callbackfn /* , thisArg */) {
	      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    indexOf: function indexOf(searchElement /* , fromIndex */) {
	      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    includes: function includes(searchElement /* , fromIndex */) {
	      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    join: function join(separator) { // eslint-disable-line no-unused-vars
	      return arrayJoin.apply(validate(this), arguments);
	    },
	    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars
	      return arrayLastIndexOf.apply(validate(this), arguments);
	    },
	    map: function map(mapfn /* , thisArg */) {
	      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
	      return arrayReduce.apply(validate(this), arguments);
	    },
	    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
	      return arrayReduceRight.apply(validate(this), arguments);
	    },
	    reverse: function reverse() {
	      var that = this;
	      var length = validate(that).length;
	      var middle = Math.floor(length / 2);
	      var index = 0;
	      var value;
	      while (index < middle) {
	        value = that[index];
	        that[index++] = that[--length];
	        that[length] = value;
	      } return that;
	    },
	    some: function some(callbackfn /* , thisArg */) {
	      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    sort: function sort(comparefn) {
	      return arraySort.call(validate(this), comparefn);
	    },
	    subarray: function subarray(begin, end) {
	      var O = validate(this);
	      var length = O.length;
	      var $begin = toAbsoluteIndex(begin, length);
	      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
	        O.buffer,
	        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
	        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)
	      );
	    }
	  };
	
	  var $slice = function slice(start, end) {
	    return speciesFromList(this, arraySlice.call(validate(this), start, end));
	  };
	
	  var $set = function set(arrayLike /* , offset */) {
	    validate(this);
	    var offset = toOffset(arguments[1], 1);
	    var length = this.length;
	    var src = toObject(arrayLike);
	    var len = toLength(src.length);
	    var index = 0;
	    if (len + offset > length) throw RangeError(WRONG_LENGTH);
	    while (index < len) this[offset + index] = src[index++];
	  };
	
	  var $iterators = {
	    entries: function entries() {
	      return arrayEntries.call(validate(this));
	    },
	    keys: function keys() {
	      return arrayKeys.call(validate(this));
	    },
	    values: function values() {
	      return arrayValues.call(validate(this));
	    }
	  };
	
	  var isTAIndex = function (target, key) {
	    return isObject(target)
	      && target[TYPED_ARRAY]
	      && typeof key != 'symbol'
	      && key in target
	      && String(+key) == String(key);
	  };
	  var $getDesc = function getOwnPropertyDescriptor(target, key) {
	    return isTAIndex(target, key = toPrimitive(key, true))
	      ? propertyDesc(2, target[key])
	      : gOPD(target, key);
	  };
	  var $setDesc = function defineProperty(target, key, desc) {
	    if (isTAIndex(target, key = toPrimitive(key, true))
	      && isObject(desc)
	      && has(desc, 'value')
	      && !has(desc, 'get')
	      && !has(desc, 'set')
	      // TODO: add validation descriptor w/o calling accessors
	      && !desc.configurable
	      && (!has(desc, 'writable') || desc.writable)
	      && (!has(desc, 'enumerable') || desc.enumerable)
	    ) {
	      target[key] = desc.value;
	      return target;
	    } return dP(target, key, desc);
	  };
	
	  if (!ALL_CONSTRUCTORS) {
	    $GOPD.f = $getDesc;
	    $DP.f = $setDesc;
	  }
	
	  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
	    getOwnPropertyDescriptor: $getDesc,
	    defineProperty: $setDesc
	  });
	
	  if (fails(function () { arrayToString.call({}); })) {
	    arrayToString = arrayToLocaleString = function toString() {
	      return arrayJoin.call(this);
	    };
	  }
	
	  var $TypedArrayPrototype$ = redefineAll({}, proto);
	  redefineAll($TypedArrayPrototype$, $iterators);
	  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
	  redefineAll($TypedArrayPrototype$, {
	    slice: $slice,
	    set: $set,
	    constructor: function () { /* noop */ },
	    toString: arrayToString,
	    toLocaleString: $toLocaleString
	  });
	  addGetter($TypedArrayPrototype$, 'buffer', 'b');
	  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
	  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
	  addGetter($TypedArrayPrototype$, 'length', 'e');
	  dP($TypedArrayPrototype$, TAG, {
	    get: function () { return this[TYPED_ARRAY]; }
	  });
	
	  // eslint-disable-next-line max-statements
	  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
	    CLAMPED = !!CLAMPED;
	    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
	    var GETTER = 'get' + KEY;
	    var SETTER = 'set' + KEY;
	    var TypedArray = global[NAME];
	    var Base = TypedArray || {};
	    var TAC = TypedArray && getPrototypeOf(TypedArray);
	    var FORCED = !TypedArray || !$typed.ABV;
	    var O = {};
	    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
	    var getter = function (that, index) {
	      var data = that._d;
	      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
	    };
	    var setter = function (that, index, value) {
	      var data = that._d;
	      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
	      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
	    };
	    var addElement = function (that, index) {
	      dP(that, index, {
	        get: function () {
	          return getter(this, index);
	        },
	        set: function (value) {
	          return setter(this, index, value);
	        },
	        enumerable: true
	      });
	    };
	    if (FORCED) {
	      TypedArray = wrapper(function (that, data, $offset, $length) {
	        anInstance(that, TypedArray, NAME, '_d');
	        var index = 0;
	        var offset = 0;
	        var buffer, byteLength, length, klass;
	        if (!isObject(data)) {
	          length = toIndex(data);
	          byteLength = length * BYTES;
	          buffer = new $ArrayBuffer(byteLength);
	        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
	          buffer = data;
	          offset = toOffset($offset, BYTES);
	          var $len = data.byteLength;
	          if ($length === undefined) {
	            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
	            byteLength = $len - offset;
	            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
	          } else {
	            byteLength = toLength($length) * BYTES;
	            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
	          }
	          length = byteLength / BYTES;
	        } else if (TYPED_ARRAY in data) {
	          return fromList(TypedArray, data);
	        } else {
	          return $from.call(TypedArray, data);
	        }
	        hide(that, '_d', {
	          b: buffer,
	          o: offset,
	          l: byteLength,
	          e: length,
	          v: new $DataView(buffer)
	        });
	        while (index < length) addElement(that, index++);
	      });
	      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
	      hide(TypedArrayPrototype, 'constructor', TypedArray);
	    } else if (!fails(function () {
	      TypedArray(1);
	    }) || !fails(function () {
	      new TypedArray(-1); // eslint-disable-line no-new
	    }) || !$iterDetect(function (iter) {
	      new TypedArray(); // eslint-disable-line no-new
	      new TypedArray(null); // eslint-disable-line no-new
	      new TypedArray(1.5); // eslint-disable-line no-new
	      new TypedArray(iter); // eslint-disable-line no-new
	    }, true)) {
	      TypedArray = wrapper(function (that, data, $offset, $length) {
	        anInstance(that, TypedArray, NAME);
	        var klass;
	        // `ws` module bug, temporarily remove validation length for Uint8Array
	        // https://github.com/websockets/ws/pull/645
	        if (!isObject(data)) return new Base(toIndex(data));
	        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
	          return $length !== undefined
	            ? new Base(data, toOffset($offset, BYTES), $length)
	            : $offset !== undefined
	              ? new Base(data, toOffset($offset, BYTES))
	              : new Base(data);
	        }
	        if (TYPED_ARRAY in data) return fromList(TypedArray, data);
	        return $from.call(TypedArray, data);
	      });
	      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
	        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
	      });
	      TypedArray[PROTOTYPE] = TypedArrayPrototype;
	      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
	    }
	    var $nativeIterator = TypedArrayPrototype[ITERATOR];
	    var CORRECT_ITER_NAME = !!$nativeIterator
	      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
	    var $iterator = $iterators.values;
	    hide(TypedArray, TYPED_CONSTRUCTOR, true);
	    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
	    hide(TypedArrayPrototype, VIEW, true);
	    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);
	
	    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
	      dP(TypedArrayPrototype, TAG, {
	        get: function () { return NAME; }
	      });
	    }
	
	    O[NAME] = TypedArray;
	
	    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);
	
	    $export($export.S, NAME, {
	      BYTES_PER_ELEMENT: BYTES
	    });
	
	    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {
	      from: $from,
	      of: $of
	    });
	
	    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);
	
	    $export($export.P, NAME, proto);
	
	    setSpecies(NAME);
	
	    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });
	
	    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);
	
	    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;
	
	    $export($export.P + $export.F * fails(function () {
	      new TypedArray(1).slice();
	    }), NAME, { slice: $slice });
	
	    $export($export.P + $export.F * (fails(function () {
	      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
	    }) || !fails(function () {
	      TypedArrayPrototype.toLocaleString.call([1, 2]);
	    })), NAME, { toLocaleString: $toLocaleString });
	
	    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
	    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
	  };
	} else module.exports = function () { /* empty */ };


/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(229)('Uint8', 1, function (init) {
	  return function Uint8Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});


/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(229)('Uint8', 1, function (init) {
	  return function Uint8ClampedArray(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	}, true);


/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(229)('Int16', 2, function (init) {
	  return function Int16Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});


/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(229)('Uint16', 2, function (init) {
	  return function Uint16Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});


/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(229)('Int32', 4, function (init) {
	  return function Int32Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});


/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(229)('Uint32', 4, function (init) {
	  return function Uint32Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});


/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(229)('Float32', 4, function (init) {
	  return function Float32Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});


/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(229)('Float64', 8, function (init) {
	  return function Float64Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});


/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
	var $export = __webpack_require__(8);
	var aFunction = __webpack_require__(21);
	var anObject = __webpack_require__(12);
	var rApply = (__webpack_require__(4).Reflect || {}).apply;
	var fApply = Function.apply;
	// MS Edge argumentsList argument is optional
	$export($export.S + $export.F * !__webpack_require__(7)(function () {
	  rApply(function () { /* empty */ });
	}), 'Reflect', {
	  apply: function apply(target, thisArgument, argumentsList) {
	    var T = aFunction(target);
	    var L = anObject(argumentsList);
	    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
	  }
	});


/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
	var $export = __webpack_require__(8);
	var create = __webpack_require__(45);
	var aFunction = __webpack_require__(21);
	var anObject = __webpack_require__(12);
	var isObject = __webpack_require__(13);
	var fails = __webpack_require__(7);
	var bind = __webpack_require__(76);
	var rConstruct = (__webpack_require__(4).Reflect || {}).construct;
	
	// MS Edge supports only 2 arguments and argumentsList argument is optional
	// FF Nightly sets third argument as `new.target`, but does not create `this` from it
	var NEW_TARGET_BUG = fails(function () {
	  function F() { /* empty */ }
	  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);
	});
	var ARGS_BUG = !fails(function () {
	  rConstruct(function () { /* empty */ });
	});
	
	$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
	  construct: function construct(Target, args /* , newTarget */) {
	    aFunction(Target);
	    anObject(args);
	    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
	    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
	    if (Target == newTarget) {
	      // w/o altered newTarget, optimization for 0-4 arguments
	      switch (args.length) {
	        case 0: return new Target();
	        case 1: return new Target(args[0]);
	        case 2: return new Target(args[0], args[1]);
	        case 3: return new Target(args[0], args[1], args[2]);
	        case 4: return new Target(args[0], args[1], args[2], args[3]);
	      }
	      // w/o altered newTarget, lot of arguments case
	      var $args = [null];
	      $args.push.apply($args, args);
	      return new (bind.apply(Target, $args))();
	    }
	    // with altered newTarget, not support built-in constructors
	    var proto = newTarget.prototype;
	    var instance = create(isObject(proto) ? proto : Object.prototype);
	    var result = Function.apply.call(Target, instance, args);
	    return isObject(result) ? result : instance;
	  }
	});


/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
	var dP = __webpack_require__(11);
	var $export = __webpack_require__(8);
	var anObject = __webpack_require__(12);
	var toPrimitive = __webpack_require__(16);
	
	// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
	$export($export.S + $export.F * __webpack_require__(7)(function () {
	  // eslint-disable-next-line no-undef
	  Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });
	}), 'Reflect', {
	  defineProperty: function defineProperty(target, propertyKey, attributes) {
	    anObject(target);
	    propertyKey = toPrimitive(propertyKey, true);
	    anObject(attributes);
	    try {
	      dP.f(target, propertyKey, attributes);
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }
	});


/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.4 Reflect.deleteProperty(target, propertyKey)
	var $export = __webpack_require__(8);
	var gOPD = __webpack_require__(50).f;
	var anObject = __webpack_require__(12);
	
	$export($export.S, 'Reflect', {
	  deleteProperty: function deleteProperty(target, propertyKey) {
	    var desc = gOPD(anObject(target), propertyKey);
	    return desc && !desc.configurable ? false : delete target[propertyKey];
	  }
	});


/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 26.1.5 Reflect.enumerate(target)
	var $export = __webpack_require__(8);
	var anObject = __webpack_require__(12);
	var Enumerate = function (iterated) {
	  this._t = anObject(iterated); // target
	  this._i = 0;                  // next index
	  var keys = this._k = [];      // keys
	  var key;
	  for (key in iterated) keys.push(key);
	};
	__webpack_require__(130)(Enumerate, 'Object', function () {
	  var that = this;
	  var keys = that._k;
	  var key;
	  do {
	    if (that._i >= keys.length) return { value: undefined, done: true };
	  } while (!((key = keys[that._i++]) in that._t));
	  return { value: key, done: false };
	});
	
	$export($export.S, 'Reflect', {
	  enumerate: function enumerate(target) {
	    return new Enumerate(target);
	  }
	});


/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.6 Reflect.get(target, propertyKey [, receiver])
	var gOPD = __webpack_require__(50);
	var getPrototypeOf = __webpack_require__(58);
	var has = __webpack_require__(5);
	var $export = __webpack_require__(8);
	var isObject = __webpack_require__(13);
	var anObject = __webpack_require__(12);
	
	function get(target, propertyKey /* , receiver */) {
	  var receiver = arguments.length < 3 ? target : arguments[2];
	  var desc, proto;
	  if (anObject(target) === receiver) return target[propertyKey];
	  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value')
	    ? desc.value
	    : desc.get !== undefined
	      ? desc.get.call(receiver)
	      : undefined;
	  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
	}
	
	$export($export.S, 'Reflect', { get: get });


/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
	var gOPD = __webpack_require__(50);
	var $export = __webpack_require__(8);
	var anObject = __webpack_require__(12);
	
	$export($export.S, 'Reflect', {
	  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
	    return gOPD.f(anObject(target), propertyKey);
	  }
	});


/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.8 Reflect.getPrototypeOf(target)
	var $export = __webpack_require__(8);
	var getProto = __webpack_require__(58);
	var anObject = __webpack_require__(12);
	
	$export($export.S, 'Reflect', {
	  getPrototypeOf: function getPrototypeOf(target) {
	    return getProto(anObject(target));
	  }
	});


/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.9 Reflect.has(target, propertyKey)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Reflect', {
	  has: function has(target, propertyKey) {
	    return propertyKey in target;
	  }
	});


/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.10 Reflect.isExtensible(target)
	var $export = __webpack_require__(8);
	var anObject = __webpack_require__(12);
	var $isExtensible = Object.isExtensible;
	
	$export($export.S, 'Reflect', {
	  isExtensible: function isExtensible(target) {
	    anObject(target);
	    return $isExtensible ? $isExtensible(target) : true;
	  }
	});


/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.11 Reflect.ownKeys(target)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Reflect', { ownKeys: __webpack_require__(249) });


/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	// all object keys, includes non-enumerable and symbols
	var gOPN = __webpack_require__(49);
	var gOPS = __webpack_require__(42);
	var anObject = __webpack_require__(12);
	var Reflect = __webpack_require__(4).Reflect;
	module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
	  var keys = gOPN.f(anObject(it));
	  var getSymbols = gOPS.f;
	  return getSymbols ? keys.concat(getSymbols(it)) : keys;
	};


/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.12 Reflect.preventExtensions(target)
	var $export = __webpack_require__(8);
	var anObject = __webpack_require__(12);
	var $preventExtensions = Object.preventExtensions;
	
	$export($export.S, 'Reflect', {
	  preventExtensions: function preventExtensions(target) {
	    anObject(target);
	    try {
	      if ($preventExtensions) $preventExtensions(target);
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }
	});


/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
	var dP = __webpack_require__(11);
	var gOPD = __webpack_require__(50);
	var getPrototypeOf = __webpack_require__(58);
	var has = __webpack_require__(5);
	var $export = __webpack_require__(8);
	var createDesc = __webpack_require__(17);
	var anObject = __webpack_require__(12);
	var isObject = __webpack_require__(13);
	
	function set(target, propertyKey, V /* , receiver */) {
	  var receiver = arguments.length < 4 ? target : arguments[3];
	  var ownDesc = gOPD.f(anObject(target), propertyKey);
	  var existingDescriptor, proto;
	  if (!ownDesc) {
	    if (isObject(proto = getPrototypeOf(target))) {
	      return set(proto, propertyKey, V, receiver);
	    }
	    ownDesc = createDesc(0);
	  }
	  if (has(ownDesc, 'value')) {
	    if (ownDesc.writable === false || !isObject(receiver)) return false;
	    if (existingDescriptor = gOPD.f(receiver, propertyKey)) {
	      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
	      existingDescriptor.value = V;
	      dP.f(receiver, propertyKey, existingDescriptor);
	    } else dP.f(receiver, propertyKey, createDesc(0, V));
	    return true;
	  }
	  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
	}
	
	$export($export.S, 'Reflect', { set: set });


/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.14 Reflect.setPrototypeOf(target, proto)
	var $export = __webpack_require__(8);
	var setProto = __webpack_require__(72);
	
	if (setProto) $export($export.S, 'Reflect', {
	  setPrototypeOf: function setPrototypeOf(target, proto) {
	    setProto.check(target, proto);
	    try {
	      setProto.set(target, proto);
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }
	});


/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/tc39/Array.prototype.includes
	var $export = __webpack_require__(8);
	var $includes = __webpack_require__(36)(true);
	
	$export($export.P, 'Array', {
	  includes: function includes(el /* , fromIndex = 0 */) {
	    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	
	__webpack_require__(187)('includes');


/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap
	var $export = __webpack_require__(8);
	var flattenIntoArray = __webpack_require__(255);
	var toObject = __webpack_require__(57);
	var toLength = __webpack_require__(37);
	var aFunction = __webpack_require__(21);
	var arraySpeciesCreate = __webpack_require__(174);
	
	$export($export.P, 'Array', {
	  flatMap: function flatMap(callbackfn /* , thisArg */) {
	    var O = toObject(this);
	    var sourceLen, A;
	    aFunction(callbackfn);
	    sourceLen = toLength(O.length);
	    A = arraySpeciesCreate(O, 0);
	    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
	    return A;
	  }
	});
	
	__webpack_require__(187)('flatMap');


/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
	var isArray = __webpack_require__(44);
	var isObject = __webpack_require__(13);
	var toLength = __webpack_require__(37);
	var ctx = __webpack_require__(20);
	var IS_CONCAT_SPREADABLE = __webpack_require__(25)('isConcatSpreadable');
	
	function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
	  var targetIndex = start;
	  var sourceIndex = 0;
	  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
	  var element, spreadable;
	
	  while (sourceIndex < sourceLen) {
	    if (sourceIndex in source) {
	      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];
	
	      spreadable = false;
	      if (isObject(element)) {
	        spreadable = element[IS_CONCAT_SPREADABLE];
	        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
	      }
	
	      if (spreadable && depth > 0) {
	        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
	      } else {
	        if (targetIndex >= 0x1fffffffffffff) throw TypeError();
	        target[targetIndex] = element;
	      }
	
	      targetIndex++;
	    }
	    sourceIndex++;
	  }
	  return targetIndex;
	}
	
	module.exports = flattenIntoArray;


/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten
	var $export = __webpack_require__(8);
	var flattenIntoArray = __webpack_require__(255);
	var toObject = __webpack_require__(57);
	var toLength = __webpack_require__(37);
	var toInteger = __webpack_require__(38);
	var arraySpeciesCreate = __webpack_require__(174);
	
	$export($export.P, 'Array', {
	  flatten: function flatten(/* depthArg = 1 */) {
	    var depthArg = arguments[0];
	    var O = toObject(this);
	    var sourceLen = toLength(O.length);
	    var A = arraySpeciesCreate(O, 0);
	    flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
	    return A;
	  }
	});
	
	__webpack_require__(187)('flatten');


/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/mathiasbynens/String.prototype.at
	var $export = __webpack_require__(8);
	var $at = __webpack_require__(127)(true);
	
	$export($export.P, 'String', {
	  at: function at(pos) {
	    return $at(this, pos);
	  }
	});


/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/tc39/proposal-string-pad-start-end
	var $export = __webpack_require__(8);
	var $pad = __webpack_require__(259);
	var userAgent = __webpack_require__(260);
	
	// https://github.com/zloirock/core-js/issues/280
	$export($export.P + $export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(userAgent), 'String', {
	  padStart: function padStart(maxLength /* , fillString = ' ' */) {
	    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
	  }
	});


/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-string-pad-start-end
	var toLength = __webpack_require__(37);
	var repeat = __webpack_require__(90);
	var defined = __webpack_require__(35);
	
	module.exports = function (that, maxLength, fillString, left) {
	  var S = String(defined(that));
	  var stringLength = S.length;
	  var fillStr = fillString === undefined ? ' ' : String(fillString);
	  var intMaxLength = toLength(maxLength);
	  if (intMaxLength <= stringLength || fillStr == '') return S;
	  var fillLen = intMaxLength - stringLength;
	  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
	  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
	  return left ? stringFiller + S : S + stringFiller;
	};


/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(4);
	var navigator = global.navigator;
	
	module.exports = navigator && navigator.userAgent || '';


/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/tc39/proposal-string-pad-start-end
	var $export = __webpack_require__(8);
	var $pad = __webpack_require__(259);
	var userAgent = __webpack_require__(260);
	
	// https://github.com/zloirock/core-js/issues/280
	$export($export.P + $export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(userAgent), 'String', {
	  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
	    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
	  }
	});


/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
	__webpack_require__(82)('trimLeft', function ($trim) {
	  return function trimLeft() {
	    return $trim(this, 1);
	  };
	}, 'trimStart');


/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
	__webpack_require__(82)('trimRight', function ($trim) {
	  return function trimRight() {
	    return $trim(this, 2);
	  };
	}, 'trimEnd');


/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://tc39.github.io/String.prototype.matchAll/
	var $export = __webpack_require__(8);
	var defined = __webpack_require__(35);
	var toLength = __webpack_require__(37);
	var isRegExp = __webpack_require__(134);
	var getFlags = __webpack_require__(197);
	var RegExpProto = RegExp.prototype;
	
	var $RegExpStringIterator = function (regexp, string) {
	  this._r = regexp;
	  this._s = string;
	};
	
	__webpack_require__(130)($RegExpStringIterator, 'RegExp String', function next() {
	  var match = this._r.exec(this._s);
	  return { value: match, done: match === null };
	});
	
	$export($export.P, 'String', {
	  matchAll: function matchAll(regexp) {
	    defined(this);
	    if (!isRegExp(regexp)) throw TypeError(regexp + ' is not a regexp!');
	    var S = String(this);
	    var flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp);
	    var rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
	    rx.lastIndex = toLength(regexp.lastIndex);
	    return new $RegExpStringIterator(rx, S);
	  }
	});


/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(27)('asyncIterator');


/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(27)('observable');


/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-object-getownpropertydescriptors
	var $export = __webpack_require__(8);
	var ownKeys = __webpack_require__(249);
	var toIObject = __webpack_require__(32);
	var gOPD = __webpack_require__(50);
	var createProperty = __webpack_require__(164);
	
	$export($export.S, 'Object', {
	  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
	    var O = toIObject(object);
	    var getDesc = gOPD.f;
	    var keys = ownKeys(O);
	    var result = {};
	    var i = 0;
	    var key, desc;
	    while (keys.length > i) {
	      desc = getDesc(O, key = keys[i++]);
	      if (desc !== undefined) createProperty(result, key, desc);
	    }
	    return result;
	  }
	});


/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-object-values-entries
	var $export = __webpack_require__(8);
	var $values = __webpack_require__(269)(false);
	
	$export($export.S, 'Object', {
	  values: function values(it) {
	    return $values(it);
	  }
	});


/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	var getKeys = __webpack_require__(30);
	var toIObject = __webpack_require__(32);
	var isEnum = __webpack_require__(43).f;
	module.exports = function (isEntries) {
	  return function (it) {
	    var O = toIObject(it);
	    var keys = getKeys(O);
	    var length = keys.length;
	    var i = 0;
	    var result = [];
	    var key;
	    while (length > i) if (isEnum.call(O, key = keys[i++])) {
	      result.push(isEntries ? [key, O[key]] : O[key]);
	    } return result;
	  };
	};


/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-object-values-entries
	var $export = __webpack_require__(8);
	var $entries = __webpack_require__(269)(true);
	
	$export($export.S, 'Object', {
	  entries: function entries(it) {
	    return $entries(it);
	  }
	});


/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var toObject = __webpack_require__(57);
	var aFunction = __webpack_require__(21);
	var $defineProperty = __webpack_require__(11);
	
	// B.2.2.2 Object.prototype.__defineGetter__(P, getter)
	__webpack_require__(6) && $export($export.P + __webpack_require__(272), 'Object', {
	  __defineGetter__: function __defineGetter__(P, getter) {
	    $defineProperty.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true });
	  }
	});


/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// Forced replacement prototype accessors methods
	module.exports = __webpack_require__(28) || !__webpack_require__(7)(function () {
	  var K = Math.random();
	  // In FF throws only define methods
	  // eslint-disable-next-line no-undef, no-useless-call
	  __defineSetter__.call(null, K, function () { /* empty */ });
	  delete __webpack_require__(4)[K];
	});


/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var toObject = __webpack_require__(57);
	var aFunction = __webpack_require__(21);
	var $defineProperty = __webpack_require__(11);
	
	// B.2.2.3 Object.prototype.__defineSetter__(P, setter)
	__webpack_require__(6) && $export($export.P + __webpack_require__(272), 'Object', {
	  __defineSetter__: function __defineSetter__(P, setter) {
	    $defineProperty.f(toObject(this), P, { set: aFunction(setter), enumerable: true, configurable: true });
	  }
	});


/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var toObject = __webpack_require__(57);
	var toPrimitive = __webpack_require__(16);
	var getPrototypeOf = __webpack_require__(58);
	var getOwnPropertyDescriptor = __webpack_require__(50).f;
	
	// B.2.2.4 Object.prototype.__lookupGetter__(P)
	__webpack_require__(6) && $export($export.P + __webpack_require__(272), 'Object', {
	  __lookupGetter__: function __lookupGetter__(P) {
	    var O = toObject(this);
	    var K = toPrimitive(P, true);
	    var D;
	    do {
	      if (D = getOwnPropertyDescriptor(O, K)) return D.get;
	    } while (O = getPrototypeOf(O));
	  }
	});


/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var toObject = __webpack_require__(57);
	var toPrimitive = __webpack_require__(16);
	var getPrototypeOf = __webpack_require__(58);
	var getOwnPropertyDescriptor = __webpack_require__(50).f;
	
	// B.2.2.5 Object.prototype.__lookupSetter__(P)
	__webpack_require__(6) && $export($export.P + __webpack_require__(272), 'Object', {
	  __lookupSetter__: function __lookupSetter__(P) {
	    var O = toObject(this);
	    var K = toPrimitive(P, true);
	    var D;
	    do {
	      if (D = getOwnPropertyDescriptor(O, K)) return D.set;
	    } while (O = getPrototypeOf(O));
	  }
	});


/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var $export = __webpack_require__(8);
	
	$export($export.P + $export.R, 'Map', { toJSON: __webpack_require__(277)('Map') });


/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var classof = __webpack_require__(74);
	var from = __webpack_require__(278);
	module.exports = function (NAME) {
	  return function toJSON() {
	    if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
	    return from(this);
	  };
	};


/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	var forOf = __webpack_require__(207);
	
	module.exports = function (iter, ITERATOR) {
	  var result = [];
	  forOf(iter, false, result.push, result, ITERATOR);
	  return result;
	};


/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var $export = __webpack_require__(8);
	
	$export($export.P + $export.R, 'Set', { toJSON: __webpack_require__(277)('Set') });


/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
	__webpack_require__(281)('Map');


/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://tc39.github.io/proposal-setmap-offrom/
	var $export = __webpack_require__(8);
	
	module.exports = function (COLLECTION) {
	  $export($export.S, COLLECTION, { of: function of() {
	    var length = arguments.length;
	    var A = new Array(length);
	    while (length--) A[length] = arguments[length];
	    return new this(A);
	  } });
	};


/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of
	__webpack_require__(281)('Set');


/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of
	__webpack_require__(281)('WeakMap');


/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of
	__webpack_require__(281)('WeakSet');


/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
	__webpack_require__(286)('Map');


/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://tc39.github.io/proposal-setmap-offrom/
	var $export = __webpack_require__(8);
	var aFunction = __webpack_require__(21);
	var ctx = __webpack_require__(20);
	var forOf = __webpack_require__(207);
	
	module.exports = function (COLLECTION) {
	  $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {
	    var mapFn = arguments[1];
	    var mapping, A, n, cb;
	    aFunction(this);
	    mapping = mapFn !== undefined;
	    if (mapping) aFunction(mapFn);
	    if (source == undefined) return new this();
	    A = [];
	    if (mapping) {
	      n = 0;
	      cb = ctx(mapFn, arguments[2], 2);
	      forOf(source, false, function (nextItem) {
	        A.push(cb(nextItem, n++));
	      });
	    } else {
	      forOf(source, false, A.push, A);
	    }
	    return new this(A);
	  } });
	};


/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from
	__webpack_require__(286)('Set');


/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from
	__webpack_require__(286)('WeakMap');


/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from
	__webpack_require__(286)('WeakSet');


/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-global
	var $export = __webpack_require__(8);
	
	$export($export.G, { global: __webpack_require__(4) });


/***/ },
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-global
	var $export = __webpack_require__(8);
	
	$export($export.S, 'System', { global: __webpack_require__(4) });


/***/ },
/* 292 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/ljharb/proposal-is-error
	var $export = __webpack_require__(8);
	var cof = __webpack_require__(34);
	
	$export($export.S, 'Error', {
	  isError: function isError(it) {
	    return cof(it) === 'Error';
	  }
	});


/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	// https://rwaldron.github.io/proposal-math-extensions/
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  clamp: function clamp(x, lower, upper) {
	    return Math.min(upper, Math.max(lower, x));
	  }
	});


/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	// https://rwaldron.github.io/proposal-math-extensions/
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', { DEG_PER_RAD: Math.PI / 180 });


/***/ },
/* 295 */
/***/ function(module, exports, __webpack_require__) {

	// https://rwaldron.github.io/proposal-math-extensions/
	var $export = __webpack_require__(8);
	var RAD_PER_DEG = 180 / Math.PI;
	
	$export($export.S, 'Math', {
	  degrees: function degrees(radians) {
	    return radians * RAD_PER_DEG;
	  }
	});


/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	// https://rwaldron.github.io/proposal-math-extensions/
	var $export = __webpack_require__(8);
	var scale = __webpack_require__(297);
	var fround = __webpack_require__(113);
	
	$export($export.S, 'Math', {
	  fscale: function fscale(x, inLow, inHigh, outLow, outHigh) {
	    return fround(scale(x, inLow, inHigh, outLow, outHigh));
	  }
	});


/***/ },
/* 297 */
/***/ function(module, exports) {

	// https://rwaldron.github.io/proposal-math-extensions/
	module.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {
	  if (
	    arguments.length === 0
	      // eslint-disable-next-line no-self-compare
	      || x != x
	      // eslint-disable-next-line no-self-compare
	      || inLow != inLow
	      // eslint-disable-next-line no-self-compare
	      || inHigh != inHigh
	      // eslint-disable-next-line no-self-compare
	      || outLow != outLow
	      // eslint-disable-next-line no-self-compare
	      || outHigh != outHigh
	  ) return NaN;
	  if (x === Infinity || x === -Infinity) return x;
	  return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;
	};


/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

	// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  iaddh: function iaddh(x0, x1, y0, y1) {
	    var $x0 = x0 >>> 0;
	    var $x1 = x1 >>> 0;
	    var $y0 = y0 >>> 0;
	    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
	  }
	});


/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  isubh: function isubh(x0, x1, y0, y1) {
	    var $x0 = x0 >>> 0;
	    var $x1 = x1 >>> 0;
	    var $y0 = y0 >>> 0;
	    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
	  }
	});


/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  imulh: function imulh(u, v) {
	    var UINT16 = 0xffff;
	    var $u = +u;
	    var $v = +v;
	    var u0 = $u & UINT16;
	    var v0 = $v & UINT16;
	    var u1 = $u >> 16;
	    var v1 = $v >> 16;
	    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
	    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
	  }
	});


/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	// https://rwaldron.github.io/proposal-math-extensions/
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', { RAD_PER_DEG: 180 / Math.PI });


/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	// https://rwaldron.github.io/proposal-math-extensions/
	var $export = __webpack_require__(8);
	var DEG_PER_RAD = Math.PI / 180;
	
	$export($export.S, 'Math', {
	  radians: function radians(degrees) {
	    return degrees * DEG_PER_RAD;
	  }
	});


/***/ },
/* 303 */
/***/ function(module, exports, __webpack_require__) {

	// https://rwaldron.github.io/proposal-math-extensions/
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', { scale: __webpack_require__(297) });


/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  umulh: function umulh(u, v) {
	    var UINT16 = 0xffff;
	    var $u = +u;
	    var $v = +v;
	    var u0 = $u & UINT16;
	    var v0 = $v & UINT16;
	    var u1 = $u >>> 16;
	    var v1 = $v >>> 16;
	    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
	    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
	  }
	});


/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	// http://jfbastien.github.io/papers/Math.signbit.html
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', { signbit: function signbit(x) {
	  // eslint-disable-next-line no-self-compare
	  return (x = +x) != x ? x : x == 0 ? 1 / x == Infinity : x > 0;
	} });


/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-promise-finally
	'use strict';
	var $export = __webpack_require__(8);
	var core = __webpack_require__(9);
	var global = __webpack_require__(4);
	var speciesConstructor = __webpack_require__(208);
	var promiseResolve = __webpack_require__(213);
	
	$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
	  var C = speciesConstructor(this, core.Promise || global.Promise);
	  var isFunction = typeof onFinally == 'function';
	  return this.then(
	    isFunction ? function (x) {
	      return promiseResolve(C, onFinally()).then(function () { return x; });
	    } : onFinally,
	    isFunction ? function (e) {
	      return promiseResolve(C, onFinally()).then(function () { throw e; });
	    } : onFinally
	  );
	} });


/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/tc39/proposal-promise-try
	var $export = __webpack_require__(8);
	var newPromiseCapability = __webpack_require__(211);
	var perform = __webpack_require__(212);
	
	$export($export.S, 'Promise', { 'try': function (callbackfn) {
	  var promiseCapability = newPromiseCapability.f(this);
	  var result = perform(callbackfn);
	  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
	  return promiseCapability.promise;
	} });


/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	var metadata = __webpack_require__(309);
	var anObject = __webpack_require__(12);
	var toMetaKey = metadata.key;
	var ordinaryDefineOwnMetadata = metadata.set;
	
	metadata.exp({ defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {
	  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
	} });


/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	var Map = __webpack_require__(215);
	var $export = __webpack_require__(8);
	var shared = __webpack_require__(23)('metadata');
	var store = shared.store || (shared.store = new (__webpack_require__(220))());
	
	var getOrCreateMetadataMap = function (target, targetKey, create) {
	  var targetMetadata = store.get(target);
	  if (!targetMetadata) {
	    if (!create) return undefined;
	    store.set(target, targetMetadata = new Map());
	  }
	  var keyMetadata = targetMetadata.get(targetKey);
	  if (!keyMetadata) {
	    if (!create) return undefined;
	    targetMetadata.set(targetKey, keyMetadata = new Map());
	  } return keyMetadata;
	};
	var ordinaryHasOwnMetadata = function (MetadataKey, O, P) {
	  var metadataMap = getOrCreateMetadataMap(O, P, false);
	  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
	};
	var ordinaryGetOwnMetadata = function (MetadataKey, O, P) {
	  var metadataMap = getOrCreateMetadataMap(O, P, false);
	  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
	};
	var ordinaryDefineOwnMetadata = function (MetadataKey, MetadataValue, O, P) {
	  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
	};
	var ordinaryOwnMetadataKeys = function (target, targetKey) {
	  var metadataMap = getOrCreateMetadataMap(target, targetKey, false);
	  var keys = [];
	  if (metadataMap) metadataMap.forEach(function (_, key) { keys.push(key); });
	  return keys;
	};
	var toMetaKey = function (it) {
	  return it === undefined || typeof it == 'symbol' ? it : String(it);
	};
	var exp = function (O) {
	  $export($export.S, 'Reflect', O);
	};
	
	module.exports = {
	  store: store,
	  map: getOrCreateMetadataMap,
	  has: ordinaryHasOwnMetadata,
	  get: ordinaryGetOwnMetadata,
	  set: ordinaryDefineOwnMetadata,
	  keys: ordinaryOwnMetadataKeys,
	  key: toMetaKey,
	  exp: exp
	};


/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	var metadata = __webpack_require__(309);
	var anObject = __webpack_require__(12);
	var toMetaKey = metadata.key;
	var getOrCreateMetadataMap = metadata.map;
	var store = metadata.store;
	
	metadata.exp({ deleteMetadata: function deleteMetadata(metadataKey, target /* , targetKey */) {
	  var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]);
	  var metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
	  if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;
	  if (metadataMap.size) return true;
	  var targetMetadata = store.get(target);
	  targetMetadata['delete'](targetKey);
	  return !!targetMetadata.size || store['delete'](target);
	} });


/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	var metadata = __webpack_require__(309);
	var anObject = __webpack_require__(12);
	var getPrototypeOf = __webpack_require__(58);
	var ordinaryHasOwnMetadata = metadata.has;
	var ordinaryGetOwnMetadata = metadata.get;
	var toMetaKey = metadata.key;
	
	var ordinaryGetMetadata = function (MetadataKey, O, P) {
	  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
	  if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);
	  var parent = getPrototypeOf(O);
	  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
	};
	
	metadata.exp({ getMetadata: function getMetadata(metadataKey, target /* , targetKey */) {
	  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	} });


/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	var Set = __webpack_require__(219);
	var from = __webpack_require__(278);
	var metadata = __webpack_require__(309);
	var anObject = __webpack_require__(12);
	var getPrototypeOf = __webpack_require__(58);
	var ordinaryOwnMetadataKeys = metadata.keys;
	var toMetaKey = metadata.key;
	
	var ordinaryMetadataKeys = function (O, P) {
	  var oKeys = ordinaryOwnMetadataKeys(O, P);
	  var parent = getPrototypeOf(O);
	  if (parent === null) return oKeys;
	  var pKeys = ordinaryMetadataKeys(parent, P);
	  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
	};
	
	metadata.exp({ getMetadataKeys: function getMetadataKeys(target /* , targetKey */) {
	  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
	} });


/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	var metadata = __webpack_require__(309);
	var anObject = __webpack_require__(12);
	var ordinaryGetOwnMetadata = metadata.get;
	var toMetaKey = metadata.key;
	
	metadata.exp({ getOwnMetadata: function getOwnMetadata(metadataKey, target /* , targetKey */) {
	  return ordinaryGetOwnMetadata(metadataKey, anObject(target)
	    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	} });


/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	var metadata = __webpack_require__(309);
	var anObject = __webpack_require__(12);
	var ordinaryOwnMetadataKeys = metadata.keys;
	var toMetaKey = metadata.key;
	
	metadata.exp({ getOwnMetadataKeys: function getOwnMetadataKeys(target /* , targetKey */) {
	  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
	} });


/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	var metadata = __webpack_require__(309);
	var anObject = __webpack_require__(12);
	var getPrototypeOf = __webpack_require__(58);
	var ordinaryHasOwnMetadata = metadata.has;
	var toMetaKey = metadata.key;
	
	var ordinaryHasMetadata = function (MetadataKey, O, P) {
	  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
	  if (hasOwn) return true;
	  var parent = getPrototypeOf(O);
	  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
	};
	
	metadata.exp({ hasMetadata: function hasMetadata(metadataKey, target /* , targetKey */) {
	  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	} });


/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	var metadata = __webpack_require__(309);
	var anObject = __webpack_require__(12);
	var ordinaryHasOwnMetadata = metadata.has;
	var toMetaKey = metadata.key;
	
	metadata.exp({ hasOwnMetadata: function hasOwnMetadata(metadataKey, target /* , targetKey */) {
	  return ordinaryHasOwnMetadata(metadataKey, anObject(target)
	    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	} });


/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	var $metadata = __webpack_require__(309);
	var anObject = __webpack_require__(12);
	var aFunction = __webpack_require__(21);
	var toMetaKey = $metadata.key;
	var ordinaryDefineOwnMetadata = $metadata.set;
	
	$metadata.exp({ metadata: function metadata(metadataKey, metadataValue) {
	  return function decorator(target, targetKey) {
	    ordinaryDefineOwnMetadata(
	      metadataKey, metadataValue,
	      (targetKey !== undefined ? anObject : aFunction)(target),
	      toMetaKey(targetKey)
	    );
	  };
	} });


/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
	var $export = __webpack_require__(8);
	var microtask = __webpack_require__(210)();
	var process = __webpack_require__(4).process;
	var isNode = __webpack_require__(34)(process) == 'process';
	
	$export($export.G, {
	  asap: function asap(fn) {
	    var domain = isNode && process.domain;
	    microtask(domain ? domain.bind(fn) : fn);
	  }
	});


/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/zenparsing/es-observable
	var $export = __webpack_require__(8);
	var global = __webpack_require__(4);
	var core = __webpack_require__(9);
	var microtask = __webpack_require__(210)();
	var OBSERVABLE = __webpack_require__(25)('observable');
	var aFunction = __webpack_require__(21);
	var anObject = __webpack_require__(12);
	var anInstance = __webpack_require__(206);
	var redefineAll = __webpack_require__(214);
	var hide = __webpack_require__(10);
	var forOf = __webpack_require__(207);
	var RETURN = forOf.RETURN;
	
	var getMethod = function (fn) {
	  return fn == null ? undefined : aFunction(fn);
	};
	
	var cleanupSubscription = function (subscription) {
	  var cleanup = subscription._c;
	  if (cleanup) {
	    subscription._c = undefined;
	    cleanup();
	  }
	};
	
	var subscriptionClosed = function (subscription) {
	  return subscription._o === undefined;
	};
	
	var closeSubscription = function (subscription) {
	  if (!subscriptionClosed(subscription)) {
	    subscription._o = undefined;
	    cleanupSubscription(subscription);
	  }
	};
	
	var Subscription = function (observer, subscriber) {
	  anObject(observer);
	  this._c = undefined;
	  this._o = observer;
	  observer = new SubscriptionObserver(this);
	  try {
	    var cleanup = subscriber(observer);
	    var subscription = cleanup;
	    if (cleanup != null) {
	      if (typeof cleanup.unsubscribe === 'function') cleanup = function () { subscription.unsubscribe(); };
	      else aFunction(cleanup);
	      this._c = cleanup;
	    }
	  } catch (e) {
	    observer.error(e);
	    return;
	  } if (subscriptionClosed(this)) cleanupSubscription(this);
	};
	
	Subscription.prototype = redefineAll({}, {
	  unsubscribe: function unsubscribe() { closeSubscription(this); }
	});
	
	var SubscriptionObserver = function (subscription) {
	  this._s = subscription;
	};
	
	SubscriptionObserver.prototype = redefineAll({}, {
	  next: function next(value) {
	    var subscription = this._s;
	    if (!subscriptionClosed(subscription)) {
	      var observer = subscription._o;
	      try {
	        var m = getMethod(observer.next);
	        if (m) return m.call(observer, value);
	      } catch (e) {
	        try {
	          closeSubscription(subscription);
	        } finally {
	          throw e;
	        }
	      }
	    }
	  },
	  error: function error(value) {
	    var subscription = this._s;
	    if (subscriptionClosed(subscription)) throw value;
	    var observer = subscription._o;
	    subscription._o = undefined;
	    try {
	      var m = getMethod(observer.error);
	      if (!m) throw value;
	      value = m.call(observer, value);
	    } catch (e) {
	      try {
	        cleanupSubscription(subscription);
	      } finally {
	        throw e;
	      }
	    } cleanupSubscription(subscription);
	    return value;
	  },
	  complete: function complete(value) {
	    var subscription = this._s;
	    if (!subscriptionClosed(subscription)) {
	      var observer = subscription._o;
	      subscription._o = undefined;
	      try {
	        var m = getMethod(observer.complete);
	        value = m ? m.call(observer, value) : undefined;
	      } catch (e) {
	        try {
	          cleanupSubscription(subscription);
	        } finally {
	          throw e;
	        }
	      } cleanupSubscription(subscription);
	      return value;
	    }
	  }
	});
	
	var $Observable = function Observable(subscriber) {
	  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
	};
	
	redefineAll($Observable.prototype, {
	  subscribe: function subscribe(observer) {
	    return new Subscription(observer, this._f);
	  },
	  forEach: function forEach(fn) {
	    var that = this;
	    return new (core.Promise || global.Promise)(function (resolve, reject) {
	      aFunction(fn);
	      var subscription = that.subscribe({
	        next: function (value) {
	          try {
	            return fn(value);
	          } catch (e) {
	            reject(e);
	            subscription.unsubscribe();
	          }
	        },
	        error: reject,
	        complete: resolve
	      });
	    });
	  }
	});
	
	redefineAll($Observable, {
	  from: function from(x) {
	    var C = typeof this === 'function' ? this : $Observable;
	    var method = getMethod(anObject(x)[OBSERVABLE]);
	    if (method) {
	      var observable = anObject(method.call(x));
	      return observable.constructor === C ? observable : new C(function (observer) {
	        return observable.subscribe(observer);
	      });
	    }
	    return new C(function (observer) {
	      var done = false;
	      microtask(function () {
	        if (!done) {
	          try {
	            if (forOf(x, false, function (it) {
	              observer.next(it);
	              if (done) return RETURN;
	            }) === RETURN) return;
	          } catch (e) {
	            if (done) throw e;
	            observer.error(e);
	            return;
	          } observer.complete();
	        }
	      });
	      return function () { done = true; };
	    });
	  },
	  of: function of() {
	    for (var i = 0, l = arguments.length, items = new Array(l); i < l;) items[i] = arguments[i++];
	    return new (typeof this === 'function' ? this : $Observable)(function (observer) {
	      var done = false;
	      microtask(function () {
	        if (!done) {
	          for (var j = 0; j < items.length; ++j) {
	            observer.next(items[j]);
	            if (done) return;
	          } observer.complete();
	        }
	      });
	      return function () { done = true; };
	    });
	  }
	});
	
	hide($Observable.prototype, OBSERVABLE, function () { return this; });
	
	$export($export.G, { Observable: $Observable });
	
	__webpack_require__(193)('Observable');


/***/ },
/* 320 */
/***/ function(module, exports, __webpack_require__) {

	// ie9- setTimeout & setInterval additional parameters fix
	var global = __webpack_require__(4);
	var $export = __webpack_require__(8);
	var userAgent = __webpack_require__(260);
	var slice = [].slice;
	var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check
	var wrap = function (set) {
	  return function (fn, time /* , ...args */) {
	    var boundArgs = arguments.length > 2;
	    var args = boundArgs ? slice.call(arguments, 2) : false;
	    return set(boundArgs ? function () {
	      // eslint-disable-next-line no-new-func
	      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
	    } : fn, time);
	  };
	};
	$export($export.G + $export.B + $export.F * MSIE, {
	  setTimeout: wrap(global.setTimeout),
	  setInterval: wrap(global.setInterval)
	});


/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	var $task = __webpack_require__(209);
	$export($export.G + $export.B, {
	  setImmediate: $task.set,
	  clearImmediate: $task.clear
	});


/***/ },
/* 322 */
/***/ function(module, exports, __webpack_require__) {

	var $iterators = __webpack_require__(194);
	var getKeys = __webpack_require__(30);
	var redefine = __webpack_require__(18);
	var global = __webpack_require__(4);
	var hide = __webpack_require__(10);
	var Iterators = __webpack_require__(129);
	var wks = __webpack_require__(25);
	var ITERATOR = wks('iterator');
	var TO_STRING_TAG = wks('toStringTag');
	var ArrayValues = Iterators.Array;
	
	var DOMIterables = {
	  CSSRuleList: true, // TODO: Not spec compliant, should be false.
	  CSSStyleDeclaration: false,
	  CSSValueList: false,
	  ClientRectList: false,
	  DOMRectList: false,
	  DOMStringList: false,
	  DOMTokenList: true,
	  DataTransferItemList: false,
	  FileList: false,
	  HTMLAllCollection: false,
	  HTMLCollection: false,
	  HTMLFormElement: false,
	  HTMLSelectElement: false,
	  MediaList: true, // TODO: Not spec compliant, should be false.
	  MimeTypeArray: false,
	  NamedNodeMap: false,
	  NodeList: true,
	  PaintRequestList: false,
	  Plugin: false,
	  PluginArray: false,
	  SVGLengthList: false,
	  SVGNumberList: false,
	  SVGPathSegList: false,
	  SVGPointList: false,
	  SVGStringList: false,
	  SVGTransformList: false,
	  SourceBufferList: false,
	  StyleSheetList: true, // TODO: Not spec compliant, should be false.
	  TextTrackCueList: false,
	  TextTrackList: false,
	  TouchList: false
	};
	
	for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
	  var NAME = collections[i];
	  var explicit = DOMIterables[NAME];
	  var Collection = global[NAME];
	  var proto = Collection && Collection.prototype;
	  var key;
	  if (proto) {
	    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
	    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
	    Iterators[NAME] = ArrayValues;
	    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
	  }
	}


/***/ },
/* 323 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */
	
	!(function(global) {
	  "use strict";
	
	  var Op = Object.prototype;
	  var hasOwn = Op.hasOwnProperty;
	  var undefined; // More compressible than void 0.
	  var $Symbol = typeof Symbol === "function" ? Symbol : {};
	  var iteratorSymbol = $Symbol.iterator || "@@iterator";
	  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
	
	  var inModule = typeof module === "object";
	  var runtime = global.regeneratorRuntime;
	  if (runtime) {
	    if (inModule) {
	      // If regeneratorRuntime is defined globally and we're in a module,
	      // make the exports object identical to regeneratorRuntime.
	      module.exports = runtime;
	    }
	    // Don't bother evaluating the rest of this file if the runtime was
	    // already defined globally.
	    return;
	  }
	
	  // Define the runtime globally (as expected by generated code) as either
	  // module.exports (if we're in a module) or a new, empty object.
	  runtime = global.regeneratorRuntime = inModule ? module.exports : {};
	
	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	    var generator = Object.create(protoGenerator.prototype);
	    var context = new Context(tryLocsList || []);
	
	    // The ._invoke method unifies the implementations of the .next,
	    // .throw, and .return methods.
	    generator._invoke = makeInvokeMethod(innerFn, self, context);
	
	    return generator;
	  }
	  runtime.wrap = wrap;
	
	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }
	
	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";
	
	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};
	
	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}
	
	  // This is a polyfill for %IteratorPrototype% for environments that
	  // don't natively support it.
	  var IteratorPrototype = {};
	  IteratorPrototype[iteratorSymbol] = function () {
	    return this;
	  };
	
	  var getProto = Object.getPrototypeOf;
	  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
	  if (NativeIteratorPrototype &&
	      NativeIteratorPrototype !== Op &&
	      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	    // This environment has a native %IteratorPrototype%; use it instead
	    // of the polyfill.
	    IteratorPrototype = NativeIteratorPrototype;
	  }
	
	  var Gp = GeneratorFunctionPrototype.prototype =
	    Generator.prototype = Object.create(IteratorPrototype);
	  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	  GeneratorFunctionPrototype.constructor = GeneratorFunction;
	  GeneratorFunctionPrototype[toStringTagSymbol] =
	    GeneratorFunction.displayName = "GeneratorFunction";
	
	  // Helper for defining the .next, .throw, and .return methods of the
	  // Iterator interface in terms of a single ._invoke method.
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function(method) {
	      prototype[method] = function(arg) {
	        return this._invoke(method, arg);
	      };
	    });
	  }
	
	  runtime.isGeneratorFunction = function(genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor
	      ? ctor === GeneratorFunction ||
	        // For the native GeneratorFunction constructor, the best we can
	        // do is to check its .name property.
	        (ctor.displayName || ctor.name) === "GeneratorFunction"
	      : false;
	  };
	
	  runtime.mark = function(genFun) {
	    if (Object.setPrototypeOf) {
	      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	    } else {
	      genFun.__proto__ = GeneratorFunctionPrototype;
	      if (!(toStringTagSymbol in genFun)) {
	        genFun[toStringTagSymbol] = "GeneratorFunction";
	      }
	    }
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };
	
	  // Within the body of any async function, `await x` is transformed to
	  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	  // `hasOwn.call(value, "__await")` to determine if the yielded value is
	  // meant to be awaited.
	  runtime.awrap = function(arg) {
	    return { __await: arg };
	  };
	
	  function AsyncIterator(generator) {
	    function invoke(method, arg, resolve, reject) {
	      var record = tryCatch(generator[method], generator, arg);
	      if (record.type === "throw") {
	        reject(record.arg);
	      } else {
	        var result = record.arg;
	        var value = result.value;
	        if (value &&
	            typeof value === "object" &&
	            hasOwn.call(value, "__await")) {
	          return Promise.resolve(value.__await).then(function(value) {
	            invoke("next", value, resolve, reject);
	          }, function(err) {
	            invoke("throw", err, resolve, reject);
	          });
	        }
	
	        return Promise.resolve(value).then(function(unwrapped) {
	          // When a yielded Promise is resolved, its final value becomes
	          // the .value of the Promise<{value,done}> result for the
	          // current iteration. If the Promise is rejected, however, the
	          // result for this iteration will be rejected with the same
	          // reason. Note that rejections of yielded Promises are not
	          // thrown back into the generator function, as is the case
	          // when an awaited Promise is rejected. This difference in
	          // behavior between yield and await is important, because it
	          // allows the consumer to decide what to do with the yielded
	          // rejection (swallow it and continue, manually .throw it back
	          // into the generator, abandon iteration, whatever). With
	          // await, by contrast, there is no opportunity to examine the
	          // rejection reason outside the generator function, so the
	          // only option is to throw it from the await expression, and
	          // let the generator function handle the exception.
	          result.value = unwrapped;
	          resolve(result);
	        }, reject);
	      }
	    }
	
	    if (typeof global.process === "object" && global.process.domain) {
	      invoke = global.process.domain.bind(invoke);
	    }
	
	    var previousPromise;
	
	    function enqueue(method, arg) {
	      function callInvokeWithMethodAndArg() {
	        return new Promise(function(resolve, reject) {
	          invoke(method, arg, resolve, reject);
	        });
	      }
	
	      return previousPromise =
	        // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(
	          callInvokeWithMethodAndArg,
	          // Avoid propagating failures to Promises returned by later
	          // invocations of the iterator.
	          callInvokeWithMethodAndArg
	        ) : callInvokeWithMethodAndArg();
	    }
	
	    // Define the unified helper method that is used to implement .next,
	    // .throw, and .return (see defineIteratorMethods).
	    this._invoke = enqueue;
	  }
	
	  defineIteratorMethods(AsyncIterator.prototype);
	  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
	    return this;
	  };
	  runtime.AsyncIterator = AsyncIterator;
	
	  // Note that simple async functions are implemented on top of
	  // AsyncIterator objects; they just return a Promise for the value of
	  // the final result produced by the iterator.
	  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
	    var iter = new AsyncIterator(
	      wrap(innerFn, outerFn, self, tryLocsList)
	    );
	
	    return runtime.isGeneratorFunction(outerFn)
	      ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function(result) {
	          return result.done ? result.value : iter.next();
	        });
	  };
	
	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;
	
	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }
	
	      if (state === GenStateCompleted) {
	        if (method === "throw") {
	          throw arg;
	        }
	
	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }
	
	      context.method = method;
	      context.arg = arg;
	
	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          var delegateResult = maybeInvokeDelegate(delegate, context);
	          if (delegateResult) {
	            if (delegateResult === ContinueSentinel) continue;
	            return delegateResult;
	          }
	        }
	
	        if (context.method === "next") {
	          // Setting context._sent for legacy support of Babel's
	          // function.sent implementation.
	          context.sent = context._sent = context.arg;
	
	        } else if (context.method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw context.arg;
	          }
	
	          context.dispatchException(context.arg);
	
	        } else if (context.method === "return") {
	          context.abrupt("return", context.arg);
	        }
	
	        state = GenStateExecuting;
	
	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done
	            ? GenStateCompleted
	            : GenStateSuspendedYield;
	
	          if (record.arg === ContinueSentinel) {
	            continue;
	          }
	
	          return {
	            value: record.arg,
	            done: context.done
	          };
	
	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(context.arg) call above.
	          context.method = "throw";
	          context.arg = record.arg;
	        }
	      }
	    };
	  }
	
	  // Call delegate.iterator[context.method](context.arg) and handle the
	  // result, either by returning a { value, done } result from the
	  // delegate iterator, or by modifying context.method and context.arg,
	  // setting context.delegate to null, and returning the ContinueSentinel.
	  function maybeInvokeDelegate(delegate, context) {
	    var method = delegate.iterator[context.method];
	    if (method === undefined) {
	      // A .throw or .return when the delegate iterator has no .throw
	      // method always terminates the yield* loop.
	      context.delegate = null;
	
	      if (context.method === "throw") {
	        if (delegate.iterator.return) {
	          // If the delegate iterator has a return method, give it a
	          // chance to clean up.
	          context.method = "return";
	          context.arg = undefined;
	          maybeInvokeDelegate(delegate, context);
	
	          if (context.method === "throw") {
	            // If maybeInvokeDelegate(context) changed context.method from
	            // "return" to "throw", let that override the TypeError below.
	            return ContinueSentinel;
	          }
	        }
	
	        context.method = "throw";
	        context.arg = new TypeError(
	          "The iterator does not provide a 'throw' method");
	      }
	
	      return ContinueSentinel;
	    }
	
	    var record = tryCatch(method, delegate.iterator, context.arg);
	
	    if (record.type === "throw") {
	      context.method = "throw";
	      context.arg = record.arg;
	      context.delegate = null;
	      return ContinueSentinel;
	    }
	
	    var info = record.arg;
	
	    if (! info) {
	      context.method = "throw";
	      context.arg = new TypeError("iterator result is not an object");
	      context.delegate = null;
	      return ContinueSentinel;
	    }
	
	    if (info.done) {
	      // Assign the result of the finished delegate to the temporary
	      // variable specified by delegate.resultName (see delegateYield).
	      context[delegate.resultName] = info.value;
	
	      // Resume execution at the desired location (see delegateYield).
	      context.next = delegate.nextLoc;
	
	      // If context.method was "throw" but the delegate handled the
	      // exception, let the outer generator proceed normally. If
	      // context.method was "next", forget context.arg since it has been
	      // "consumed" by the delegate iterator. If context.method was
	      // "return", allow the original .return call to continue in the
	      // outer generator.
	      if (context.method !== "return") {
	        context.method = "next";
	        context.arg = undefined;
	      }
	
	    } else {
	      // Re-yield the result returned by the delegate method.
	      return info;
	    }
	
	    // The delegate iterator is finished, so forget it and continue with
	    // the outer generator.
	    context.delegate = null;
	    return ContinueSentinel;
	  }
	
	  // Define Generator.prototype.{next,throw,return} in terms of the
	  // unified ._invoke helper method.
	  defineIteratorMethods(Gp);
	
	  Gp[toStringTagSymbol] = "Generator";
	
	  // A Generator should always return itself as the iterator object when the
	  // @@iterator function is called on it. Some browsers' implementations of the
	  // iterator prototype chain incorrectly implement this, causing the Generator
	  // object to not be returned from this call. This ensures that doesn't happen.
	  // See https://github.com/facebook/regenerator/issues/274 for more details.
	  Gp[iteratorSymbol] = function() {
	    return this;
	  };
	
	  Gp.toString = function() {
	    return "[object Generator]";
	  };
	
	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };
	
	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }
	
	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }
	
	    this.tryEntries.push(entry);
	  }
	
	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }
	
	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset(true);
	  }
	
	  runtime.keys = function(object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();
	
	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }
	
	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };
	
	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }
	
	      if (typeof iterable.next === "function") {
	        return iterable;
	      }
	
	      if (!isNaN(iterable.length)) {
	        var i = -1, next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }
	
	          next.value = undefined;
	          next.done = true;
	
	          return next;
	        };
	
	        return next.next = next;
	      }
	    }
	
	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  runtime.values = values;
	
	  function doneResult() {
	    return { value: undefined, done: true };
	  }
	
	  Context.prototype = {
	    constructor: Context,
	
	    reset: function(skipTempReset) {
	      this.prev = 0;
	      this.next = 0;
	      // Resetting context._sent for legacy support of Babel's
	      // function.sent implementation.
	      this.sent = this._sent = undefined;
	      this.done = false;
	      this.delegate = null;
	
	      this.method = "next";
	      this.arg = undefined;
	
	      this.tryEntries.forEach(resetTryEntry);
	
	      if (!skipTempReset) {
	        for (var name in this) {
	          // Not sure about the optimal order of these conditions:
	          if (name.charAt(0) === "t" &&
	              hasOwn.call(this, name) &&
	              !isNaN(+name.slice(1))) {
	            this[name] = undefined;
	          }
	        }
	      }
	    },
	
	    stop: function() {
	      this.done = true;
	
	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }
	
	      return this.rval;
	    },
	
	    dispatchException: function(exception) {
	      if (this.done) {
	        throw exception;
	      }
	
	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;
	
	        if (caught) {
	          // If the dispatched exception was caught by a catch block,
	          // then let that catch block handle the exception normally.
	          context.method = "next";
	          context.arg = undefined;
	        }
	
	        return !! caught;
	      }
	
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;
	
	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }
	
	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");
	
	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }
	
	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }
	
	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }
	
	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },
	
	    abrupt: function(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev &&
	            hasOwn.call(entry, "finallyLoc") &&
	            this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }
	
	      if (finallyEntry &&
	          (type === "break" ||
	           type === "continue") &&
	          finallyEntry.tryLoc <= arg &&
	          arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }
	
	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;
	
	      if (finallyEntry) {
	        this.method = "next";
	        this.next = finallyEntry.finallyLoc;
	        return ContinueSentinel;
	      }
	
	      return this.complete(record);
	    },
	
	    complete: function(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }
	
	      if (record.type === "break" ||
	          record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = this.arg = record.arg;
	        this.method = "return";
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }
	
	      return ContinueSentinel;
	    },
	
	    finish: function(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },
	
	    "catch": function(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }
	
	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },
	
	    delegateYield: function(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };
	
	      if (this.method === "next") {
	        // Deliberately forget the last sent value so that we don't
	        // accidentally pass it on to the delegate.
	        this.arg = undefined;
	      }
	
	      return ContinueSentinel;
	    }
	  };
	})(
	  // Among the various tricks for obtaining a reference to the global
	  // object, this seems to be the most reliable technique that does not
	  // use indirect eval (which violates Content Security Policy).
	  typeof global === "object" ? global :
	  typeof window === "object" ? window :
	  typeof self === "object" ? self : this
	);
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(325);
	module.exports = __webpack_require__(9).RegExp.escape;


/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/benjamingr/RexExp.escape
	var $export = __webpack_require__(8);
	var $re = __webpack_require__(326)(/[\\^$*+?.()|[\]{}]/g, '\\$&');
	
	$export($export.S, 'RegExp', { escape: function escape(it) { return $re(it); } });


/***/ },
/* 326 */
/***/ function(module, exports) {

	module.exports = function (regExp, replace) {
	  var replacer = replace === Object(replace) ? function (part) {
	    return replace[part];
	  } : replace;
	  return function (it) {
	    return String(it).replace(regExp, replacer);
	  };
	};


/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(605), __webpack_require__(608), __webpack_require__(609), __webpack_require__(611), __webpack_require__(612)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, TextBox, PasswordBox, CheckBox, Radio, Select) {
	
	  Okta.registerInput('text', TextBox);
	  Okta.registerInput('password', PasswordBox);
	  Okta.registerInput('checkbox', CheckBox);
	  Okta.registerInput('radio', Radio);
	  Okta.registerInput('select', Select);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/**
	 * The main Courage module, which references the most commonly used classes
	 * and utility functions.
	 * @module Okta
	 * @borrows module:Okta.internal.util.StringUtil.localize as loc
	 * @borrows module:Okta.internal.util.ButtonFactory.create as createButton
	 * @borrows module:Okta.internal.views.components.Callout.create as createCallout
	 * @borrows module:Okta.internal.views.forms.helpers.InputRegistry.register as registerInput
	 * @borrows module:Okta.internal.util.TemplateUtil.tpl as tpl
	 * @example
	 * define(['okta'], function (Okta) {
	 *   var Form = Okta.FormDialog.extend({
	 *     title: Okta.loc('my.i18n.key'),
	 *     inputs: [
	 *       {
	 *         type: 'text',
	 *         name: 'name'
	 *       }
	 *     ]
	 *   });
	 *
	 *   var View = Okta.View.extend({
	 *     children: [
	 *       Okta.createButton({
	 *         title: 'Click Me',
	 *         click: function () {
	 *           new Form({model: new Okta.Model()}).render();
	 *         }
	 *       })
	 *     ]
	 *   });
	 * });
	 */
	/* eslint max-params: 0 */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(401), __webpack_require__(404), __webpack_require__(330), __webpack_require__(403), __webpack_require__(417), __webpack_require__(517), __webpack_require__(518), __webpack_require__(521), __webpack_require__(329), __webpack_require__(522), __webpack_require__(523), __webpack_require__(524), __webpack_require__(525), __webpack_require__(565), __webpack_require__(517)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Backbone, $, _, Handlebars, moment, momentTz, Model, BaseModel, BaseCollection, BaseWizard, frameworkBundle, modelsBundle, utilBundle, viewsBundle) {
	
	  var framwork = frameworkBundle,
	      models = modelsBundle,
	      util = utilBundle,
	      views = viewsBundle;
	
	  return (/** @lends module:Okta */{
	
	      /**
	       * A reference to [Backbone.js](http://backbonejs.org/).
	       */
	      Backbone: Backbone,
	
	      /**
	       * A reference to [jQuery](http://api.jquery.com/).
	       */
	      $: $,
	
	      /**
	       * A reference to [Underscore.js](http://underscorejs.org/).
	       */
	      _: _,
	
	      /**
	       * A reference to [Moment.js](https://momentjs.com/docs/).
	       */
	      moment: moment,
	
	      /**
	       * A reference to [Moment Timezone](https://momentjs.com/timezone/docs/).
	       */
	      momentTz: momentTz,
	
	      /**
	       * A reference to [Handlebars.js](http://handlebarsjs.com/).
	       */
	      Handlebars: Handlebars,
	
	      loc: util.StringUtil.localize,
	
	      createButton: util.ButtonFactory.create,
	
	      createCallout: views.components.Callout.create,
	
	      registerInput: views.forms.helpers.InputRegistry.register,
	
	      tpl: util.TemplateUtil.tpl,
	
	      Model: Model,
	
	      BaseModel: BaseModel,
	
	      Collection: BaseCollection,
	
	      View: views.BaseView,
	
	      ListView: views.ListView,
	
	      TableView: views.TableView,
	
	      Router: util.BaseRouter,
	
	      TabbedRouter: util.TabbedRouter,
	
	      Controller: util.BaseController,
	
	      DataListController: util.DataListController,
	
	      DataList: views.datalist.DeadSimpleDataList,
	
	      DependentCallout: views.components.BaseDependentCallout,
	
	      ModalDialog: views.components.BaseModalDialog,
	
	      MultiViewModalDialog: views.components.MultiViewModalDialog,
	
	      Form: views.forms.BaseForm,
	
	      FormDialog: views.components.BaseFormDialog,
	
	      DropDown: views.components.DropDown,
	
	      Wizard: BaseWizard,
	
	      Logger: util.Logger,
	
	      Metrics: util.Metrics,
	
	      internal: {
	
	        framework: framwork,
	
	        util: util,
	
	        views: views,
	
	        models: models
	
	      }
	
	    }
	  );
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(333)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, Collection) {
	  /**
	   * Wrapper around the more generic {@link src/framework/Collection} that
	   * contains Okta-specific logic.
	   * @class module:Okta.Collection
	   * @extends src/framework/Collection
	   */
	  return Collection.extend( /** @lends module:Okta.Collection.prototype */{
	
	    /**
	     * Is the end point using the legacy "secureJSON" format
	     * @type {Function|Boolean}
	     */
	    secureJSON: false,
	
	    constructor: function constructor() {
	      if (_.result(this, 'secureJSON')) {
	        this.sync = _.wrap(this.sync, function (sync, method, collection, options) {
	          return sync.call(this, method, collection, _.extend({ dataType: 'secureJSON' }, options));
	        });
	      }
	      Collection.apply(this, arguments);
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/* eslint okta/enforce-requirejs-names: 0, okta/no-specific-methods: 0, okta/no-specific-modules: 0 */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(331), __webpack_require__(332)], __WEBPACK_AMD_DEFINE_RESULT__ = function (underscore, Handlebars) {
	
	  var _ = underscore.noConflict();
	
	  _.mixin({
	
	    resultCtx: function resultCtx(object, property, context, defaultValue) {
	      var value = _.isObject(object) ? object[property] : void 0;
	      if (_.isFunction(value)) {
	        value = value.call(context || object);
	      }
	      if (value) {
	        return value;
	      } else {
	        return !_.isUndefined(defaultValue) ? defaultValue : value;
	      }
	    },
	
	    isInteger: function isInteger(x) {
	      return _.isNumber(x) && x % 1 === 0;
	    },
	
	    template: function template(source, data) {
	      var template = Handlebars.compile(source);
	      return data ? template(data) : function (data) {
	        return template(data);
	      };
	    }
	
	  });
	
	  return _;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.8.3
	//     http://underscorejs.org
	//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	//     Underscore may be freely distributed under the MIT license.
	
	(function() {
	
	  // Baseline setup
	  // --------------
	
	  // Establish the root object, `window` in the browser, or `exports` on the server.
	  var root = this;
	
	  // Save the previous value of the `_` variable.
	  var previousUnderscore = root._;
	
	  // Save bytes in the minified (but not gzipped) version:
	  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;
	
	  // Create quick reference variables for speed access to core prototypes.
	  var
	    push             = ArrayProto.push,
	    slice            = ArrayProto.slice,
	    toString         = ObjProto.toString,
	    hasOwnProperty   = ObjProto.hasOwnProperty;
	
	  // All **ECMAScript 5** native function implementations that we hope to use
	  // are declared here.
	  var
	    nativeIsArray      = Array.isArray,
	    nativeKeys         = Object.keys,
	    nativeBind         = FuncProto.bind,
	    nativeCreate       = Object.create;
	
	  // Naked function reference for surrogate-prototype-swapping.
	  var Ctor = function(){};
	
	  // Create a safe reference to the Underscore object for use below.
	  var _ = function(obj) {
	    if (obj instanceof _) return obj;
	    if (!(this instanceof _)) return new _(obj);
	    this._wrapped = obj;
	  };
	
	  // Export the Underscore object for **Node.js**, with
	  // backwards-compatibility for the old `require()` API. If we're in
	  // the browser, add `_` as a global object.
	  if (true) {
	    if (typeof module !== 'undefined' && module.exports) {
	      exports = module.exports = _;
	    }
	    exports._ = _;
	  } else {
	    root._ = _;
	  }
	
	  // Current version.
	  _.VERSION = '1.8.3';
	
	  // Internal function that returns an efficient (for current engines) version
	  // of the passed-in callback, to be repeatedly applied in other Underscore
	  // functions.
	  var optimizeCb = function(func, context, argCount) {
	    if (context === void 0) return func;
	    switch (argCount == null ? 3 : argCount) {
	      case 1: return function(value) {
	        return func.call(context, value);
	      };
	      case 2: return function(value, other) {
	        return func.call(context, value, other);
	      };
	      case 3: return function(value, index, collection) {
	        return func.call(context, value, index, collection);
	      };
	      case 4: return function(accumulator, value, index, collection) {
	        return func.call(context, accumulator, value, index, collection);
	      };
	    }
	    return function() {
	      return func.apply(context, arguments);
	    };
	  };
	
	  // A mostly-internal function to generate callbacks that can be applied
	  // to each element in a collection, returning the desired result — either
	  // identity, an arbitrary callback, a property matcher, or a property accessor.
	  var cb = function(value, context, argCount) {
	    if (value == null) return _.identity;
	    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
	    if (_.isObject(value)) return _.matcher(value);
	    return _.property(value);
	  };
	  _.iteratee = function(value, context) {
	    return cb(value, context, Infinity);
	  };
	
	  // An internal function for creating assigner functions.
	  var createAssigner = function(keysFunc, undefinedOnly) {
	    return function(obj) {
	      var length = arguments.length;
	      if (length < 2 || obj == null) return obj;
	      for (var index = 1; index < length; index++) {
	        var source = arguments[index],
	            keys = keysFunc(source),
	            l = keys.length;
	        for (var i = 0; i < l; i++) {
	          var key = keys[i];
	          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
	        }
	      }
	      return obj;
	    };
	  };
	
	  // An internal function for creating a new object that inherits from another.
	  var baseCreate = function(prototype) {
	    if (!_.isObject(prototype)) return {};
	    if (nativeCreate) return nativeCreate(prototype);
	    Ctor.prototype = prototype;
	    var result = new Ctor;
	    Ctor.prototype = null;
	    return result;
	  };
	
	  var property = function(key) {
	    return function(obj) {
	      return obj == null ? void 0 : obj[key];
	    };
	  };
	
	  // Helper for collection methods to determine whether a collection
	  // should be iterated as an array or as an object
	  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
	  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
	  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
	  var getLength = property('length');
	  var isArrayLike = function(collection) {
	    var length = getLength(collection);
	    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
	  };
	
	  // Collection Functions
	  // --------------------
	
	  // The cornerstone, an `each` implementation, aka `forEach`.
	  // Handles raw objects in addition to array-likes. Treats all
	  // sparse array-likes as if they were dense.
	  _.each = _.forEach = function(obj, iteratee, context) {
	    iteratee = optimizeCb(iteratee, context);
	    var i, length;
	    if (isArrayLike(obj)) {
	      for (i = 0, length = obj.length; i < length; i++) {
	        iteratee(obj[i], i, obj);
	      }
	    } else {
	      var keys = _.keys(obj);
	      for (i = 0, length = keys.length; i < length; i++) {
	        iteratee(obj[keys[i]], keys[i], obj);
	      }
	    }
	    return obj;
	  };
	
	  // Return the results of applying the iteratee to each element.
	  _.map = _.collect = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length,
	        results = Array(length);
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      results[index] = iteratee(obj[currentKey], currentKey, obj);
	    }
	    return results;
	  };
	
	  // Create a reducing function iterating left or right.
	  function createReduce(dir) {
	    // Optimized iterator function as using arguments.length
	    // in the main function will deoptimize the, see #1991.
	    function iterator(obj, iteratee, memo, keys, index, length) {
	      for (; index >= 0 && index < length; index += dir) {
	        var currentKey = keys ? keys[index] : index;
	        memo = iteratee(memo, obj[currentKey], currentKey, obj);
	      }
	      return memo;
	    }
	
	    return function(obj, iteratee, memo, context) {
	      iteratee = optimizeCb(iteratee, context, 4);
	      var keys = !isArrayLike(obj) && _.keys(obj),
	          length = (keys || obj).length,
	          index = dir > 0 ? 0 : length - 1;
	      // Determine the initial value if none is provided.
	      if (arguments.length < 3) {
	        memo = obj[keys ? keys[index] : index];
	        index += dir;
	      }
	      return iterator(obj, iteratee, memo, keys, index, length);
	    };
	  }
	
	  // **Reduce** builds up a single result from a list of values, aka `inject`,
	  // or `foldl`.
	  _.reduce = _.foldl = _.inject = createReduce(1);
	
	  // The right-associative version of reduce, also known as `foldr`.
	  _.reduceRight = _.foldr = createReduce(-1);
	
	  // Return the first value which passes a truth test. Aliased as `detect`.
	  _.find = _.detect = function(obj, predicate, context) {
	    var key;
	    if (isArrayLike(obj)) {
	      key = _.findIndex(obj, predicate, context);
	    } else {
	      key = _.findKey(obj, predicate, context);
	    }
	    if (key !== void 0 && key !== -1) return obj[key];
	  };
	
	  // Return all the elements that pass a truth test.
	  // Aliased as `select`.
	  _.filter = _.select = function(obj, predicate, context) {
	    var results = [];
	    predicate = cb(predicate, context);
	    _.each(obj, function(value, index, list) {
	      if (predicate(value, index, list)) results.push(value);
	    });
	    return results;
	  };
	
	  // Return all the elements for which a truth test fails.
	  _.reject = function(obj, predicate, context) {
	    return _.filter(obj, _.negate(cb(predicate)), context);
	  };
	
	  // Determine whether all of the elements match a truth test.
	  // Aliased as `all`.
	  _.every = _.all = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      if (!predicate(obj[currentKey], currentKey, obj)) return false;
	    }
	    return true;
	  };
	
	  // Determine if at least one element in the object matches a truth test.
	  // Aliased as `any`.
	  _.some = _.any = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      if (predicate(obj[currentKey], currentKey, obj)) return true;
	    }
	    return false;
	  };
	
	  // Determine if the array or object contains a given item (using `===`).
	  // Aliased as `includes` and `include`.
	  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
	    if (!isArrayLike(obj)) obj = _.values(obj);
	    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
	    return _.indexOf(obj, item, fromIndex) >= 0;
	  };
	
	  // Invoke a method (with arguments) on every item in a collection.
	  _.invoke = function(obj, method) {
	    var args = slice.call(arguments, 2);
	    var isFunc = _.isFunction(method);
	    return _.map(obj, function(value) {
	      var func = isFunc ? method : value[method];
	      return func == null ? func : func.apply(value, args);
	    });
	  };
	
	  // Convenience version of a common use case of `map`: fetching a property.
	  _.pluck = function(obj, key) {
	    return _.map(obj, _.property(key));
	  };
	
	  // Convenience version of a common use case of `filter`: selecting only objects
	  // containing specific `key:value` pairs.
	  _.where = function(obj, attrs) {
	    return _.filter(obj, _.matcher(attrs));
	  };
	
	  // Convenience version of a common use case of `find`: getting the first object
	  // containing specific `key:value` pairs.
	  _.findWhere = function(obj, attrs) {
	    return _.find(obj, _.matcher(attrs));
	  };
	
	  // Return the maximum element (or element-based computation).
	  _.max = function(obj, iteratee, context) {
	    var result = -Infinity, lastComputed = -Infinity,
	        value, computed;
	    if (iteratee == null && obj != null) {
	      obj = isArrayLike(obj) ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value > result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index, list) {
	        computed = iteratee(value, index, list);
	        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
	          result = value;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };
	
	  // Return the minimum element (or element-based computation).
	  _.min = function(obj, iteratee, context) {
	    var result = Infinity, lastComputed = Infinity,
	        value, computed;
	    if (iteratee == null && obj != null) {
	      obj = isArrayLike(obj) ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value < result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index, list) {
	        computed = iteratee(value, index, list);
	        if (computed < lastComputed || computed === Infinity && result === Infinity) {
	          result = value;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };
	
	  // Shuffle a collection, using the modern version of the
	  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
	  _.shuffle = function(obj) {
	    var set = isArrayLike(obj) ? obj : _.values(obj);
	    var length = set.length;
	    var shuffled = Array(length);
	    for (var index = 0, rand; index < length; index++) {
	      rand = _.random(0, index);
	      if (rand !== index) shuffled[index] = shuffled[rand];
	      shuffled[rand] = set[index];
	    }
	    return shuffled;
	  };
	
	  // Sample **n** random values from a collection.
	  // If **n** is not specified, returns a single random element.
	  // The internal `guard` argument allows it to work with `map`.
	  _.sample = function(obj, n, guard) {
	    if (n == null || guard) {
	      if (!isArrayLike(obj)) obj = _.values(obj);
	      return obj[_.random(obj.length - 1)];
	    }
	    return _.shuffle(obj).slice(0, Math.max(0, n));
	  };
	
	  // Sort the object's values by a criterion produced by an iteratee.
	  _.sortBy = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    return _.pluck(_.map(obj, function(value, index, list) {
	      return {
	        value: value,
	        index: index,
	        criteria: iteratee(value, index, list)
	      };
	    }).sort(function(left, right) {
	      var a = left.criteria;
	      var b = right.criteria;
	      if (a !== b) {
	        if (a > b || a === void 0) return 1;
	        if (a < b || b === void 0) return -1;
	      }
	      return left.index - right.index;
	    }), 'value');
	  };
	
	  // An internal function used for aggregate "group by" operations.
	  var group = function(behavior) {
	    return function(obj, iteratee, context) {
	      var result = {};
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index) {
	        var key = iteratee(value, index, obj);
	        behavior(result, value, key);
	      });
	      return result;
	    };
	  };
	
	  // Groups the object's values by a criterion. Pass either a string attribute
	  // to group by, or a function that returns the criterion.
	  _.groupBy = group(function(result, value, key) {
	    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
	  });
	
	  // Indexes the object's values by a criterion, similar to `groupBy`, but for
	  // when you know that your index values will be unique.
	  _.indexBy = group(function(result, value, key) {
	    result[key] = value;
	  });
	
	  // Counts instances of an object that group by a certain criterion. Pass
	  // either a string attribute to count by, or a function that returns the
	  // criterion.
	  _.countBy = group(function(result, value, key) {
	    if (_.has(result, key)) result[key]++; else result[key] = 1;
	  });
	
	  // Safely create a real, live array from anything iterable.
	  _.toArray = function(obj) {
	    if (!obj) return [];
	    if (_.isArray(obj)) return slice.call(obj);
	    if (isArrayLike(obj)) return _.map(obj, _.identity);
	    return _.values(obj);
	  };
	
	  // Return the number of elements in an object.
	  _.size = function(obj) {
	    if (obj == null) return 0;
	    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
	  };
	
	  // Split a collection into two arrays: one whose elements all satisfy the given
	  // predicate, and one whose elements all do not satisfy the predicate.
	  _.partition = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var pass = [], fail = [];
	    _.each(obj, function(value, key, obj) {
	      (predicate(value, key, obj) ? pass : fail).push(value);
	    });
	    return [pass, fail];
	  };
	
	  // Array Functions
	  // ---------------
	
	  // Get the first element of an array. Passing **n** will return the first N
	  // values in the array. Aliased as `head` and `take`. The **guard** check
	  // allows it to work with `_.map`.
	  _.first = _.head = _.take = function(array, n, guard) {
	    if (array == null) return void 0;
	    if (n == null || guard) return array[0];
	    return _.initial(array, array.length - n);
	  };
	
	  // Returns everything but the last entry of the array. Especially useful on
	  // the arguments object. Passing **n** will return all the values in
	  // the array, excluding the last N.
	  _.initial = function(array, n, guard) {
	    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
	  };
	
	  // Get the last element of an array. Passing **n** will return the last N
	  // values in the array.
	  _.last = function(array, n, guard) {
	    if (array == null) return void 0;
	    if (n == null || guard) return array[array.length - 1];
	    return _.rest(array, Math.max(0, array.length - n));
	  };
	
	  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
	  // Especially useful on the arguments object. Passing an **n** will return
	  // the rest N values in the array.
	  _.rest = _.tail = _.drop = function(array, n, guard) {
	    return slice.call(array, n == null || guard ? 1 : n);
	  };
	
	  // Trim out all falsy values from an array.
	  _.compact = function(array) {
	    return _.filter(array, _.identity);
	  };
	
	  // Internal implementation of a recursive `flatten` function.
	  var flatten = function(input, shallow, strict, startIndex) {
	    var output = [], idx = 0;
	    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
	      var value = input[i];
	      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
	        //flatten current level of array or arguments object
	        if (!shallow) value = flatten(value, shallow, strict);
	        var j = 0, len = value.length;
	        output.length += len;
	        while (j < len) {
	          output[idx++] = value[j++];
	        }
	      } else if (!strict) {
	        output[idx++] = value;
	      }
	    }
	    return output;
	  };
	
	  // Flatten out an array, either recursively (by default), or just one level.
	  _.flatten = function(array, shallow) {
	    return flatten(array, shallow, false);
	  };
	
	  // Return a version of the array that does not contain the specified value(s).
	  _.without = function(array) {
	    return _.difference(array, slice.call(arguments, 1));
	  };
	
	  // Produce a duplicate-free version of the array. If the array has already
	  // been sorted, you have the option of using a faster algorithm.
	  // Aliased as `unique`.
	  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
	    if (!_.isBoolean(isSorted)) {
	      context = iteratee;
	      iteratee = isSorted;
	      isSorted = false;
	    }
	    if (iteratee != null) iteratee = cb(iteratee, context);
	    var result = [];
	    var seen = [];
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var value = array[i],
	          computed = iteratee ? iteratee(value, i, array) : value;
	      if (isSorted) {
	        if (!i || seen !== computed) result.push(value);
	        seen = computed;
	      } else if (iteratee) {
	        if (!_.contains(seen, computed)) {
	          seen.push(computed);
	          result.push(value);
	        }
	      } else if (!_.contains(result, value)) {
	        result.push(value);
	      }
	    }
	    return result;
	  };
	
	  // Produce an array that contains the union: each distinct element from all of
	  // the passed-in arrays.
	  _.union = function() {
	    return _.uniq(flatten(arguments, true, true));
	  };
	
	  // Produce an array that contains every item shared between all the
	  // passed-in arrays.
	  _.intersection = function(array) {
	    var result = [];
	    var argsLength = arguments.length;
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var item = array[i];
	      if (_.contains(result, item)) continue;
	      for (var j = 1; j < argsLength; j++) {
	        if (!_.contains(arguments[j], item)) break;
	      }
	      if (j === argsLength) result.push(item);
	    }
	    return result;
	  };
	
	  // Take the difference between one array and a number of other arrays.
	  // Only the elements present in just the first array will remain.
	  _.difference = function(array) {
	    var rest = flatten(arguments, true, true, 1);
	    return _.filter(array, function(value){
	      return !_.contains(rest, value);
	    });
	  };
	
	  // Zip together multiple lists into a single array -- elements that share
	  // an index go together.
	  _.zip = function() {
	    return _.unzip(arguments);
	  };
	
	  // Complement of _.zip. Unzip accepts an array of arrays and groups
	  // each array's elements on shared indices
	  _.unzip = function(array) {
	    var length = array && _.max(array, getLength).length || 0;
	    var result = Array(length);
	
	    for (var index = 0; index < length; index++) {
	      result[index] = _.pluck(array, index);
	    }
	    return result;
	  };
	
	  // Converts lists into objects. Pass either a single array of `[key, value]`
	  // pairs, or two parallel arrays of the same length -- one of keys, and one of
	  // the corresponding values.
	  _.object = function(list, values) {
	    var result = {};
	    for (var i = 0, length = getLength(list); i < length; i++) {
	      if (values) {
	        result[list[i]] = values[i];
	      } else {
	        result[list[i][0]] = list[i][1];
	      }
	    }
	    return result;
	  };
	
	  // Generator function to create the findIndex and findLastIndex functions
	  function createPredicateIndexFinder(dir) {
	    return function(array, predicate, context) {
	      predicate = cb(predicate, context);
	      var length = getLength(array);
	      var index = dir > 0 ? 0 : length - 1;
	      for (; index >= 0 && index < length; index += dir) {
	        if (predicate(array[index], index, array)) return index;
	      }
	      return -1;
	    };
	  }
	
	  // Returns the first index on an array-like that passes a predicate test
	  _.findIndex = createPredicateIndexFinder(1);
	  _.findLastIndex = createPredicateIndexFinder(-1);
	
	  // Use a comparator function to figure out the smallest index at which
	  // an object should be inserted so as to maintain order. Uses binary search.
	  _.sortedIndex = function(array, obj, iteratee, context) {
	    iteratee = cb(iteratee, context, 1);
	    var value = iteratee(obj);
	    var low = 0, high = getLength(array);
	    while (low < high) {
	      var mid = Math.floor((low + high) / 2);
	      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
	    }
	    return low;
	  };
	
	  // Generator function to create the indexOf and lastIndexOf functions
	  function createIndexFinder(dir, predicateFind, sortedIndex) {
	    return function(array, item, idx) {
	      var i = 0, length = getLength(array);
	      if (typeof idx == 'number') {
	        if (dir > 0) {
	            i = idx >= 0 ? idx : Math.max(idx + length, i);
	        } else {
	            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
	        }
	      } else if (sortedIndex && idx && length) {
	        idx = sortedIndex(array, item);
	        return array[idx] === item ? idx : -1;
	      }
	      if (item !== item) {
	        idx = predicateFind(slice.call(array, i, length), _.isNaN);
	        return idx >= 0 ? idx + i : -1;
	      }
	      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
	        if (array[idx] === item) return idx;
	      }
	      return -1;
	    };
	  }
	
	  // Return the position of the first occurrence of an item in an array,
	  // or -1 if the item is not included in the array.
	  // If the array is large and already in sort order, pass `true`
	  // for **isSorted** to use binary search.
	  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
	  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);
	
	  // Generate an integer Array containing an arithmetic progression. A port of
	  // the native Python `range()` function. See
	  // [the Python documentation](http://docs.python.org/library/functions.html#range).
	  _.range = function(start, stop, step) {
	    if (stop == null) {
	      stop = start || 0;
	      start = 0;
	    }
	    step = step || 1;
	
	    var length = Math.max(Math.ceil((stop - start) / step), 0);
	    var range = Array(length);
	
	    for (var idx = 0; idx < length; idx++, start += step) {
	      range[idx] = start;
	    }
	
	    return range;
	  };
	
	  // Function (ahem) Functions
	  // ------------------
	
	  // Determines whether to execute a function as a constructor
	  // or a normal function with the provided arguments
	  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
	    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
	    var self = baseCreate(sourceFunc.prototype);
	    var result = sourceFunc.apply(self, args);
	    if (_.isObject(result)) return result;
	    return self;
	  };
	
	  // Create a function bound to a given object (assigning `this`, and arguments,
	  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
	  // available.
	  _.bind = function(func, context) {
	    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
	    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
	    var args = slice.call(arguments, 2);
	    var bound = function() {
	      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
	    };
	    return bound;
	  };
	
	  // Partially apply a function by creating a version that has had some of its
	  // arguments pre-filled, without changing its dynamic `this` context. _ acts
	  // as a placeholder, allowing any combination of arguments to be pre-filled.
	  _.partial = function(func) {
	    var boundArgs = slice.call(arguments, 1);
	    var bound = function() {
	      var position = 0, length = boundArgs.length;
	      var args = Array(length);
	      for (var i = 0; i < length; i++) {
	        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
	      }
	      while (position < arguments.length) args.push(arguments[position++]);
	      return executeBound(func, bound, this, this, args);
	    };
	    return bound;
	  };
	
	  // Bind a number of an object's methods to that object. Remaining arguments
	  // are the method names to be bound. Useful for ensuring that all callbacks
	  // defined on an object belong to it.
	  _.bindAll = function(obj) {
	    var i, length = arguments.length, key;
	    if (length <= 1) throw new Error('bindAll must be passed function names');
	    for (i = 1; i < length; i++) {
	      key = arguments[i];
	      obj[key] = _.bind(obj[key], obj);
	    }
	    return obj;
	  };
	
	  // Memoize an expensive function by storing its results.
	  _.memoize = function(func, hasher) {
	    var memoize = function(key) {
	      var cache = memoize.cache;
	      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
	      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
	      return cache[address];
	    };
	    memoize.cache = {};
	    return memoize;
	  };
	
	  // Delays a function for the given number of milliseconds, and then calls
	  // it with the arguments supplied.
	  _.delay = function(func, wait) {
	    var args = slice.call(arguments, 2);
	    return setTimeout(function(){
	      return func.apply(null, args);
	    }, wait);
	  };
	
	  // Defers a function, scheduling it to run after the current call stack has
	  // cleared.
	  _.defer = _.partial(_.delay, _, 1);
	
	  // Returns a function, that, when invoked, will only be triggered at most once
	  // during a given window of time. Normally, the throttled function will run
	  // as much as it can, without ever going more than once per `wait` duration;
	  // but if you'd like to disable the execution on the leading edge, pass
	  // `{leading: false}`. To disable execution on the trailing edge, ditto.
	  _.throttle = function(func, wait, options) {
	    var context, args, result;
	    var timeout = null;
	    var previous = 0;
	    if (!options) options = {};
	    var later = function() {
	      previous = options.leading === false ? 0 : _.now();
	      timeout = null;
	      result = func.apply(context, args);
	      if (!timeout) context = args = null;
	    };
	    return function() {
	      var now = _.now();
	      if (!previous && options.leading === false) previous = now;
	      var remaining = wait - (now - previous);
	      context = this;
	      args = arguments;
	      if (remaining <= 0 || remaining > wait) {
	        if (timeout) {
	          clearTimeout(timeout);
	          timeout = null;
	        }
	        previous = now;
	        result = func.apply(context, args);
	        if (!timeout) context = args = null;
	      } else if (!timeout && options.trailing !== false) {
	        timeout = setTimeout(later, remaining);
	      }
	      return result;
	    };
	  };
	
	  // Returns a function, that, as long as it continues to be invoked, will not
	  // be triggered. The function will be called after it stops being called for
	  // N milliseconds. If `immediate` is passed, trigger the function on the
	  // leading edge, instead of the trailing.
	  _.debounce = function(func, wait, immediate) {
	    var timeout, args, context, timestamp, result;
	
	    var later = function() {
	      var last = _.now() - timestamp;
	
	      if (last < wait && last >= 0) {
	        timeout = setTimeout(later, wait - last);
	      } else {
	        timeout = null;
	        if (!immediate) {
	          result = func.apply(context, args);
	          if (!timeout) context = args = null;
	        }
	      }
	    };
	
	    return function() {
	      context = this;
	      args = arguments;
	      timestamp = _.now();
	      var callNow = immediate && !timeout;
	      if (!timeout) timeout = setTimeout(later, wait);
	      if (callNow) {
	        result = func.apply(context, args);
	        context = args = null;
	      }
	
	      return result;
	    };
	  };
	
	  // Returns the first function passed as an argument to the second,
	  // allowing you to adjust arguments, run code before and after, and
	  // conditionally execute the original function.
	  _.wrap = function(func, wrapper) {
	    return _.partial(wrapper, func);
	  };
	
	  // Returns a negated version of the passed-in predicate.
	  _.negate = function(predicate) {
	    return function() {
	      return !predicate.apply(this, arguments);
	    };
	  };
	
	  // Returns a function that is the composition of a list of functions, each
	  // consuming the return value of the function that follows.
	  _.compose = function() {
	    var args = arguments;
	    var start = args.length - 1;
	    return function() {
	      var i = start;
	      var result = args[start].apply(this, arguments);
	      while (i--) result = args[i].call(this, result);
	      return result;
	    };
	  };
	
	  // Returns a function that will only be executed on and after the Nth call.
	  _.after = function(times, func) {
	    return function() {
	      if (--times < 1) {
	        return func.apply(this, arguments);
	      }
	    };
	  };
	
	  // Returns a function that will only be executed up to (but not including) the Nth call.
	  _.before = function(times, func) {
	    var memo;
	    return function() {
	      if (--times > 0) {
	        memo = func.apply(this, arguments);
	      }
	      if (times <= 1) func = null;
	      return memo;
	    };
	  };
	
	  // Returns a function that will be executed at most one time, no matter how
	  // often you call it. Useful for lazy initialization.
	  _.once = _.partial(_.before, 2);
	
	  // Object Functions
	  // ----------------
	
	  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
	  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
	  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
	                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];
	
	  function collectNonEnumProps(obj, keys) {
	    var nonEnumIdx = nonEnumerableProps.length;
	    var constructor = obj.constructor;
	    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;
	
	    // Constructor is a special case.
	    var prop = 'constructor';
	    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);
	
	    while (nonEnumIdx--) {
	      prop = nonEnumerableProps[nonEnumIdx];
	      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
	        keys.push(prop);
	      }
	    }
	  }
	
	  // Retrieve the names of an object's own properties.
	  // Delegates to **ECMAScript 5**'s native `Object.keys`
	  _.keys = function(obj) {
	    if (!_.isObject(obj)) return [];
	    if (nativeKeys) return nativeKeys(obj);
	    var keys = [];
	    for (var key in obj) if (_.has(obj, key)) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  };
	
	  // Retrieve all the property names of an object.
	  _.allKeys = function(obj) {
	    if (!_.isObject(obj)) return [];
	    var keys = [];
	    for (var key in obj) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  };
	
	  // Retrieve the values of an object's properties.
	  _.values = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var values = Array(length);
	    for (var i = 0; i < length; i++) {
	      values[i] = obj[keys[i]];
	    }
	    return values;
	  };
	
	  // Returns the results of applying the iteratee to each element of the object
	  // In contrast to _.map it returns an object
	  _.mapObject = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var keys =  _.keys(obj),
	          length = keys.length,
	          results = {},
	          currentKey;
	      for (var index = 0; index < length; index++) {
	        currentKey = keys[index];
	        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
	      }
	      return results;
	  };
	
	  // Convert an object into a list of `[key, value]` pairs.
	  _.pairs = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var pairs = Array(length);
	    for (var i = 0; i < length; i++) {
	      pairs[i] = [keys[i], obj[keys[i]]];
	    }
	    return pairs;
	  };
	
	  // Invert the keys and values of an object. The values must be serializable.
	  _.invert = function(obj) {
	    var result = {};
	    var keys = _.keys(obj);
	    for (var i = 0, length = keys.length; i < length; i++) {
	      result[obj[keys[i]]] = keys[i];
	    }
	    return result;
	  };
	
	  // Return a sorted list of the function names available on the object.
	  // Aliased as `methods`
	  _.functions = _.methods = function(obj) {
	    var names = [];
	    for (var key in obj) {
	      if (_.isFunction(obj[key])) names.push(key);
	    }
	    return names.sort();
	  };
	
	  // Extend a given object with all the properties in passed-in object(s).
	  _.extend = createAssigner(_.allKeys);
	
	  // Assigns a given object with all the own properties in the passed-in object(s)
	  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
	  _.extendOwn = _.assign = createAssigner(_.keys);
	
	  // Returns the first key on an object that passes a predicate test
	  _.findKey = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = _.keys(obj), key;
	    for (var i = 0, length = keys.length; i < length; i++) {
	      key = keys[i];
	      if (predicate(obj[key], key, obj)) return key;
	    }
	  };
	
	  // Return a copy of the object only containing the whitelisted properties.
	  _.pick = function(object, oiteratee, context) {
	    var result = {}, obj = object, iteratee, keys;
	    if (obj == null) return result;
	    if (_.isFunction(oiteratee)) {
	      keys = _.allKeys(obj);
	      iteratee = optimizeCb(oiteratee, context);
	    } else {
	      keys = flatten(arguments, false, false, 1);
	      iteratee = function(value, key, obj) { return key in obj; };
	      obj = Object(obj);
	    }
	    for (var i = 0, length = keys.length; i < length; i++) {
	      var key = keys[i];
	      var value = obj[key];
	      if (iteratee(value, key, obj)) result[key] = value;
	    }
	    return result;
	  };
	
	   // Return a copy of the object without the blacklisted properties.
	  _.omit = function(obj, iteratee, context) {
	    if (_.isFunction(iteratee)) {
	      iteratee = _.negate(iteratee);
	    } else {
	      var keys = _.map(flatten(arguments, false, false, 1), String);
	      iteratee = function(value, key) {
	        return !_.contains(keys, key);
	      };
	    }
	    return _.pick(obj, iteratee, context);
	  };
	
	  // Fill in a given object with default properties.
	  _.defaults = createAssigner(_.allKeys, true);
	
	  // Creates an object that inherits from the given prototype object.
	  // If additional properties are provided then they will be added to the
	  // created object.
	  _.create = function(prototype, props) {
	    var result = baseCreate(prototype);
	    if (props) _.extendOwn(result, props);
	    return result;
	  };
	
	  // Create a (shallow-cloned) duplicate of an object.
	  _.clone = function(obj) {
	    if (!_.isObject(obj)) return obj;
	    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
	  };
	
	  // Invokes interceptor with the obj, and then returns obj.
	  // The primary purpose of this method is to "tap into" a method chain, in
	  // order to perform operations on intermediate results within the chain.
	  _.tap = function(obj, interceptor) {
	    interceptor(obj);
	    return obj;
	  };
	
	  // Returns whether an object has a given set of `key:value` pairs.
	  _.isMatch = function(object, attrs) {
	    var keys = _.keys(attrs), length = keys.length;
	    if (object == null) return !length;
	    var obj = Object(object);
	    for (var i = 0; i < length; i++) {
	      var key = keys[i];
	      if (attrs[key] !== obj[key] || !(key in obj)) return false;
	    }
	    return true;
	  };
	
	
	  // Internal recursive comparison function for `isEqual`.
	  var eq = function(a, b, aStack, bStack) {
	    // Identical objects are equal. `0 === -0`, but they aren't identical.
	    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
	    if (a === b) return a !== 0 || 1 / a === 1 / b;
	    // A strict comparison is necessary because `null == undefined`.
	    if (a == null || b == null) return a === b;
	    // Unwrap any wrapped objects.
	    if (a instanceof _) a = a._wrapped;
	    if (b instanceof _) b = b._wrapped;
	    // Compare `[[Class]]` names.
	    var className = toString.call(a);
	    if (className !== toString.call(b)) return false;
	    switch (className) {
	      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
	      case '[object RegExp]':
	      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
	      case '[object String]':
	        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
	        // equivalent to `new String("5")`.
	        return '' + a === '' + b;
	      case '[object Number]':
	        // `NaN`s are equivalent, but non-reflexive.
	        // Object(NaN) is equivalent to NaN
	        if (+a !== +a) return +b !== +b;
	        // An `egal` comparison is performed for other numeric values.
	        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
	      case '[object Date]':
	      case '[object Boolean]':
	        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
	        // millisecond representations. Note that invalid dates with millisecond representations
	        // of `NaN` are not equivalent.
	        return +a === +b;
	    }
	
	    var areArrays = className === '[object Array]';
	    if (!areArrays) {
	      if (typeof a != 'object' || typeof b != 'object') return false;
	
	      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
	      // from different frames are.
	      var aCtor = a.constructor, bCtor = b.constructor;
	      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
	                               _.isFunction(bCtor) && bCtor instanceof bCtor)
	                          && ('constructor' in a && 'constructor' in b)) {
	        return false;
	      }
	    }
	    // Assume equality for cyclic structures. The algorithm for detecting cyclic
	    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
	
	    // Initializing stack of traversed objects.
	    // It's done here since we only need them for objects and arrays comparison.
	    aStack = aStack || [];
	    bStack = bStack || [];
	    var length = aStack.length;
	    while (length--) {
	      // Linear search. Performance is inversely proportional to the number of
	      // unique nested structures.
	      if (aStack[length] === a) return bStack[length] === b;
	    }
	
	    // Add the first object to the stack of traversed objects.
	    aStack.push(a);
	    bStack.push(b);
	
	    // Recursively compare objects and arrays.
	    if (areArrays) {
	      // Compare array lengths to determine if a deep comparison is necessary.
	      length = a.length;
	      if (length !== b.length) return false;
	      // Deep compare the contents, ignoring non-numeric properties.
	      while (length--) {
	        if (!eq(a[length], b[length], aStack, bStack)) return false;
	      }
	    } else {
	      // Deep compare objects.
	      var keys = _.keys(a), key;
	      length = keys.length;
	      // Ensure that both objects contain the same number of properties before comparing deep equality.
	      if (_.keys(b).length !== length) return false;
	      while (length--) {
	        // Deep compare each member
	        key = keys[length];
	        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
	      }
	    }
	    // Remove the first object from the stack of traversed objects.
	    aStack.pop();
	    bStack.pop();
	    return true;
	  };
	
	  // Perform a deep comparison to check if two objects are equal.
	  _.isEqual = function(a, b) {
	    return eq(a, b);
	  };
	
	  // Is a given array, string, or object empty?
	  // An "empty" object has no enumerable own-properties.
	  _.isEmpty = function(obj) {
	    if (obj == null) return true;
	    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
	    return _.keys(obj).length === 0;
	  };
	
	  // Is a given value a DOM element?
	  _.isElement = function(obj) {
	    return !!(obj && obj.nodeType === 1);
	  };
	
	  // Is a given value an array?
	  // Delegates to ECMA5's native Array.isArray
	  _.isArray = nativeIsArray || function(obj) {
	    return toString.call(obj) === '[object Array]';
	  };
	
	  // Is a given variable an object?
	  _.isObject = function(obj) {
	    var type = typeof obj;
	    return type === 'function' || type === 'object' && !!obj;
	  };
	
	  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
	  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
	    _['is' + name] = function(obj) {
	      return toString.call(obj) === '[object ' + name + ']';
	    };
	  });
	
	  // Define a fallback version of the method in browsers (ahem, IE < 9), where
	  // there isn't any inspectable "Arguments" type.
	  if (!_.isArguments(arguments)) {
	    _.isArguments = function(obj) {
	      return _.has(obj, 'callee');
	    };
	  }
	
	  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
	  // IE 11 (#1621), and in Safari 8 (#1929).
	  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
	    _.isFunction = function(obj) {
	      return typeof obj == 'function' || false;
	    };
	  }
	
	  // Is a given object a finite number?
	  _.isFinite = function(obj) {
	    return isFinite(obj) && !isNaN(parseFloat(obj));
	  };
	
	  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
	  _.isNaN = function(obj) {
	    return _.isNumber(obj) && obj !== +obj;
	  };
	
	  // Is a given value a boolean?
	  _.isBoolean = function(obj) {
	    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
	  };
	
	  // Is a given value equal to null?
	  _.isNull = function(obj) {
	    return obj === null;
	  };
	
	  // Is a given variable undefined?
	  _.isUndefined = function(obj) {
	    return obj === void 0;
	  };
	
	  // Shortcut function for checking if an object has a given property directly
	  // on itself (in other words, not on a prototype).
	  _.has = function(obj, key) {
	    return obj != null && hasOwnProperty.call(obj, key);
	  };
	
	  // Utility Functions
	  // -----------------
	
	  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
	  // previous owner. Returns a reference to the Underscore object.
	  _.noConflict = function() {
	    root._ = previousUnderscore;
	    return this;
	  };
	
	  // Keep the identity function around for default iteratees.
	  _.identity = function(value) {
	    return value;
	  };
	
	  // Predicate-generating functions. Often useful outside of Underscore.
	  _.constant = function(value) {
	    return function() {
	      return value;
	    };
	  };
	
	  _.noop = function(){};
	
	  _.property = property;
	
	  // Generates a function for a given object that returns a given property.
	  _.propertyOf = function(obj) {
	    return obj == null ? function(){} : function(key) {
	      return obj[key];
	    };
	  };
	
	  // Returns a predicate for checking whether an object has a given set of
	  // `key:value` pairs.
	  _.matcher = _.matches = function(attrs) {
	    attrs = _.extendOwn({}, attrs);
	    return function(obj) {
	      return _.isMatch(obj, attrs);
	    };
	  };
	
	  // Run a function **n** times.
	  _.times = function(n, iteratee, context) {
	    var accum = Array(Math.max(0, n));
	    iteratee = optimizeCb(iteratee, context, 1);
	    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
	    return accum;
	  };
	
	  // Return a random integer between min and max (inclusive).
	  _.random = function(min, max) {
	    if (max == null) {
	      max = min;
	      min = 0;
	    }
	    return min + Math.floor(Math.random() * (max - min + 1));
	  };
	
	  // A (possibly faster) way to get the current timestamp as an integer.
	  _.now = Date.now || function() {
	    return new Date().getTime();
	  };
	
	   // List of HTML entities for escaping.
	  var escapeMap = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#x27;',
	    '`': '&#x60;'
	  };
	  var unescapeMap = _.invert(escapeMap);
	
	  // Functions for escaping and unescaping strings to/from HTML interpolation.
	  var createEscaper = function(map) {
	    var escaper = function(match) {
	      return map[match];
	    };
	    // Regexes for identifying a key that needs to be escaped
	    var source = '(?:' + _.keys(map).join('|') + ')';
	    var testRegexp = RegExp(source);
	    var replaceRegexp = RegExp(source, 'g');
	    return function(string) {
	      string = string == null ? '' : '' + string;
	      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
	    };
	  };
	  _.escape = createEscaper(escapeMap);
	  _.unescape = createEscaper(unescapeMap);
	
	  // If the value of the named `property` is a function then invoke it with the
	  // `object` as context; otherwise, return it.
	  _.result = function(object, property, fallback) {
	    var value = object == null ? void 0 : object[property];
	    if (value === void 0) {
	      value = fallback;
	    }
	    return _.isFunction(value) ? value.call(object) : value;
	  };
	
	  // Generate a unique integer id (unique within the entire client session).
	  // Useful for temporary DOM ids.
	  var idCounter = 0;
	  _.uniqueId = function(prefix) {
	    var id = ++idCounter + '';
	    return prefix ? prefix + id : id;
	  };
	
	  // By default, Underscore uses ERB-style template delimiters, change the
	  // following template settings to use alternative delimiters.
	  _.templateSettings = {
	    evaluate    : /<%([\s\S]+?)%>/g,
	    interpolate : /<%=([\s\S]+?)%>/g,
	    escape      : /<%-([\s\S]+?)%>/g
	  };
	
	  // When customizing `templateSettings`, if you don't want to define an
	  // interpolation, evaluation or escaping regex, we need one that is
	  // guaranteed not to match.
	  var noMatch = /(.)^/;
	
	  // Certain characters need to be escaped so that they can be put into a
	  // string literal.
	  var escapes = {
	    "'":      "'",
	    '\\':     '\\',
	    '\r':     'r',
	    '\n':     'n',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };
	
	  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;
	
	  var escapeChar = function(match) {
	    return '\\' + escapes[match];
	  };
	
	  // JavaScript micro-templating, similar to John Resig's implementation.
	  // Underscore templating handles arbitrary delimiters, preserves whitespace,
	  // and correctly escapes quotes within interpolated code.
	  // NB: `oldSettings` only exists for backwards compatibility.
	  _.template = function(text, settings, oldSettings) {
	    if (!settings && oldSettings) settings = oldSettings;
	    settings = _.defaults({}, settings, _.templateSettings);
	
	    // Combine delimiters into one regular expression via alternation.
	    var matcher = RegExp([
	      (settings.escape || noMatch).source,
	      (settings.interpolate || noMatch).source,
	      (settings.evaluate || noMatch).source
	    ].join('|') + '|$', 'g');
	
	    // Compile the template source, escaping string literals appropriately.
	    var index = 0;
	    var source = "__p+='";
	    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
	      source += text.slice(index, offset).replace(escaper, escapeChar);
	      index = offset + match.length;
	
	      if (escape) {
	        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
	      } else if (interpolate) {
	        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
	      } else if (evaluate) {
	        source += "';\n" + evaluate + "\n__p+='";
	      }
	
	      // Adobe VMs need the match returned to produce the correct offest.
	      return match;
	    });
	    source += "';\n";
	
	    // If a variable is not specified, place data values in local scope.
	    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';
	
	    source = "var __t,__p='',__j=Array.prototype.join," +
	      "print=function(){__p+=__j.call(arguments,'');};\n" +
	      source + 'return __p;\n';
	
	    try {
	      var render = new Function(settings.variable || 'obj', '_', source);
	    } catch (e) {
	      e.source = source;
	      throw e;
	    }
	
	    var template = function(data) {
	      return render.call(this, data, _);
	    };
	
	    // Provide the compiled source as a convenience for precompilation.
	    var argument = settings.variable || 'obj';
	    template.source = 'function(' + argument + '){\n' + source + '}';
	
	    return template;
	  };
	
	  // Add a "chain" function. Start chaining a wrapped Underscore object.
	  _.chain = function(obj) {
	    var instance = _(obj);
	    instance._chain = true;
	    return instance;
	  };
	
	  // OOP
	  // ---------------
	  // If Underscore is called as a function, it returns a wrapped object that
	  // can be used OO-style. This wrapper holds altered versions of all the
	  // underscore functions. Wrapped objects may be chained.
	
	  // Helper function to continue chaining intermediate results.
	  var result = function(instance, obj) {
	    return instance._chain ? _(obj).chain() : obj;
	  };
	
	  // Add your own custom functions to the Underscore object.
	  _.mixin = function(obj) {
	    _.each(_.functions(obj), function(name) {
	      var func = _[name] = obj[name];
	      _.prototype[name] = function() {
	        var args = [this._wrapped];
	        push.apply(args, arguments);
	        return result(this, func.apply(_, args));
	      };
	    });
	  };
	
	  // Add all of the Underscore functions to the wrapper object.
	  _.mixin(_);
	
	  // Add all mutator Array functions to the wrapper.
	  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      var obj = this._wrapped;
	      method.apply(obj, arguments);
	      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
	      return result(this, obj);
	    };
	  });
	
	  // Add all accessor Array functions to the wrapper.
	  _.each(['concat', 'join', 'slice'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      return result(this, method.apply(this._wrapped, arguments));
	    };
	  });
	
	  // Extracts the result from a wrapped and chained object.
	  _.prototype.value = function() {
	    return this._wrapped;
	  };
	
	  // Provide unwrapping proxy for some methods used in engine operations
	  // such as arithmetic and JSON stringification.
	  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;
	
	  _.prototype.toString = function() {
	    return '' + this._wrapped;
	  };
	
	  // AMD registration happens at the end for compatibility with AMD loaders
	  // that may not enforce next-turn semantics on modules. Even though general
	  // practice for AMD registration is to be anonymous, underscore registers
	  // as a named module because, like jQuery, it is a base library that is
	  // popular enough to be bundled in a third party lib, but not be part of
	  // an AMD load request. Those cases could generate an error when an
	  // anonymous define() is called outside of a loader request.
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	}.call(this));


/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	
	 handlebars v4.0.5
	
	Copyright (C) 2011-2015 by Yehuda Katz
	
	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:
	
	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	
	@license
	*/
	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory();
		else if(typeof define === 'function' && define.amd)
			define([], factory);
		else if(typeof exports === 'object')
			exports["Handlebars"] = factory();
		else
			root["Handlebars"] = factory();
	})(this, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;
	
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};
	
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	
	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;
	
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	
	
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
	
		var _interopRequireDefault = __webpack_require__(1)['default'];
	
		exports.__esModule = true;
	
		var _handlebarsRuntime = __webpack_require__(2);
	
		var _handlebarsRuntime2 = _interopRequireDefault(_handlebarsRuntime);
	
		// Compiler imports
	
		var _handlebarsCompilerAst = __webpack_require__(21);
	
		var _handlebarsCompilerAst2 = _interopRequireDefault(_handlebarsCompilerAst);
	
		var _handlebarsCompilerBase = __webpack_require__(22);
	
		var _handlebarsCompilerCompiler = __webpack_require__(27);
	
		var _handlebarsCompilerJavascriptCompiler = __webpack_require__(28);
	
		var _handlebarsCompilerJavascriptCompiler2 = _interopRequireDefault(_handlebarsCompilerJavascriptCompiler);
	
		var _handlebarsCompilerVisitor = __webpack_require__(25);
	
		var _handlebarsCompilerVisitor2 = _interopRequireDefault(_handlebarsCompilerVisitor);
	
		var _handlebarsNoConflict = __webpack_require__(20);
	
		var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);
	
		var _create = _handlebarsRuntime2['default'].create;
		function create() {
		  var hb = _create();
	
		  hb.compile = function (input, options) {
		    return _handlebarsCompilerCompiler.compile(input, options, hb);
		  };
		  hb.precompile = function (input, options) {
		    return _handlebarsCompilerCompiler.precompile(input, options, hb);
		  };
	
		  hb.AST = _handlebarsCompilerAst2['default'];
		  hb.Compiler = _handlebarsCompilerCompiler.Compiler;
		  hb.JavaScriptCompiler = _handlebarsCompilerJavascriptCompiler2['default'];
		  hb.Parser = _handlebarsCompilerBase.parser;
		  hb.parse = _handlebarsCompilerBase.parse;
	
		  return hb;
		}
	
		var inst = create();
		inst.create = create;
	
		_handlebarsNoConflict2['default'](inst);
	
		inst.Visitor = _handlebarsCompilerVisitor2['default'];
	
		inst['default'] = inst;
	
		exports['default'] = inst;
		module.exports = exports['default'];
	
	/***/ },
	/* 1 */
	/***/ function(module, exports) {
	
		"use strict";
	
		exports["default"] = function (obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		};
	
		exports.__esModule = true;
	
	/***/ },
	/* 2 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
	
		var _interopRequireWildcard = __webpack_require__(3)['default'];
	
		var _interopRequireDefault = __webpack_require__(1)['default'];
	
		exports.__esModule = true;
	
		var _handlebarsBase = __webpack_require__(4);
	
		var base = _interopRequireWildcard(_handlebarsBase);
	
		// Each of these augment the Handlebars object. No need to setup here.
		// (This is done to easily share code between commonjs and browse envs)
	
		var _handlebarsSafeString = __webpack_require__(18);
	
		var _handlebarsSafeString2 = _interopRequireDefault(_handlebarsSafeString);
	
		var _handlebarsException = __webpack_require__(6);
	
		var _handlebarsException2 = _interopRequireDefault(_handlebarsException);
	
		var _handlebarsUtils = __webpack_require__(5);
	
		var Utils = _interopRequireWildcard(_handlebarsUtils);
	
		var _handlebarsRuntime = __webpack_require__(19);
	
		var runtime = _interopRequireWildcard(_handlebarsRuntime);
	
		var _handlebarsNoConflict = __webpack_require__(20);
	
		var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);
	
		// For compatibility and usage outside of module systems, make the Handlebars object a namespace
		function create() {
		  var hb = new base.HandlebarsEnvironment();
	
		  Utils.extend(hb, base);
		  hb.SafeString = _handlebarsSafeString2['default'];
		  hb.Exception = _handlebarsException2['default'];
		  hb.Utils = Utils;
		  hb.escapeExpression = Utils.escapeExpression;
	
		  hb.VM = runtime;
		  hb.template = function (spec) {
		    return runtime.template(spec, hb);
		  };
	
		  return hb;
		}
	
		var inst = create();
		inst.create = create;
	
		_handlebarsNoConflict2['default'](inst);
	
		inst['default'] = inst;
	
		exports['default'] = inst;
		module.exports = exports['default'];
	
	/***/ },
	/* 3 */
	/***/ function(module, exports) {
	
		"use strict";
	
		exports["default"] = function (obj) {
		  if (obj && obj.__esModule) {
		    return obj;
		  } else {
		    var newObj = {};
	
		    if (obj != null) {
		      for (var key in obj) {
		        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
		      }
		    }
	
		    newObj["default"] = obj;
		    return newObj;
		  }
		};
	
		exports.__esModule = true;
	
	/***/ },
	/* 4 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
	
		var _interopRequireDefault = __webpack_require__(1)['default'];
	
		exports.__esModule = true;
		exports.HandlebarsEnvironment = HandlebarsEnvironment;
	
		var _utils = __webpack_require__(5);
	
		var _exception = __webpack_require__(6);
	
		var _exception2 = _interopRequireDefault(_exception);
	
		var _helpers = __webpack_require__(7);
	
		var _decorators = __webpack_require__(15);
	
		var _logger = __webpack_require__(17);
	
		var _logger2 = _interopRequireDefault(_logger);
	
		var VERSION = '4.0.5';
		exports.VERSION = VERSION;
		var COMPILER_REVISION = 7;
	
		exports.COMPILER_REVISION = COMPILER_REVISION;
		var REVISION_CHANGES = {
		  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
		  2: '== 1.0.0-rc.3',
		  3: '== 1.0.0-rc.4',
		  4: '== 1.x.x',
		  5: '== 2.0.0-alpha.x',
		  6: '>= 2.0.0-beta.1',
		  7: '>= 4.0.0'
		};
	
		exports.REVISION_CHANGES = REVISION_CHANGES;
		var objectType = '[object Object]';
	
		function HandlebarsEnvironment(helpers, partials, decorators) {
		  this.helpers = helpers || {};
		  this.partials = partials || {};
		  this.decorators = decorators || {};
	
		  _helpers.registerDefaultHelpers(this);
		  _decorators.registerDefaultDecorators(this);
		}
	
		HandlebarsEnvironment.prototype = {
		  constructor: HandlebarsEnvironment,
	
		  logger: _logger2['default'],
		  log: _logger2['default'].log,
	
		  registerHelper: function registerHelper(name, fn) {
		    if (_utils.toString.call(name) === objectType) {
		      if (fn) {
		        throw new _exception2['default']('Arg not supported with multiple helpers');
		      }
		      _utils.extend(this.helpers, name);
		    } else {
		      this.helpers[name] = fn;
		    }
		  },
		  unregisterHelper: function unregisterHelper(name) {
		    delete this.helpers[name];
		  },
	
		  registerPartial: function registerPartial(name, partial) {
		    if (_utils.toString.call(name) === objectType) {
		      _utils.extend(this.partials, name);
		    } else {
		      if (typeof partial === 'undefined') {
		        throw new _exception2['default']('Attempting to register a partial called "' + name + '" as undefined');
		      }
		      this.partials[name] = partial;
		    }
		  },
		  unregisterPartial: function unregisterPartial(name) {
		    delete this.partials[name];
		  },
	
		  registerDecorator: function registerDecorator(name, fn) {
		    if (_utils.toString.call(name) === objectType) {
		      if (fn) {
		        throw new _exception2['default']('Arg not supported with multiple decorators');
		      }
		      _utils.extend(this.decorators, name);
		    } else {
		      this.decorators[name] = fn;
		    }
		  },
		  unregisterDecorator: function unregisterDecorator(name) {
		    delete this.decorators[name];
		  }
		};
	
		var log = _logger2['default'].log;
	
		exports.log = log;
		exports.createFrame = _utils.createFrame;
		exports.logger = _logger2['default'];
	
	/***/ },
	/* 5 */
	/***/ function(module, exports) {
	
		'use strict';
	
		exports.__esModule = true;
		exports.extend = extend;
		exports.indexOf = indexOf;
		exports.escapeExpression = escapeExpression;
		exports.isEmpty = isEmpty;
		exports.createFrame = createFrame;
		exports.blockParams = blockParams;
		exports.appendContextPath = appendContextPath;
		var escape = {
		  '&': '&amp;',
		  '<': '&lt;',
		  '>': '&gt;',
		  '"': '&quot;',
		  "'": '&#x27;',
		  '`': '&#x60;',
		  '=': '&#x3D;'
		};
	
		var badChars = /[&<>"'`=]/g,
		    possible = /[&<>"'`=]/;
	
		function escapeChar(chr) {
		  return escape[chr];
		}
	
		function extend(obj /* , ...source */) {
		  for (var i = 1; i < arguments.length; i++) {
		    for (var key in arguments[i]) {
		      if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
		        obj[key] = arguments[i][key];
		      }
		    }
		  }
	
		  return obj;
		}
	
		var toString = Object.prototype.toString;
	
		exports.toString = toString;
		// Sourced from lodash
		// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
		/* eslint-disable func-style */
		var isFunction = function isFunction(value) {
		  return typeof value === 'function';
		};
		// fallback for older versions of Chrome and Safari
		/* istanbul ignore next */
		if (isFunction(/x/)) {
		  exports.isFunction = isFunction = function (value) {
		    return typeof value === 'function' && toString.call(value) === '[object Function]';
		  };
		}
		exports.isFunction = isFunction;
	
		/* eslint-enable func-style */
	
		/* istanbul ignore next */
		var isArray = Array.isArray || function (value) {
		  return value && typeof value === 'object' ? toString.call(value) === '[object Array]' : false;
		};
	
		exports.isArray = isArray;
		// Older IE versions do not directly support indexOf so we must implement our own, sadly.
	
		function indexOf(array, value) {
		  for (var i = 0, len = array.length; i < len; i++) {
		    if (array[i] === value) {
		      return i;
		    }
		  }
		  return -1;
		}
	
		function escapeExpression(string) {
		  if (typeof string !== 'string') {
		    // don't escape SafeStrings, since they're already safe
		    if (string && string.toHTML) {
		      return string.toHTML();
		    } else if (string == null) {
		      return '';
		    } else if (!string) {
		      return string + '';
		    }
	
		    // Force a string conversion as this will be done by the append regardless and
		    // the regex test will do this transparently behind the scenes, causing issues if
		    // an object's to string has escaped characters in it.
		    string = '' + string;
		  }
	
		  if (!possible.test(string)) {
		    return string;
		  }
		  return string.replace(badChars, escapeChar);
		}
	
		function isEmpty(value) {
		  if (!value && value !== 0) {
		    return true;
		  } else if (isArray(value) && value.length === 0) {
		    return true;
		  } else {
		    return false;
		  }
		}
	
		function createFrame(object) {
		  var frame = extend({}, object);
		  frame._parent = object;
		  return frame;
		}
	
		function blockParams(params, ids) {
		  params.path = ids;
		  return params;
		}
	
		function appendContextPath(contextPath, id) {
		  return (contextPath ? contextPath + '.' : '') + id;
		}
	
	/***/ },
	/* 6 */
	/***/ function(module, exports) {
	
		'use strict';
	
		exports.__esModule = true;
	
		var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];
	
		function Exception(message, node) {
		  var loc = node && node.loc,
		      line = undefined,
		      column = undefined;
		  if (loc) {
		    line = loc.start.line;
		    column = loc.start.column;
	
		    message += ' - ' + line + ':' + column;
		  }
	
		  var tmp = Error.prototype.constructor.call(this, message);
	
		  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
		  for (var idx = 0; idx < errorProps.length; idx++) {
		    this[errorProps[idx]] = tmp[errorProps[idx]];
		  }
	
		  /* istanbul ignore else */
		  if (Error.captureStackTrace) {
		    Error.captureStackTrace(this, Exception);
		  }
	
		  if (loc) {
		    this.lineNumber = line;
		    this.column = column;
		  }
		}
	
		Exception.prototype = new Error();
	
		exports['default'] = Exception;
		module.exports = exports['default'];
	
	/***/ },
	/* 7 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
	
		var _interopRequireDefault = __webpack_require__(1)['default'];
	
		exports.__esModule = true;
		exports.registerDefaultHelpers = registerDefaultHelpers;
	
		var _helpersBlockHelperMissing = __webpack_require__(8);
	
		var _helpersBlockHelperMissing2 = _interopRequireDefault(_helpersBlockHelperMissing);
	
		var _helpersEach = __webpack_require__(9);
	
		var _helpersEach2 = _interopRequireDefault(_helpersEach);
	
		var _helpersHelperMissing = __webpack_require__(10);
	
		var _helpersHelperMissing2 = _interopRequireDefault(_helpersHelperMissing);
	
		var _helpersIf = __webpack_require__(11);
	
		var _helpersIf2 = _interopRequireDefault(_helpersIf);
	
		var _helpersLog = __webpack_require__(12);
	
		var _helpersLog2 = _interopRequireDefault(_helpersLog);
	
		var _helpersLookup = __webpack_require__(13);
	
		var _helpersLookup2 = _interopRequireDefault(_helpersLookup);
	
		var _helpersWith = __webpack_require__(14);
	
		var _helpersWith2 = _interopRequireDefault(_helpersWith);
	
		function registerDefaultHelpers(instance) {
		  _helpersBlockHelperMissing2['default'](instance);
		  _helpersEach2['default'](instance);
		  _helpersHelperMissing2['default'](instance);
		  _helpersIf2['default'](instance);
		  _helpersLog2['default'](instance);
		  _helpersLookup2['default'](instance);
		  _helpersWith2['default'](instance);
		}
	
	/***/ },
	/* 8 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
	
		exports.__esModule = true;
	
		var _utils = __webpack_require__(5);
	
		exports['default'] = function (instance) {
		  instance.registerHelper('blockHelperMissing', function (context, options) {
		    var inverse = options.inverse,
		        fn = options.fn;
	
		    if (context === true) {
		      return fn(this);
		    } else if (context === false || context == null) {
		      return inverse(this);
		    } else if (_utils.isArray(context)) {
		      if (context.length > 0) {
		        if (options.ids) {
		          options.ids = [options.name];
		        }
	
		        return instance.helpers.each(context, options);
		      } else {
		        return inverse(this);
		      }
		    } else {
		      if (options.data && options.ids) {
		        var data = _utils.createFrame(options.data);
		        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.name);
		        options = { data: data };
		      }
	
		      return fn(context, options);
		    }
		  });
		};
	
		module.exports = exports['default'];
	
	/***/ },
	/* 9 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
	
		var _interopRequireDefault = __webpack_require__(1)['default'];
	
		exports.__esModule = true;
	
		var _utils = __webpack_require__(5);
	
		var _exception = __webpack_require__(6);
	
		var _exception2 = _interopRequireDefault(_exception);
	
		exports['default'] = function (instance) {
		  instance.registerHelper('each', function (context, options) {
		    if (!options) {
		      throw new _exception2['default']('Must pass iterator to #each');
		    }
	
		    var fn = options.fn,
		        inverse = options.inverse,
		        i = 0,
		        ret = '',
		        data = undefined,
		        contextPath = undefined;
	
		    if (options.data && options.ids) {
		      contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';
		    }
	
		    if (_utils.isFunction(context)) {
		      context = context.call(this);
		    }
	
		    if (options.data) {
		      data = _utils.createFrame(options.data);
		    }
	
		    function execIteration(field, index, last) {
		      if (data) {
		        data.key = field;
		        data.index = index;
		        data.first = index === 0;
		        data.last = !!last;
	
		        if (contextPath) {
		          data.contextPath = contextPath + field;
		        }
		      }
	
		      ret = ret + fn(context[field], {
		        data: data,
		        blockParams: _utils.blockParams([context[field], field], [contextPath + field, null])
		      });
		    }
	
		    if (context && typeof context === 'object') {
		      if (_utils.isArray(context)) {
		        for (var j = context.length; i < j; i++) {
		          if (i in context) {
		            execIteration(i, i, i === context.length - 1);
		          }
		        }
		      } else {
		        var priorKey = undefined;
	
		        for (var key in context) {
		          if (context.hasOwnProperty(key)) {
		            // We're running the iterations one step out of sync so we can detect
		            // the last iteration without have to scan the object twice and create
		            // an itermediate keys array.
		            if (priorKey !== undefined) {
		              execIteration(priorKey, i - 1);
		            }
		            priorKey = key;
		            i++;
		          }
		        }
		        if (priorKey !== undefined) {
		          execIteration(priorKey, i - 1, true);
		        }
		      }
		    }
	
		    if (i === 0) {
		      ret = inverse(this);
		    }
	
		    return ret;
		  });
		};
	
		module.exports = exports['default'];
	
	/***/ },
	/* 10 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
	
		var _interopRequireDefault = __webpack_require__(1)['default'];
	
		exports.__esModule = true;
	
		var _exception = __webpack_require__(6);
	
		var _exception2 = _interopRequireDefault(_exception);
	
		exports['default'] = function (instance) {
		  instance.registerHelper('helperMissing', function () /* [args, ]options */{
		    if (arguments.length === 1) {
		      // A missing field in a {{foo}} construct.
		      return undefined;
		    } else {
		      // Someone is actually trying to call something, blow up.
		      throw new _exception2['default']('Missing helper: "' + arguments[arguments.length - 1].name + '"');
		    }
		  });
		};
	
		module.exports = exports['default'];
	
	/***/ },
	/* 11 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
	
		exports.__esModule = true;
	
		var _utils = __webpack_require__(5);
	
		exports['default'] = function (instance) {
		  instance.registerHelper('if', function (conditional, options) {
		    if (_utils.isFunction(conditional)) {
		      conditional = conditional.call(this);
		    }
	
		    // Default behavior is to render the positive path if the value is truthy and not empty.
		    // The `includeZero` option may be set to treat the condtional as purely not empty based on the
		    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
		    if (!options.hash.includeZero && !conditional || _utils.isEmpty(conditional)) {
		      return options.inverse(this);
		    } else {
		      return options.fn(this);
		    }
		  });
	
		  instance.registerHelper('unless', function (conditional, options) {
		    return instance.helpers['if'].call(this, conditional, { fn: options.inverse, inverse: options.fn, hash: options.hash });
		  });
		};
	
		module.exports = exports['default'];
	
	/***/ },
	/* 12 */
	/***/ function(module, exports) {
	
		'use strict';
	
		exports.__esModule = true;
	
		exports['default'] = function (instance) {
		  instance.registerHelper('log', function () /* message, options */{
		    var args = [undefined],
		        options = arguments[arguments.length - 1];
		    for (var i = 0; i < arguments.length - 1; i++) {
		      args.push(arguments[i]);
		    }
	
		    var level = 1;
		    if (options.hash.level != null) {
		      level = options.hash.level;
		    } else if (options.data && options.data.level != null) {
		      level = options.data.level;
		    }
		    args[0] = level;
	
		    instance.log.apply(instance, args);
		  });
		};
	
		module.exports = exports['default'];
	
	/***/ },
	/* 13 */
	/***/ function(module, exports) {
	
		'use strict';
	
		exports.__esModule = true;
	
		exports['default'] = function (instance) {
		  instance.registerHelper('lookup', function (obj, field) {
		    return obj && obj[field];
		  });
		};
	
		module.exports = exports['default'];
	
	/***/ },
	/* 14 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
	
		exports.__esModule = true;
	
		var _utils = __webpack_require__(5);
	
		exports['default'] = function (instance) {
		  instance.registerHelper('with', function (context, options) {
		    if (_utils.isFunction(context)) {
		      context = context.call(this);
		    }
	
		    var fn = options.fn;
	
		    if (!_utils.isEmpty(context)) {
		      var data = options.data;
		      if (options.data && options.ids) {
		        data = _utils.createFrame(options.data);
		        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]);
		      }
	
		      return fn(context, {
		        data: data,
		        blockParams: _utils.blockParams([context], [data && data.contextPath])
		      });
		    } else {
		      return options.inverse(this);
		    }
		  });
		};
	
		module.exports = exports['default'];
	
	/***/ },
	/* 15 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
	
		var _interopRequireDefault = __webpack_require__(1)['default'];
	
		exports.__esModule = true;
		exports.registerDefaultDecorators = registerDefaultDecorators;
	
		var _decoratorsInline = __webpack_require__(16);
	
		var _decoratorsInline2 = _interopRequireDefault(_decoratorsInline);
	
		function registerDefaultDecorators(instance) {
		  _decoratorsInline2['default'](instance);
		}
	
	/***/ },
	/* 16 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
	
		exports.__esModule = true;
	
		var _utils = __webpack_require__(5);
	
		exports['default'] = function (instance) {
		  instance.registerDecorator('inline', function (fn, props, container, options) {
		    var ret = fn;
		    if (!props.partials) {
		      props.partials = {};
		      ret = function (context, options) {
		        // Create a new partials stack frame prior to exec.
		        var original = container.partials;
		        container.partials = _utils.extend({}, original, props.partials);
		        var ret = fn(context, options);
		        container.partials = original;
		        return ret;
		      };
		    }
	
		    props.partials[options.args[0]] = options.fn;
	
		    return ret;
		  });
		};
	
		module.exports = exports['default'];
	
	/***/ },
	/* 17 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
	
		exports.__esModule = true;
	
		var _utils = __webpack_require__(5);
	
		var logger = {
		  methodMap: ['debug', 'info', 'warn', 'error'],
		  level: 'info',
	
		  // Maps a given level value to the `methodMap` indexes above.
		  lookupLevel: function lookupLevel(level) {
		    if (typeof level === 'string') {
		      var levelMap = _utils.indexOf(logger.methodMap, level.toLowerCase());
		      if (levelMap >= 0) {
		        level = levelMap;
		      } else {
		        level = parseInt(level, 10);
		      }
		    }
	
		    return level;
		  },
	
		  // Can be overridden in the host environment
		  log: function log(level) {
		    level = logger.lookupLevel(level);
	
		    if (typeof console !== 'undefined' && logger.lookupLevel(logger.level) <= level) {
		      var method = logger.methodMap[level];
		      if (!console[method]) {
		        // eslint-disable-line no-console
		        method = 'log';
		      }
	
		      for (var _len = arguments.length, message = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		        message[_key - 1] = arguments[_key];
		      }
	
		      console[method].apply(console, message); // eslint-disable-line no-console
		    }
		  }
		};
	
		exports['default'] = logger;
		module.exports = exports['default'];
	
	/***/ },
	/* 18 */
	/***/ function(module, exports) {
	
		// Build out our basic SafeString type
		'use strict';
	
		exports.__esModule = true;
		function SafeString(string) {
		  this.string = string;
		}
	
		SafeString.prototype.toString = SafeString.prototype.toHTML = function () {
		  return '' + this.string;
		};
	
		exports['default'] = SafeString;
		module.exports = exports['default'];
	
	/***/ },
	/* 19 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
	
		var _interopRequireWildcard = __webpack_require__(3)['default'];
	
		var _interopRequireDefault = __webpack_require__(1)['default'];
	
		exports.__esModule = true;
		exports.checkRevision = checkRevision;
		exports.template = template;
		exports.wrapProgram = wrapProgram;
		exports.resolvePartial = resolvePartial;
		exports.invokePartial = invokePartial;
		exports.noop = noop;
	
		var _utils = __webpack_require__(5);
	
		var Utils = _interopRequireWildcard(_utils);
	
		var _exception = __webpack_require__(6);
	
		var _exception2 = _interopRequireDefault(_exception);
	
		var _base = __webpack_require__(4);
	
		function checkRevision(compilerInfo) {
		  var compilerRevision = compilerInfo && compilerInfo[0] || 1,
		      currentRevision = _base.COMPILER_REVISION;
	
		  if (compilerRevision !== currentRevision) {
		    if (compilerRevision < currentRevision) {
		      var runtimeVersions = _base.REVISION_CHANGES[currentRevision],
		          compilerVersions = _base.REVISION_CHANGES[compilerRevision];
		      throw new _exception2['default']('Template was precompiled with an older version of Handlebars than the current runtime. ' + 'Please update your precompiler to a newer version (' + runtimeVersions + ') or downgrade your runtime to an older version (' + compilerVersions + ').');
		    } else {
		      // Use the embedded version info since the runtime doesn't know about this revision yet
		      throw new _exception2['default']('Template was precompiled with a newer version of Handlebars than the current runtime. ' + 'Please update your runtime to a newer version (' + compilerInfo[1] + ').');
		    }
		  }
		}
	
		function template(templateSpec, env) {
		  /* istanbul ignore next */
		  if (!env) {
		    throw new _exception2['default']('No environment passed to template');
		  }
		  if (!templateSpec || !templateSpec.main) {
		    throw new _exception2['default']('Unknown template object: ' + typeof templateSpec);
		  }
	
		  templateSpec.main.decorator = templateSpec.main_d;
	
		  // Note: Using env.VM references rather than local var references throughout this section to allow
		  // for external users to override these as psuedo-supported APIs.
		  env.VM.checkRevision(templateSpec.compiler);
	
		  function invokePartialWrapper(partial, context, options) {
		    if (options.hash) {
		      context = Utils.extend({}, context, options.hash);
		      if (options.ids) {
		        options.ids[0] = true;
		      }
		    }
	
		    partial = env.VM.resolvePartial.call(this, partial, context, options);
		    var result = env.VM.invokePartial.call(this, partial, context, options);
	
		    if (result == null && env.compile) {
		      options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
		      result = options.partials[options.name](context, options);
		    }
		    if (result != null) {
		      if (options.indent) {
		        var lines = result.split('\n');
		        for (var i = 0, l = lines.length; i < l; i++) {
		          if (!lines[i] && i + 1 === l) {
		            break;
		          }
	
		          lines[i] = options.indent + lines[i];
		        }
		        result = lines.join('\n');
		      }
		      return result;
		    } else {
		      throw new _exception2['default']('The partial ' + options.name + ' could not be compiled when running in runtime-only mode');
		    }
		  }
	
		  // Just add water
		  var container = {
		    strict: function strict(obj, name) {
		      if (!(name in obj)) {
		        throw new _exception2['default']('"' + name + '" not defined in ' + obj);
		      }
		      return obj[name];
		    },
		    lookup: function lookup(depths, name) {
		      var len = depths.length;
		      for (var i = 0; i < len; i++) {
		        if (depths[i] && depths[i][name] != null) {
		          return depths[i][name];
		        }
		      }
		    },
		    lambda: function lambda(current, context) {
		      return typeof current === 'function' ? current.call(context) : current;
		    },
	
		    escapeExpression: Utils.escapeExpression,
		    invokePartial: invokePartialWrapper,
	
		    fn: function fn(i) {
		      var ret = templateSpec[i];
		      ret.decorator = templateSpec[i + '_d'];
		      return ret;
		    },
	
		    programs: [],
		    program: function program(i, data, declaredBlockParams, blockParams, depths) {
		      var programWrapper = this.programs[i],
		          fn = this.fn(i);
		      if (data || depths || blockParams || declaredBlockParams) {
		        programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths);
		      } else if (!programWrapper) {
		        programWrapper = this.programs[i] = wrapProgram(this, i, fn);
		      }
		      return programWrapper;
		    },
	
		    data: function data(value, depth) {
		      while (value && depth--) {
		        value = value._parent;
		      }
		      return value;
		    },
		    merge: function merge(param, common) {
		      var obj = param || common;
	
		      if (param && common && param !== common) {
		        obj = Utils.extend({}, common, param);
		      }
	
		      return obj;
		    },
	
		    noop: env.VM.noop,
		    compilerInfo: templateSpec.compiler
		  };
	
		  function ret(context) {
		    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
		    var data = options.data;
	
		    ret._setup(options);
		    if (!options.partial && templateSpec.useData) {
		      data = initData(context, data);
		    }
		    var depths = undefined,
		        blockParams = templateSpec.useBlockParams ? [] : undefined;
		    if (templateSpec.useDepths) {
		      if (options.depths) {
		        depths = context !== options.depths[0] ? [context].concat(options.depths) : options.depths;
		      } else {
		        depths = [context];
		      }
		    }
	
		    function main(context /*, options*/) {
		      return '' + templateSpec.main(container, context, container.helpers, container.partials, data, blockParams, depths);
		    }
		    main = executeDecorators(templateSpec.main, main, container, options.depths || [], data, blockParams);
		    return main(context, options);
		  }
		  ret.isTop = true;
	
		  ret._setup = function (options) {
		    if (!options.partial) {
		      container.helpers = container.merge(options.helpers, env.helpers);
	
		      if (templateSpec.usePartial) {
		        container.partials = container.merge(options.partials, env.partials);
		      }
		      if (templateSpec.usePartial || templateSpec.useDecorators) {
		        container.decorators = container.merge(options.decorators, env.decorators);
		      }
		    } else {
		      container.helpers = options.helpers;
		      container.partials = options.partials;
		      container.decorators = options.decorators;
		    }
		  };
	
		  ret._child = function (i, data, blockParams, depths) {
		    if (templateSpec.useBlockParams && !blockParams) {
		      throw new _exception2['default']('must pass block params');
		    }
		    if (templateSpec.useDepths && !depths) {
		      throw new _exception2['default']('must pass parent depths');
		    }
	
		    return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths);
		  };
		  return ret;
		}
	
		function wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {
		  function prog(context) {
		    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
		    var currentDepths = depths;
		    if (depths && context !== depths[0]) {
		      currentDepths = [context].concat(depths);
		    }
	
		    return fn(container, context, container.helpers, container.partials, options.data || data, blockParams && [options.blockParams].concat(blockParams), currentDepths);
		  }
	
		  prog = executeDecorators(fn, prog, container, depths, data, blockParams);
	
		  prog.program = i;
		  prog.depth = depths ? depths.length : 0;
		  prog.blockParams = declaredBlockParams || 0;
		  return prog;
		}
	
		function resolvePartial(partial, context, options) {
		  if (!partial) {
		    if (options.name === '@partial-block') {
		      partial = options.data['partial-block'];
		    } else {
		      partial = options.partials[options.name];
		    }
		  } else if (!partial.call && !options.name) {
		    // This is a dynamic partial that returned a string
		    options.name = partial;
		    partial = options.partials[partial];
		  }
		  return partial;
		}
	
		function invokePartial(partial, context, options) {
		  options.partial = true;
		  if (options.ids) {
		    options.data.contextPath = options.ids[0] || options.data.contextPath;
		  }
	
		  var partialBlock = undefined;
		  if (options.fn && options.fn !== noop) {
		    options.data = _base.createFrame(options.data);
		    partialBlock = options.data['partial-block'] = options.fn;
	
		    if (partialBlock.partials) {
		      options.partials = Utils.extend({}, options.partials, partialBlock.partials);
		    }
		  }
	
		  if (partial === undefined && partialBlock) {
		    partial = partialBlock;
		  }
	
		  if (partial === undefined) {
		    throw new _exception2['default']('The partial ' + options.name + ' could not be found');
		  } else if (partial instanceof Function) {
		    return partial(context, options);
		  }
		}
	
		function noop() {
		  return '';
		}
	
		function initData(context, data) {
		  if (!data || !('root' in data)) {
		    data = data ? _base.createFrame(data) : {};
		    data.root = context;
		  }
		  return data;
		}
	
		function executeDecorators(fn, prog, container, depths, data, blockParams) {
		  if (fn.decorator) {
		    var props = {};
		    prog = fn.decorator(prog, props, container, depths && depths[0], data, blockParams, depths);
		    Utils.extend(prog, props);
		  }
		  return prog;
		}
	
	/***/ },
	/* 20 */
	/***/ function(module, exports) {
	
		/* WEBPACK VAR INJECTION */(function(global) {/* global window */
		'use strict';
	
		exports.__esModule = true;
	
		exports['default'] = function (Handlebars) {
		  /* istanbul ignore next */
		  var root = typeof global !== 'undefined' ? global : window,
		      $Handlebars = root.Handlebars;
		  /* istanbul ignore next */
		  Handlebars.noConflict = function () {
		    if (root.Handlebars === Handlebars) {
		      root.Handlebars = $Handlebars;
		    }
		    return Handlebars;
		  };
		};
	
		module.exports = exports['default'];
		/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))
	
	/***/ },
	/* 21 */
	/***/ function(module, exports) {
	
		'use strict';
	
		exports.__esModule = true;
		var AST = {
		  // Public API used to evaluate derived attributes regarding AST nodes
		  helpers: {
		    // a mustache is definitely a helper if:
		    // * it is an eligible helper, and
		    // * it has at least one parameter or hash segment
		    helperExpression: function helperExpression(node) {
		      return node.type === 'SubExpression' || (node.type === 'MustacheStatement' || node.type === 'BlockStatement') && !!(node.params && node.params.length || node.hash);
		    },
	
		    scopedId: function scopedId(path) {
		      return (/^\.|this\b/.test(path.original)
		      );
		    },
	
		    // an ID is simple if it only has one part, and that part is not
		    // `..` or `this`.
		    simpleId: function simpleId(path) {
		      return path.parts.length === 1 && !AST.helpers.scopedId(path) && !path.depth;
		    }
		  }
		};
	
		// Must be exported as an object rather than the root of the module as the jison lexer
		// must modify the object to operate properly.
		exports['default'] = AST;
		module.exports = exports['default'];
	
	/***/ },
	/* 22 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
	
		var _interopRequireDefault = __webpack_require__(1)['default'];
	
		var _interopRequireWildcard = __webpack_require__(3)['default'];
	
		exports.__esModule = true;
		exports.parse = parse;
	
		var _parser = __webpack_require__(23);
	
		var _parser2 = _interopRequireDefault(_parser);
	
		var _whitespaceControl = __webpack_require__(24);
	
		var _whitespaceControl2 = _interopRequireDefault(_whitespaceControl);
	
		var _helpers = __webpack_require__(26);
	
		var Helpers = _interopRequireWildcard(_helpers);
	
		var _utils = __webpack_require__(5);
	
		exports.parser = _parser2['default'];
	
		var yy = {};
		_utils.extend(yy, Helpers);
	
		function parse(input, options) {
		  // Just return if an already-compiled AST was passed in.
		  if (input.type === 'Program') {
		    return input;
		  }
	
		  _parser2['default'].yy = yy;
	
		  // Altering the shared object here, but this is ok as parser is a sync operation
		  yy.locInfo = function (locInfo) {
		    return new yy.SourceLocation(options && options.srcName, locInfo);
		  };
	
		  var strip = new _whitespaceControl2['default'](options);
		  return strip.accept(_parser2['default'].parse(input));
		}
	
	/***/ },
	/* 23 */
	/***/ function(module, exports) {
	
		/* istanbul ignore next */
		/* Jison generated parser */
		"use strict";
	
		var handlebars = (function () {
		    var parser = { trace: function trace() {},
		        yy: {},
		        symbols_: { "error": 2, "root": 3, "program": 4, "EOF": 5, "program_repetition0": 6, "statement": 7, "mustache": 8, "block": 9, "rawBlock": 10, "partial": 11, "partialBlock": 12, "content": 13, "COMMENT": 14, "CONTENT": 15, "openRawBlock": 16, "rawBlock_repetition_plus0": 17, "END_RAW_BLOCK": 18, "OPEN_RAW_BLOCK": 19, "helperName": 20, "openRawBlock_repetition0": 21, "openRawBlock_option0": 22, "CLOSE_RAW_BLOCK": 23, "openBlock": 24, "block_option0": 25, "closeBlock": 26, "openInverse": 27, "block_option1": 28, "OPEN_BLOCK": 29, "openBlock_repetition0": 30, "openBlock_option0": 31, "openBlock_option1": 32, "CLOSE": 33, "OPEN_INVERSE": 34, "openInverse_repetition0": 35, "openInverse_option0": 36, "openInverse_option1": 37, "openInverseChain": 38, "OPEN_INVERSE_CHAIN": 39, "openInverseChain_repetition0": 40, "openInverseChain_option0": 41, "openInverseChain_option1": 42, "inverseAndProgram": 43, "INVERSE": 44, "inverseChain": 45, "inverseChain_option0": 46, "OPEN_ENDBLOCK": 47, "OPEN": 48, "mustache_repetition0": 49, "mustache_option0": 50, "OPEN_UNESCAPED": 51, "mustache_repetition1": 52, "mustache_option1": 53, "CLOSE_UNESCAPED": 54, "OPEN_PARTIAL": 55, "partialName": 56, "partial_repetition0": 57, "partial_option0": 58, "openPartialBlock": 59, "OPEN_PARTIAL_BLOCK": 60, "openPartialBlock_repetition0": 61, "openPartialBlock_option0": 62, "param": 63, "sexpr": 64, "OPEN_SEXPR": 65, "sexpr_repetition0": 66, "sexpr_option0": 67, "CLOSE_SEXPR": 68, "hash": 69, "hash_repetition_plus0": 70, "hashSegment": 71, "ID": 72, "EQUALS": 73, "blockParams": 74, "OPEN_BLOCK_PARAMS": 75, "blockParams_repetition_plus0": 76, "CLOSE_BLOCK_PARAMS": 77, "path": 78, "dataName": 79, "STRING": 80, "NUMBER": 81, "BOOLEAN": 82, "UNDEFINED": 83, "NULL": 84, "DATA": 85, "pathSegments": 86, "SEP": 87, "$accept": 0, "$end": 1 },
		        terminals_: { 2: "error", 5: "EOF", 14: "COMMENT", 15: "CONTENT", 18: "END_RAW_BLOCK", 19: "OPEN_RAW_BLOCK", 23: "CLOSE_RAW_BLOCK", 29: "OPEN_BLOCK", 33: "CLOSE", 34: "OPEN_INVERSE", 39: "OPEN_INVERSE_CHAIN", 44: "INVERSE", 47: "OPEN_ENDBLOCK", 48: "OPEN", 51: "OPEN_UNESCAPED", 54: "CLOSE_UNESCAPED", 55: "OPEN_PARTIAL", 60: "OPEN_PARTIAL_BLOCK", 65: "OPEN_SEXPR", 68: "CLOSE_SEXPR", 72: "ID", 73: "EQUALS", 75: "OPEN_BLOCK_PARAMS", 77: "CLOSE_BLOCK_PARAMS", 80: "STRING", 81: "NUMBER", 82: "BOOLEAN", 83: "UNDEFINED", 84: "NULL", 85: "DATA", 87: "SEP" },
		        productions_: [0, [3, 2], [4, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [13, 1], [10, 3], [16, 5], [9, 4], [9, 4], [24, 6], [27, 6], [38, 6], [43, 2], [45, 3], [45, 1], [26, 3], [8, 5], [8, 5], [11, 5], [12, 3], [59, 5], [63, 1], [63, 1], [64, 5], [69, 1], [71, 3], [74, 3], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [56, 1], [56, 1], [79, 2], [78, 1], [86, 3], [86, 1], [6, 0], [6, 2], [17, 1], [17, 2], [21, 0], [21, 2], [22, 0], [22, 1], [25, 0], [25, 1], [28, 0], [28, 1], [30, 0], [30, 2], [31, 0], [31, 1], [32, 0], [32, 1], [35, 0], [35, 2], [36, 0], [36, 1], [37, 0], [37, 1], [40, 0], [40, 2], [41, 0], [41, 1], [42, 0], [42, 1], [46, 0], [46, 1], [49, 0], [49, 2], [50, 0], [50, 1], [52, 0], [52, 2], [53, 0], [53, 1], [57, 0], [57, 2], [58, 0], [58, 1], [61, 0], [61, 2], [62, 0], [62, 1], [66, 0], [66, 2], [67, 0], [67, 1], [70, 1], [70, 2], [76, 1], [76, 2]],
		        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$
		        /**/) {
	
		            var $0 = $$.length - 1;
		            switch (yystate) {
		                case 1:
		                    return $$[$0 - 1];
		                    break;
		                case 2:
		                    this.$ = yy.prepareProgram($$[$0]);
		                    break;
		                case 3:
		                    this.$ = $$[$0];
		                    break;
		                case 4:
		                    this.$ = $$[$0];
		                    break;
		                case 5:
		                    this.$ = $$[$0];
		                    break;
		                case 6:
		                    this.$ = $$[$0];
		                    break;
		                case 7:
		                    this.$ = $$[$0];
		                    break;
		                case 8:
		                    this.$ = $$[$0];
		                    break;
		                case 9:
		                    this.$ = {
		                        type: 'CommentStatement',
		                        value: yy.stripComment($$[$0]),
		                        strip: yy.stripFlags($$[$0], $$[$0]),
		                        loc: yy.locInfo(this._$)
		                    };
	
		                    break;
		                case 10:
		                    this.$ = {
		                        type: 'ContentStatement',
		                        original: $$[$0],
		                        value: $$[$0],
		                        loc: yy.locInfo(this._$)
		                    };
	
		                    break;
		                case 11:
		                    this.$ = yy.prepareRawBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
		                    break;
		                case 12:
		                    this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1] };
		                    break;
		                case 13:
		                    this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], false, this._$);
		                    break;
		                case 14:
		                    this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], true, this._$);
		                    break;
		                case 15:
		                    this.$ = { open: $$[$0 - 5], path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
		                    break;
		                case 16:
		                    this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
		                    break;
		                case 17:
		                    this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
		                    break;
		                case 18:
		                    this.$ = { strip: yy.stripFlags($$[$0 - 1], $$[$0 - 1]), program: $$[$0] };
		                    break;
		                case 19:
		                    var inverse = yy.prepareBlock($$[$0 - 2], $$[$0 - 1], $$[$0], $$[$0], false, this._$),
		                        program = yy.prepareProgram([inverse], $$[$0 - 1].loc);
		                    program.chained = true;
	
		                    this.$ = { strip: $$[$0 - 2].strip, program: program, chain: true };
	
		                    break;
		                case 20:
		                    this.$ = $$[$0];
		                    break;
		                case 21:
		                    this.$ = { path: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 2], $$[$0]) };
		                    break;
		                case 22:
		                    this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
		                    break;
		                case 23:
		                    this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
		                    break;
		                case 24:
		                    this.$ = {
		                        type: 'PartialStatement',
		                        name: $$[$0 - 3],
		                        params: $$[$0 - 2],
		                        hash: $$[$0 - 1],
		                        indent: '',
		                        strip: yy.stripFlags($$[$0 - 4], $$[$0]),
		                        loc: yy.locInfo(this._$)
		                    };
	
		                    break;
		                case 25:
		                    this.$ = yy.preparePartialBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
		                    break;
		                case 26:
		                    this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 4], $$[$0]) };
		                    break;
		                case 27:
		                    this.$ = $$[$0];
		                    break;
		                case 28:
		                    this.$ = $$[$0];
		                    break;
		                case 29:
		                    this.$ = {
		                        type: 'SubExpression',
		                        path: $$[$0 - 3],
		                        params: $$[$0 - 2],
		                        hash: $$[$0 - 1],
		                        loc: yy.locInfo(this._$)
		                    };
	
		                    break;
		                case 30:
		                    this.$ = { type: 'Hash', pairs: $$[$0], loc: yy.locInfo(this._$) };
		                    break;
		                case 31:
		                    this.$ = { type: 'HashPair', key: yy.id($$[$0 - 2]), value: $$[$0], loc: yy.locInfo(this._$) };
		                    break;
		                case 32:
		                    this.$ = yy.id($$[$0 - 1]);
		                    break;
		                case 33:
		                    this.$ = $$[$0];
		                    break;
		                case 34:
		                    this.$ = $$[$0];
		                    break;
		                case 35:
		                    this.$ = { type: 'StringLiteral', value: $$[$0], original: $$[$0], loc: yy.locInfo(this._$) };
		                    break;
		                case 36:
		                    this.$ = { type: 'NumberLiteral', value: Number($$[$0]), original: Number($$[$0]), loc: yy.locInfo(this._$) };
		                    break;
		                case 37:
		                    this.$ = { type: 'BooleanLiteral', value: $$[$0] === 'true', original: $$[$0] === 'true', loc: yy.locInfo(this._$) };
		                    break;
		                case 38:
		                    this.$ = { type: 'UndefinedLiteral', original: undefined, value: undefined, loc: yy.locInfo(this._$) };
		                    break;
		                case 39:
		                    this.$ = { type: 'NullLiteral', original: null, value: null, loc: yy.locInfo(this._$) };
		                    break;
		                case 40:
		                    this.$ = $$[$0];
		                    break;
		                case 41:
		                    this.$ = $$[$0];
		                    break;
		                case 42:
		                    this.$ = yy.preparePath(true, $$[$0], this._$);
		                    break;
		                case 43:
		                    this.$ = yy.preparePath(false, $$[$0], this._$);
		                    break;
		                case 44:
		                    $$[$0 - 2].push({ part: yy.id($$[$0]), original: $$[$0], separator: $$[$0 - 1] });this.$ = $$[$0 - 2];
		                    break;
		                case 45:
		                    this.$ = [{ part: yy.id($$[$0]), original: $$[$0] }];
		                    break;
		                case 46:
		                    this.$ = [];
		                    break;
		                case 47:
		                    $$[$0 - 1].push($$[$0]);
		                    break;
		                case 48:
		                    this.$ = [$$[$0]];
		                    break;
		                case 49:
		                    $$[$0 - 1].push($$[$0]);
		                    break;
		                case 50:
		                    this.$ = [];
		                    break;
		                case 51:
		                    $$[$0 - 1].push($$[$0]);
		                    break;
		                case 58:
		                    this.$ = [];
		                    break;
		                case 59:
		                    $$[$0 - 1].push($$[$0]);
		                    break;
		                case 64:
		                    this.$ = [];
		                    break;
		                case 65:
		                    $$[$0 - 1].push($$[$0]);
		                    break;
		                case 70:
		                    this.$ = [];
		                    break;
		                case 71:
		                    $$[$0 - 1].push($$[$0]);
		                    break;
		                case 78:
		                    this.$ = [];
		                    break;
		                case 79:
		                    $$[$0 - 1].push($$[$0]);
		                    break;
		                case 82:
		                    this.$ = [];
		                    break;
		                case 83:
		                    $$[$0 - 1].push($$[$0]);
		                    break;
		                case 86:
		                    this.$ = [];
		                    break;
		                case 87:
		                    $$[$0 - 1].push($$[$0]);
		                    break;
		                case 90:
		                    this.$ = [];
		                    break;
		                case 91:
		                    $$[$0 - 1].push($$[$0]);
		                    break;
		                case 94:
		                    this.$ = [];
		                    break;
		                case 95:
		                    $$[$0 - 1].push($$[$0]);
		                    break;
		                case 98:
		                    this.$ = [$$[$0]];
		                    break;
		                case 99:
		                    $$[$0 - 1].push($$[$0]);
		                    break;
		                case 100:
		                    this.$ = [$$[$0]];
		                    break;
		                case 101:
		                    $$[$0 - 1].push($$[$0]);
		                    break;
		            }
		        },
		        table: [{ 3: 1, 4: 2, 5: [2, 46], 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 1: [3] }, { 5: [1, 4] }, { 5: [2, 2], 7: 5, 8: 6, 9: 7, 10: 8, 11: 9, 12: 10, 13: 11, 14: [1, 12], 15: [1, 20], 16: 17, 19: [1, 23], 24: 15, 27: 16, 29: [1, 21], 34: [1, 22], 39: [2, 2], 44: [2, 2], 47: [2, 2], 48: [1, 13], 51: [1, 14], 55: [1, 18], 59: 19, 60: [1, 24] }, { 1: [2, 1] }, { 5: [2, 47], 14: [2, 47], 15: [2, 47], 19: [2, 47], 29: [2, 47], 34: [2, 47], 39: [2, 47], 44: [2, 47], 47: [2, 47], 48: [2, 47], 51: [2, 47], 55: [2, 47], 60: [2, 47] }, { 5: [2, 3], 14: [2, 3], 15: [2, 3], 19: [2, 3], 29: [2, 3], 34: [2, 3], 39: [2, 3], 44: [2, 3], 47: [2, 3], 48: [2, 3], 51: [2, 3], 55: [2, 3], 60: [2, 3] }, { 5: [2, 4], 14: [2, 4], 15: [2, 4], 19: [2, 4], 29: [2, 4], 34: [2, 4], 39: [2, 4], 44: [2, 4], 47: [2, 4], 48: [2, 4], 51: [2, 4], 55: [2, 4], 60: [2, 4] }, { 5: [2, 5], 14: [2, 5], 15: [2, 5], 19: [2, 5], 29: [2, 5], 34: [2, 5], 39: [2, 5], 44: [2, 5], 47: [2, 5], 48: [2, 5], 51: [2, 5], 55: [2, 5], 60: [2, 5] }, { 5: [2, 6], 14: [2, 6], 15: [2, 6], 19: [2, 6], 29: [2, 6], 34: [2, 6], 39: [2, 6], 44: [2, 6], 47: [2, 6], 48: [2, 6], 51: [2, 6], 55: [2, 6], 60: [2, 6] }, { 5: [2, 7], 14: [2, 7], 15: [2, 7], 19: [2, 7], 29: [2, 7], 34: [2, 7], 39: [2, 7], 44: [2, 7], 47: [2, 7], 48: [2, 7], 51: [2, 7], 55: [2, 7], 60: [2, 7] }, { 5: [2, 8], 14: [2, 8], 15: [2, 8], 19: [2, 8], 29: [2, 8], 34: [2, 8], 39: [2, 8], 44: [2, 8], 47: [2, 8], 48: [2, 8], 51: [2, 8], 55: [2, 8], 60: [2, 8] }, { 5: [2, 9], 14: [2, 9], 15: [2, 9], 19: [2, 9], 29: [2, 9], 34: [2, 9], 39: [2, 9], 44: [2, 9], 47: [2, 9], 48: [2, 9], 51: [2, 9], 55: [2, 9], 60: [2, 9] }, { 20: 25, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 36, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 37, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 4: 38, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 13: 40, 15: [1, 20], 17: 39 }, { 20: 42, 56: 41, 64: 43, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 45, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 5: [2, 10], 14: [2, 10], 15: [2, 10], 18: [2, 10], 19: [2, 10], 29: [2, 10], 34: [2, 10], 39: [2, 10], 44: [2, 10], 47: [2, 10], 48: [2, 10], 51: [2, 10], 55: [2, 10], 60: [2, 10] }, { 20: 46, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 47, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 48, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 42, 56: 49, 64: 43, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [2, 78], 49: 50, 65: [2, 78], 72: [2, 78], 80: [2, 78], 81: [2, 78], 82: [2, 78], 83: [2, 78], 84: [2, 78], 85: [2, 78] }, { 23: [2, 33], 33: [2, 33], 54: [2, 33], 65: [2, 33], 68: [2, 33], 72: [2, 33], 75: [2, 33], 80: [2, 33], 81: [2, 33], 82: [2, 33], 83: [2, 33], 84: [2, 33], 85: [2, 33] }, { 23: [2, 34], 33: [2, 34], 54: [2, 34], 65: [2, 34], 68: [2, 34], 72: [2, 34], 75: [2, 34], 80: [2, 34], 81: [2, 34], 82: [2, 34], 83: [2, 34], 84: [2, 34], 85: [2, 34] }, { 23: [2, 35], 33: [2, 35], 54: [2, 35], 65: [2, 35], 68: [2, 35], 72: [2, 35], 75: [2, 35], 80: [2, 35], 81: [2, 35], 82: [2, 35], 83: [2, 35], 84: [2, 35], 85: [2, 35] }, { 23: [2, 36], 33: [2, 36], 54: [2, 36], 65: [2, 36], 68: [2, 36], 72: [2, 36], 75: [2, 36], 80: [2, 36], 81: [2, 36], 82: [2, 36], 83: [2, 36], 84: [2, 36], 85: [2, 36] }, { 23: [2, 37], 33: [2, 37], 54: [2, 37], 65: [2, 37], 68: [2, 37], 72: [2, 37], 75: [2, 37], 80: [2, 37], 81: [2, 37], 82: [2, 37], 83: [2, 37], 84: [2, 37], 85: [2, 37] }, { 23: [2, 38], 33: [2, 38], 54: [2, 38], 65: [2, 38], 68: [2, 38], 72: [2, 38], 75: [2, 38], 80: [2, 38], 81: [2, 38], 82: [2, 38], 83: [2, 38], 84: [2, 38], 85: [2, 38] }, { 23: [2, 39], 33: [2, 39], 54: [2, 39], 65: [2, 39], 68: [2, 39], 72: [2, 39], 75: [2, 39], 80: [2, 39], 81: [2, 39], 82: [2, 39], 83: [2, 39], 84: [2, 39], 85: [2, 39] }, { 23: [2, 43], 33: [2, 43], 54: [2, 43], 65: [2, 43], 68: [2, 43], 72: [2, 43], 75: [2, 43], 80: [2, 43], 81: [2, 43], 82: [2, 43], 83: [2, 43], 84: [2, 43], 85: [2, 43], 87: [1, 51] }, { 72: [1, 35], 86: 52 }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 52: 53, 54: [2, 82], 65: [2, 82], 72: [2, 82], 80: [2, 82], 81: [2, 82], 82: [2, 82], 83: [2, 82], 84: [2, 82], 85: [2, 82] }, { 25: 54, 38: 56, 39: [1, 58], 43: 57, 44: [1, 59], 45: 55, 47: [2, 54] }, { 28: 60, 43: 61, 44: [1, 59], 47: [2, 56] }, { 13: 63, 15: [1, 20], 18: [1, 62] }, { 15: [2, 48], 18: [2, 48] }, { 33: [2, 86], 57: 64, 65: [2, 86], 72: [2, 86], 80: [2, 86], 81: [2, 86], 82: [2, 86], 83: [2, 86], 84: [2, 86], 85: [2, 86] }, { 33: [2, 40], 65: [2, 40], 72: [2, 40], 80: [2, 40], 81: [2, 40], 82: [2, 40], 83: [2, 40], 84: [2, 40], 85: [2, 40] }, { 33: [2, 41], 65: [2, 41], 72: [2, 41], 80: [2, 41], 81: [2, 41], 82: [2, 41], 83: [2, 41], 84: [2, 41], 85: [2, 41] }, { 20: 65, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 66, 47: [1, 67] }, { 30: 68, 33: [2, 58], 65: [2, 58], 72: [2, 58], 75: [2, 58], 80: [2, 58], 81: [2, 58], 82: [2, 58], 83: [2, 58], 84: [2, 58], 85: [2, 58] }, { 33: [2, 64], 35: 69, 65: [2, 64], 72: [2, 64], 75: [2, 64], 80: [2, 64], 81: [2, 64], 82: [2, 64], 83: [2, 64], 84: [2, 64], 85: [2, 64] }, { 21: 70, 23: [2, 50], 65: [2, 50], 72: [2, 50], 80: [2, 50], 81: [2, 50], 82: [2, 50], 83: [2, 50], 84: [2, 50], 85: [2, 50] }, { 33: [2, 90], 61: 71, 65: [2, 90], 72: [2, 90], 80: [2, 90], 81: [2, 90], 82: [2, 90], 83: [2, 90], 84: [2, 90], 85: [2, 90] }, { 20: 75, 33: [2, 80], 50: 72, 63: 73, 64: 76, 65: [1, 44], 69: 74, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 72: [1, 80] }, { 23: [2, 42], 33: [2, 42], 54: [2, 42], 65: [2, 42], 68: [2, 42], 72: [2, 42], 75: [2, 42], 80: [2, 42], 81: [2, 42], 82: [2, 42], 83: [2, 42], 84: [2, 42], 85: [2, 42], 87: [1, 51] }, { 20: 75, 53: 81, 54: [2, 84], 63: 82, 64: 76, 65: [1, 44], 69: 83, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 84, 47: [1, 67] }, { 47: [2, 55] }, { 4: 85, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 47: [2, 20] }, { 20: 86, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 87, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 26: 88, 47: [1, 67] }, { 47: [2, 57] }, { 5: [2, 11], 14: [2, 11], 15: [2, 11], 19: [2, 11], 29: [2, 11], 34: [2, 11], 39: [2, 11], 44: [2, 11], 47: [2, 11], 48: [2, 11], 51: [2, 11], 55: [2, 11], 60: [2, 11] }, { 15: [2, 49], 18: [2, 49] }, { 20: 75, 33: [2, 88], 58: 89, 63: 90, 64: 76, 65: [1, 44], 69: 91, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 65: [2, 94], 66: 92, 68: [2, 94], 72: [2, 94], 80: [2, 94], 81: [2, 94], 82: [2, 94], 83: [2, 94], 84: [2, 94], 85: [2, 94] }, { 5: [2, 25], 14: [2, 25], 15: [2, 25], 19: [2, 25], 29: [2, 25], 34: [2, 25], 39: [2, 25], 44: [2, 25], 47: [2, 25], 48: [2, 25], 51: [2, 25], 55: [2, 25], 60: [2, 25] }, { 20: 93, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 31: 94, 33: [2, 60], 63: 95, 64: 76, 65: [1, 44], 69: 96, 70: 77, 71: 78, 72: [1, 79], 75: [2, 60], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 33: [2, 66], 36: 97, 63: 98, 64: 76, 65: [1, 44], 69: 99, 70: 77, 71: 78, 72: [1, 79], 75: [2, 66], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 22: 100, 23: [2, 52], 63: 101, 64: 76, 65: [1, 44], 69: 102, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 33: [2, 92], 62: 103, 63: 104, 64: 76, 65: [1, 44], 69: 105, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 106] }, { 33: [2, 79], 65: [2, 79], 72: [2, 79], 80: [2, 79], 81: [2, 79], 82: [2, 79], 83: [2, 79], 84: [2, 79], 85: [2, 79] }, { 33: [2, 81] }, { 23: [2, 27], 33: [2, 27], 54: [2, 27], 65: [2, 27], 68: [2, 27], 72: [2, 27], 75: [2, 27], 80: [2, 27], 81: [2, 27], 82: [2, 27], 83: [2, 27], 84: [2, 27], 85: [2, 27] }, { 23: [2, 28], 33: [2, 28], 54: [2, 28], 65: [2, 28], 68: [2, 28], 72: [2, 28], 75: [2, 28], 80: [2, 28], 81: [2, 28], 82: [2, 28], 83: [2, 28], 84: [2, 28], 85: [2, 28] }, { 23: [2, 30], 33: [2, 30], 54: [2, 30], 68: [2, 30], 71: 107, 72: [1, 108], 75: [2, 30] }, { 23: [2, 98], 33: [2, 98], 54: [2, 98], 68: [2, 98], 72: [2, 98], 75: [2, 98] }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 73: [1, 109], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 23: [2, 44], 33: [2, 44], 54: [2, 44], 65: [2, 44], 68: [2, 44], 72: [2, 44], 75: [2, 44], 80: [2, 44], 81: [2, 44], 82: [2, 44], 83: [2, 44], 84: [2, 44], 85: [2, 44], 87: [2, 44] }, { 54: [1, 110] }, { 54: [2, 83], 65: [2, 83], 72: [2, 83], 80: [2, 83], 81: [2, 83], 82: [2, 83], 83: [2, 83], 84: [2, 83], 85: [2, 83] }, { 54: [2, 85] }, { 5: [2, 13], 14: [2, 13], 15: [2, 13], 19: [2, 13], 29: [2, 13], 34: [2, 13], 39: [2, 13], 44: [2, 13], 47: [2, 13], 48: [2, 13], 51: [2, 13], 55: [2, 13], 60: [2, 13] }, { 38: 56, 39: [1, 58], 43: 57, 44: [1, 59], 45: 112, 46: 111, 47: [2, 76] }, { 33: [2, 70], 40: 113, 65: [2, 70], 72: [2, 70], 75: [2, 70], 80: [2, 70], 81: [2, 70], 82: [2, 70], 83: [2, 70], 84: [2, 70], 85: [2, 70] }, { 47: [2, 18] }, { 5: [2, 14], 14: [2, 14], 15: [2, 14], 19: [2, 14], 29: [2, 14], 34: [2, 14], 39: [2, 14], 44: [2, 14], 47: [2, 14], 48: [2, 14], 51: [2, 14], 55: [2, 14], 60: [2, 14] }, { 33: [1, 114] }, { 33: [2, 87], 65: [2, 87], 72: [2, 87], 80: [2, 87], 81: [2, 87], 82: [2, 87], 83: [2, 87], 84: [2, 87], 85: [2, 87] }, { 33: [2, 89] }, { 20: 75, 63: 116, 64: 76, 65: [1, 44], 67: 115, 68: [2, 96], 69: 117, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 118] }, { 32: 119, 33: [2, 62], 74: 120, 75: [1, 121] }, { 33: [2, 59], 65: [2, 59], 72: [2, 59], 75: [2, 59], 80: [2, 59], 81: [2, 59], 82: [2, 59], 83: [2, 59], 84: [2, 59], 85: [2, 59] }, { 33: [2, 61], 75: [2, 61] }, { 33: [2, 68], 37: 122, 74: 123, 75: [1, 121] }, { 33: [2, 65], 65: [2, 65], 72: [2, 65], 75: [2, 65], 80: [2, 65], 81: [2, 65], 82: [2, 65], 83: [2, 65], 84: [2, 65], 85: [2, 65] }, { 33: [2, 67], 75: [2, 67] }, { 23: [1, 124] }, { 23: [2, 51], 65: [2, 51], 72: [2, 51], 80: [2, 51], 81: [2, 51], 82: [2, 51], 83: [2, 51], 84: [2, 51], 85: [2, 51] }, { 23: [2, 53] }, { 33: [1, 125] }, { 33: [2, 91], 65: [2, 91], 72: [2, 91], 80: [2, 91], 81: [2, 91], 82: [2, 91], 83: [2, 91], 84: [2, 91], 85: [2, 91] }, { 33: [2, 93] }, { 5: [2, 22], 14: [2, 22], 15: [2, 22], 19: [2, 22], 29: [2, 22], 34: [2, 22], 39: [2, 22], 44: [2, 22], 47: [2, 22], 48: [2, 22], 51: [2, 22], 55: [2, 22], 60: [2, 22] }, { 23: [2, 99], 33: [2, 99], 54: [2, 99], 68: [2, 99], 72: [2, 99], 75: [2, 99] }, { 73: [1, 109] }, { 20: 75, 63: 126, 64: 76, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 23], 14: [2, 23], 15: [2, 23], 19: [2, 23], 29: [2, 23], 34: [2, 23], 39: [2, 23], 44: [2, 23], 47: [2, 23], 48: [2, 23], 51: [2, 23], 55: [2, 23], 60: [2, 23] }, { 47: [2, 19] }, { 47: [2, 77] }, { 20: 75, 33: [2, 72], 41: 127, 63: 128, 64: 76, 65: [1, 44], 69: 129, 70: 77, 71: 78, 72: [1, 79], 75: [2, 72], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 24], 14: [2, 24], 15: [2, 24], 19: [2, 24], 29: [2, 24], 34: [2, 24], 39: [2, 24], 44: [2, 24], 47: [2, 24], 48: [2, 24], 51: [2, 24], 55: [2, 24], 60: [2, 24] }, { 68: [1, 130] }, { 65: [2, 95], 68: [2, 95], 72: [2, 95], 80: [2, 95], 81: [2, 95], 82: [2, 95], 83: [2, 95], 84: [2, 95], 85: [2, 95] }, { 68: [2, 97] }, { 5: [2, 21], 14: [2, 21], 15: [2, 21], 19: [2, 21], 29: [2, 21], 34: [2, 21], 39: [2, 21], 44: [2, 21], 47: [2, 21], 48: [2, 21], 51: [2, 21], 55: [2, 21], 60: [2, 21] }, { 33: [1, 131] }, { 33: [2, 63] }, { 72: [1, 133], 76: 132 }, { 33: [1, 134] }, { 33: [2, 69] }, { 15: [2, 12] }, { 14: [2, 26], 15: [2, 26], 19: [2, 26], 29: [2, 26], 34: [2, 26], 47: [2, 26], 48: [2, 26], 51: [2, 26], 55: [2, 26], 60: [2, 26] }, { 23: [2, 31], 33: [2, 31], 54: [2, 31], 68: [2, 31], 72: [2, 31], 75: [2, 31] }, { 33: [2, 74], 42: 135, 74: 136, 75: [1, 121] }, { 33: [2, 71], 65: [2, 71], 72: [2, 71], 75: [2, 71], 80: [2, 71], 81: [2, 71], 82: [2, 71], 83: [2, 71], 84: [2, 71], 85: [2, 71] }, { 33: [2, 73], 75: [2, 73] }, { 23: [2, 29], 33: [2, 29], 54: [2, 29], 65: [2, 29], 68: [2, 29], 72: [2, 29], 75: [2, 29], 80: [2, 29], 81: [2, 29], 82: [2, 29], 83: [2, 29], 84: [2, 29], 85: [2, 29] }, { 14: [2, 15], 15: [2, 15], 19: [2, 15], 29: [2, 15], 34: [2, 15], 39: [2, 15], 44: [2, 15], 47: [2, 15], 48: [2, 15], 51: [2, 15], 55: [2, 15], 60: [2, 15] }, { 72: [1, 138], 77: [1, 137] }, { 72: [2, 100], 77: [2, 100] }, { 14: [2, 16], 15: [2, 16], 19: [2, 16], 29: [2, 16], 34: [2, 16], 44: [2, 16], 47: [2, 16], 48: [2, 16], 51: [2, 16], 55: [2, 16], 60: [2, 16] }, { 33: [1, 139] }, { 33: [2, 75] }, { 33: [2, 32] }, { 72: [2, 101], 77: [2, 101] }, { 14: [2, 17], 15: [2, 17], 19: [2, 17], 29: [2, 17], 34: [2, 17], 39: [2, 17], 44: [2, 17], 47: [2, 17], 48: [2, 17], 51: [2, 17], 55: [2, 17], 60: [2, 17] }],
		        defaultActions: { 4: [2, 1], 55: [2, 55], 57: [2, 20], 61: [2, 57], 74: [2, 81], 83: [2, 85], 87: [2, 18], 91: [2, 89], 102: [2, 53], 105: [2, 93], 111: [2, 19], 112: [2, 77], 117: [2, 97], 120: [2, 63], 123: [2, 69], 124: [2, 12], 136: [2, 75], 137: [2, 32] },
		        parseError: function parseError(str, hash) {
		            throw new Error(str);
		        },
		        parse: function parse(input) {
		            var self = this,
		                stack = [0],
		                vstack = [null],
		                lstack = [],
		                table = this.table,
		                yytext = "",
		                yylineno = 0,
		                yyleng = 0,
		                recovering = 0,
		                TERROR = 2,
		                EOF = 1;
		            this.lexer.setInput(input);
		            this.lexer.yy = this.yy;
		            this.yy.lexer = this.lexer;
		            this.yy.parser = this;
		            if (typeof this.lexer.yylloc == "undefined") this.lexer.yylloc = {};
		            var yyloc = this.lexer.yylloc;
		            lstack.push(yyloc);
		            var ranges = this.lexer.options && this.lexer.options.ranges;
		            if (typeof this.yy.parseError === "function") this.parseError = this.yy.parseError;
		            function popStack(n) {
		                stack.length = stack.length - 2 * n;
		                vstack.length = vstack.length - n;
		                lstack.length = lstack.length - n;
		            }
		            function lex() {
		                var token;
		                token = self.lexer.lex() || 1;
		                if (typeof token !== "number") {
		                    token = self.symbols_[token] || token;
		                }
		                return token;
		            }
		            var symbol,
		                preErrorSymbol,
		                state,
		                action,
		                a,
		                r,
		                yyval = {},
		                p,
		                len,
		                newState,
		                expected;
		            while (true) {
		                state = stack[stack.length - 1];
		                if (this.defaultActions[state]) {
		                    action = this.defaultActions[state];
		                } else {
		                    if (symbol === null || typeof symbol == "undefined") {
		                        symbol = lex();
		                    }
		                    action = table[state] && table[state][symbol];
		                }
		                if (typeof action === "undefined" || !action.length || !action[0]) {
		                    var errStr = "";
		                    if (!recovering) {
		                        expected = [];
		                        for (p in table[state]) if (this.terminals_[p] && p > 2) {
		                            expected.push("'" + this.terminals_[p] + "'");
		                        }
		                        if (this.lexer.showPosition) {
		                            errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
		                        } else {
		                            errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1 ? "end of input" : "'" + (this.terminals_[symbol] || symbol) + "'");
		                        }
		                        this.parseError(errStr, { text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected });
		                    }
		                }
		                if (action[0] instanceof Array && action.length > 1) {
		                    throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
		                }
		                switch (action[0]) {
		                    case 1:
		                        stack.push(symbol);
		                        vstack.push(this.lexer.yytext);
		                        lstack.push(this.lexer.yylloc);
		                        stack.push(action[1]);
		                        symbol = null;
		                        if (!preErrorSymbol) {
		                            yyleng = this.lexer.yyleng;
		                            yytext = this.lexer.yytext;
		                            yylineno = this.lexer.yylineno;
		                            yyloc = this.lexer.yylloc;
		                            if (recovering > 0) recovering--;
		                        } else {
		                            symbol = preErrorSymbol;
		                            preErrorSymbol = null;
		                        }
		                        break;
		                    case 2:
		                        len = this.productions_[action[1]][1];
		                        yyval.$ = vstack[vstack.length - len];
		                        yyval._$ = { first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column };
		                        if (ranges) {
		                            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
		                        }
		                        r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
		                        if (typeof r !== "undefined") {
		                            return r;
		                        }
		                        if (len) {
		                            stack = stack.slice(0, -1 * len * 2);
		                            vstack = vstack.slice(0, -1 * len);
		                            lstack = lstack.slice(0, -1 * len);
		                        }
		                        stack.push(this.productions_[action[1]][0]);
		                        vstack.push(yyval.$);
		                        lstack.push(yyval._$);
		                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
		                        stack.push(newState);
		                        break;
		                    case 3:
		                        return true;
		                }
		            }
		            return true;
		        }
		    };
		    /* Jison generated lexer */
		    var lexer = (function () {
		        var lexer = { EOF: 1,
		            parseError: function parseError(str, hash) {
		                if (this.yy.parser) {
		                    this.yy.parser.parseError(str, hash);
		                } else {
		                    throw new Error(str);
		                }
		            },
		            setInput: function setInput(input) {
		                this._input = input;
		                this._more = this._less = this.done = false;
		                this.yylineno = this.yyleng = 0;
		                this.yytext = this.matched = this.match = '';
		                this.conditionStack = ['INITIAL'];
		                this.yylloc = { first_line: 1, first_column: 0, last_line: 1, last_column: 0 };
		                if (this.options.ranges) this.yylloc.range = [0, 0];
		                this.offset = 0;
		                return this;
		            },
		            input: function input() {
		                var ch = this._input[0];
		                this.yytext += ch;
		                this.yyleng++;
		                this.offset++;
		                this.match += ch;
		                this.matched += ch;
		                var lines = ch.match(/(?:\r\n?|\n).*/g);
		                if (lines) {
		                    this.yylineno++;
		                    this.yylloc.last_line++;
		                } else {
		                    this.yylloc.last_column++;
		                }
		                if (this.options.ranges) this.yylloc.range[1]++;
	
		                this._input = this._input.slice(1);
		                return ch;
		            },
		            unput: function unput(ch) {
		                var len = ch.length;
		                var lines = ch.split(/(?:\r\n?|\n)/g);
	
		                this._input = ch + this._input;
		                this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
		                //this.yyleng -= len;
		                this.offset -= len;
		                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
		                this.match = this.match.substr(0, this.match.length - 1);
		                this.matched = this.matched.substr(0, this.matched.length - 1);
	
		                if (lines.length - 1) this.yylineno -= lines.length - 1;
		                var r = this.yylloc.range;
	
		                this.yylloc = { first_line: this.yylloc.first_line,
		                    last_line: this.yylineno + 1,
		                    first_column: this.yylloc.first_column,
		                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
		                };
	
		                if (this.options.ranges) {
		                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
		                }
		                return this;
		            },
		            more: function more() {
		                this._more = true;
		                return this;
		            },
		            less: function less(n) {
		                this.unput(this.match.slice(n));
		            },
		            pastInput: function pastInput() {
		                var past = this.matched.substr(0, this.matched.length - this.match.length);
		                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
		            },
		            upcomingInput: function upcomingInput() {
		                var next = this.match;
		                if (next.length < 20) {
		                    next += this._input.substr(0, 20 - next.length);
		                }
		                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
		            },
		            showPosition: function showPosition() {
		                var pre = this.pastInput();
		                var c = new Array(pre.length + 1).join("-");
		                return pre + this.upcomingInput() + "\n" + c + "^";
		            },
		            next: function next() {
		                if (this.done) {
		                    return this.EOF;
		                }
		                if (!this._input) this.done = true;
	
		                var token, match, tempMatch, index, col, lines;
		                if (!this._more) {
		                    this.yytext = '';
		                    this.match = '';
		                }
		                var rules = this._currentRules();
		                for (var i = 0; i < rules.length; i++) {
		                    tempMatch = this._input.match(this.rules[rules[i]]);
		                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
		                        match = tempMatch;
		                        index = i;
		                        if (!this.options.flex) break;
		                    }
		                }
		                if (match) {
		                    lines = match[0].match(/(?:\r\n?|\n).*/g);
		                    if (lines) this.yylineno += lines.length;
		                    this.yylloc = { first_line: this.yylloc.last_line,
		                        last_line: this.yylineno + 1,
		                        first_column: this.yylloc.last_column,
		                        last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length };
		                    this.yytext += match[0];
		                    this.match += match[0];
		                    this.matches = match;
		                    this.yyleng = this.yytext.length;
		                    if (this.options.ranges) {
		                        this.yylloc.range = [this.offset, this.offset += this.yyleng];
		                    }
		                    this._more = false;
		                    this._input = this._input.slice(match[0].length);
		                    this.matched += match[0];
		                    token = this.performAction.call(this, this.yy, this, rules[index], this.conditionStack[this.conditionStack.length - 1]);
		                    if (this.done && this._input) this.done = false;
		                    if (token) return token;else return;
		                }
		                if (this._input === "") {
		                    return this.EOF;
		                } else {
		                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), { text: "", token: null, line: this.yylineno });
		                }
		            },
		            lex: function lex() {
		                var r = this.next();
		                if (typeof r !== 'undefined') {
		                    return r;
		                } else {
		                    return this.lex();
		                }
		            },
		            begin: function begin(condition) {
		                this.conditionStack.push(condition);
		            },
		            popState: function popState() {
		                return this.conditionStack.pop();
		            },
		            _currentRules: function _currentRules() {
		                return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
		            },
		            topState: function topState() {
		                return this.conditionStack[this.conditionStack.length - 2];
		            },
		            pushState: function begin(condition) {
		                this.begin(condition);
		            } };
		        lexer.options = {};
		        lexer.performAction = function anonymous(yy, yy_, $avoiding_name_collisions, YY_START
		        /**/) {
	
		            function strip(start, end) {
		                return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng - end);
		            }
	
		            var YYSTATE = YY_START;
		            switch ($avoiding_name_collisions) {
		                case 0:
		                    if (yy_.yytext.slice(-2) === "\\\\") {
		                        strip(0, 1);
		                        this.begin("mu");
		                    } else if (yy_.yytext.slice(-1) === "\\") {
		                        strip(0, 1);
		                        this.begin("emu");
		                    } else {
		                        this.begin("mu");
		                    }
		                    if (yy_.yytext) return 15;
	
		                    break;
		                case 1:
		                    return 15;
		                    break;
		                case 2:
		                    this.popState();
		                    return 15;
	
		                    break;
		                case 3:
		                    this.begin('raw');return 15;
		                    break;
		                case 4:
		                    this.popState();
		                    // Should be using `this.topState()` below, but it currently
		                    // returns the second top instead of the first top. Opened an
		                    // issue about it at https://github.com/zaach/jison/issues/291
		                    if (this.conditionStack[this.conditionStack.length - 1] === 'raw') {
		                        return 15;
		                    } else {
		                        yy_.yytext = yy_.yytext.substr(5, yy_.yyleng - 9);
		                        return 'END_RAW_BLOCK';
		                    }
	
		                    break;
		                case 5:
		                    return 15;
		                    break;
		                case 6:
		                    this.popState();
		                    return 14;
	
		                    break;
		                case 7:
		                    return 65;
		                    break;
		                case 8:
		                    return 68;
		                    break;
		                case 9:
		                    return 19;
		                    break;
		                case 10:
		                    this.popState();
		                    this.begin('raw');
		                    return 23;
	
		                    break;
		                case 11:
		                    return 55;
		                    break;
		                case 12:
		                    return 60;
		                    break;
		                case 13:
		                    return 29;
		                    break;
		                case 14:
		                    return 47;
		                    break;
		                case 15:
		                    this.popState();return 44;
		                    break;
		                case 16:
		                    this.popState();return 44;
		                    break;
		                case 17:
		                    return 34;
		                    break;
		                case 18:
		                    return 39;
		                    break;
		                case 19:
		                    return 51;
		                    break;
		                case 20:
		                    return 48;
		                    break;
		                case 21:
		                    this.unput(yy_.yytext);
		                    this.popState();
		                    this.begin('com');
	
		                    break;
		                case 22:
		                    this.popState();
		                    return 14;
	
		                    break;
		                case 23:
		                    return 48;
		                    break;
		                case 24:
		                    return 73;
		                    break;
		                case 25:
		                    return 72;
		                    break;
		                case 26:
		                    return 72;
		                    break;
		                case 27:
		                    return 87;
		                    break;
		                case 28:
		                    // ignore whitespace
		                    break;
		                case 29:
		                    this.popState();return 54;
		                    break;
		                case 30:
		                    this.popState();return 33;
		                    break;
		                case 31:
		                    yy_.yytext = strip(1, 2).replace(/\\"/g, '"');return 80;
		                    break;
		                case 32:
		                    yy_.yytext = strip(1, 2).replace(/\\'/g, "'");return 80;
		                    break;
		                case 33:
		                    return 85;
		                    break;
		                case 34:
		                    return 82;
		                    break;
		                case 35:
		                    return 82;
		                    break;
		                case 36:
		                    return 83;
		                    break;
		                case 37:
		                    return 84;
		                    break;
		                case 38:
		                    return 81;
		                    break;
		                case 39:
		                    return 75;
		                    break;
		                case 40:
		                    return 77;
		                    break;
		                case 41:
		                    return 72;
		                    break;
		                case 42:
		                    yy_.yytext = yy_.yytext.replace(/\\([\\\]])/g, '$1');return 72;
		                    break;
		                case 43:
		                    return 'INVALID';
		                    break;
		                case 44:
		                    return 5;
		                    break;
		            }
		        };
		        lexer.rules = [/^(?:[^\x00]*?(?=(\{\{)))/, /^(?:[^\x00]+)/, /^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/, /^(?:\{\{\{\{(?=[^\/]))/, /^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/, /^(?:[^\x00]*?(?=(\{\{\{\{)))/, /^(?:[\s\S]*?--(~)?\}\})/, /^(?:\()/, /^(?:\))/, /^(?:\{\{\{\{)/, /^(?:\}\}\}\})/, /^(?:\{\{(~)?>)/, /^(?:\{\{(~)?#>)/, /^(?:\{\{(~)?#\*?)/, /^(?:\{\{(~)?\/)/, /^(?:\{\{(~)?\^\s*(~)?\}\})/, /^(?:\{\{(~)?\s*else\s*(~)?\}\})/, /^(?:\{\{(~)?\^)/, /^(?:\{\{(~)?\s*else\b)/, /^(?:\{\{(~)?\{)/, /^(?:\{\{(~)?&)/, /^(?:\{\{(~)?!--)/, /^(?:\{\{(~)?![\s\S]*?\}\})/, /^(?:\{\{(~)?\*?)/, /^(?:=)/, /^(?:\.\.)/, /^(?:\.(?=([=~}\s\/.)|])))/, /^(?:[\/.])/, /^(?:\s+)/, /^(?:\}(~)?\}\})/, /^(?:(~)?\}\})/, /^(?:"(\\["]|[^"])*")/, /^(?:'(\\[']|[^'])*')/, /^(?:@)/, /^(?:true(?=([~}\s)])))/, /^(?:false(?=([~}\s)])))/, /^(?:undefined(?=([~}\s)])))/, /^(?:null(?=([~}\s)])))/, /^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/, /^(?:as\s+\|)/, /^(?:\|)/, /^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)|]))))/, /^(?:\[(\\\]|[^\]])*\])/, /^(?:.)/, /^(?:$)/];
		        lexer.conditions = { "mu": { "rules": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], "inclusive": false }, "emu": { "rules": [2], "inclusive": false }, "com": { "rules": [6], "inclusive": false }, "raw": { "rules": [3, 4, 5], "inclusive": false }, "INITIAL": { "rules": [0, 1, 44], "inclusive": true } };
		        return lexer;
		    })();
		    parser.lexer = lexer;
		    function Parser() {
		        this.yy = {};
		    }Parser.prototype = parser;parser.Parser = Parser;
		    return new Parser();
		})();exports.__esModule = true;
		exports['default'] = handlebars;
	
	/***/ },
	/* 24 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
	
		var _interopRequireDefault = __webpack_require__(1)['default'];
	
		exports.__esModule = true;
	
		var _visitor = __webpack_require__(25);
	
		var _visitor2 = _interopRequireDefault(_visitor);
	
		function WhitespaceControl() {
		  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
		  this.options = options;
		}
		WhitespaceControl.prototype = new _visitor2['default']();
	
		WhitespaceControl.prototype.Program = function (program) {
		  var doStandalone = !this.options.ignoreStandalone;
	
		  var isRoot = !this.isRootSeen;
		  this.isRootSeen = true;
	
		  var body = program.body;
		  for (var i = 0, l = body.length; i < l; i++) {
		    var current = body[i],
		        strip = this.accept(current);
	
		    if (!strip) {
		      continue;
		    }
	
		    var _isPrevWhitespace = isPrevWhitespace(body, i, isRoot),
		        _isNextWhitespace = isNextWhitespace(body, i, isRoot),
		        openStandalone = strip.openStandalone && _isPrevWhitespace,
		        closeStandalone = strip.closeStandalone && _isNextWhitespace,
		        inlineStandalone = strip.inlineStandalone && _isPrevWhitespace && _isNextWhitespace;
	
		    if (strip.close) {
		      omitRight(body, i, true);
		    }
		    if (strip.open) {
		      omitLeft(body, i, true);
		    }
	
		    if (doStandalone && inlineStandalone) {
		      omitRight(body, i);
	
		      if (omitLeft(body, i)) {
		        // If we are on a standalone node, save the indent info for partials
		        if (current.type === 'PartialStatement') {
		          // Pull out the whitespace from the final line
		          current.indent = /([ \t]+$)/.exec(body[i - 1].original)[1];
		        }
		      }
		    }
		    if (doStandalone && openStandalone) {
		      omitRight((current.program || current.inverse).body);
	
		      // Strip out the previous content node if it's whitespace only
		      omitLeft(body, i);
		    }
		    if (doStandalone && closeStandalone) {
		      // Always strip the next node
		      omitRight(body, i);
	
		      omitLeft((current.inverse || current.program).body);
		    }
		  }
	
		  return program;
		};
	
		WhitespaceControl.prototype.BlockStatement = WhitespaceControl.prototype.DecoratorBlock = WhitespaceControl.prototype.PartialBlockStatement = function (block) {
		  this.accept(block.program);
		  this.accept(block.inverse);
	
		  // Find the inverse program that is involed with whitespace stripping.
		  var program = block.program || block.inverse,
		      inverse = block.program && block.inverse,
		      firstInverse = inverse,
		      lastInverse = inverse;
	
		  if (inverse && inverse.chained) {
		    firstInverse = inverse.body[0].program;
	
		    // Walk the inverse chain to find the last inverse that is actually in the chain.
		    while (lastInverse.chained) {
		      lastInverse = lastInverse.body[lastInverse.body.length - 1].program;
		    }
		  }
	
		  var strip = {
		    open: block.openStrip.open,
		    close: block.closeStrip.close,
	
		    // Determine the standalone candiacy. Basically flag our content as being possibly standalone
		    // so our parent can determine if we actually are standalone
		    openStandalone: isNextWhitespace(program.body),
		    closeStandalone: isPrevWhitespace((firstInverse || program).body)
		  };
	
		  if (block.openStrip.close) {
		    omitRight(program.body, null, true);
		  }
	
		  if (inverse) {
		    var inverseStrip = block.inverseStrip;
	
		    if (inverseStrip.open) {
		      omitLeft(program.body, null, true);
		    }
	
		    if (inverseStrip.close) {
		      omitRight(firstInverse.body, null, true);
		    }
		    if (block.closeStrip.open) {
		      omitLeft(lastInverse.body, null, true);
		    }
	
		    // Find standalone else statments
		    if (!this.options.ignoreStandalone && isPrevWhitespace(program.body) && isNextWhitespace(firstInverse.body)) {
		      omitLeft(program.body);
		      omitRight(firstInverse.body);
		    }
		  } else if (block.closeStrip.open) {
		    omitLeft(program.body, null, true);
		  }
	
		  return strip;
		};
	
		WhitespaceControl.prototype.Decorator = WhitespaceControl.prototype.MustacheStatement = function (mustache) {
		  return mustache.strip;
		};
	
		WhitespaceControl.prototype.PartialStatement = WhitespaceControl.prototype.CommentStatement = function (node) {
		  /* istanbul ignore next */
		  var strip = node.strip || {};
		  return {
		    inlineStandalone: true,
		    open: strip.open,
		    close: strip.close
		  };
		};
	
		function isPrevWhitespace(body, i, isRoot) {
		  if (i === undefined) {
		    i = body.length;
		  }
	
		  // Nodes that end with newlines are considered whitespace (but are special
		  // cased for strip operations)
		  var prev = body[i - 1],
		      sibling = body[i - 2];
		  if (!prev) {
		    return isRoot;
		  }
	
		  if (prev.type === 'ContentStatement') {
		    return (sibling || !isRoot ? /\r?\n\s*?$/ : /(^|\r?\n)\s*?$/).test(prev.original);
		  }
		}
		function isNextWhitespace(body, i, isRoot) {
		  if (i === undefined) {
		    i = -1;
		  }
	
		  var next = body[i + 1],
		      sibling = body[i + 2];
		  if (!next) {
		    return isRoot;
		  }
	
		  if (next.type === 'ContentStatement') {
		    return (sibling || !isRoot ? /^\s*?\r?\n/ : /^\s*?(\r?\n|$)/).test(next.original);
		  }
		}
	
		// Marks the node to the right of the position as omitted.
		// I.e. {{foo}}' ' will mark the ' ' node as omitted.
		//
		// If i is undefined, then the first child will be marked as such.
		//
		// If mulitple is truthy then all whitespace will be stripped out until non-whitespace
		// content is met.
		function omitRight(body, i, multiple) {
		  var current = body[i == null ? 0 : i + 1];
		  if (!current || current.type !== 'ContentStatement' || !multiple && current.rightStripped) {
		    return;
		  }
	
		  var original = current.value;
		  current.value = current.value.replace(multiple ? /^\s+/ : /^[ \t]*\r?\n?/, '');
		  current.rightStripped = current.value !== original;
		}
	
		// Marks the node to the left of the position as omitted.
		// I.e. ' '{{foo}} will mark the ' ' node as omitted.
		//
		// If i is undefined then the last child will be marked as such.
		//
		// If mulitple is truthy then all whitespace will be stripped out until non-whitespace
		// content is met.
		function omitLeft(body, i, multiple) {
		  var current = body[i == null ? body.length - 1 : i - 1];
		  if (!current || current.type !== 'ContentStatement' || !multiple && current.leftStripped) {
		    return;
		  }
	
		  // We omit the last node if it's whitespace only and not preceeded by a non-content node.
		  var original = current.value;
		  current.value = current.value.replace(multiple ? /\s+$/ : /[ \t]+$/, '');
		  current.leftStripped = current.value !== original;
		  return current.leftStripped;
		}
	
		exports['default'] = WhitespaceControl;
		module.exports = exports['default'];
	
	/***/ },
	/* 25 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
	
		var _interopRequireDefault = __webpack_require__(1)['default'];
	
		exports.__esModule = true;
	
		var _exception = __webpack_require__(6);
	
		var _exception2 = _interopRequireDefault(_exception);
	
		function Visitor() {
		  this.parents = [];
		}
	
		Visitor.prototype = {
		  constructor: Visitor,
		  mutating: false,
	
		  // Visits a given value. If mutating, will replace the value if necessary.
		  acceptKey: function acceptKey(node, name) {
		    var value = this.accept(node[name]);
		    if (this.mutating) {
		      // Hacky sanity check: This may have a few false positives for type for the helper
		      // methods but will generally do the right thing without a lot of overhead.
		      if (value && !Visitor.prototype[value.type]) {
		        throw new _exception2['default']('Unexpected node type "' + value.type + '" found when accepting ' + name + ' on ' + node.type);
		      }
		      node[name] = value;
		    }
		  },
	
		  // Performs an accept operation with added sanity check to ensure
		  // required keys are not removed.
		  acceptRequired: function acceptRequired(node, name) {
		    this.acceptKey(node, name);
	
		    if (!node[name]) {
		      throw new _exception2['default'](node.type + ' requires ' + name);
		    }
		  },
	
		  // Traverses a given array. If mutating, empty respnses will be removed
		  // for child elements.
		  acceptArray: function acceptArray(array) {
		    for (var i = 0, l = array.length; i < l; i++) {
		      this.acceptKey(array, i);
	
		      if (!array[i]) {
		        array.splice(i, 1);
		        i--;
		        l--;
		      }
		    }
		  },
	
		  accept: function accept(object) {
		    if (!object) {
		      return;
		    }
	
		    /* istanbul ignore next: Sanity code */
		    if (!this[object.type]) {
		      throw new _exception2['default']('Unknown type: ' + object.type, object);
		    }
	
		    if (this.current) {
		      this.parents.unshift(this.current);
		    }
		    this.current = object;
	
		    var ret = this[object.type](object);
	
		    this.current = this.parents.shift();
	
		    if (!this.mutating || ret) {
		      return ret;
		    } else if (ret !== false) {
		      return object;
		    }
		  },
	
		  Program: function Program(program) {
		    this.acceptArray(program.body);
		  },
	
		  MustacheStatement: visitSubExpression,
		  Decorator: visitSubExpression,
	
		  BlockStatement: visitBlock,
		  DecoratorBlock: visitBlock,
	
		  PartialStatement: visitPartial,
		  PartialBlockStatement: function PartialBlockStatement(partial) {
		    visitPartial.call(this, partial);
	
		    this.acceptKey(partial, 'program');
		  },
	
		  ContentStatement: function ContentStatement() /* content */{},
		  CommentStatement: function CommentStatement() /* comment */{},
	
		  SubExpression: visitSubExpression,
	
		  PathExpression: function PathExpression() /* path */{},
	
		  StringLiteral: function StringLiteral() /* string */{},
		  NumberLiteral: function NumberLiteral() /* number */{},
		  BooleanLiteral: function BooleanLiteral() /* bool */{},
		  UndefinedLiteral: function UndefinedLiteral() /* literal */{},
		  NullLiteral: function NullLiteral() /* literal */{},
	
		  Hash: function Hash(hash) {
		    this.acceptArray(hash.pairs);
		  },
		  HashPair: function HashPair(pair) {
		    this.acceptRequired(pair, 'value');
		  }
		};
	
		function visitSubExpression(mustache) {
		  this.acceptRequired(mustache, 'path');
		  this.acceptArray(mustache.params);
		  this.acceptKey(mustache, 'hash');
		}
		function visitBlock(block) {
		  visitSubExpression.call(this, block);
	
		  this.acceptKey(block, 'program');
		  this.acceptKey(block, 'inverse');
		}
		function visitPartial(partial) {
		  this.acceptRequired(partial, 'name');
		  this.acceptArray(partial.params);
		  this.acceptKey(partial, 'hash');
		}
	
		exports['default'] = Visitor;
		module.exports = exports['default'];
	
	/***/ },
	/* 26 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
	
		var _interopRequireDefault = __webpack_require__(1)['default'];
	
		exports.__esModule = true;
		exports.SourceLocation = SourceLocation;
		exports.id = id;
		exports.stripFlags = stripFlags;
		exports.stripComment = stripComment;
		exports.preparePath = preparePath;
		exports.prepareMustache = prepareMustache;
		exports.prepareRawBlock = prepareRawBlock;
		exports.prepareBlock = prepareBlock;
		exports.prepareProgram = prepareProgram;
		exports.preparePartialBlock = preparePartialBlock;
	
		var _exception = __webpack_require__(6);
	
		var _exception2 = _interopRequireDefault(_exception);
	
		function validateClose(open, close) {
		  close = close.path ? close.path.original : close;
	
		  if (open.path.original !== close) {
		    var errorNode = { loc: open.path.loc };
	
		    throw new _exception2['default'](open.path.original + " doesn't match " + close, errorNode);
		  }
		}
	
		function SourceLocation(source, locInfo) {
		  this.source = source;
		  this.start = {
		    line: locInfo.first_line,
		    column: locInfo.first_column
		  };
		  this.end = {
		    line: locInfo.last_line,
		    column: locInfo.last_column
		  };
		}
	
		function id(token) {
		  if (/^\[.*\]$/.test(token)) {
		    return token.substr(1, token.length - 2);
		  } else {
		    return token;
		  }
		}
	
		function stripFlags(open, close) {
		  return {
		    open: open.charAt(2) === '~',
		    close: close.charAt(close.length - 3) === '~'
		  };
		}
	
		function stripComment(comment) {
		  return comment.replace(/^\{\{~?\!-?-?/, '').replace(/-?-?~?\}\}$/, '');
		}
	
		function preparePath(data, parts, loc) {
		  loc = this.locInfo(loc);
	
		  var original = data ? '@' : '',
		      dig = [],
		      depth = 0,
		      depthString = '';
	
		  for (var i = 0, l = parts.length; i < l; i++) {
		    var part = parts[i].part,
	
		    // If we have [] syntax then we do not treat path references as operators,
		    // i.e. foo.[this] resolves to approximately context.foo['this']
		    isLiteral = parts[i].original !== part;
		    original += (parts[i].separator || '') + part;
	
		    if (!isLiteral && (part === '..' || part === '.' || part === 'this')) {
		      if (dig.length > 0) {
		        throw new _exception2['default']('Invalid path: ' + original, { loc: loc });
		      } else if (part === '..') {
		        depth++;
		        depthString += '../';
		      }
		    } else {
		      dig.push(part);
		    }
		  }
	
		  return {
		    type: 'PathExpression',
		    data: data,
		    depth: depth,
		    parts: dig,
		    original: original,
		    loc: loc
		  };
		}
	
		function prepareMustache(path, params, hash, open, strip, locInfo) {
		  // Must use charAt to support IE pre-10
		  var escapeFlag = open.charAt(3) || open.charAt(2),
		      escaped = escapeFlag !== '{' && escapeFlag !== '&';
	
		  var decorator = /\*/.test(open);
		  return {
		    type: decorator ? 'Decorator' : 'MustacheStatement',
		    path: path,
		    params: params,
		    hash: hash,
		    escaped: escaped,
		    strip: strip,
		    loc: this.locInfo(locInfo)
		  };
		}
	
		function prepareRawBlock(openRawBlock, contents, close, locInfo) {
		  validateClose(openRawBlock, close);
	
		  locInfo = this.locInfo(locInfo);
		  var program = {
		    type: 'Program',
		    body: contents,
		    strip: {},
		    loc: locInfo
		  };
	
		  return {
		    type: 'BlockStatement',
		    path: openRawBlock.path,
		    params: openRawBlock.params,
		    hash: openRawBlock.hash,
		    program: program,
		    openStrip: {},
		    inverseStrip: {},
		    closeStrip: {},
		    loc: locInfo
		  };
		}
	
		function prepareBlock(openBlock, program, inverseAndProgram, close, inverted, locInfo) {
		  if (close && close.path) {
		    validateClose(openBlock, close);
		  }
	
		  var decorator = /\*/.test(openBlock.open);
	
		  program.blockParams = openBlock.blockParams;
	
		  var inverse = undefined,
		      inverseStrip = undefined;
	
		  if (inverseAndProgram) {
		    if (decorator) {
		      throw new _exception2['default']('Unexpected inverse block on decorator', inverseAndProgram);
		    }
	
		    if (inverseAndProgram.chain) {
		      inverseAndProgram.program.body[0].closeStrip = close.strip;
		    }
	
		    inverseStrip = inverseAndProgram.strip;
		    inverse = inverseAndProgram.program;
		  }
	
		  if (inverted) {
		    inverted = inverse;
		    inverse = program;
		    program = inverted;
		  }
	
		  return {
		    type: decorator ? 'DecoratorBlock' : 'BlockStatement',
		    path: openBlock.path,
		    params: openBlock.params,
		    hash: openBlock.hash,
		    program: program,
		    inverse: inverse,
		    openStrip: openBlock.strip,
		    inverseStrip: inverseStrip,
		    closeStrip: close && close.strip,
		    loc: this.locInfo(locInfo)
		  };
		}
	
		function prepareProgram(statements, loc) {
		  if (!loc && statements.length) {
		    var firstLoc = statements[0].loc,
		        lastLoc = statements[statements.length - 1].loc;
	
		    /* istanbul ignore else */
		    if (firstLoc && lastLoc) {
		      loc = {
		        source: firstLoc.source,
		        start: {
		          line: firstLoc.start.line,
		          column: firstLoc.start.column
		        },
		        end: {
		          line: lastLoc.end.line,
		          column: lastLoc.end.column
		        }
		      };
		    }
		  }
	
		  return {
		    type: 'Program',
		    body: statements,
		    strip: {},
		    loc: loc
		  };
		}
	
		function preparePartialBlock(open, program, close, locInfo) {
		  validateClose(open, close);
	
		  return {
		    type: 'PartialBlockStatement',
		    name: open.path,
		    params: open.params,
		    hash: open.hash,
		    program: program,
		    openStrip: open.strip,
		    closeStrip: close && close.strip,
		    loc: this.locInfo(locInfo)
		  };
		}
	
	/***/ },
	/* 27 */
	/***/ function(module, exports, __webpack_require__) {
	
		/* eslint-disable new-cap */
	
		'use strict';
	
		var _interopRequireDefault = __webpack_require__(1)['default'];
	
		exports.__esModule = true;
		exports.Compiler = Compiler;
		exports.precompile = precompile;
		exports.compile = compile;
	
		var _exception = __webpack_require__(6);
	
		var _exception2 = _interopRequireDefault(_exception);
	
		var _utils = __webpack_require__(5);
	
		var _ast = __webpack_require__(21);
	
		var _ast2 = _interopRequireDefault(_ast);
	
		var slice = [].slice;
	
		function Compiler() {}
	
		// the foundHelper register will disambiguate helper lookup from finding a
		// function in a context. This is necessary for mustache compatibility, which
		// requires that context functions in blocks are evaluated by blockHelperMissing,
		// and then proceed as if the resulting value was provided to blockHelperMissing.
	
		Compiler.prototype = {
		  compiler: Compiler,
	
		  equals: function equals(other) {
		    var len = this.opcodes.length;
		    if (other.opcodes.length !== len) {
		      return false;
		    }
	
		    for (var i = 0; i < len; i++) {
		      var opcode = this.opcodes[i],
		          otherOpcode = other.opcodes[i];
		      if (opcode.opcode !== otherOpcode.opcode || !argEquals(opcode.args, otherOpcode.args)) {
		        return false;
		      }
		    }
	
		    // We know that length is the same between the two arrays because they are directly tied
		    // to the opcode behavior above.
		    len = this.children.length;
		    for (var i = 0; i < len; i++) {
		      if (!this.children[i].equals(other.children[i])) {
		        return false;
		      }
		    }
	
		    return true;
		  },
	
		  guid: 0,
	
		  compile: function compile(program, options) {
		    this.sourceNode = [];
		    this.opcodes = [];
		    this.children = [];
		    this.options = options;
		    this.stringParams = options.stringParams;
		    this.trackIds = options.trackIds;
	
		    options.blockParams = options.blockParams || [];
	
		    // These changes will propagate to the other compiler components
		    var knownHelpers = options.knownHelpers;
		    options.knownHelpers = {
		      'helperMissing': true,
		      'blockHelperMissing': true,
		      'each': true,
		      'if': true,
		      'unless': true,
		      'with': true,
		      'log': true,
		      'lookup': true
		    };
		    if (knownHelpers) {
		      for (var _name in knownHelpers) {
		        /* istanbul ignore else */
		        if (_name in knownHelpers) {
		          options.knownHelpers[_name] = knownHelpers[_name];
		        }
		      }
		    }
	
		    return this.accept(program);
		  },
	
		  compileProgram: function compileProgram(program) {
		    var childCompiler = new this.compiler(),
		        // eslint-disable-line new-cap
		    result = childCompiler.compile(program, this.options),
		        guid = this.guid++;
	
		    this.usePartial = this.usePartial || result.usePartial;
	
		    this.children[guid] = result;
		    this.useDepths = this.useDepths || result.useDepths;
	
		    return guid;
		  },
	
		  accept: function accept(node) {
		    /* istanbul ignore next: Sanity code */
		    if (!this[node.type]) {
		      throw new _exception2['default']('Unknown type: ' + node.type, node);
		    }
	
		    this.sourceNode.unshift(node);
		    var ret = this[node.type](node);
		    this.sourceNode.shift();
		    return ret;
		  },
	
		  Program: function Program(program) {
		    this.options.blockParams.unshift(program.blockParams);
	
		    var body = program.body,
		        bodyLength = body.length;
		    for (var i = 0; i < bodyLength; i++) {
		      this.accept(body[i]);
		    }
	
		    this.options.blockParams.shift();
	
		    this.isSimple = bodyLength === 1;
		    this.blockParams = program.blockParams ? program.blockParams.length : 0;
	
		    return this;
		  },
	
		  BlockStatement: function BlockStatement(block) {
		    transformLiteralToPath(block);
	
		    var program = block.program,
		        inverse = block.inverse;
	
		    program = program && this.compileProgram(program);
		    inverse = inverse && this.compileProgram(inverse);
	
		    var type = this.classifySexpr(block);
	
		    if (type === 'helper') {
		      this.helperSexpr(block, program, inverse);
		    } else if (type === 'simple') {
		      this.simpleSexpr(block);
	
		      // now that the simple mustache is resolved, we need to
		      // evaluate it by executing `blockHelperMissing`
		      this.opcode('pushProgram', program);
		      this.opcode('pushProgram', inverse);
		      this.opcode('emptyHash');
		      this.opcode('blockValue', block.path.original);
		    } else {
		      this.ambiguousSexpr(block, program, inverse);
	
		      // now that the simple mustache is resolved, we need to
		      // evaluate it by executing `blockHelperMissing`
		      this.opcode('pushProgram', program);
		      this.opcode('pushProgram', inverse);
		      this.opcode('emptyHash');
		      this.opcode('ambiguousBlockValue');
		    }
	
		    this.opcode('append');
		  },
	
		  DecoratorBlock: function DecoratorBlock(decorator) {
		    var program = decorator.program && this.compileProgram(decorator.program);
		    var params = this.setupFullMustacheParams(decorator, program, undefined),
		        path = decorator.path;
	
		    this.useDecorators = true;
		    this.opcode('registerDecorator', params.length, path.original);
		  },
	
		  PartialStatement: function PartialStatement(partial) {
		    this.usePartial = true;
	
		    var program = partial.program;
		    if (program) {
		      program = this.compileProgram(partial.program);
		    }
	
		    var params = partial.params;
		    if (params.length > 1) {
		      throw new _exception2['default']('Unsupported number of partial arguments: ' + params.length, partial);
		    } else if (!params.length) {
		      if (this.options.explicitPartialContext) {
		        this.opcode('pushLiteral', 'undefined');
		      } else {
		        params.push({ type: 'PathExpression', parts: [], depth: 0 });
		      }
		    }
	
		    var partialName = partial.name.original,
		        isDynamic = partial.name.type === 'SubExpression';
		    if (isDynamic) {
		      this.accept(partial.name);
		    }
	
		    this.setupFullMustacheParams(partial, program, undefined, true);
	
		    var indent = partial.indent || '';
		    if (this.options.preventIndent && indent) {
		      this.opcode('appendContent', indent);
		      indent = '';
		    }
	
		    this.opcode('invokePartial', isDynamic, partialName, indent);
		    this.opcode('append');
		  },
		  PartialBlockStatement: function PartialBlockStatement(partialBlock) {
		    this.PartialStatement(partialBlock);
		  },
	
		  MustacheStatement: function MustacheStatement(mustache) {
		    this.SubExpression(mustache);
	
		    if (mustache.escaped && !this.options.noEscape) {
		      this.opcode('appendEscaped');
		    } else {
		      this.opcode('append');
		    }
		  },
		  Decorator: function Decorator(decorator) {
		    this.DecoratorBlock(decorator);
		  },
	
		  ContentStatement: function ContentStatement(content) {
		    if (content.value) {
		      this.opcode('appendContent', content.value);
		    }
		  },
	
		  CommentStatement: function CommentStatement() {},
	
		  SubExpression: function SubExpression(sexpr) {
		    transformLiteralToPath(sexpr);
		    var type = this.classifySexpr(sexpr);
	
		    if (type === 'simple') {
		      this.simpleSexpr(sexpr);
		    } else if (type === 'helper') {
		      this.helperSexpr(sexpr);
		    } else {
		      this.ambiguousSexpr(sexpr);
		    }
		  },
		  ambiguousSexpr: function ambiguousSexpr(sexpr, program, inverse) {
		    var path = sexpr.path,
		        name = path.parts[0],
		        isBlock = program != null || inverse != null;
	
		    this.opcode('getContext', path.depth);
	
		    this.opcode('pushProgram', program);
		    this.opcode('pushProgram', inverse);
	
		    path.strict = true;
		    this.accept(path);
	
		    this.opcode('invokeAmbiguous', name, isBlock);
		  },
	
		  simpleSexpr: function simpleSexpr(sexpr) {
		    var path = sexpr.path;
		    path.strict = true;
		    this.accept(path);
		    this.opcode('resolvePossibleLambda');
		  },
	
		  helperSexpr: function helperSexpr(sexpr, program, inverse) {
		    var params = this.setupFullMustacheParams(sexpr, program, inverse),
		        path = sexpr.path,
		        name = path.parts[0];
	
		    if (this.options.knownHelpers[name]) {
		      this.opcode('invokeKnownHelper', params.length, name);
		    } else if (this.options.knownHelpersOnly) {
		      throw new _exception2['default']('You specified knownHelpersOnly, but used the unknown helper ' + name, sexpr);
		    } else {
		      path.strict = true;
		      path.falsy = true;
	
		      this.accept(path);
		      this.opcode('invokeHelper', params.length, path.original, _ast2['default'].helpers.simpleId(path));
		    }
		  },
	
		  PathExpression: function PathExpression(path) {
		    this.addDepth(path.depth);
		    this.opcode('getContext', path.depth);
	
		    var name = path.parts[0],
		        scoped = _ast2['default'].helpers.scopedId(path),
		        blockParamId = !path.depth && !scoped && this.blockParamIndex(name);
	
		    if (blockParamId) {
		      this.opcode('lookupBlockParam', blockParamId, path.parts);
		    } else if (!name) {
		      // Context reference, i.e. `{{foo .}}` or `{{foo ..}}`
		      this.opcode('pushContext');
		    } else if (path.data) {
		      this.options.data = true;
		      this.opcode('lookupData', path.depth, path.parts, path.strict);
		    } else {
		      this.opcode('lookupOnContext', path.parts, path.falsy, path.strict, scoped);
		    }
		  },
	
		  StringLiteral: function StringLiteral(string) {
		    this.opcode('pushString', string.value);
		  },
	
		  NumberLiteral: function NumberLiteral(number) {
		    this.opcode('pushLiteral', number.value);
		  },
	
		  BooleanLiteral: function BooleanLiteral(bool) {
		    this.opcode('pushLiteral', bool.value);
		  },
	
		  UndefinedLiteral: function UndefinedLiteral() {
		    this.opcode('pushLiteral', 'undefined');
		  },
	
		  NullLiteral: function NullLiteral() {
		    this.opcode('pushLiteral', 'null');
		  },
	
		  Hash: function Hash(hash) {
		    var pairs = hash.pairs,
		        i = 0,
		        l = pairs.length;
	
		    this.opcode('pushHash');
	
		    for (; i < l; i++) {
		      this.pushParam(pairs[i].value);
		    }
		    while (i--) {
		      this.opcode('assignToHash', pairs[i].key);
		    }
		    this.opcode('popHash');
		  },
	
		  // HELPERS
		  opcode: function opcode(name) {
		    this.opcodes.push({ opcode: name, args: slice.call(arguments, 1), loc: this.sourceNode[0].loc });
		  },
	
		  addDepth: function addDepth(depth) {
		    if (!depth) {
		      return;
		    }
	
		    this.useDepths = true;
		  },
	
		  classifySexpr: function classifySexpr(sexpr) {
		    var isSimple = _ast2['default'].helpers.simpleId(sexpr.path);
	
		    var isBlockParam = isSimple && !!this.blockParamIndex(sexpr.path.parts[0]);
	
		    // a mustache is an eligible helper if:
		    // * its id is simple (a single part, not `this` or `..`)
		    var isHelper = !isBlockParam && _ast2['default'].helpers.helperExpression(sexpr);
	
		    // if a mustache is an eligible helper but not a definite
		    // helper, it is ambiguous, and will be resolved in a later
		    // pass or at runtime.
		    var isEligible = !isBlockParam && (isHelper || isSimple);
	
		    // if ambiguous, we can possibly resolve the ambiguity now
		    // An eligible helper is one that does not have a complex path, i.e. `this.foo`, `../foo` etc.
		    if (isEligible && !isHelper) {
		      var _name2 = sexpr.path.parts[0],
		          options = this.options;
	
		      if (options.knownHelpers[_name2]) {
		        isHelper = true;
		      } else if (options.knownHelpersOnly) {
		        isEligible = false;
		      }
		    }
	
		    if (isHelper) {
		      return 'helper';
		    } else if (isEligible) {
		      return 'ambiguous';
		    } else {
		      return 'simple';
		    }
		  },
	
		  pushParams: function pushParams(params) {
		    for (var i = 0, l = params.length; i < l; i++) {
		      this.pushParam(params[i]);
		    }
		  },
	
		  pushParam: function pushParam(val) {
		    var value = val.value != null ? val.value : val.original || '';
	
		    if (this.stringParams) {
		      if (value.replace) {
		        value = value.replace(/^(\.?\.\/)*/g, '').replace(/\//g, '.');
		      }
	
		      if (val.depth) {
		        this.addDepth(val.depth);
		      }
		      this.opcode('getContext', val.depth || 0);
		      this.opcode('pushStringParam', value, val.type);
	
		      if (val.type === 'SubExpression') {
		        // SubExpressions get evaluated and passed in
		        // in string params mode.
		        this.accept(val);
		      }
		    } else {
		      if (this.trackIds) {
		        var blockParamIndex = undefined;
		        if (val.parts && !_ast2['default'].helpers.scopedId(val) && !val.depth) {
		          blockParamIndex = this.blockParamIndex(val.parts[0]);
		        }
		        if (blockParamIndex) {
		          var blockParamChild = val.parts.slice(1).join('.');
		          this.opcode('pushId', 'BlockParam', blockParamIndex, blockParamChild);
		        } else {
		          value = val.original || value;
		          if (value.replace) {
		            value = value.replace(/^this(?:\.|$)/, '').replace(/^\.\//, '').replace(/^\.$/, '');
		          }
	
		          this.opcode('pushId', val.type, value);
		        }
		      }
		      this.accept(val);
		    }
		  },
	
		  setupFullMustacheParams: function setupFullMustacheParams(sexpr, program, inverse, omitEmpty) {
		    var params = sexpr.params;
		    this.pushParams(params);
	
		    this.opcode('pushProgram', program);
		    this.opcode('pushProgram', inverse);
	
		    if (sexpr.hash) {
		      this.accept(sexpr.hash);
		    } else {
		      this.opcode('emptyHash', omitEmpty);
		    }
	
		    return params;
		  },
	
		  blockParamIndex: function blockParamIndex(name) {
		    for (var depth = 0, len = this.options.blockParams.length; depth < len; depth++) {
		      var blockParams = this.options.blockParams[depth],
		          param = blockParams && _utils.indexOf(blockParams, name);
		      if (blockParams && param >= 0) {
		        return [depth, param];
		      }
		    }
		  }
		};
	
		function precompile(input, options, env) {
		  if (input == null || typeof input !== 'string' && input.type !== 'Program') {
		    throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.precompile. You passed ' + input);
		  }
	
		  options = options || {};
		  if (!('data' in options)) {
		    options.data = true;
		  }
		  if (options.compat) {
		    options.useDepths = true;
		  }
	
		  var ast = env.parse(input, options),
		      environment = new env.Compiler().compile(ast, options);
		  return new env.JavaScriptCompiler().compile(environment, options);
		}
	
		function compile(input, options, env) {
		  if (options === undefined) options = {};
	
		  if (input == null || typeof input !== 'string' && input.type !== 'Program') {
		    throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.compile. You passed ' + input);
		  }
	
		  if (!('data' in options)) {
		    options.data = true;
		  }
		  if (options.compat) {
		    options.useDepths = true;
		  }
	
		  var compiled = undefined;
	
		  function compileInput() {
		    var ast = env.parse(input, options),
		        environment = new env.Compiler().compile(ast, options),
		        templateSpec = new env.JavaScriptCompiler().compile(environment, options, undefined, true);
		    return env.template(templateSpec);
		  }
	
		  // Template is only compiled on first use and cached after that point.
		  function ret(context, execOptions) {
		    if (!compiled) {
		      compiled = compileInput();
		    }
		    return compiled.call(this, context, execOptions);
		  }
		  ret._setup = function (setupOptions) {
		    if (!compiled) {
		      compiled = compileInput();
		    }
		    return compiled._setup(setupOptions);
		  };
		  ret._child = function (i, data, blockParams, depths) {
		    if (!compiled) {
		      compiled = compileInput();
		    }
		    return compiled._child(i, data, blockParams, depths);
		  };
		  return ret;
		}
	
		function argEquals(a, b) {
		  if (a === b) {
		    return true;
		  }
	
		  if (_utils.isArray(a) && _utils.isArray(b) && a.length === b.length) {
		    for (var i = 0; i < a.length; i++) {
		      if (!argEquals(a[i], b[i])) {
		        return false;
		      }
		    }
		    return true;
		  }
		}
	
		function transformLiteralToPath(sexpr) {
		  if (!sexpr.path.parts) {
		    var literal = sexpr.path;
		    // Casting to string here to make false and 0 literal values play nicely with the rest
		    // of the system.
		    sexpr.path = {
		      type: 'PathExpression',
		      data: false,
		      depth: 0,
		      parts: [literal.original + ''],
		      original: literal.original + '',
		      loc: literal.loc
		    };
		  }
		}
	
	/***/ },
	/* 28 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
	
		var _interopRequireDefault = __webpack_require__(1)['default'];
	
		exports.__esModule = true;
	
		var _base = __webpack_require__(4);
	
		var _exception = __webpack_require__(6);
	
		var _exception2 = _interopRequireDefault(_exception);
	
		var _utils = __webpack_require__(5);
	
		var _codeGen = __webpack_require__(29);
	
		var _codeGen2 = _interopRequireDefault(_codeGen);
	
		function Literal(value) {
		  this.value = value;
		}
	
		function JavaScriptCompiler() {}
	
		JavaScriptCompiler.prototype = {
		  // PUBLIC API: You can override these methods in a subclass to provide
		  // alternative compiled forms for name lookup and buffering semantics
		  nameLookup: function nameLookup(parent, name /* , type*/) {
		    if (JavaScriptCompiler.isValidJavaScriptVariableName(name)) {
		      return [parent, '.', name];
		    } else {
		      return [parent, '[', JSON.stringify(name), ']'];
		    }
		  },
		  depthedLookup: function depthedLookup(name) {
		    return [this.aliasable('container.lookup'), '(depths, "', name, '")'];
		  },
	
		  compilerInfo: function compilerInfo() {
		    var revision = _base.COMPILER_REVISION,
		        versions = _base.REVISION_CHANGES[revision];
		    return [revision, versions];
		  },
	
		  appendToBuffer: function appendToBuffer(source, location, explicit) {
		    // Force a source as this simplifies the merge logic.
		    if (!_utils.isArray(source)) {
		      source = [source];
		    }
		    source = this.source.wrap(source, location);
	
		    if (this.environment.isSimple) {
		      return ['return ', source, ';'];
		    } else if (explicit) {
		      // This is a case where the buffer operation occurs as a child of another
		      // construct, generally braces. We have to explicitly output these buffer
		      // operations to ensure that the emitted code goes in the correct location.
		      return ['buffer += ', source, ';'];
		    } else {
		      source.appendToBuffer = true;
		      return source;
		    }
		  },
	
		  initializeBuffer: function initializeBuffer() {
		    return this.quotedString('');
		  },
		  // END PUBLIC API
	
		  compile: function compile(environment, options, context, asObject) {
		    this.environment = environment;
		    this.options = options;
		    this.stringParams = this.options.stringParams;
		    this.trackIds = this.options.trackIds;
		    this.precompile = !asObject;
	
		    this.name = this.environment.name;
		    this.isChild = !!context;
		    this.context = context || {
		      decorators: [],
		      programs: [],
		      environments: []
		    };
	
		    this.preamble();
	
		    this.stackSlot = 0;
		    this.stackVars = [];
		    this.aliases = {};
		    this.registers = { list: [] };
		    this.hashes = [];
		    this.compileStack = [];
		    this.inlineStack = [];
		    this.blockParams = [];
	
		    this.compileChildren(environment, options);
	
		    this.useDepths = this.useDepths || environment.useDepths || environment.useDecorators || this.options.compat;
		    this.useBlockParams = this.useBlockParams || environment.useBlockParams;
	
		    var opcodes = environment.opcodes,
		        opcode = undefined,
		        firstLoc = undefined,
		        i = undefined,
		        l = undefined;
	
		    for (i = 0, l = opcodes.length; i < l; i++) {
		      opcode = opcodes[i];
	
		      this.source.currentLocation = opcode.loc;
		      firstLoc = firstLoc || opcode.loc;
		      this[opcode.opcode].apply(this, opcode.args);
		    }
	
		    // Flush any trailing content that might be pending.
		    this.source.currentLocation = firstLoc;
		    this.pushSource('');
	
		    /* istanbul ignore next */
		    if (this.stackSlot || this.inlineStack.length || this.compileStack.length) {
		      throw new _exception2['default']('Compile completed with content left on stack');
		    }
	
		    if (!this.decorators.isEmpty()) {
		      this.useDecorators = true;
	
		      this.decorators.prepend('var decorators = container.decorators;\n');
		      this.decorators.push('return fn;');
	
		      if (asObject) {
		        this.decorators = Function.apply(this, ['fn', 'props', 'container', 'depth0', 'data', 'blockParams', 'depths', this.decorators.merge()]);
		      } else {
		        this.decorators.prepend('function(fn, props, container, depth0, data, blockParams, depths) {\n');
		        this.decorators.push('}\n');
		        this.decorators = this.decorators.merge();
		      }
		    } else {
		      this.decorators = undefined;
		    }
	
		    var fn = this.createFunctionContext(asObject);
		    if (!this.isChild) {
		      var ret = {
		        compiler: this.compilerInfo(),
		        main: fn
		      };
	
		      if (this.decorators) {
		        ret.main_d = this.decorators; // eslint-disable-line camelcase
		        ret.useDecorators = true;
		      }
	
		      var _context = this.context;
		      var programs = _context.programs;
		      var decorators = _context.decorators;
	
		      for (i = 0, l = programs.length; i < l; i++) {
		        if (programs[i]) {
		          ret[i] = programs[i];
		          if (decorators[i]) {
		            ret[i + '_d'] = decorators[i];
		            ret.useDecorators = true;
		          }
		        }
		      }
	
		      if (this.environment.usePartial) {
		        ret.usePartial = true;
		      }
		      if (this.options.data) {
		        ret.useData = true;
		      }
		      if (this.useDepths) {
		        ret.useDepths = true;
		      }
		      if (this.useBlockParams) {
		        ret.useBlockParams = true;
		      }
		      if (this.options.compat) {
		        ret.compat = true;
		      }
	
		      if (!asObject) {
		        ret.compiler = JSON.stringify(ret.compiler);
	
		        this.source.currentLocation = { start: { line: 1, column: 0 } };
		        ret = this.objectLiteral(ret);
	
		        if (options.srcName) {
		          ret = ret.toStringWithSourceMap({ file: options.destName });
		          ret.map = ret.map && ret.map.toString();
		        } else {
		          ret = ret.toString();
		        }
		      } else {
		        ret.compilerOptions = this.options;
		      }
	
		      return ret;
		    } else {
		      return fn;
		    }
		  },
	
		  preamble: function preamble() {
		    // track the last context pushed into place to allow skipping the
		    // getContext opcode when it would be a noop
		    this.lastContext = 0;
		    this.source = new _codeGen2['default'](this.options.srcName);
		    this.decorators = new _codeGen2['default'](this.options.srcName);
		  },
	
		  createFunctionContext: function createFunctionContext(asObject) {
		    var varDeclarations = '';
	
		    var locals = this.stackVars.concat(this.registers.list);
		    if (locals.length > 0) {
		      varDeclarations += ', ' + locals.join(', ');
		    }
	
		    // Generate minimizer alias mappings
		    //
		    // When using true SourceNodes, this will update all references to the given alias
		    // as the source nodes are reused in situ. For the non-source node compilation mode,
		    // aliases will not be used, but this case is already being run on the client and
		    // we aren't concern about minimizing the template size.
		    var aliasCount = 0;
		    for (var alias in this.aliases) {
		      // eslint-disable-line guard-for-in
		      var node = this.aliases[alias];
	
		      if (this.aliases.hasOwnProperty(alias) && node.children && node.referenceCount > 1) {
		        varDeclarations += ', alias' + ++aliasCount + '=' + alias;
		        node.children[0] = 'alias' + aliasCount;
		      }
		    }
	
		    var params = ['container', 'depth0', 'helpers', 'partials', 'data'];
	
		    if (this.useBlockParams || this.useDepths) {
		      params.push('blockParams');
		    }
		    if (this.useDepths) {
		      params.push('depths');
		    }
	
		    // Perform a second pass over the output to merge content when possible
		    var source = this.mergeSource(varDeclarations);
	
		    if (asObject) {
		      params.push(source);
	
		      return Function.apply(this, params);
		    } else {
		      return this.source.wrap(['function(', params.join(','), ') {\n  ', source, '}']);
		    }
		  },
		  mergeSource: function mergeSource(varDeclarations) {
		    var isSimple = this.environment.isSimple,
		        appendOnly = !this.forceBuffer,
		        appendFirst = undefined,
		        sourceSeen = undefined,
		        bufferStart = undefined,
		        bufferEnd = undefined;
		    this.source.each(function (line) {
		      if (line.appendToBuffer) {
		        if (bufferStart) {
		          line.prepend('  + ');
		        } else {
		          bufferStart = line;
		        }
		        bufferEnd = line;
		      } else {
		        if (bufferStart) {
		          if (!sourceSeen) {
		            appendFirst = true;
		          } else {
		            bufferStart.prepend('buffer += ');
		          }
		          bufferEnd.add(';');
		          bufferStart = bufferEnd = undefined;
		        }
	
		        sourceSeen = true;
		        if (!isSimple) {
		          appendOnly = false;
		        }
		      }
		    });
	
		    if (appendOnly) {
		      if (bufferStart) {
		        bufferStart.prepend('return ');
		        bufferEnd.add(';');
		      } else if (!sourceSeen) {
		        this.source.push('return "";');
		      }
		    } else {
		      varDeclarations += ', buffer = ' + (appendFirst ? '' : this.initializeBuffer());
	
		      if (bufferStart) {
		        bufferStart.prepend('return buffer + ');
		        bufferEnd.add(';');
		      } else {
		        this.source.push('return buffer;');
		      }
		    }
	
		    if (varDeclarations) {
		      this.source.prepend('var ' + varDeclarations.substring(2) + (appendFirst ? '' : ';\n'));
		    }
	
		    return this.source.merge();
		  },
	
		  // [blockValue]
		  //
		  // On stack, before: hash, inverse, program, value
		  // On stack, after: return value of blockHelperMissing
		  //
		  // The purpose of this opcode is to take a block of the form
		  // `{{#this.foo}}...{{/this.foo}}`, resolve the value of `foo`, and
		  // replace it on the stack with the result of properly
		  // invoking blockHelperMissing.
		  blockValue: function blockValue(name) {
		    var blockHelperMissing = this.aliasable('helpers.blockHelperMissing'),
		        params = [this.contextName(0)];
		    this.setupHelperArgs(name, 0, params);
	
		    var blockName = this.popStack();
		    params.splice(1, 0, blockName);
	
		    this.push(this.source.functionCall(blockHelperMissing, 'call', params));
		  },
	
		  // [ambiguousBlockValue]
		  //
		  // On stack, before: hash, inverse, program, value
		  // Compiler value, before: lastHelper=value of last found helper, if any
		  // On stack, after, if no lastHelper: same as [blockValue]
		  // On stack, after, if lastHelper: value
		  ambiguousBlockValue: function ambiguousBlockValue() {
		    // We're being a bit cheeky and reusing the options value from the prior exec
		    var blockHelperMissing = this.aliasable('helpers.blockHelperMissing'),
		        params = [this.contextName(0)];
		    this.setupHelperArgs('', 0, params, true);
	
		    this.flushInline();
	
		    var current = this.topStack();
		    params.splice(1, 0, current);
	
		    this.pushSource(['if (!', this.lastHelper, ') { ', current, ' = ', this.source.functionCall(blockHelperMissing, 'call', params), '}']);
		  },
	
		  // [appendContent]
		  //
		  // On stack, before: ...
		  // On stack, after: ...
		  //
		  // Appends the string value of `content` to the current buffer
		  appendContent: function appendContent(content) {
		    if (this.pendingContent) {
		      content = this.pendingContent + content;
		    } else {
		      this.pendingLocation = this.source.currentLocation;
		    }
	
		    this.pendingContent = content;
		  },
	
		  // [append]
		  //
		  // On stack, before: value, ...
		  // On stack, after: ...
		  //
		  // Coerces `value` to a String and appends it to the current buffer.
		  //
		  // If `value` is truthy, or 0, it is coerced into a string and appended
		  // Otherwise, the empty string is appended
		  append: function append() {
		    if (this.isInline()) {
		      this.replaceStack(function (current) {
		        return [' != null ? ', current, ' : ""'];
		      });
	
		      this.pushSource(this.appendToBuffer(this.popStack()));
		    } else {
		      var local = this.popStack();
		      this.pushSource(['if (', local, ' != null) { ', this.appendToBuffer(local, undefined, true), ' }']);
		      if (this.environment.isSimple) {
		        this.pushSource(['else { ', this.appendToBuffer("''", undefined, true), ' }']);
		      }
		    }
		  },
	
		  // [appendEscaped]
		  //
		  // On stack, before: value, ...
		  // On stack, after: ...
		  //
		  // Escape `value` and append it to the buffer
		  appendEscaped: function appendEscaped() {
		    this.pushSource(this.appendToBuffer([this.aliasable('container.escapeExpression'), '(', this.popStack(), ')']));
		  },
	
		  // [getContext]
		  //
		  // On stack, before: ...
		  // On stack, after: ...
		  // Compiler value, after: lastContext=depth
		  //
		  // Set the value of the `lastContext` compiler value to the depth
		  getContext: function getContext(depth) {
		    this.lastContext = depth;
		  },
	
		  // [pushContext]
		  //
		  // On stack, before: ...
		  // On stack, after: currentContext, ...
		  //
		  // Pushes the value of the current context onto the stack.
		  pushContext: function pushContext() {
		    this.pushStackLiteral(this.contextName(this.lastContext));
		  },
	
		  // [lookupOnContext]
		  //
		  // On stack, before: ...
		  // On stack, after: currentContext[name], ...
		  //
		  // Looks up the value of `name` on the current context and pushes
		  // it onto the stack.
		  lookupOnContext: function lookupOnContext(parts, falsy, strict, scoped) {
		    var i = 0;
	
		    if (!scoped && this.options.compat && !this.lastContext) {
		      // The depthed query is expected to handle the undefined logic for the root level that
		      // is implemented below, so we evaluate that directly in compat mode
		      this.push(this.depthedLookup(parts[i++]));
		    } else {
		      this.pushContext();
		    }
	
		    this.resolvePath('context', parts, i, falsy, strict);
		  },
	
		  // [lookupBlockParam]
		  //
		  // On stack, before: ...
		  // On stack, after: blockParam[name], ...
		  //
		  // Looks up the value of `parts` on the given block param and pushes
		  // it onto the stack.
		  lookupBlockParam: function lookupBlockParam(blockParamId, parts) {
		    this.useBlockParams = true;
	
		    this.push(['blockParams[', blockParamId[0], '][', blockParamId[1], ']']);
		    this.resolvePath('context', parts, 1);
		  },
	
		  // [lookupData]
		  //
		  // On stack, before: ...
		  // On stack, after: data, ...
		  //
		  // Push the data lookup operator
		  lookupData: function lookupData(depth, parts, strict) {
		    if (!depth) {
		      this.pushStackLiteral('data');
		    } else {
		      this.pushStackLiteral('container.data(data, ' + depth + ')');
		    }
	
		    this.resolvePath('data', parts, 0, true, strict);
		  },
	
		  resolvePath: function resolvePath(type, parts, i, falsy, strict) {
		    // istanbul ignore next
	
		    var _this = this;
	
		    if (this.options.strict || this.options.assumeObjects) {
		      this.push(strictLookup(this.options.strict && strict, this, parts, type));
		      return;
		    }
	
		    var len = parts.length;
		    for (; i < len; i++) {
		      /* eslint-disable no-loop-func */
		      this.replaceStack(function (current) {
		        var lookup = _this.nameLookup(current, parts[i], type);
		        // We want to ensure that zero and false are handled properly if the context (falsy flag)
		        // needs to have the special handling for these values.
		        if (!falsy) {
		          return [' != null ? ', lookup, ' : ', current];
		        } else {
		          // Otherwise we can use generic falsy handling
		          return [' && ', lookup];
		        }
		      });
		      /* eslint-enable no-loop-func */
		    }
		  },
	
		  // [resolvePossibleLambda]
		  //
		  // On stack, before: value, ...
		  // On stack, after: resolved value, ...
		  //
		  // If the `value` is a lambda, replace it on the stack by
		  // the return value of the lambda
		  resolvePossibleLambda: function resolvePossibleLambda() {
		    this.push([this.aliasable('container.lambda'), '(', this.popStack(), ', ', this.contextName(0), ')']);
		  },
	
		  // [pushStringParam]
		  //
		  // On stack, before: ...
		  // On stack, after: string, currentContext, ...
		  //
		  // This opcode is designed for use in string mode, which
		  // provides the string value of a parameter along with its
		  // depth rather than resolving it immediately.
		  pushStringParam: function pushStringParam(string, type) {
		    this.pushContext();
		    this.pushString(type);
	
		    // If it's a subexpression, the string result
		    // will be pushed after this opcode.
		    if (type !== 'SubExpression') {
		      if (typeof string === 'string') {
		        this.pushString(string);
		      } else {
		        this.pushStackLiteral(string);
		      }
		    }
		  },
	
		  emptyHash: function emptyHash(omitEmpty) {
		    if (this.trackIds) {
		      this.push('{}'); // hashIds
		    }
		    if (this.stringParams) {
		      this.push('{}'); // hashContexts
		      this.push('{}'); // hashTypes
		    }
		    this.pushStackLiteral(omitEmpty ? 'undefined' : '{}');
		  },
		  pushHash: function pushHash() {
		    if (this.hash) {
		      this.hashes.push(this.hash);
		    }
		    this.hash = { values: [], types: [], contexts: [], ids: [] };
		  },
		  popHash: function popHash() {
		    var hash = this.hash;
		    this.hash = this.hashes.pop();
	
		    if (this.trackIds) {
		      this.push(this.objectLiteral(hash.ids));
		    }
		    if (this.stringParams) {
		      this.push(this.objectLiteral(hash.contexts));
		      this.push(this.objectLiteral(hash.types));
		    }
	
		    this.push(this.objectLiteral(hash.values));
		  },
	
		  // [pushString]
		  //
		  // On stack, before: ...
		  // On stack, after: quotedString(string), ...
		  //
		  // Push a quoted version of `string` onto the stack
		  pushString: function pushString(string) {
		    this.pushStackLiteral(this.quotedString(string));
		  },
	
		  // [pushLiteral]
		  //
		  // On stack, before: ...
		  // On stack, after: value, ...
		  //
		  // Pushes a value onto the stack. This operation prevents
		  // the compiler from creating a temporary variable to hold
		  // it.
		  pushLiteral: function pushLiteral(value) {
		    this.pushStackLiteral(value);
		  },
	
		  // [pushProgram]
		  //
		  // On stack, before: ...
		  // On stack, after: program(guid), ...
		  //
		  // Push a program expression onto the stack. This takes
		  // a compile-time guid and converts it into a runtime-accessible
		  // expression.
		  pushProgram: function pushProgram(guid) {
		    if (guid != null) {
		      this.pushStackLiteral(this.programExpression(guid));
		    } else {
		      this.pushStackLiteral(null);
		    }
		  },
	
		  // [registerDecorator]
		  //
		  // On stack, before: hash, program, params..., ...
		  // On stack, after: ...
		  //
		  // Pops off the decorator's parameters, invokes the decorator,
		  // and inserts the decorator into the decorators list.
		  registerDecorator: function registerDecorator(paramSize, name) {
		    var foundDecorator = this.nameLookup('decorators', name, 'decorator'),
		        options = this.setupHelperArgs(name, paramSize);
	
		    this.decorators.push(['fn = ', this.decorators.functionCall(foundDecorator, '', ['fn', 'props', 'container', options]), ' || fn;']);
		  },
	
		  // [invokeHelper]
		  //
		  // On stack, before: hash, inverse, program, params..., ...
		  // On stack, after: result of helper invocation
		  //
		  // Pops off the helper's parameters, invokes the helper,
		  // and pushes the helper's return value onto the stack.
		  //
		  // If the helper is not found, `helperMissing` is called.
		  invokeHelper: function invokeHelper(paramSize, name, isSimple) {
		    var nonHelper = this.popStack(),
		        helper = this.setupHelper(paramSize, name),
		        simple = isSimple ? [helper.name, ' || '] : '';
	
		    var lookup = ['('].concat(simple, nonHelper);
		    if (!this.options.strict) {
		      lookup.push(' || ', this.aliasable('helpers.helperMissing'));
		    }
		    lookup.push(')');
	
		    this.push(this.source.functionCall(lookup, 'call', helper.callParams));
		  },
	
		  // [invokeKnownHelper]
		  //
		  // On stack, before: hash, inverse, program, params..., ...
		  // On stack, after: result of helper invocation
		  //
		  // This operation is used when the helper is known to exist,
		  // so a `helperMissing` fallback is not required.
		  invokeKnownHelper: function invokeKnownHelper(paramSize, name) {
		    var helper = this.setupHelper(paramSize, name);
		    this.push(this.source.functionCall(helper.name, 'call', helper.callParams));
		  },
	
		  // [invokeAmbiguous]
		  //
		  // On stack, before: hash, inverse, program, params..., ...
		  // On stack, after: result of disambiguation
		  //
		  // This operation is used when an expression like `{{foo}}`
		  // is provided, but we don't know at compile-time whether it
		  // is a helper or a path.
		  //
		  // This operation emits more code than the other options,
		  // and can be avoided by passing the `knownHelpers` and
		  // `knownHelpersOnly` flags at compile-time.
		  invokeAmbiguous: function invokeAmbiguous(name, helperCall) {
		    this.useRegister('helper');
	
		    var nonHelper = this.popStack();
	
		    this.emptyHash();
		    var helper = this.setupHelper(0, name, helperCall);
	
		    var helperName = this.lastHelper = this.nameLookup('helpers', name, 'helper');
	
		    var lookup = ['(', '(helper = ', helperName, ' || ', nonHelper, ')'];
		    if (!this.options.strict) {
		      lookup[0] = '(helper = ';
		      lookup.push(' != null ? helper : ', this.aliasable('helpers.helperMissing'));
		    }
	
		    this.push(['(', lookup, helper.paramsInit ? ['),(', helper.paramsInit] : [], '),', '(typeof helper === ', this.aliasable('"function"'), ' ? ', this.source.functionCall('helper', 'call', helper.callParams), ' : helper))']);
		  },
	
		  // [invokePartial]
		  //
		  // On stack, before: context, ...
		  // On stack after: result of partial invocation
		  //
		  // This operation pops off a context, invokes a partial with that context,
		  // and pushes the result of the invocation back.
		  invokePartial: function invokePartial(isDynamic, name, indent) {
		    var params = [],
		        options = this.setupParams(name, 1, params);
	
		    if (isDynamic) {
		      name = this.popStack();
		      delete options.name;
		    }
	
		    if (indent) {
		      options.indent = JSON.stringify(indent);
		    }
		    options.helpers = 'helpers';
		    options.partials = 'partials';
		    options.decorators = 'container.decorators';
	
		    if (!isDynamic) {
		      params.unshift(this.nameLookup('partials', name, 'partial'));
		    } else {
		      params.unshift(name);
		    }
	
		    if (this.options.compat) {
		      options.depths = 'depths';
		    }
		    options = this.objectLiteral(options);
		    params.push(options);
	
		    this.push(this.source.functionCall('container.invokePartial', '', params));
		  },
	
		  // [assignToHash]
		  //
		  // On stack, before: value, ..., hash, ...
		  // On stack, after: ..., hash, ...
		  //
		  // Pops a value off the stack and assigns it to the current hash
		  assignToHash: function assignToHash(key) {
		    var value = this.popStack(),
		        context = undefined,
		        type = undefined,
		        id = undefined;
	
		    if (this.trackIds) {
		      id = this.popStack();
		    }
		    if (this.stringParams) {
		      type = this.popStack();
		      context = this.popStack();
		    }
	
		    var hash = this.hash;
		    if (context) {
		      hash.contexts[key] = context;
		    }
		    if (type) {
		      hash.types[key] = type;
		    }
		    if (id) {
		      hash.ids[key] = id;
		    }
		    hash.values[key] = value;
		  },
	
		  pushId: function pushId(type, name, child) {
		    if (type === 'BlockParam') {
		      this.pushStackLiteral('blockParams[' + name[0] + '].path[' + name[1] + ']' + (child ? ' + ' + JSON.stringify('.' + child) : ''));
		    } else if (type === 'PathExpression') {
		      this.pushString(name);
		    } else if (type === 'SubExpression') {
		      this.pushStackLiteral('true');
		    } else {
		      this.pushStackLiteral('null');
		    }
		  },
	
		  // HELPERS
	
		  compiler: JavaScriptCompiler,
	
		  compileChildren: function compileChildren(environment, options) {
		    var children = environment.children,
		        child = undefined,
		        compiler = undefined;
	
		    for (var i = 0, l = children.length; i < l; i++) {
		      child = children[i];
		      compiler = new this.compiler(); // eslint-disable-line new-cap
	
		      var index = this.matchExistingProgram(child);
	
		      if (index == null) {
		        this.context.programs.push(''); // Placeholder to prevent name conflicts for nested children
		        index = this.context.programs.length;
		        child.index = index;
		        child.name = 'program' + index;
		        this.context.programs[index] = compiler.compile(child, options, this.context, !this.precompile);
		        this.context.decorators[index] = compiler.decorators;
		        this.context.environments[index] = child;
	
		        this.useDepths = this.useDepths || compiler.useDepths;
		        this.useBlockParams = this.useBlockParams || compiler.useBlockParams;
		      } else {
		        child.index = index;
		        child.name = 'program' + index;
	
		        this.useDepths = this.useDepths || child.useDepths;
		        this.useBlockParams = this.useBlockParams || child.useBlockParams;
		      }
		    }
		  },
		  matchExistingProgram: function matchExistingProgram(child) {
		    for (var i = 0, len = this.context.environments.length; i < len; i++) {
		      var environment = this.context.environments[i];
		      if (environment && environment.equals(child)) {
		        return i;
		      }
		    }
		  },
	
		  programExpression: function programExpression(guid) {
		    var child = this.environment.children[guid],
		        programParams = [child.index, 'data', child.blockParams];
	
		    if (this.useBlockParams || this.useDepths) {
		      programParams.push('blockParams');
		    }
		    if (this.useDepths) {
		      programParams.push('depths');
		    }
	
		    return 'container.program(' + programParams.join(', ') + ')';
		  },
	
		  useRegister: function useRegister(name) {
		    if (!this.registers[name]) {
		      this.registers[name] = true;
		      this.registers.list.push(name);
		    }
		  },
	
		  push: function push(expr) {
		    if (!(expr instanceof Literal)) {
		      expr = this.source.wrap(expr);
		    }
	
		    this.inlineStack.push(expr);
		    return expr;
		  },
	
		  pushStackLiteral: function pushStackLiteral(item) {
		    this.push(new Literal(item));
		  },
	
		  pushSource: function pushSource(source) {
		    if (this.pendingContent) {
		      this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent), this.pendingLocation));
		      this.pendingContent = undefined;
		    }
	
		    if (source) {
		      this.source.push(source);
		    }
		  },
	
		  replaceStack: function replaceStack(callback) {
		    var prefix = ['('],
		        stack = undefined,
		        createdStack = undefined,
		        usedLiteral = undefined;
	
		    /* istanbul ignore next */
		    if (!this.isInline()) {
		      throw new _exception2['default']('replaceStack on non-inline');
		    }
	
		    // We want to merge the inline statement into the replacement statement via ','
		    var top = this.popStack(true);
	
		    if (top instanceof Literal) {
		      // Literals do not need to be inlined
		      stack = [top.value];
		      prefix = ['(', stack];
		      usedLiteral = true;
		    } else {
		      // Get or create the current stack name for use by the inline
		      createdStack = true;
		      var _name = this.incrStack();
	
		      prefix = ['((', this.push(_name), ' = ', top, ')'];
		      stack = this.topStack();
		    }
	
		    var item = callback.call(this, stack);
	
		    if (!usedLiteral) {
		      this.popStack();
		    }
		    if (createdStack) {
		      this.stackSlot--;
		    }
		    this.push(prefix.concat(item, ')'));
		  },
	
		  incrStack: function incrStack() {
		    this.stackSlot++;
		    if (this.stackSlot > this.stackVars.length) {
		      this.stackVars.push('stack' + this.stackSlot);
		    }
		    return this.topStackName();
		  },
		  topStackName: function topStackName() {
		    return 'stack' + this.stackSlot;
		  },
		  flushInline: function flushInline() {
		    var inlineStack = this.inlineStack;
		    this.inlineStack = [];
		    for (var i = 0, len = inlineStack.length; i < len; i++) {
		      var entry = inlineStack[i];
		      /* istanbul ignore if */
		      if (entry instanceof Literal) {
		        this.compileStack.push(entry);
		      } else {
		        var stack = this.incrStack();
		        this.pushSource([stack, ' = ', entry, ';']);
		        this.compileStack.push(stack);
		      }
		    }
		  },
		  isInline: function isInline() {
		    return this.inlineStack.length;
		  },
	
		  popStack: function popStack(wrapped) {
		    var inline = this.isInline(),
		        item = (inline ? this.inlineStack : this.compileStack).pop();
	
		    if (!wrapped && item instanceof Literal) {
		      return item.value;
		    } else {
		      if (!inline) {
		        /* istanbul ignore next */
		        if (!this.stackSlot) {
		          throw new _exception2['default']('Invalid stack pop');
		        }
		        this.stackSlot--;
		      }
		      return item;
		    }
		  },
	
		  topStack: function topStack() {
		    var stack = this.isInline() ? this.inlineStack : this.compileStack,
		        item = stack[stack.length - 1];
	
		    /* istanbul ignore if */
		    if (item instanceof Literal) {
		      return item.value;
		    } else {
		      return item;
		    }
		  },
	
		  contextName: function contextName(context) {
		    if (this.useDepths && context) {
		      return 'depths[' + context + ']';
		    } else {
		      return 'depth' + context;
		    }
		  },
	
		  quotedString: function quotedString(str) {
		    return this.source.quotedString(str);
		  },
	
		  objectLiteral: function objectLiteral(obj) {
		    return this.source.objectLiteral(obj);
		  },
	
		  aliasable: function aliasable(name) {
		    var ret = this.aliases[name];
		    if (ret) {
		      ret.referenceCount++;
		      return ret;
		    }
	
		    ret = this.aliases[name] = this.source.wrap(name);
		    ret.aliasable = true;
		    ret.referenceCount = 1;
	
		    return ret;
		  },
	
		  setupHelper: function setupHelper(paramSize, name, blockHelper) {
		    var params = [],
		        paramsInit = this.setupHelperArgs(name, paramSize, params, blockHelper);
		    var foundHelper = this.nameLookup('helpers', name, 'helper'),
		        callContext = this.aliasable(this.contextName(0) + ' != null ? ' + this.contextName(0) + ' : {}');
	
		    return {
		      params: params,
		      paramsInit: paramsInit,
		      name: foundHelper,
		      callParams: [callContext].concat(params)
		    };
		  },
	
		  setupParams: function setupParams(helper, paramSize, params) {
		    var options = {},
		        contexts = [],
		        types = [],
		        ids = [],
		        objectArgs = !params,
		        param = undefined;
	
		    if (objectArgs) {
		      params = [];
		    }
	
		    options.name = this.quotedString(helper);
		    options.hash = this.popStack();
	
		    if (this.trackIds) {
		      options.hashIds = this.popStack();
		    }
		    if (this.stringParams) {
		      options.hashTypes = this.popStack();
		      options.hashContexts = this.popStack();
		    }
	
		    var inverse = this.popStack(),
		        program = this.popStack();
	
		    // Avoid setting fn and inverse if neither are set. This allows
		    // helpers to do a check for `if (options.fn)`
		    if (program || inverse) {
		      options.fn = program || 'container.noop';
		      options.inverse = inverse || 'container.noop';
		    }
	
		    // The parameters go on to the stack in order (making sure that they are evaluated in order)
		    // so we need to pop them off the stack in reverse order
		    var i = paramSize;
		    while (i--) {
		      param = this.popStack();
		      params[i] = param;
	
		      if (this.trackIds) {
		        ids[i] = this.popStack();
		      }
		      if (this.stringParams) {
		        types[i] = this.popStack();
		        contexts[i] = this.popStack();
		      }
		    }
	
		    if (objectArgs) {
		      options.args = this.source.generateArray(params);
		    }
	
		    if (this.trackIds) {
		      options.ids = this.source.generateArray(ids);
		    }
		    if (this.stringParams) {
		      options.types = this.source.generateArray(types);
		      options.contexts = this.source.generateArray(contexts);
		    }
	
		    if (this.options.data) {
		      options.data = 'data';
		    }
		    if (this.useBlockParams) {
		      options.blockParams = 'blockParams';
		    }
		    return options;
		  },
	
		  setupHelperArgs: function setupHelperArgs(helper, paramSize, params, useRegister) {
		    var options = this.setupParams(helper, paramSize, params);
		    options = this.objectLiteral(options);
		    if (useRegister) {
		      this.useRegister('options');
		      params.push('options');
		      return ['options=', options];
		    } else if (params) {
		      params.push(options);
		      return '';
		    } else {
		      return options;
		    }
		  }
		};
	
		(function () {
		  var reservedWords = ('break else new var' + ' case finally return void' + ' catch for switch while' + ' continue function this with' + ' default if throw' + ' delete in try' + ' do instanceof typeof' + ' abstract enum int short' + ' boolean export interface static' + ' byte extends long super' + ' char final native synchronized' + ' class float package throws' + ' const goto private transient' + ' debugger implements protected volatile' + ' double import public let yield await' + ' null true false').split(' ');
	
		  var compilerWords = JavaScriptCompiler.RESERVED_WORDS = {};
	
		  for (var i = 0, l = reservedWords.length; i < l; i++) {
		    compilerWords[reservedWords[i]] = true;
		  }
		})();
	
		JavaScriptCompiler.isValidJavaScriptVariableName = function (name) {
		  return !JavaScriptCompiler.RESERVED_WORDS[name] && /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(name);
		};
	
		function strictLookup(requireTerminal, compiler, parts, type) {
		  var stack = compiler.popStack(),
		      i = 0,
		      len = parts.length;
		  if (requireTerminal) {
		    len--;
		  }
	
		  for (; i < len; i++) {
		    stack = compiler.nameLookup(stack, parts[i], type);
		  }
	
		  if (requireTerminal) {
		    return [compiler.aliasable('container.strict'), '(', stack, ', ', compiler.quotedString(parts[i]), ')'];
		  } else {
		    return stack;
		  }
		}
	
		exports['default'] = JavaScriptCompiler;
		module.exports = exports['default'];
	
	/***/ },
	/* 29 */
	/***/ function(module, exports, __webpack_require__) {
	
		/* global define */
		'use strict';
	
		exports.__esModule = true;
	
		var _utils = __webpack_require__(5);
	
		var SourceNode = undefined;
	
		try {
		  /* istanbul ignore next */
		  if (false) {
		    // We don't support this in AMD environments. For these environments, we asusme that
		    // they are running on the browser and thus have no need for the source-map library.
		    var SourceMap = require('source-map');
		    SourceNode = SourceMap.SourceNode;
		  }
		} catch (err) {}
		/* NOP */
	
		/* istanbul ignore if: tested but not covered in istanbul due to dist build  */
		if (!SourceNode) {
		  SourceNode = function (line, column, srcFile, chunks) {
		    this.src = '';
		    if (chunks) {
		      this.add(chunks);
		    }
		  };
		  /* istanbul ignore next */
		  SourceNode.prototype = {
		    add: function add(chunks) {
		      if (_utils.isArray(chunks)) {
		        chunks = chunks.join('');
		      }
		      this.src += chunks;
		    },
		    prepend: function prepend(chunks) {
		      if (_utils.isArray(chunks)) {
		        chunks = chunks.join('');
		      }
		      this.src = chunks + this.src;
		    },
		    toStringWithSourceMap: function toStringWithSourceMap() {
		      return { code: this.toString() };
		    },
		    toString: function toString() {
		      return this.src;
		    }
		  };
		}
	
		function castChunk(chunk, codeGen, loc) {
		  if (_utils.isArray(chunk)) {
		    var ret = [];
	
		    for (var i = 0, len = chunk.length; i < len; i++) {
		      ret.push(codeGen.wrap(chunk[i], loc));
		    }
		    return ret;
		  } else if (typeof chunk === 'boolean' || typeof chunk === 'number') {
		    // Handle primitives that the SourceNode will throw up on
		    return chunk + '';
		  }
		  return chunk;
		}
	
		function CodeGen(srcFile) {
		  this.srcFile = srcFile;
		  this.source = [];
		}
	
		CodeGen.prototype = {
		  isEmpty: function isEmpty() {
		    return !this.source.length;
		  },
		  prepend: function prepend(source, loc) {
		    this.source.unshift(this.wrap(source, loc));
		  },
		  push: function push(source, loc) {
		    this.source.push(this.wrap(source, loc));
		  },
	
		  merge: function merge() {
		    var source = this.empty();
		    this.each(function (line) {
		      source.add(['  ', line, '\n']);
		    });
		    return source;
		  },
	
		  each: function each(iter) {
		    for (var i = 0, len = this.source.length; i < len; i++) {
		      iter(this.source[i]);
		    }
		  },
	
		  empty: function empty() {
		    var loc = this.currentLocation || { start: {} };
		    return new SourceNode(loc.start.line, loc.start.column, this.srcFile);
		  },
		  wrap: function wrap(chunk) {
		    var loc = arguments.length <= 1 || arguments[1] === undefined ? this.currentLocation || { start: {} } : arguments[1];
	
		    if (chunk instanceof SourceNode) {
		      return chunk;
		    }
	
		    chunk = castChunk(chunk, this, loc);
	
		    return new SourceNode(loc.start.line, loc.start.column, this.srcFile, chunk);
		  },
	
		  functionCall: function functionCall(fn, type, params) {
		    params = this.generateList(params);
		    return this.wrap([fn, type ? '.' + type + '(' : '(', params, ')']);
		  },
	
		  quotedString: function quotedString(str) {
		    return '"' + (str + '').replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/\u2028/g, '\\u2028') // Per Ecma-262 7.3 + 7.8.4
		    .replace(/\u2029/g, '\\u2029') + '"';
		  },
	
		  objectLiteral: function objectLiteral(obj) {
		    var pairs = [];
	
		    for (var key in obj) {
		      if (obj.hasOwnProperty(key)) {
		        var value = castChunk(obj[key], this);
		        if (value !== 'undefined') {
		          pairs.push([this.quotedString(key), ':', value]);
		        }
		      }
		    }
	
		    var ret = this.generateList(pairs);
		    ret.prepend('{');
		    ret.add('}');
		    return ret;
		  },
	
		  generateList: function generateList(entries) {
		    var ret = this.empty();
	
		    for (var i = 0, len = entries.length; i < len; i++) {
		      if (i) {
		        ret.add(',');
		      }
	
		      ret.add(castChunk(entries[i], this));
		    }
	
		    return ret;
		  },
	
		  generateArray: function generateArray(entries) {
		    var ret = this.generateList(entries);
		    ret.prepend('[');
		    ret.add(']');
	
		    return ret;
		  }
		};
	
		exports['default'] = CodeGen;
		module.exports = exports['default'];
	
	/***/ }
	/******/ ])
	});
	;

/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof2 = __webpack_require__(334);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	(function (root, factory) {
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(401)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	  /* global module, exports */
	  else if (typeof require == 'function' && (typeof exports === 'undefined' ? 'undefined' : (0, _typeof3.default)(exports)) == 'object') {
	      module.exports = factory(require('okta/underscore'), require('backbone'));
	    } else {
	      root.Archer || (root.Archer = {});
	      root.Archer.Collection = factory(root._, root.Backbone);
	    }
	})(undefined, function (_, Backbone) {
	  var STATE = '__STATE__',
	      FETCH_DATA = 'FETCH_DATA',
	      PAGINATION_DATA = 'PAGINATION_DATA',
	      DEFAULT_PARAMS = 'DEFAULT_PARAMS',
	      LINK_BY_HEADER = 'LINK_BY_HEADER',
	      XHR = 'XHR';
	
	  /*
	   * Sets the next page URL on the collection from link headers
	   * See: http://www.rfc-editor.org/rfc/rfc5988.txt
	   *
	   * This method is looking for a link header with `rel="next"`
	   * An set's it as the next page's URL.
	   *
	   * If it doesn't find a next page, and current page is set by a link header
	   * it assumes we are at the last page and deletes the current `next`
	   */
	  function setLinkHeadersPagination(collection, xhr) {
	    try {
	      var links = parseLinkHeader(xhr.getResponseHeader('link'));
	      collection[STATE].set(LINK_BY_HEADER, true);
	      collection.setPagination(links['next'].href);
	    } catch (e) {
	      if (collection[STATE].get(LINK_BY_HEADER)) {
	        collection.setPagination(null);
	      }
	    }
	  }
	
	  function parseQuery(url) {
	    var params = {},
	        rawQueryStr = url && url.split('?')[1],
	        queryString = rawQueryStr && decodeURIComponent(rawQueryStr.split('#')[0]).replace(/\+/g, ' '),
	        props = queryString ? queryString.split('&') : [];
	    for (var i = 0; i < props.length; i++) {
	      var parts = props[i].split('=');
	      params[parts.shift()] = parts.join('=');
	    }
	    return params;
	  }
	
	  // ################################################
	  // # Source: https://gist.github.com/deiu/9335803
	  // ################################################
	
	  // unquote string (utility)
	  function unquote(value) {
	    if (value.charAt(0) == '"' && value.charAt(value.length - 1) == '"') {
	      return value.substring(1, value.length - 1);
	    }
	    return value;
	  }
	  /*
	  parse a Link header
	  Link:<https://example.org/.meta>; rel=meta
	  var r = parseLinkHeader(xhr.getResponseHeader('Link');
	  r['meta']['href'] outputs https://example.org/.meta
	  */
	  function parseLinkHeader(header) {
	    /* eslint max-statements: 0 */
	    var linkexp = /<[^>]*>\s*(\s*;\s*[^\(\)<>@,;:"\/\[\]\?={} \t]+=(([^\(\)<>@,;:"\/\[\]\?={} \t]+)|("[^"]*")))*(,|$)/g,
	        paramexp = /[^\(\)<>@,;:"\/\[\]\?={} \t]+=(([^\(\)<>@,;:"\/\[\]\?={} \t]+)|("[^"]*"))/g;
	
	    var matches = header.match(linkexp);
	    var rels = {};
	    for (var i = 0; i < matches.length; i++) {
	      var split = matches[i].split('>');
	      var href = split[0].substring(1);
	      var link = {};
	      link.href = href;
	      var s = split[1].match(paramexp);
	      for (var j = 0; j < s.length; j++) {
	        var paramsplit = s[j].split('=');
	        var name = paramsplit[0];
	        link[name] = unquote(paramsplit[1]);
	      }
	
	      if (link.rel !== undefined) {
	        rels[link.rel] = link;
	      }
	    }
	
	    return rels;
	  }
	
	  // ################################################
	  // # /Source
	  // ################################################
	  //
	
	  /**
	   *
	   * Archer.Collection is a standard [Backbone.Collection](http://backbonejs.org/#Collection) with pre-set `data`
	   * parameters and built in pagination - works with [http link headers](https://tools.ietf.org/html/rfc5988)
	   * out of the box:
	   *
	   * @class src/framework/Collection
	   * @extends external:Backbone.Collection
	   * @example
	   * var Users = Archer.Collection.extend({
	   *   url: '/api/v1/users'
	   *   params: {expand: true}
	   * });
	   * var users = new Users(null, {params: {type: 'new'}}),
	   *     $button = this.$('a.fetch-more');
	   *
	   * $button.click(function () {
	   *   users.fetchMore();
	   * });
	   *
	   * this.listenTo(users, 'sync', function () {
	   *   $button.toggle(users.hasMore());
	   * });
	   *
	   * collection.fetch(); //=> '/api/v1/users?expand=true&type=new'
	   */
	  return Backbone.Collection.extend( /** @lends src/framework/Collection.prototype */{
	
	    /**
	     * Default fetch parameters
	     * @type {Object}
	     */
	    params: {},
	
	    constructor: function constructor(models, options) {
	      var state = this[STATE] = new Backbone.Model();
	      state.set(DEFAULT_PARAMS, _.defaults(options && options.params || {}, this.params || {}));
	      Backbone.Collection.apply(this, arguments);
	    },
	
	    /**
	     * See [Backbone Collection.sync](http://backbonejs.org/#Collection-sync).
	     */
	    sync: function sync(method, collection, options) {
	      var self = this,
	          success = options.success;
	      options.success = function (resp, status, xhr) {
	        // its important to set the pagination data *before* we call the success callback
	        // because we want the pagination data to be ready when the collection triggers the `sync` event
	        setLinkHeadersPagination(self, xhr);
	        success.apply(null, arguments);
	      };
	      return Backbone.Collection.prototype.sync.call(this, method, collection, options);
	    },
	
	    /**
	     * See [Backbone Collection.fetch](http://backbonejs.org/#Collection-fetch).
	     */
	    fetch: function fetch(options) {
	      options || (options = {});
	      var state = this[STATE],
	          xhr = state.get(XHR);
	
	      options.data = _.extend({}, state.get(DEFAULT_PARAMS), options.data || {});
	      options.fromFetch = true;
	
	      state.set(FETCH_DATA, options.data);
	      if (xhr && xhr.abort && options.abort !== false) {
	        xhr.abort();
	      }
	      xhr = Backbone.Collection.prototype.fetch.call(this, options);
	      state.set(XHR, xhr);
	      return xhr;
	    },
	
	    /**
	     * Set pagination data to get to the next page
	     * @param {Mixed} params
	     * @param {Object} [options]
	     * @param {Boolean} [options.fromFetch] should we include data from the previous fetch call in this object
	     * @example
	     * collection.setPagination({q: 'foo', page: '2'}); //=> {q: 'foo', page: '2'}
	     *
	     * collection.setPagination('/path/to/resource?q=baz&page=4'); //=> {q: 'baz', page: '4'}
	     *
	     * collection.setPagination('/path/to/resource'); //=> {}
	     *
	     * collection.fetch({data: {q: 'foo'}});
	     * collection.setPagination({page: 2}, {fromFetch: true}); //=> {q: 'foo', page: 2}
	     *
	     * any "falsy" value resets pagination
	     * collection.setPagination(); //=> {}
	     * collection.setPagination(null); //=> {}
	     * collection.setPagination(false); //=> {}
	     * collection.setPagination(''); //=> {}
	     * collection.setPagination(0); //=> {}
	     * @protected
	     */
	    setPagination: function setPagination(params, options) {
	      if (_.isString(params) && params) {
	        params = parseQuery(params);
	      }
	      if (!_.isObject(params) || _.isArray(params) || !_.size(params)) {
	        params = null;
	      } else if (options && options.fromFetch) {
	        params = _.extend({}, this.getFetchData(), params);
	      }
	      this[STATE].set(PAGINATION_DATA, params);
	    },
	
	    /**
	     * Returns the `data` parameters applied in th most recent `fetch` call
	     * It will include parameters set by {@link #params} and optios.params passed to the constructor
	     * @return {Object}
	     * @protected
	     */
	    getFetchData: function getFetchData() {
	      return this[STATE].get(FETCH_DATA) || {};
	    },
	
	    /**
	     * Data object for constructing a request to fetch the next page
	     * @return {Object}
	     * @protected
	     */
	    getPaginationData: function getPaginationData() {
	      return this[STATE].get(PAGINATION_DATA) || {};
	    },
	
	    /**
	     * Does this collection have more data on the server (e.g is there a next "page")
	     * @return {Boolean}
	     */
	    hasMore: function hasMore() {
	      return _.size(this.getPaginationData()) > 0;
	    },
	
	    /**
	     * Get the next page from the server
	     * @return {Object} xhr returned by {@link #fetch}
	     */
	    fetchMore: function fetchMore() {
	      if (!this.hasMore()) {
	        throw new Error('Invalid Request');
	      }
	      return this.fetch({ data: this.getPaginationData(), add: true, remove: false, update: true });
	    },
	
	    /**
	     * See [Backbone Collection.reset](http://backbonejs.org/#Collection-reset).
	     */
	    reset: function reset(models, options) {
	      options || (options = {});
	      // only reset the pagination when reset is being called explicitly.
	      // this is to avoid link headers pagination being overriden and reset when
	      // fetching the collection using `collection.fetch({reset: true})`
	      if (!options.fromFetch) {
	        this.setPagination(null);
	      }
	      return Backbone.Collection.prototype.reset.apply(this, arguments);
	    },
	
	    // we want "where" to be able to search through derived properties as well
	    where: function where(attrs, first) {
	      if (_.isEmpty(attrs)) {
	        return first ? void 0 : [];
	      }
	      return this[first ? 'find' : 'filter'](function (model) {
	        for (var key in attrs) {
	          if (attrs[key] !== model.get(key)) {
	            return false;
	          }
	        }
	        return true;
	      });
	    },
	
	    /**
	     * See [Backbone Collection.create](http://backbonejs.org/#Collection-create).
	     */
	    create: function create(model, options) {
	      options || (options = {});
	      if (!_.result(model, 'urlRoot')) {
	        options.url = _.result(this, 'url');
	      }
	      return Backbone.Collection.prototype.create.call(this, model, options);
	    }
	
	  });
	});

/***/ },
/* 334 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _iterator = __webpack_require__(335);
	
	var _iterator2 = _interopRequireDefault(_iterator);
	
	var _symbol = __webpack_require__(386);
	
	var _symbol2 = _interopRequireDefault(_symbol);
	
	var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
	} : function (obj) {
	  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
	};

/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(336), __esModule: true };

/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(337);
	__webpack_require__(381);
	module.exports = __webpack_require__(385).f('iterator');


/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $at = __webpack_require__(338)(true);
	
	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(341)(String, 'String', function (iterated) {
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var index = this._i;
	  var point;
	  if (index >= O.length) return { value: undefined, done: true };
	  point = $at(O, index);
	  this._i += point.length;
	  return { value: point, done: false };
	});


/***/ },
/* 338 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(339);
	var defined = __webpack_require__(340);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function (TO_STRING) {
	  return function (that, pos) {
	    var s = String(defined(that));
	    var i = toInteger(pos);
	    var l = s.length;
	    var a, b;
	    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};


/***/ },
/* 339 */
/***/ function(module, exports) {

	// 7.1.4 ToInteger
	var ceil = Math.ceil;
	var floor = Math.floor;
	module.exports = function (it) {
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};


/***/ },
/* 340 */
/***/ function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on  " + it);
	  return it;
	};


/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY = __webpack_require__(342);
	var $export = __webpack_require__(343);
	var redefine = __webpack_require__(359);
	var hide = __webpack_require__(348);
	var Iterators = __webpack_require__(360);
	var $iterCreate = __webpack_require__(361);
	var setToStringTag = __webpack_require__(377);
	var getPrototypeOf = __webpack_require__(379);
	var ITERATOR = __webpack_require__(378)('iterator');
	var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
	var FF_ITERATOR = '@@iterator';
	var KEYS = 'keys';
	var VALUES = 'values';
	
	var returnThis = function () { return this; };
	
	module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function (kind) {
	    if (!BUGGY && kind in proto) return proto[kind];
	    switch (kind) {
	      case KEYS: return function keys() { return new Constructor(this, kind); };
	      case VALUES: return function values() { return new Constructor(this, kind); };
	    } return function entries() { return new Constructor(this, kind); };
	  };
	  var TAG = NAME + ' Iterator';
	  var DEF_VALUES = DEFAULT == VALUES;
	  var VALUES_BUG = false;
	  var proto = Base.prototype;
	  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
	  var $default = $native || getMethod(DEFAULT);
	  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
	  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
	  var methods, key, IteratorPrototype;
	  // Fix native
	  if ($anyNative) {
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
	    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if (DEF_VALUES && $native && $native.name !== VALUES) {
	    VALUES_BUG = true;
	    $default = function values() { return $native.call(this); };
	  }
	  // Define iterator
	  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG] = returnThis;
	  if (DEFAULT) {
	    methods = {
	      values: DEF_VALUES ? $default : getMethod(VALUES),
	      keys: IS_SET ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if (FORCED) for (key in methods) {
	      if (!(key in proto)) redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};


/***/ },
/* 342 */
/***/ function(module, exports) {

	module.exports = true;


/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(344);
	var core = __webpack_require__(345);
	var ctx = __webpack_require__(346);
	var hide = __webpack_require__(348);
	var has = __webpack_require__(358);
	var PROTOTYPE = 'prototype';
	
	var $export = function (type, name, source) {
	  var IS_FORCED = type & $export.F;
	  var IS_GLOBAL = type & $export.G;
	  var IS_STATIC = type & $export.S;
	  var IS_PROTO = type & $export.P;
	  var IS_BIND = type & $export.B;
	  var IS_WRAP = type & $export.W;
	  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
	  var expProto = exports[PROTOTYPE];
	  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
	  var key, own, out;
	  if (IS_GLOBAL) source = name;
	  for (key in source) {
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    if (own && has(exports, key)) continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function (C) {
	      var F = function (a, b, c) {
	        if (this instanceof C) {
	          switch (arguments.length) {
	            case 0: return new C();
	            case 1: return new C(a);
	            case 2: return new C(a, b);
	          } return new C(a, b, c);
	        } return C.apply(this, arguments);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
	    if (IS_PROTO) {
	      (exports.virtual || (exports.virtual = {}))[key] = out;
	      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
	      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
	    }
	  }
	};
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library`
	module.exports = $export;


/***/ },
/* 344 */
/***/ function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self
	  // eslint-disable-next-line no-new-func
	  : Function('return this')();
	if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ },
/* 345 */
/***/ function(module, exports) {

	var core = module.exports = { version: '2.5.5' };
	if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(347);
	module.exports = function (fn, that, length) {
	  aFunction(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 1: return function (a) {
	      return fn.call(that, a);
	    };
	    case 2: return function (a, b) {
	      return fn.call(that, a, b);
	    };
	    case 3: return function (a, b, c) {
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};


/***/ },
/* 347 */
/***/ function(module, exports) {

	module.exports = function (it) {
	  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
	  return it;
	};


/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	var dP = __webpack_require__(349);
	var createDesc = __webpack_require__(357);
	module.exports = __webpack_require__(353) ? function (object, key, value) {
	  return dP.f(object, key, createDesc(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};


/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	var anObject = __webpack_require__(350);
	var IE8_DOM_DEFINE = __webpack_require__(352);
	var toPrimitive = __webpack_require__(356);
	var dP = Object.defineProperty;
	
	exports.f = __webpack_require__(353) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if (IE8_DOM_DEFINE) try {
	    return dP(O, P, Attributes);
	  } catch (e) { /* empty */ }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};


/***/ },
/* 350 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(351);
	module.exports = function (it) {
	  if (!isObject(it)) throw TypeError(it + ' is not an object!');
	  return it;
	};


/***/ },
/* 351 */
/***/ function(module, exports) {

	module.exports = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};


/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = !__webpack_require__(353) && !__webpack_require__(354)(function () {
	  return Object.defineProperty(__webpack_require__(355)('div'), 'a', { get: function () { return 7; } }).a != 7;
	});


/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(354)(function () {
	  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
	});


/***/ },
/* 354 */
/***/ function(module, exports) {

	module.exports = function (exec) {
	  try {
	    return !!exec();
	  } catch (e) {
	    return true;
	  }
	};


/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(351);
	var document = __webpack_require__(344).document;
	// typeof document.createElement is 'object' in old IE
	var is = isObject(document) && isObject(document.createElement);
	module.exports = function (it) {
	  return is ? document.createElement(it) : {};
	};


/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(351);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function (it, S) {
	  if (!isObject(it)) return it;
	  var fn, val;
	  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};


/***/ },
/* 357 */
/***/ function(module, exports) {

	module.exports = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};


/***/ },
/* 358 */
/***/ function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function (it, key) {
	  return hasOwnProperty.call(it, key);
	};


/***/ },
/* 359 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(348);


/***/ },
/* 360 */
/***/ function(module, exports) {

	module.exports = {};


/***/ },
/* 361 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var create = __webpack_require__(362);
	var descriptor = __webpack_require__(357);
	var setToStringTag = __webpack_require__(377);
	var IteratorPrototype = {};
	
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(348)(IteratorPrototype, __webpack_require__(378)('iterator'), function () { return this; });
	
	module.exports = function (Constructor, NAME, next) {
	  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
	  setToStringTag(Constructor, NAME + ' Iterator');
	};


/***/ },
/* 362 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject = __webpack_require__(350);
	var dPs = __webpack_require__(363);
	var enumBugKeys = __webpack_require__(375);
	var IE_PROTO = __webpack_require__(372)('IE_PROTO');
	var Empty = function () { /* empty */ };
	var PROTOTYPE = 'prototype';
	
	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function () {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(355)('iframe');
	  var i = enumBugKeys.length;
	  var lt = '<';
	  var gt = '>';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(376).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};
	
	module.exports = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty();
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};


/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	var dP = __webpack_require__(349);
	var anObject = __webpack_require__(350);
	var getKeys = __webpack_require__(364);
	
	module.exports = __webpack_require__(353) ? Object.defineProperties : function defineProperties(O, Properties) {
	  anObject(O);
	  var keys = getKeys(Properties);
	  var length = keys.length;
	  var i = 0;
	  var P;
	  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};


/***/ },
/* 364 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys = __webpack_require__(365);
	var enumBugKeys = __webpack_require__(375);
	
	module.exports = Object.keys || function keys(O) {
	  return $keys(O, enumBugKeys);
	};


/***/ },
/* 365 */
/***/ function(module, exports, __webpack_require__) {

	var has = __webpack_require__(358);
	var toIObject = __webpack_require__(366);
	var arrayIndexOf = __webpack_require__(369)(false);
	var IE_PROTO = __webpack_require__(372)('IE_PROTO');
	
	module.exports = function (object, names) {
	  var O = toIObject(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while (names.length > i) if (has(O, key = names[i++])) {
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};


/***/ },
/* 366 */
/***/ function(module, exports, __webpack_require__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(367);
	var defined = __webpack_require__(340);
	module.exports = function (it) {
	  return IObject(defined(it));
	};


/***/ },
/* 367 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(368);
	// eslint-disable-next-line no-prototype-builtins
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};


/***/ },
/* 368 */
/***/ function(module, exports) {

	var toString = {}.toString;
	
	module.exports = function (it) {
	  return toString.call(it).slice(8, -1);
	};


/***/ },
/* 369 */
/***/ function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(366);
	var toLength = __webpack_require__(370);
	var toAbsoluteIndex = __webpack_require__(371);
	module.exports = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIObject($this);
	    var length = toLength(O.length);
	    var index = toAbsoluteIndex(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare
	      if (value != value) return true;
	    // Array#indexOf ignores holes, Array#includes - not
	    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
	      if (O[index] === el) return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};


/***/ },
/* 370 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(339);
	var min = Math.min;
	module.exports = function (it) {
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};


/***/ },
/* 371 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(339);
	var max = Math.max;
	var min = Math.min;
	module.exports = function (index, length) {
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};


/***/ },
/* 372 */
/***/ function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(373)('keys');
	var uid = __webpack_require__(374);
	module.exports = function (key) {
	  return shared[key] || (shared[key] = uid(key));
	};


/***/ },
/* 373 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(344);
	var SHARED = '__core-js_shared__';
	var store = global[SHARED] || (global[SHARED] = {});
	module.exports = function (key) {
	  return store[key] || (store[key] = {});
	};


/***/ },
/* 374 */
/***/ function(module, exports) {

	var id = 0;
	var px = Math.random();
	module.exports = function (key) {
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};


/***/ },
/* 375 */
/***/ function(module, exports) {

	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');


/***/ },
/* 376 */
/***/ function(module, exports, __webpack_require__) {

	var document = __webpack_require__(344).document;
	module.exports = document && document.documentElement;


/***/ },
/* 377 */
/***/ function(module, exports, __webpack_require__) {

	var def = __webpack_require__(349).f;
	var has = __webpack_require__(358);
	var TAG = __webpack_require__(378)('toStringTag');
	
	module.exports = function (it, tag, stat) {
	  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
	};


/***/ },
/* 378 */
/***/ function(module, exports, __webpack_require__) {

	var store = __webpack_require__(373)('wks');
	var uid = __webpack_require__(374);
	var Symbol = __webpack_require__(344).Symbol;
	var USE_SYMBOL = typeof Symbol == 'function';
	
	var $exports = module.exports = function (name) {
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};
	
	$exports.store = store;


/***/ },
/* 379 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has = __webpack_require__(358);
	var toObject = __webpack_require__(380);
	var IE_PROTO = __webpack_require__(372)('IE_PROTO');
	var ObjectProto = Object.prototype;
	
	module.exports = Object.getPrototypeOf || function (O) {
	  O = toObject(O);
	  if (has(O, IE_PROTO)) return O[IE_PROTO];
	  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};


/***/ },
/* 380 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(340);
	module.exports = function (it) {
	  return Object(defined(it));
	};


/***/ },
/* 381 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(382);
	var global = __webpack_require__(344);
	var hide = __webpack_require__(348);
	var Iterators = __webpack_require__(360);
	var TO_STRING_TAG = __webpack_require__(378)('toStringTag');
	
	var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +
	  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +
	  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +
	  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +
	  'TextTrackList,TouchList').split(',');
	
	for (var i = 0; i < DOMIterables.length; i++) {
	  var NAME = DOMIterables[i];
	  var Collection = global[NAME];
	  var proto = Collection && Collection.prototype;
	  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
	  Iterators[NAME] = Iterators.Array;
	}


/***/ },
/* 382 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var addToUnscopables = __webpack_require__(383);
	var step = __webpack_require__(384);
	var Iterators = __webpack_require__(360);
	var toIObject = __webpack_require__(366);
	
	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(341)(Array, 'Array', function (iterated, kind) {
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var kind = this._k;
	  var index = this._i++;
	  if (!O || index >= O.length) {
	    this._t = undefined;
	    return step(1);
	  }
	  if (kind == 'keys') return step(0, index);
	  if (kind == 'values') return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');
	
	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;
	
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');


/***/ },
/* 383 */
/***/ function(module, exports) {

	module.exports = function () { /* empty */ };


/***/ },
/* 384 */
/***/ function(module, exports) {

	module.exports = function (done, value) {
	  return { value: value, done: !!done };
	};


/***/ },
/* 385 */
/***/ function(module, exports, __webpack_require__) {

	exports.f = __webpack_require__(378);


/***/ },
/* 386 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(387), __esModule: true };

/***/ },
/* 387 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(388);
	__webpack_require__(398);
	__webpack_require__(399);
	__webpack_require__(400);
	module.exports = __webpack_require__(345).Symbol;


/***/ },
/* 388 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim
	var global = __webpack_require__(344);
	var has = __webpack_require__(358);
	var DESCRIPTORS = __webpack_require__(353);
	var $export = __webpack_require__(343);
	var redefine = __webpack_require__(359);
	var META = __webpack_require__(389).KEY;
	var $fails = __webpack_require__(354);
	var shared = __webpack_require__(373);
	var setToStringTag = __webpack_require__(377);
	var uid = __webpack_require__(374);
	var wks = __webpack_require__(378);
	var wksExt = __webpack_require__(385);
	var wksDefine = __webpack_require__(390);
	var enumKeys = __webpack_require__(391);
	var isArray = __webpack_require__(394);
	var anObject = __webpack_require__(350);
	var isObject = __webpack_require__(351);
	var toIObject = __webpack_require__(366);
	var toPrimitive = __webpack_require__(356);
	var createDesc = __webpack_require__(357);
	var _create = __webpack_require__(362);
	var gOPNExt = __webpack_require__(395);
	var $GOPD = __webpack_require__(397);
	var $DP = __webpack_require__(349);
	var $keys = __webpack_require__(364);
	var gOPD = $GOPD.f;
	var dP = $DP.f;
	var gOPN = gOPNExt.f;
	var $Symbol = global.Symbol;
	var $JSON = global.JSON;
	var _stringify = $JSON && $JSON.stringify;
	var PROTOTYPE = 'prototype';
	var HIDDEN = wks('_hidden');
	var TO_PRIMITIVE = wks('toPrimitive');
	var isEnum = {}.propertyIsEnumerable;
	var SymbolRegistry = shared('symbol-registry');
	var AllSymbols = shared('symbols');
	var OPSymbols = shared('op-symbols');
	var ObjectProto = Object[PROTOTYPE];
	var USE_NATIVE = typeof $Symbol == 'function';
	var QObject = global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
	
	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function () {
	  return _create(dP({}, 'a', {
	    get: function () { return dP(this, 'a', { value: 7 }).a; }
	  })).a != 7;
	}) ? function (it, key, D) {
	  var protoDesc = gOPD(ObjectProto, key);
	  if (protoDesc) delete ObjectProto[key];
	  dP(it, key, D);
	  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
	} : dP;
	
	var wrap = function (tag) {
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  return sym;
	};
	
	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
	  return typeof it == 'symbol';
	} : function (it) {
	  return it instanceof $Symbol;
	};
	
	var $defineProperty = function defineProperty(it, key, D) {
	  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if (has(AllSymbols, key)) {
	    if (!D.enumerable) {
	      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
	      D = _create(D, { enumerable: createDesc(0, false) });
	    } return setSymbolDesc(it, key, D);
	  } return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P) {
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P));
	  var i = 0;
	  var l = keys.length;
	  var key;
	  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P) {
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key) {
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
	  it = toIObject(it);
	  key = toPrimitive(key, true);
	  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
	  var D = gOPD(it, key);
	  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it) {
	  var names = gOPN(toIObject(it));
	  var result = [];
	  var i = 0;
	  var key;
	  while (names.length > i) {
	    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
	  } return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
	  var IS_OP = it === ObjectProto;
	  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
	  var result = [];
	  var i = 0;
	  var key;
	  while (names.length > i) {
	    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
	  } return result;
	};
	
	// 19.4.1.1 Symbol([description])
	if (!USE_NATIVE) {
	  $Symbol = function Symbol() {
	    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function (value) {
	      if (this === ObjectProto) $set.call(OPSymbols, value);
	      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    };
	    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
	    return wrap(tag);
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
	    return this._k;
	  });
	
	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f = $defineProperty;
	  __webpack_require__(396).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(393).f = $propertyIsEnumerable;
	  __webpack_require__(392).f = $getOwnPropertySymbols;
	
	  if (DESCRIPTORS && !__webpack_require__(342)) {
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }
	
	  wksExt.f = function (name) {
	    return wrap(wks(name));
	  };
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });
	
	for (var es6Symbols = (
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);
	
	for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);
	
	$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function (key) {
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(sym) {
	    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
	    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
	  },
	  useSetter: function () { setter = true; },
	  useSimple: function () { setter = false; }
	});
	
	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});
	
	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it) {
	    var args = [it];
	    var i = 1;
	    var replacer, $replacer;
	    while (arguments.length > i) args.push(arguments[i++]);
	    $replacer = replacer = args[1];
	    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
	    if (!isArray(replacer)) replacer = function (key, value) {
	      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
	      if (!isSymbol(value)) return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});
	
	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(348)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);


/***/ },
/* 389 */
/***/ function(module, exports, __webpack_require__) {

	var META = __webpack_require__(374)('meta');
	var isObject = __webpack_require__(351);
	var has = __webpack_require__(358);
	var setDesc = __webpack_require__(349).f;
	var id = 0;
	var isExtensible = Object.isExtensible || function () {
	  return true;
	};
	var FREEZE = !__webpack_require__(354)(function () {
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function (it) {
	  setDesc(it, META, { value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  } });
	};
	var fastKey = function (it, create) {
	  // return primitive with prefix
	  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if (!has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return 'F';
	    // not necessary to add metadata
	    if (!create) return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function (it, create) {
	  if (!has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return true;
	    // not necessary to add metadata
	    if (!create) return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function (it) {
	  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY: META,
	  NEED: false,
	  fastKey: fastKey,
	  getWeak: getWeak,
	  onFreeze: onFreeze
	};


/***/ },
/* 390 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(344);
	var core = __webpack_require__(345);
	var LIBRARY = __webpack_require__(342);
	var wksExt = __webpack_require__(385);
	var defineProperty = __webpack_require__(349).f;
	module.exports = function (name) {
	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
	  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
	};


/***/ },
/* 391 */
/***/ function(module, exports, __webpack_require__) {

	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(364);
	var gOPS = __webpack_require__(392);
	var pIE = __webpack_require__(393);
	module.exports = function (it) {
	  var result = getKeys(it);
	  var getSymbols = gOPS.f;
	  if (getSymbols) {
	    var symbols = getSymbols(it);
	    var isEnum = pIE.f;
	    var i = 0;
	    var key;
	    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
	  } return result;
	};


/***/ },
/* 392 */
/***/ function(module, exports) {

	exports.f = Object.getOwnPropertySymbols;


/***/ },
/* 393 */
/***/ function(module, exports) {

	exports.f = {}.propertyIsEnumerable;


/***/ },
/* 394 */
/***/ function(module, exports, __webpack_require__) {

	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(368);
	module.exports = Array.isArray || function isArray(arg) {
	  return cof(arg) == 'Array';
	};


/***/ },
/* 395 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(366);
	var gOPN = __webpack_require__(396).f;
	var toString = {}.toString;
	
	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];
	
	var getWindowNames = function (it) {
	  try {
	    return gOPN(it);
	  } catch (e) {
	    return windowNames.slice();
	  }
	};
	
	module.exports.f = function getOwnPropertyNames(it) {
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};


/***/ },
/* 396 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys = __webpack_require__(365);
	var hiddenKeys = __webpack_require__(375).concat('length', 'prototype');
	
	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return $keys(O, hiddenKeys);
	};


/***/ },
/* 397 */
/***/ function(module, exports, __webpack_require__) {

	var pIE = __webpack_require__(393);
	var createDesc = __webpack_require__(357);
	var toIObject = __webpack_require__(366);
	var toPrimitive = __webpack_require__(356);
	var has = __webpack_require__(358);
	var IE8_DOM_DEFINE = __webpack_require__(352);
	var gOPD = Object.getOwnPropertyDescriptor;
	
	exports.f = __webpack_require__(353) ? gOPD : function getOwnPropertyDescriptor(O, P) {
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if (IE8_DOM_DEFINE) try {
	    return gOPD(O, P);
	  } catch (e) { /* empty */ }
	  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
	};


/***/ },
/* 398 */
/***/ function(module, exports) {



/***/ },
/* 399 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(390)('asyncIterator');


/***/ },
/* 400 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(390)('observable');


/***/ },
/* 401 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(global) {//     Backbone.js 1.2.1
	
	//     (c) 2010-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	//     Backbone may be freely distributed under the MIT license.
	//     For all details and documentation:
	//     http://backbonejs.org
	
	(function(factory) {
	
	  // Establish the root object, `window` (`self`) in the browser, or `global` on the server.
	  // We use `self` instead of `window` for `WebWorker` support.
	  var root = (typeof self == 'object' && self.self == self && self) ||
	            (typeof global == 'object' && global.global == global && global);
	
	  // Set up Backbone appropriately for the environment. Start with AMD.
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(331), __webpack_require__(402), exports], __WEBPACK_AMD_DEFINE_RESULT__ = function(_, $, exports) {
	      // Export global even in AMD case in case this script is loaded with
	      // others that may still expect a global Backbone.
	      root.Backbone = factory(root, exports, _, $);
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	  // Next for Node.js or CommonJS. jQuery may not be needed as a module.
	  } else if (typeof exports !== 'undefined') {
	    var _ = require('underscore'), $;
	    try { $ = require('jquery'); } catch(e) {}
	    factory(root, exports, _, $);
	
	  // Finally, as a browser global.
	  } else {
	    root.Backbone = factory(root, {}, root._, (root.jQuery || root.Zepto || root.ender || root.$));
	  }
	
	}(function(root, Backbone, _, $) {
	
	  // Initial Setup
	  // -------------
	
	  // Save the previous value of the `Backbone` variable, so that it can be
	  // restored later on, if `noConflict` is used.
	  var previousBackbone = root.Backbone;
	
	  // Create a local reference to a common array method we'll want to use later.
	  var slice = [].slice;
	
	  // Current version of the library. Keep in sync with `package.json`.
	  Backbone.VERSION = '1.2.1';
	
	  // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns
	  // the `$` variable.
	  Backbone.$ = $;
	
	  // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable
	  // to its previous owner. Returns a reference to this Backbone object.
	  Backbone.noConflict = function() {
	    root.Backbone = previousBackbone;
	    return this;
	  };
	
	  // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option
	  // will fake `"PATCH"`, `"PUT"` and `"DELETE"` requests via the `_method` parameter and
	  // set a `X-Http-Method-Override` header.
	  Backbone.emulateHTTP = false;
	
	  // Turn on `emulateJSON` to support legacy servers that can't deal with direct
	  // `application/json` requests ... this will encode the body as
	  // `application/x-www-form-urlencoded` instead and will send the model in a
	  // form param named `model`.
	  Backbone.emulateJSON = false;
	
	  // Proxy Underscore methods to a Backbone class' prototype using a
	  // particular attribute as the data argument
	  var addMethod = function(length, method, attribute) {
	    switch (length) {
	      case 1: return function() {
	        return _[method](this[attribute]);
	      };
	      case 2: return function(value) {
	        return _[method](this[attribute], value);
	      };
	      case 3: return function(iteratee, context) {
	        return _[method](this[attribute], iteratee, context);
	      };
	      case 4: return function(iteratee, defaultVal, context) {
	        return _[method](this[attribute], iteratee, defaultVal, context);
	      };
	      default: return function() {
	        var args = slice.call(arguments);
	        args.unshift(this[attribute]);
	        return _[method].apply(_, args);
	      };
	    }
	  };
	  var addUnderscoreMethods = function(Class, methods, attribute) {
	    _.each(methods, function(length, method) {
	      if (_[method]) Class.prototype[method] = addMethod(length, method, attribute);
	    });
	  };
	
	  // Backbone.Events
	  // ---------------
	
	  // A module that can be mixed in to *any object* in order to provide it with
	  // custom events. You may bind with `on` or remove with `off` callback
	  // functions to an event; `trigger`-ing an event fires all callbacks in
	  // succession.
	  //
	  //     var object = {};
	  //     _.extend(object, Backbone.Events);
	  //     object.on('expand', function(){ alert('expanded'); });
	  //     object.trigger('expand');
	  //
	  var Events = Backbone.Events = {};
	
	  // Regular expression used to split event strings.
	  var eventSplitter = /\s+/;
	
	  // Iterates over the standard `event, callback` (as well as the fancy multiple
	  // space-separated events `"change blur", callback` and jQuery-style event
	  // maps `{event: callback}`), reducing them by manipulating `memo`.
	  // Passes a normalized single event name and callback, as well as any
	  // optional `opts`.
	  var eventsApi = function(iteratee, memo, name, callback, opts) {
	    var i = 0, names;
	    if (name && typeof name === 'object') {
	      // Handle event maps.
	      if (callback !== void 0 && 'context' in opts && opts.context === void 0) opts.context = callback;
	      for (names = _.keys(name); i < names.length ; i++) {
	        memo = iteratee(memo, names[i], name[names[i]], opts);
	      }
	    } else if (name && eventSplitter.test(name)) {
	      // Handle space separated event names.
	      for (names = name.split(eventSplitter); i < names.length; i++) {
	        memo = iteratee(memo, names[i], callback, opts);
	      }
	    } else {
	      memo = iteratee(memo, name, callback, opts);
	    }
	    return memo;
	  };
	
	  // Bind an event to a `callback` function. Passing `"all"` will bind
	  // the callback to all events fired.
	  Events.on = function(name, callback, context) {
	    return internalOn(this, name, callback, context);
	  };
	
	  // An internal use `on` function, used to guard the `listening` argument from
	  // the public API.
	  var internalOn = function(obj, name, callback, context, listening) {
	    obj._events = eventsApi(onApi, obj._events || {}, name, callback, {
	        context: context,
	        ctx: obj,
	        listening: listening
	    });
	
	    if (listening) {
	      var listeners = obj._listeners || (obj._listeners = {});
	      listeners[listening.id] = listening;
	    }
	
	    return obj;
	  };
	
	  // Inversion-of-control versions of `on`. Tell *this* object to listen to
	  // an event in another object... keeping track of what it's listening to.
	  Events.listenTo =  function(obj, name, callback) {
	    if (!obj) return this;
	    var id = obj._listenId || (obj._listenId = _.uniqueId('l'));
	    var listeningTo = this._listeningTo || (this._listeningTo = {});
	    var listening = listeningTo[id];
	
	    // This object is not listening to any other events on `obj` yet.
	    // Setup the necessary references to track the listening callbacks.
	    if (!listening) {
	      var thisId = this._listenId || (this._listenId = _.uniqueId('l'));
	      listening = listeningTo[id] = {obj: obj, objId: id, id: thisId, listeningTo: listeningTo, count: 0};
	    }
	
	    // Bind callbacks on obj, and keep track of them on listening.
	    internalOn(obj, name, callback, this, listening);
	    return this;
	  };
	
	  // The reducing API that adds a callback to the `events` object.
	  var onApi = function(events, name, callback, options) {
	    if (callback) {
	      var handlers = events[name] || (events[name] = []);
	      var context = options.context, ctx = options.ctx, listening = options.listening;
	      if (listening) listening.count++;
	
	      handlers.push({ callback: callback, context: context, ctx: context || ctx, listening: listening });
	    }
	    return events;
	  };
	
	  // Remove one or many callbacks. If `context` is null, removes all
	  // callbacks with that function. If `callback` is null, removes all
	  // callbacks for the event. If `name` is null, removes all bound
	  // callbacks for all events.
	  Events.off =  function(name, callback, context) {
	    if (!this._events) return this;
	    this._events = eventsApi(offApi, this._events, name, callback, {
	        context: context,
	        listeners: this._listeners
	    });
	    return this;
	  };
	
	  // Tell this object to stop listening to either specific events ... or
	  // to every object it's currently listening to.
	  Events.stopListening =  function(obj, name, callback) {
	    var listeningTo = this._listeningTo;
	    if (!listeningTo) return this;
	
	    var ids = obj ? [obj._listenId] : _.keys(listeningTo);
	
	    for (var i = 0; i < ids.length; i++) {
	      var listening = listeningTo[ids[i]];
	
	      // If listening doesn't exist, this object is not currently
	      // listening to obj. Break out early.
	      if (!listening) break;
	
	      listening.obj.off(name, callback, this);
	    }
	    if (_.isEmpty(listeningTo)) this._listeningTo = void 0;
	
	    return this;
	  };
	
	  // The reducing API that removes a callback from the `events` object.
	  var offApi = function(events, name, callback, options) {
	    // No events to consider.
	    if (!events) return;
	
	    var i = 0, listening;
	    var context = options.context, listeners = options.listeners;
	
	    // Delete all events listeners and "drop" events.
	    if (!name && !callback && !context) {
	      var ids = _.keys(listeners);
	      for (; i < ids.length; i++) {
	        listening = listeners[ids[i]];
	        delete listeners[listening.id];
	        delete listening.listeningTo[listening.objId];
	      }
	      return;
	    }
	
	    var names = name ? [name] : _.keys(events);
	    for (; i < names.length; i++) {
	      name = names[i];
	      var handlers = events[name];
	
	      // Bail out if there are no events stored.
	      if (!handlers) break;
	
	      // Replace events if there are any remaining.  Otherwise, clean up.
	      var remaining = [];
	      for (var j = 0; j < handlers.length; j++) {
	        var handler = handlers[j];
	        if (
	          callback && callback !== handler.callback &&
	            callback !== handler.callback._callback ||
	              context && context !== handler.context
	        ) {
	          remaining.push(handler);
	        } else {
	          listening = handler.listening;
	          if (listening && --listening.count === 0) {
	            delete listeners[listening.id];
	            delete listening.listeningTo[listening.objId];
	          }
	        }
	      }
	
	      // Update tail event if the list has any events.  Otherwise, clean up.
	      if (remaining.length) {
	        events[name] = remaining;
	      } else {
	        delete events[name];
	      }
	    }
	    if (_.size(events)) return events;
	  };
	
	  // Bind an event to only be triggered a single time. After the first time
	  // the callback is invoked, it will be removed. When multiple events are
	  // passed in using the space-separated syntax, the event will fire once for every
	  // event you passed in, not once for a combination of all events
	  Events.once =  function(name, callback, context) {
	    // Map the event into a `{event: once}` object.
	    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.off, this));
	    return this.on(events, void 0, context);
	  };
	
	  // Inversion-of-control versions of `once`.
	  Events.listenToOnce =  function(obj, name, callback) {
	    // Map the event into a `{event: once}` object.
	    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.stopListening, this, obj));
	    return this.listenTo(obj, events);
	  };
	
	  // Reduces the event callbacks into a map of `{event: onceWrapper}`.
	  // `offer` unbinds the `onceWrapper` after it has been called.
	  var onceMap = function(map, name, callback, offer) {
	    if (callback) {
	      var once = map[name] = _.once(function() {
	        offer(name, once);
	        callback.apply(this, arguments);
	      });
	      once._callback = callback;
	    }
	    return map;
	  };
	
	  // Trigger one or many events, firing all bound callbacks. Callbacks are
	  // passed the same arguments as `trigger` is, apart from the event name
	  // (unless you're listening on `"all"`, which will cause your callback to
	  // receive the true name of the event as the first argument).
	  Events.trigger =  function(name) {
	    if (!this._events) return this;
	
	    var length = Math.max(0, arguments.length - 1);
	    var args = Array(length);
	    for (var i = 0; i < length; i++) args[i] = arguments[i + 1];
	
	    eventsApi(triggerApi, this._events, name, void 0, args);
	    return this;
	  };
	
	  // Handles triggering the appropriate event callbacks.
	  var triggerApi = function(objEvents, name, cb, args) {
	    if (objEvents) {
	      var events = objEvents[name];
	      var allEvents = objEvents.all;
	      if (events && allEvents) allEvents = allEvents.slice();
	      if (events) triggerEvents(events, args);
	      if (allEvents) triggerEvents(allEvents, [name].concat(args));
	    }
	    return objEvents;
	  };
	
	  // A difficult-to-believe, but optimized internal dispatch function for
	  // triggering events. Tries to keep the usual cases speedy (most internal
	  // Backbone events have 3 arguments).
	  var triggerEvents = function(events, args) {
	    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];
	    switch (args.length) {
	      case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;
	      case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;
	      case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;
	      case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;
	      default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args); return;
	    }
	  };
	
	  // Aliases for backwards compatibility.
	  Events.bind   = Events.on;
	  Events.unbind = Events.off;
	
	  // Allow the `Backbone` object to serve as a global event bus, for folks who
	  // want global "pubsub" in a convenient place.
	  _.extend(Backbone, Events);
	
	  // Backbone.Model
	  // --------------
	
	  // Backbone **Models** are the basic data object in the framework --
	  // frequently representing a row in a table in a database on your server.
	  // A discrete chunk of data and a bunch of useful, related methods for
	  // performing computations and transformations on that data.
	
	  // Create a new model with the specified attributes. A client id (`cid`)
	  // is automatically generated and assigned for you.
	  var Model = Backbone.Model = function(attributes, options) {
	    var attrs = attributes || {};
	    options || (options = {});
	    this.cid = _.uniqueId(this.cidPrefix);
	    this.attributes = {};
	    if (options.collection) this.collection = options.collection;
	    if (options.parse) attrs = this.parse(attrs, options) || {};
	    attrs = _.defaults({}, attrs, _.result(this, 'defaults'));
	    this.set(attrs, options);
	    this.changed = {};
	    this.initialize.apply(this, arguments);
	  };
	
	  // Attach all inheritable methods to the Model prototype.
	  _.extend(Model.prototype, Events, {
	
	    // A hash of attributes whose current and previous value differ.
	    changed: null,
	
	    // The value returned during the last failed validation.
	    validationError: null,
	
	    // The default name for the JSON `id` attribute is `"id"`. MongoDB and
	    // CouchDB users may want to set this to `"_id"`.
	    idAttribute: 'id',
	
	    // The prefix is used to create the client id which is used to identify models locally.
	    // You may want to override this if you're experiencing name clashes with model ids.
	    cidPrefix: 'c',
	
	    // Initialize is an empty function by default. Override it with your own
	    // initialization logic.
	    initialize: function(){},
	
	    // Return a copy of the model's `attributes` object.
	    toJSON: function(options) {
	      return _.clone(this.attributes);
	    },
	
	    // Proxy `Backbone.sync` by default -- but override this if you need
	    // custom syncing semantics for *this* particular model.
	    sync: function() {
	      return Backbone.sync.apply(this, arguments);
	    },
	
	    // Get the value of an attribute.
	    get: function(attr) {
	      return this.attributes[attr];
	    },
	
	    // Get the HTML-escaped value of an attribute.
	    escape: function(attr) {
	      return _.escape(this.get(attr));
	    },
	
	    // Returns `true` if the attribute contains a value that is not null
	    // or undefined.
	    has: function(attr) {
	      return this.get(attr) != null;
	    },
	
	    // Special-cased proxy to underscore's `_.matches` method.
	    matches: function(attrs) {
	      return !!_.iteratee(attrs, this)(this.attributes);
	    },
	
	    // Set a hash of model attributes on the object, firing `"change"`. This is
	    // the core primitive operation of a model, updating the data and notifying
	    // anyone who needs to know about the change in state. The heart of the beast.
	    set: function(key, val, options) {
	      if (key == null) return this;
	
	      // Handle both `"key", value` and `{key: value}` -style arguments.
	      var attrs;
	      if (typeof key === 'object') {
	        attrs = key;
	        options = val;
	      } else {
	        (attrs = {})[key] = val;
	      }
	
	      options || (options = {});
	
	      // Run validation.
	      if (!this._validate(attrs, options)) return false;
	
	      // Extract attributes and options.
	      var unset      = options.unset;
	      var silent     = options.silent;
	      var changes    = [];
	      var changing   = this._changing;
	      this._changing = true;
	
	      if (!changing) {
	        this._previousAttributes = _.clone(this.attributes);
	        this.changed = {};
	      }
	
	      var current = this.attributes;
	      var changed = this.changed;
	      var prev    = this._previousAttributes;
	
	      // Check for changes of `id`.
	      if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];
	
	      // For each `set` attribute, update or delete the current value.
	      for (var attr in attrs) {
	        val = attrs[attr];
	        if (!_.isEqual(current[attr], val)) changes.push(attr);
	        if (!_.isEqual(prev[attr], val)) {
	          changed[attr] = val;
	        } else {
	          delete changed[attr];
	        }
	        unset ? delete current[attr] : current[attr] = val;
	      }
	
	      // Trigger all relevant attribute changes.
	      if (!silent) {
	        if (changes.length) this._pending = options;
	        for (var i = 0; i < changes.length; i++) {
	          this.trigger('change:' + changes[i], this, current[changes[i]], options);
	        }
	      }
	
	      // You might be wondering why there's a `while` loop here. Changes can
	      // be recursively nested within `"change"` events.
	      if (changing) return this;
	      if (!silent) {
	        while (this._pending) {
	          options = this._pending;
	          this._pending = false;
	          this.trigger('change', this, options);
	        }
	      }
	      this._pending = false;
	      this._changing = false;
	      return this;
	    },
	
	    // Remove an attribute from the model, firing `"change"`. `unset` is a noop
	    // if the attribute doesn't exist.
	    unset: function(attr, options) {
	      return this.set(attr, void 0, _.extend({}, options, {unset: true}));
	    },
	
	    // Clear all attributes on the model, firing `"change"`.
	    clear: function(options) {
	      var attrs = {};
	      for (var key in this.attributes) attrs[key] = void 0;
	      return this.set(attrs, _.extend({}, options, {unset: true}));
	    },
	
	    // Determine if the model has changed since the last `"change"` event.
	    // If you specify an attribute name, determine if that attribute has changed.
	    hasChanged: function(attr) {
	      if (attr == null) return !_.isEmpty(this.changed);
	      return _.has(this.changed, attr);
	    },
	
	    // Return an object containing all the attributes that have changed, or
	    // false if there are no changed attributes. Useful for determining what
	    // parts of a view need to be updated and/or what attributes need to be
	    // persisted to the server. Unset attributes will be set to undefined.
	    // You can also pass an attributes object to diff against the model,
	    // determining if there *would be* a change.
	    changedAttributes: function(diff) {
	      if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;
	      var old = this._changing ? this._previousAttributes : this.attributes;
	      var changed = {};
	      for (var attr in diff) {
	        var val = diff[attr];
	        if (_.isEqual(old[attr], val)) continue;
	        changed[attr] = val;
	      }
	      return _.size(changed) ? changed : false;
	    },
	
	    // Get the previous value of an attribute, recorded at the time the last
	    // `"change"` event was fired.
	    previous: function(attr) {
	      if (attr == null || !this._previousAttributes) return null;
	      return this._previousAttributes[attr];
	    },
	
	    // Get all of the attributes of the model at the time of the previous
	    // `"change"` event.
	    previousAttributes: function() {
	      return _.clone(this._previousAttributes);
	    },
	
	    // Fetch the model from the server, merging the response with the model's
	    // local attributes. Any changed attributes will trigger a "change" event.
	    fetch: function(options) {
	      options = _.extend({parse: true}, options);
	      var model = this;
	      var success = options.success;
	      options.success = function(resp) {
	        var serverAttrs = options.parse ? model.parse(resp, options) : resp;
	        if (!model.set(serverAttrs, options)) return false;
	        if (success) success.call(options.context, model, resp, options);
	        model.trigger('sync', model, resp, options);
	      };
	      wrapError(this, options);
	      return this.sync('read', this, options);
	    },
	
	    // Set a hash of model attributes, and sync the model to the server.
	    // If the server returns an attributes hash that differs, the model's
	    // state will be `set` again.
	    save: function(key, val, options) {
	      // Handle both `"key", value` and `{key: value}` -style arguments.
	      var attrs;
	      if (key == null || typeof key === 'object') {
	        attrs = key;
	        options = val;
	      } else {
	        (attrs = {})[key] = val;
	      }
	
	      options = _.extend({validate: true, parse: true}, options);
	      var wait = options.wait;
	
	      // If we're not waiting and attributes exist, save acts as
	      // `set(attr).save(null, opts)` with validation. Otherwise, check if
	      // the model will be valid when the attributes, if any, are set.
	      if (attrs && !wait) {
	        if (!this.set(attrs, options)) return false;
	      } else {
	        if (!this._validate(attrs, options)) return false;
	      }
	
	      // After a successful server-side save, the client is (optionally)
	      // updated with the server-side state.
	      var model = this;
	      var success = options.success;
	      var attributes = this.attributes;
	      options.success = function(resp) {
	        // Ensure attributes are restored during synchronous saves.
	        model.attributes = attributes;
	        var serverAttrs = options.parse ? model.parse(resp, options) : resp;
	        if (wait) serverAttrs = _.extend({}, attrs, serverAttrs);
	        if (serverAttrs && !model.set(serverAttrs, options)) return false;
	        if (success) success.call(options.context, model, resp, options);
	        model.trigger('sync', model, resp, options);
	      };
	      wrapError(this, options);
	
	      // Set temporary attributes if `{wait: true}` to properly find new ids.
	      if (attrs && wait) this.attributes = _.extend({}, attributes, attrs);
	
	      var method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');
	      if (method === 'patch' && !options.attrs) options.attrs = attrs;
	      var xhr = this.sync(method, this, options);
	
	      // Restore attributes.
	      this.attributes = attributes;
	
	      return xhr;
	    },
	
	    // Destroy this model on the server if it was already persisted.
	    // Optimistically removes the model from its collection, if it has one.
	    // If `wait: true` is passed, waits for the server to respond before removal.
	    destroy: function(options) {
	      options = options ? _.clone(options) : {};
	      var model = this;
	      var success = options.success;
	      var wait = options.wait;
	
	      var destroy = function() {
	        model.stopListening();
	        model.trigger('destroy', model, model.collection, options);
	      };
	
	      options.success = function(resp) {
	        if (wait) destroy();
	        if (success) success.call(options.context, model, resp, options);
	        if (!model.isNew()) model.trigger('sync', model, resp, options);
	      };
	
	      var xhr = false;
	      if (this.isNew()) {
	        _.defer(options.success);
	      } else {
	        wrapError(this, options);
	        xhr = this.sync('delete', this, options);
	      }
	      if (!wait) destroy();
	      return xhr;
	    },
	
	    // Default URL for the model's representation on the server -- if you're
	    // using Backbone's restful methods, override this to change the endpoint
	    // that will be called.
	    url: function() {
	      var base =
	        _.result(this, 'urlRoot') ||
	        _.result(this.collection, 'url') ||
	        urlError();
	      if (this.isNew()) return base;
	      var id = this.get(this.idAttribute);
	      return base.replace(/[^\/]$/, '$&/') + encodeURIComponent(id);
	    },
	
	    // **parse** converts a response into the hash of attributes to be `set` on
	    // the model. The default implementation is just to pass the response along.
	    parse: function(resp, options) {
	      return resp;
	    },
	
	    // Create a new model with identical attributes to this one.
	    clone: function() {
	      return new this.constructor(this.attributes);
	    },
	
	    // A model is new if it has never been saved to the server, and lacks an id.
	    isNew: function() {
	      return !this.has(this.idAttribute);
	    },
	
	    // Check if the model is currently in a valid state.
	    isValid: function(options) {
	      return this._validate({}, _.defaults({validate: true}, options));
	    },
	
	    // Run validation against the next complete set of model attributes,
	    // returning `true` if all is well. Otherwise, fire an `"invalid"` event.
	    _validate: function(attrs, options) {
	      if (!options.validate || !this.validate) return true;
	      attrs = _.extend({}, this.attributes, attrs);
	      var error = this.validationError = this.validate(attrs, options) || null;
	      if (!error) return true;
	      this.trigger('invalid', this, error, _.extend(options, {validationError: error}));
	      return false;
	    }
	
	  });
	
	  // Underscore methods that we want to implement on the Model.
	  var modelMethods = { keys: 1, values: 1, pairs: 1, invert: 1, pick: 0,
	      omit: 0, chain: 1, isEmpty: 1 };
	
	  // Mix in each Underscore method as a proxy to `Model#attributes`.
	  addUnderscoreMethods(Model, modelMethods, 'attributes');
	
	  // Backbone.Collection
	  // -------------------
	
	  // If models tend to represent a single row of data, a Backbone Collection is
	  // more analogous to a table full of data ... or a small slice or page of that
	  // table, or a collection of rows that belong together for a particular reason
	  // -- all of the messages in this particular folder, all of the documents
	  // belonging to this particular author, and so on. Collections maintain
	  // indexes of their models, both in order, and for lookup by `id`.
	
	  // Create a new **Collection**, perhaps to contain a specific type of `model`.
	  // If a `comparator` is specified, the Collection will maintain
	  // its models in sort order, as they're added and removed.
	  var Collection = Backbone.Collection = function(models, options) {
	    options || (options = {});
	    if (options.model) this.model = options.model;
	    if (options.comparator !== void 0) this.comparator = options.comparator;
	    this._reset();
	    this.initialize.apply(this, arguments);
	    if (models) this.reset(models, _.extend({silent: true}, options));
	  };
	
	  // Default options for `Collection#set`.
	  var setOptions = {add: true, remove: true, merge: true};
	  var addOptions = {add: true, remove: false};
	
	  // Define the Collection's inheritable methods.
	  _.extend(Collection.prototype, Events, {
	
	    // The default model for a collection is just a **Backbone.Model**.
	    // This should be overridden in most cases.
	    model: Model,
	
	    // Initialize is an empty function by default. Override it with your own
	    // initialization logic.
	    initialize: function(){},
	
	    // The JSON representation of a Collection is an array of the
	    // models' attributes.
	    toJSON: function(options) {
	      return this.map(function(model) { return model.toJSON(options); });
	    },
	
	    // Proxy `Backbone.sync` by default.
	    sync: function() {
	      return Backbone.sync.apply(this, arguments);
	    },
	
	    // Add a model, or list of models to the set.
	    add: function(models, options) {
	      return this.set(models, _.extend({merge: false}, options, addOptions));
	    },
	
	    // Remove a model, or a list of models from the set.
	    remove: function(models, options) {
	      options = _.extend({}, options);
	      var singular = !_.isArray(models);
	      models = singular ? [models] : _.clone(models);
	      var removed = this._removeModels(models, options);
	      if (!options.silent && removed) this.trigger('update', this, options);
	      return singular ? removed[0] : removed;
	    },
	
	    // Update a collection by `set`-ing a new list of models, adding new ones,
	    // removing models that are no longer present, and merging models that
	    // already exist in the collection, as necessary. Similar to **Model#set**,
	    // the core operation for updating the data contained by the collection.
	    set: function(models, options) {
	      options = _.defaults({}, options, setOptions);
	      if (options.parse && !this._isModel(models)) models = this.parse(models, options);
	      var singular = !_.isArray(models);
	      models = singular ? (models ? [models] : []) : models.slice();
	      var id, model, attrs, existing, sort;
	      var at = options.at;
	      if (at != null) at = +at;
	      if (at < 0) at += this.length + 1;
	      var sortable = this.comparator && (at == null) && options.sort !== false;
	      var sortAttr = _.isString(this.comparator) ? this.comparator : null;
	      var toAdd = [], toRemove = [], modelMap = {};
	      var add = options.add, merge = options.merge, remove = options.remove;
	      var order = !sortable && add && remove ? [] : false;
	      var orderChanged = false;
	
	      // Turn bare objects into model references, and prevent invalid models
	      // from being added.
	      for (var i = 0; i < models.length; i++) {
	        attrs = models[i];
	
	        // If a duplicate is found, prevent it from being added and
	        // optionally merge it into the existing model.
	        if (existing = this.get(attrs)) {
	          if (remove) modelMap[existing.cid] = true;
	          if (merge && attrs !== existing) {
	            attrs = this._isModel(attrs) ? attrs.attributes : attrs;
	            if (options.parse) attrs = existing.parse(attrs, options);
	            existing.set(attrs, options);
	            if (sortable && !sort && existing.hasChanged(sortAttr)) sort = true;
	          }
	          models[i] = existing;
	
	        // If this is a new, valid model, push it to the `toAdd` list.
	        } else if (add) {
	          model = models[i] = this._prepareModel(attrs, options);
	          if (!model) continue;
	          toAdd.push(model);
	          this._addReference(model, options);
	        }
	
	        // Do not add multiple models with the same `id`.
	        model = existing || model;
	        if (!model) continue;
	        id = this.modelId(model.attributes);
	        if (order && (model.isNew() || !modelMap[id])) {
	          order.push(model);
	
	          // Check to see if this is actually a new model at this index.
	          orderChanged = orderChanged || !this.models[i] || model.cid !== this.models[i].cid;
	        }
	
	        modelMap[id] = true;
	      }
	
	      // Remove nonexistent models if appropriate.
	      if (remove) {
	        for (var i = 0; i < this.length; i++) {
	          if (!modelMap[(model = this.models[i]).cid]) toRemove.push(model);
	        }
	        if (toRemove.length) this._removeModels(toRemove, options);
	      }
	
	      // See if sorting is needed, update `length` and splice in new models.
	      if (toAdd.length || orderChanged) {
	        if (sortable) sort = true;
	        this.length += toAdd.length;
	        if (at != null) {
	          for (var i = 0; i < toAdd.length; i++) {
	            this.models.splice(at + i, 0, toAdd[i]);
	          }
	        } else {
	          if (order) this.models.length = 0;
	          var orderedModels = order || toAdd;
	          for (var i = 0; i < orderedModels.length; i++) {
	            this.models.push(orderedModels[i]);
	          }
	        }
	      }
	
	      // Silently sort the collection if appropriate.
	      if (sort) this.sort({silent: true});
	
	      // Unless silenced, it's time to fire all appropriate add/sort events.
	      if (!options.silent) {
	        var addOpts = at != null ? _.clone(options) : options;
	        for (var i = 0; i < toAdd.length; i++) {
	          if (at != null) addOpts.index = at + i;
	          (model = toAdd[i]).trigger('add', model, this, addOpts);
	        }
	        if (sort || orderChanged) this.trigger('sort', this, options);
	        if (toAdd.length || toRemove.length) this.trigger('update', this, options);
	      }
	
	      // Return the added (or merged) model (or models).
	      return singular ? models[0] : models;
	    },
	
	    // When you have more items than you want to add or remove individually,
	    // you can reset the entire set with a new list of models, without firing
	    // any granular `add` or `remove` events. Fires `reset` when finished.
	    // Useful for bulk operations and optimizations.
	    reset: function(models, options) {
	      options = options ? _.clone(options) : {};
	      for (var i = 0; i < this.models.length; i++) {
	        this._removeReference(this.models[i], options);
	      }
	      options.previousModels = this.models;
	      this._reset();
	      models = this.add(models, _.extend({silent: true}, options));
	      if (!options.silent) this.trigger('reset', this, options);
	      return models;
	    },
	
	    // Add a model to the end of the collection.
	    push: function(model, options) {
	      return this.add(model, _.extend({at: this.length}, options));
	    },
	
	    // Remove a model from the end of the collection.
	    pop: function(options) {
	      var model = this.at(this.length - 1);
	      return this.remove(model, options);
	    },
	
	    // Add a model to the beginning of the collection.
	    unshift: function(model, options) {
	      return this.add(model, _.extend({at: 0}, options));
	    },
	
	    // Remove a model from the beginning of the collection.
	    shift: function(options) {
	      var model = this.at(0);
	      return this.remove(model, options);
	    },
	
	    // Slice out a sub-array of models from the collection.
	    slice: function() {
	      return slice.apply(this.models, arguments);
	    },
	
	    // Get a model from the set by id.
	    get: function(obj) {
	      if (obj == null) return void 0;
	      var id = this.modelId(this._isModel(obj) ? obj.attributes : obj);
	      return this._byId[obj] || this._byId[id] || this._byId[obj.cid];
	    },
	
	    // Get the model at the given index.
	    at: function(index) {
	      if (index < 0) index += this.length;
	      return this.models[index];
	    },
	
	    // Return models with matching attributes. Useful for simple cases of
	    // `filter`.
	    where: function(attrs, first) {
	      var matches = _.matches(attrs);
	      return this[first ? 'find' : 'filter'](function(model) {
	        return matches(model.attributes);
	      });
	    },
	
	    // Return the first model with matching attributes. Useful for simple cases
	    // of `find`.
	    findWhere: function(attrs) {
	      return this.where(attrs, true);
	    },
	
	    // Force the collection to re-sort itself. You don't need to call this under
	    // normal circumstances, as the set will maintain sort order as each item
	    // is added.
	    sort: function(options) {
	      if (!this.comparator) throw new Error('Cannot sort a set without a comparator');
	      options || (options = {});
	
	      // Run sort based on type of `comparator`.
	      if (_.isString(this.comparator) || this.comparator.length === 1) {
	        this.models = this.sortBy(this.comparator, this);
	      } else {
	        this.models.sort(_.bind(this.comparator, this));
	      }
	
	      if (!options.silent) this.trigger('sort', this, options);
	      return this;
	    },
	
	    // Pluck an attribute from each model in the collection.
	    pluck: function(attr) {
	      return _.invoke(this.models, 'get', attr);
	    },
	
	    // Fetch the default set of models for this collection, resetting the
	    // collection when they arrive. If `reset: true` is passed, the response
	    // data will be passed through the `reset` method instead of `set`.
	    fetch: function(options) {
	      options = _.extend({parse: true}, options);
	      var success = options.success;
	      var collection = this;
	      options.success = function(resp) {
	        var method = options.reset ? 'reset' : 'set';
	        collection[method](resp, options);
	        if (success) success.call(options.context, collection, resp, options);
	        collection.trigger('sync', collection, resp, options);
	      };
	      wrapError(this, options);
	      return this.sync('read', this, options);
	    },
	
	    // Create a new instance of a model in this collection. Add the model to the
	    // collection immediately, unless `wait: true` is passed, in which case we
	    // wait for the server to agree.
	    create: function(model, options) {
	      options = options ? _.clone(options) : {};
	      var wait = options.wait;
	      model = this._prepareModel(model, options);
	      if (!model) return false;
	      if (!wait) this.add(model, options);
	      var collection = this;
	      var success = options.success;
	      options.success = function(model, resp, callbackOpts) {
	        if (wait) collection.add(model, callbackOpts);
	        if (success) success.call(callbackOpts.context, model, resp, callbackOpts);
	      };
	      model.save(null, options);
	      return model;
	    },
	
	    // **parse** converts a response into a list of models to be added to the
	    // collection. The default implementation is just to pass it through.
	    parse: function(resp, options) {
	      return resp;
	    },
	
	    // Create a new collection with an identical list of models as this one.
	    clone: function() {
	      return new this.constructor(this.models, {
	        model: this.model,
	        comparator: this.comparator
	      });
	    },
	
	    // Define how to uniquely identify models in the collection.
	    modelId: function (attrs) {
	      return attrs[this.model.prototype.idAttribute || 'id'];
	    },
	
	    // Private method to reset all internal state. Called when the collection
	    // is first initialized or reset.
	    _reset: function() {
	      this.length = 0;
	      this.models = [];
	      this._byId  = {};
	    },
	
	    // Prepare a hash of attributes (or other model) to be added to this
	    // collection.
	    _prepareModel: function(attrs, options) {
	      if (this._isModel(attrs)) {
	        if (!attrs.collection) attrs.collection = this;
	        return attrs;
	      }
	      options = options ? _.clone(options) : {};
	      options.collection = this;
	      var model = new this.model(attrs, options);
	      if (!model.validationError) return model;
	      this.trigger('invalid', this, model.validationError, options);
	      return false;
	    },
	
	    // Internal method called by both remove and set.
	    // Returns removed models, or false if nothing is removed.
	    _removeModels: function(models, options) {
	      var removed = [];
	      for (var i = 0; i < models.length; i++) {
	        var model = this.get(models[i]);
	        if (!model) continue;
	
	        var index = this.indexOf(model);
	        this.models.splice(index, 1);
	        this.length--;
	
	        if (!options.silent) {
	          options.index = index;
	          model.trigger('remove', model, this, options);
	        }
	
	        removed.push(model);
	        this._removeReference(model, options);
	      }
	      return removed.length ? removed : false;
	    },
	
	    // Method for checking whether an object should be considered a model for
	    // the purposes of adding to the collection.
	    _isModel: function (model) {
	      return model instanceof Model;
	    },
	
	    // Internal method to create a model's ties to a collection.
	    _addReference: function(model, options) {
	      this._byId[model.cid] = model;
	      var id = this.modelId(model.attributes);
	      if (id != null) this._byId[id] = model;
	      model.on('all', this._onModelEvent, this);
	    },
	
	    // Internal method to sever a model's ties to a collection.
	    _removeReference: function(model, options) {
	      delete this._byId[model.cid];
	      var id = this.modelId(model.attributes);
	      if (id != null) delete this._byId[id];
	      if (this === model.collection) delete model.collection;
	      model.off('all', this._onModelEvent, this);
	    },
	
	    // Internal method called every time a model in the set fires an event.
	    // Sets need to update their indexes when models change ids. All other
	    // events simply proxy through. "add" and "remove" events that originate
	    // in other collections are ignored.
	    _onModelEvent: function(event, model, collection, options) {
	      if ((event === 'add' || event === 'remove') && collection !== this) return;
	      if (event === 'destroy') this.remove(model, options);
	      if (event === 'change') {
	        var prevId = this.modelId(model.previousAttributes());
	        var id = this.modelId(model.attributes);
	        if (prevId !== id) {
	          if (prevId != null) delete this._byId[prevId];
	          if (id != null) this._byId[id] = model;
	        }
	      }
	      this.trigger.apply(this, arguments);
	    }
	
	  });
	
	  // Underscore methods that we want to implement on the Collection.
	  // 90% of the core usefulness of Backbone Collections is actually implemented
	  // right here:
	  var collectionMethods = { forEach: 3, each: 3, map: 3, collect: 3, reduce: 4,
	      foldl: 4, inject: 4, reduceRight: 4, foldr: 4, find: 3, detect: 3, filter: 3,
	      select: 3, reject: 3, every: 3, all: 3, some: 3, any: 3, include: 2,
	      contains: 2, invoke: 0, max: 3, min: 3, toArray: 1, size: 1, first: 3,
	      head: 3, take: 3, initial: 3, rest: 3, tail: 3, drop: 3, last: 3,
	      without: 0, difference: 0, indexOf: 3, shuffle: 1, lastIndexOf: 3,
	      isEmpty: 1, chain: 1, sample: 3, partition: 3 };
	
	  // Mix in each Underscore method as a proxy to `Collection#models`.
	  addUnderscoreMethods(Collection, collectionMethods, 'models');
	
	  // Underscore methods that take a property name as an argument.
	  var attributeMethods = ['groupBy', 'countBy', 'sortBy', 'indexBy'];
	
	  // Use attributes instead of properties.
	  _.each(attributeMethods, function(method) {
	    if (!_[method]) return;
	    Collection.prototype[method] = function(value, context) {
	      var iterator = _.isFunction(value) ? value : function(model) {
	        return model.get(value);
	      };
	      return _[method](this.models, iterator, context);
	    };
	  });
	
	  // Backbone.View
	  // -------------
	
	  // Backbone Views are almost more convention than they are actual code. A View
	  // is simply a JavaScript object that represents a logical chunk of UI in the
	  // DOM. This might be a single item, an entire list, a sidebar or panel, or
	  // even the surrounding frame which wraps your whole app. Defining a chunk of
	  // UI as a **View** allows you to define your DOM events declaratively, without
	  // having to worry about render order ... and makes it easy for the view to
	  // react to specific changes in the state of your models.
	
	  // Creating a Backbone.View creates its initial element outside of the DOM,
	  // if an existing element is not provided...
	  var View = Backbone.View = function(options) {
	    this.cid = _.uniqueId('view');
	    _.extend(this, _.pick(options, viewOptions));
	    this._ensureElement();
	    this.initialize.apply(this, arguments);
	  };
	
	  // Cached regex to split keys for `delegate`.
	  var delegateEventSplitter = /^(\S+)\s*(.*)$/;
	
	  // List of view options to be merged as properties.
	  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];
	
	  // Set up all inheritable **Backbone.View** properties and methods.
	  _.extend(View.prototype, Events, {
	
	    // The default `tagName` of a View's element is `"div"`.
	    tagName: 'div',
	
	    // jQuery delegate for element lookup, scoped to DOM elements within the
	    // current view. This should be preferred to global lookups where possible.
	    $: function(selector) {
	      return this.$el.find(selector);
	    },
	
	    // Initialize is an empty function by default. Override it with your own
	    // initialization logic.
	    initialize: function(){},
	
	    // **render** is the core function that your view should override, in order
	    // to populate its element (`this.el`), with the appropriate HTML. The
	    // convention is for **render** to always return `this`.
	    render: function() {
	      return this;
	    },
	
	    // Remove this view by taking the element out of the DOM, and removing any
	    // applicable Backbone.Events listeners.
	    remove: function() {
	      this._removeElement();
	      this.stopListening();
	      return this;
	    },
	
	    // Remove this view's element from the document and all event listeners
	    // attached to it. Exposed for subclasses using an alternative DOM
	    // manipulation API.
	    _removeElement: function() {
	      this.$el.remove();
	    },
	
	    // Change the view's element (`this.el` property) and re-delegate the
	    // view's events on the new element.
	    setElement: function(element) {
	      this.undelegateEvents();
	      this._setElement(element);
	      this.delegateEvents();
	      return this;
	    },
	
	    // Creates the `this.el` and `this.$el` references for this view using the
	    // given `el`. `el` can be a CSS selector or an HTML string, a jQuery
	    // context or an element. Subclasses can override this to utilize an
	    // alternative DOM manipulation API and are only required to set the
	    // `this.el` property.
	    _setElement: function(el) {
	      this.$el = el instanceof Backbone.$ ? el : Backbone.$(el);
	      this.el = this.$el[0];
	    },
	
	    // Set callbacks, where `this.events` is a hash of
	    //
	    // *{"event selector": "callback"}*
	    //
	    //     {
	    //       'mousedown .title':  'edit',
	    //       'click .button':     'save',
	    //       'click .open':       function(e) { ... }
	    //     }
	    //
	    // pairs. Callbacks will be bound to the view, with `this` set properly.
	    // Uses event delegation for efficiency.
	    // Omitting the selector binds the event to `this.el`.
	    delegateEvents: function(events) {
	      events || (events = _.result(this, 'events'));
	      if (!events) return this;
	      this.undelegateEvents();
	      for (var key in events) {
	        var method = events[key];
	        if (!_.isFunction(method)) method = this[method];
	        if (!method) continue;
	        var match = key.match(delegateEventSplitter);
	        this.delegate(match[1], match[2], _.bind(method, this));
	      }
	      return this;
	    },
	
	    // Add a single event listener to the view's element (or a child element
	    // using `selector`). This only works for delegate-able events: not `focus`,
	    // `blur`, and not `change`, `submit`, and `reset` in Internet Explorer.
	    delegate: function(eventName, selector, listener) {
	      this.$el.on(eventName + '.delegateEvents' + this.cid, selector, listener);
	      return this;
	    },
	
	    // Clears all callbacks previously bound to the view by `delegateEvents`.
	    // You usually don't need to use this, but may wish to if you have multiple
	    // Backbone views attached to the same DOM element.
	    undelegateEvents: function() {
	      if (this.$el) this.$el.off('.delegateEvents' + this.cid);
	      return this;
	    },
	
	    // A finer-grained `undelegateEvents` for removing a single delegated event.
	    // `selector` and `listener` are both optional.
	    undelegate: function(eventName, selector, listener) {
	      this.$el.off(eventName + '.delegateEvents' + this.cid, selector, listener);
	      return this;
	    },
	
	    // Produces a DOM element to be assigned to your view. Exposed for
	    // subclasses using an alternative DOM manipulation API.
	    _createElement: function(tagName) {
	      return document.createElement(tagName);
	    },
	
	    // Ensure that the View has a DOM element to render into.
	    // If `this.el` is a string, pass it through `$()`, take the first
	    // matching element, and re-assign it to `el`. Otherwise, create
	    // an element from the `id`, `className` and `tagName` properties.
	    _ensureElement: function() {
	      if (!this.el) {
	        var attrs = _.extend({}, _.result(this, 'attributes'));
	        if (this.id) attrs.id = _.result(this, 'id');
	        if (this.className) attrs['class'] = _.result(this, 'className');
	        this.setElement(this._createElement(_.result(this, 'tagName')));
	        this._setAttributes(attrs);
	      } else {
	        this.setElement(_.result(this, 'el'));
	      }
	    },
	
	    // Set attributes from a hash on this view's element.  Exposed for
	    // subclasses using an alternative DOM manipulation API.
	    _setAttributes: function(attributes) {
	      this.$el.attr(attributes);
	    }
	
	  });
	
	  // Backbone.sync
	  // -------------
	
	  // Override this function to change the manner in which Backbone persists
	  // models to the server. You will be passed the type of request, and the
	  // model in question. By default, makes a RESTful Ajax request
	  // to the model's `url()`. Some possible customizations could be:
	  //
	  // * Use `setTimeout` to batch rapid-fire updates into a single request.
	  // * Send up the models as XML instead of JSON.
	  // * Persist models via WebSockets instead of Ajax.
	  //
	  // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests
	  // as `POST`, with a `_method` parameter containing the true HTTP method,
	  // as well as all requests with the body as `application/x-www-form-urlencoded`
	  // instead of `application/json` with the model in a param named `model`.
	  // Useful when interfacing with server-side languages like **PHP** that make
	  // it difficult to read the body of `PUT` requests.
	  Backbone.sync = function(method, model, options) {
	    var type = methodMap[method];
	
	    // Default options, unless specified.
	    _.defaults(options || (options = {}), {
	      emulateHTTP: Backbone.emulateHTTP,
	      emulateJSON: Backbone.emulateJSON
	    });
	
	    // Default JSON-request options.
	    var params = {type: type, dataType: 'json'};
	
	    // Ensure that we have a URL.
	    if (!options.url) {
	      params.url = _.result(model, 'url') || urlError();
	    }
	
	    // Ensure that we have the appropriate request data.
	    if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {
	      params.contentType = 'application/json';
	      params.data = JSON.stringify(options.attrs || model.toJSON(options));
	    }
	
	    // For older servers, emulate JSON by encoding the request into an HTML-form.
	    if (options.emulateJSON) {
	      params.contentType = 'application/x-www-form-urlencoded';
	      params.data = params.data ? {model: params.data} : {};
	    }
	
	    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`
	    // And an `X-HTTP-Method-Override` header.
	    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {
	      params.type = 'POST';
	      if (options.emulateJSON) params.data._method = type;
	      var beforeSend = options.beforeSend;
	      options.beforeSend = function(xhr) {
	        xhr.setRequestHeader('X-HTTP-Method-Override', type);
	        if (beforeSend) return beforeSend.apply(this, arguments);
	      };
	    }
	
	    // Don't process data on a non-GET request.
	    if (params.type !== 'GET' && !options.emulateJSON) {
	      params.processData = false;
	    }
	
	    // Pass along `textStatus` and `errorThrown` from jQuery.
	    var error = options.error;
	    options.error = function(xhr, textStatus, errorThrown) {
	      options.textStatus = textStatus;
	      options.errorThrown = errorThrown;
	      if (error) error.call(options.context, xhr, textStatus, errorThrown);
	    };
	
	    // Make the request, allowing the user to override any Ajax options.
	    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));
	    model.trigger('request', model, xhr, options);
	    return xhr;
	  };
	
	  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.
	  var methodMap = {
	    'create': 'POST',
	    'update': 'PUT',
	    'patch':  'PATCH',
	    'delete': 'DELETE',
	    'read':   'GET'
	  };
	
	  // Set the default implementation of `Backbone.ajax` to proxy through to `$`.
	  // Override this if you'd like to use a different library.
	  Backbone.ajax = function() {
	    return Backbone.$.ajax.apply(Backbone.$, arguments);
	  };
	
	  // Backbone.Router
	  // ---------------
	
	  // Routers map faux-URLs to actions, and fire events when routes are
	  // matched. Creating a new one sets its `routes` hash, if not set statically.
	  var Router = Backbone.Router = function(options) {
	    options || (options = {});
	    if (options.routes) this.routes = options.routes;
	    this._bindRoutes();
	    this.initialize.apply(this, arguments);
	  };
	
	  // Cached regular expressions for matching named param parts and splatted
	  // parts of route strings.
	  var optionalParam = /\((.*?)\)/g;
	  var namedParam    = /(\(\?)?:\w+/g;
	  var splatParam    = /\*\w+/g;
	  var escapeRegExp  = /[\-{}\[\]+?.,\\\^$|#\s]/g;
	
	  // Set up all inheritable **Backbone.Router** properties and methods.
	  _.extend(Router.prototype, Events, {
	
	    // Initialize is an empty function by default. Override it with your own
	    // initialization logic.
	    initialize: function(){},
	
	    // Manually bind a single named route to a callback. For example:
	    //
	    //     this.route('search/:query/p:num', 'search', function(query, num) {
	    //       ...
	    //     });
	    //
	    route: function(route, name, callback) {
	      if (!_.isRegExp(route)) route = this._routeToRegExp(route);
	      if (_.isFunction(name)) {
	        callback = name;
	        name = '';
	      }
	      if (!callback) callback = this[name];
	      var router = this;
	      Backbone.history.route(route, function(fragment) {
	        var args = router._extractParameters(route, fragment);
	        if (router.execute(callback, args, name) !== false) {
	          router.trigger.apply(router, ['route:' + name].concat(args));
	          router.trigger('route', name, args);
	          Backbone.history.trigger('route', router, name, args);
	        }
	      });
	      return this;
	    },
	
	    // Execute a route handler with the provided parameters.  This is an
	    // excellent place to do pre-route setup or post-route cleanup.
	    execute: function(callback, args, name) {
	      if (callback) callback.apply(this, args);
	    },
	
	    // Simple proxy to `Backbone.history` to save a fragment into the history.
	    navigate: function(fragment, options) {
	      Backbone.history.navigate(fragment, options);
	      return this;
	    },
	
	    // Bind all defined routes to `Backbone.history`. We have to reverse the
	    // order of the routes here to support behavior where the most general
	    // routes can be defined at the bottom of the route map.
	    _bindRoutes: function() {
	      if (!this.routes) return;
	      this.routes = _.result(this, 'routes');
	      var route, routes = _.keys(this.routes);
	      while ((route = routes.pop()) != null) {
	        this.route(route, this.routes[route]);
	      }
	    },
	
	    // Convert a route string into a regular expression, suitable for matching
	    // against the current location hash.
	    _routeToRegExp: function(route) {
	      route = route.replace(escapeRegExp, '\\$&')
	                   .replace(optionalParam, '(?:$1)?')
	                   .replace(namedParam, function(match, optional) {
	                     return optional ? match : '([^/?]+)';
	                   })
	                   .replace(splatParam, '([^?]*?)');
	      return new RegExp('^' + route + '(?:\\?([\\s\\S]*))?$');
	    },
	
	    // Given a route, and a URL fragment that it matches, return the array of
	    // extracted decoded parameters. Empty or unmatched parameters will be
	    // treated as `null` to normalize cross-browser behavior.
	    _extractParameters: function(route, fragment) {
	      var params = route.exec(fragment).slice(1);
	      return _.map(params, function(param, i) {
	        // Don't decode the search params.
	        if (i === params.length - 1) return param || null;
	        return param ? decodeURIComponent(param) : null;
	      });
	    }
	
	  });
	
	  // Backbone.History
	  // ----------------
	
	  // Handles cross-browser history management, based on either
	  // [pushState](http://diveintohtml5.info/history.html) and real URLs, or
	  // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)
	  // and URL fragments. If the browser supports neither (old IE, natch),
	  // falls back to polling.
	  var History = Backbone.History = function() {
	    this.handlers = [];
	    _.bindAll(this, 'checkUrl');
	
	    // Ensure that `History` can be used outside of the browser.
	    if (typeof window !== 'undefined') {
	      this.location = window.location;
	      this.history = window.history;
	    }
	  };
	
	  // Cached regex for stripping a leading hash/slash and trailing space.
	  var routeStripper = /^[#\/]|\s+$/g;
	
	  // Cached regex for stripping leading and trailing slashes.
	  var rootStripper = /^\/+|\/+$/g;
	
	  // Cached regex for stripping urls of hash.
	  var pathStripper = /#.*$/;
	
	  // Has the history handling already been started?
	  History.started = false;
	
	  // Set up all inheritable **Backbone.History** properties and methods.
	  _.extend(History.prototype, Events, {
	
	    // The default interval to poll for hash changes, if necessary, is
	    // twenty times a second.
	    interval: 50,
	
	    // Are we at the app root?
	    atRoot: function() {
	      var path = this.location.pathname.replace(/[^\/]$/, '$&/');
	      return path === this.root && !this.getSearch();
	    },
	
	    // Does the pathname match the root?
	    matchRoot: function() {
	      var path = this.decodeFragment(this.location.pathname);
	      var root = path.slice(0, this.root.length - 1) + '/';
	      return root === this.root;
	    },
	
	    // Unicode characters in `location.pathname` are percent encoded so they're
	    // decoded for comparison. `%25` should not be decoded since it may be part
	    // of an encoded parameter.
	    decodeFragment: function(fragment) {
	      return decodeURI(fragment.replace(/%25/g, '%2525'));
	    },
	
	    // In IE6, the hash fragment and search params are incorrect if the
	    // fragment contains `?`.
	    getSearch: function() {
	      var match = this.location.href.replace(/#.*/, '').match(/\?.+/);
	      return match ? match[0] : '';
	    },
	
	    // Gets the true hash value. Cannot use location.hash directly due to bug
	    // in Firefox where location.hash will always be decoded.
	    getHash: function(window) {
	      var match = (window || this).location.href.match(/#(.*)$/);
	      return match ? match[1] : '';
	    },
	
	    // Get the pathname and search params, without the root.
	    getPath: function() {
	      var path = this.decodeFragment(
	        this.location.pathname + this.getSearch()
	      ).slice(this.root.length - 1);
	      return path.charAt(0) === '/' ? path.slice(1) : path;
	    },
	
	    // Get the cross-browser normalized URL fragment from the path or hash.
	    getFragment: function(fragment) {
	      if (fragment == null) {
	        if (this._usePushState || !this._wantsHashChange) {
	          fragment = this.getPath();
	        } else {
	          fragment = this.getHash();
	        }
	      }
	      return fragment.replace(routeStripper, '');
	    },
	
	    // Start the hash change handling, returning `true` if the current URL matches
	    // an existing route, and `false` otherwise.
	    start: function(options) {
	      if (History.started) throw new Error('Backbone.history has already been started');
	      History.started = true;
	
	      // Figure out the initial configuration. Do we need an iframe?
	      // Is pushState desired ... is it available?
	      this.options          = _.extend({root: '/'}, this.options, options);
	      this.root             = this.options.root;
	      this._wantsHashChange = this.options.hashChange !== false;
	      this._hasHashChange   = 'onhashchange' in window;
	      this._useHashChange   = this._wantsHashChange && this._hasHashChange;
	      this._wantsPushState  = !!this.options.pushState;
	      this._hasPushState    = !!(this.history && this.history.pushState);
	      this._usePushState    = this._wantsPushState && this._hasPushState;
	      this.fragment         = this.getFragment();
	
	      // Normalize root to always include a leading and trailing slash.
	      this.root = ('/' + this.root + '/').replace(rootStripper, '/');
	
	      // Transition from hashChange to pushState or vice versa if both are
	      // requested.
	      if (this._wantsHashChange && this._wantsPushState) {
	
	        // If we've started off with a route from a `pushState`-enabled
	        // browser, but we're currently in a browser that doesn't support it...
	        if (!this._hasPushState && !this.atRoot()) {
	          var root = this.root.slice(0, -1) || '/';
	          this.location.replace(root + '#' + this.getPath());
	          // Return immediately as browser will do redirect to new url
	          return true;
	
	        // Or if we've started out with a hash-based route, but we're currently
	        // in a browser where it could be `pushState`-based instead...
	        } else if (this._hasPushState && this.atRoot()) {
	          this.navigate(this.getHash(), {replace: true});
	        }
	
	      }
	
	      // Proxy an iframe to handle location events if the browser doesn't
	      // support the `hashchange` event, HTML5 history, or the user wants
	      // `hashChange` but not `pushState`.
	      if (!this._hasHashChange && this._wantsHashChange && !this._usePushState) {
	        this.iframe = document.createElement('iframe');
	        this.iframe.src = 'javascript:0';
	        this.iframe.style.display = 'none';
	        this.iframe.tabIndex = -1;
	        var body = document.body;
	        // Using `appendChild` will throw on IE < 9 if the document is not ready.
	        var iWindow = body.insertBefore(this.iframe, body.firstChild).contentWindow;
	        iWindow.document.open();
	        iWindow.document.close();
	        iWindow.location.hash = '#' + this.fragment;
	      }
	
	      // Add a cross-platform `addEventListener` shim for older browsers.
	      var addEventListener = window.addEventListener || function (eventName, listener) {
	        return attachEvent('on' + eventName, listener);
	      };
	
	      // Depending on whether we're using pushState or hashes, and whether
	      // 'onhashchange' is supported, determine how we check the URL state.
	      if (this._usePushState) {
	        addEventListener('popstate', this.checkUrl, false);
	      } else if (this._useHashChange && !this.iframe) {
	        addEventListener('hashchange', this.checkUrl, false);
	      } else if (this._wantsHashChange) {
	        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);
	      }
	
	      if (!this.options.silent) return this.loadUrl();
	    },
	
	    // Disable Backbone.history, perhaps temporarily. Not useful in a real app,
	    // but possibly useful for unit testing Routers.
	    stop: function() {
	      // Add a cross-platform `removeEventListener` shim for older browsers.
	      var removeEventListener = window.removeEventListener || function (eventName, listener) {
	        return detachEvent('on' + eventName, listener);
	      };
	
	      // Remove window listeners.
	      if (this._usePushState) {
	        removeEventListener('popstate', this.checkUrl, false);
	      } else if (this._useHashChange && !this.iframe) {
	        removeEventListener('hashchange', this.checkUrl, false);
	      }
	
	      // Clean up the iframe if necessary.
	      if (this.iframe) {
	        document.body.removeChild(this.iframe);
	        this.iframe = null;
	      }
	
	      // Some environments will throw when clearing an undefined interval.
	      if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);
	      History.started = false;
	    },
	
	    // Add a route to be tested when the fragment changes. Routes added later
	    // may override previous routes.
	    route: function(route, callback) {
	      this.handlers.unshift({route: route, callback: callback});
	    },
	
	    // Checks the current URL to see if it has changed, and if it has,
	    // calls `loadUrl`, normalizing across the hidden iframe.
	    checkUrl: function(e) {
	      var current = this.getFragment();
	
	      // If the user pressed the back button, the iframe's hash will have
	      // changed and we should use that for comparison.
	      if (current === this.fragment && this.iframe) {
	        current = this.getHash(this.iframe.contentWindow);
	      }
	
	      if (current === this.fragment) return false;
	      if (this.iframe) this.navigate(current);
	      this.loadUrl();
	    },
	
	    // Attempt to load the current URL fragment. If a route succeeds with a
	    // match, returns `true`. If no defined routes matches the fragment,
	    // returns `false`.
	    loadUrl: function(fragment) {
	      // If the root doesn't match, no routes can match either.
	      if (!this.matchRoot()) return false;
	      fragment = this.fragment = this.getFragment(fragment);
	      return _.any(this.handlers, function(handler) {
	        if (handler.route.test(fragment)) {
	          handler.callback(fragment);
	          return true;
	        }
	      });
	    },
	
	    // Save a fragment into the hash history, or replace the URL state if the
	    // 'replace' option is passed. You are responsible for properly URL-encoding
	    // the fragment in advance.
	    //
	    // The options object can contain `trigger: true` if you wish to have the
	    // route callback be fired (not usually desirable), or `replace: true`, if
	    // you wish to modify the current URL without adding an entry to the history.
	    navigate: function(fragment, options) {
	      if (!History.started) return false;
	      if (!options || options === true) options = {trigger: !!options};
	
	      // Normalize the fragment.
	      fragment = this.getFragment(fragment || '');
	
	      // Don't include a trailing slash on the root.
	      var root = this.root;
	      if (fragment === '' || fragment.charAt(0) === '?') {
	        root = root.slice(0, -1) || '/';
	      }
	      var url = root + fragment;
	
	      // Strip the hash and decode for matching.
	      fragment = this.decodeFragment(fragment.replace(pathStripper, ''));
	
	      if (this.fragment === fragment) return;
	      this.fragment = fragment;
	
	      // If pushState is available, we use it to set the fragment as a real URL.
	      if (this._usePushState) {
	        this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);
	
	      // If hash changes haven't been explicitly disabled, update the hash
	      // fragment to store history.
	      } else if (this._wantsHashChange) {
	        this._updateHash(this.location, fragment, options.replace);
	        if (this.iframe && (fragment !== this.getHash(this.iframe.contentWindow))) {
	          var iWindow = this.iframe.contentWindow;
	
	          // Opening and closing the iframe tricks IE7 and earlier to push a
	          // history entry on hash-tag change.  When replace is true, we don't
	          // want this.
	          if (!options.replace) {
	            iWindow.document.open();
	            iWindow.document.close();
	          }
	
	          this._updateHash(iWindow.location, fragment, options.replace);
	        }
	
	      // If you've told us that you explicitly don't want fallback hashchange-
	      // based history, then `navigate` becomes a page refresh.
	      } else {
	        return this.location.assign(url);
	      }
	      if (options.trigger) return this.loadUrl(fragment);
	    },
	
	    // Update the hash location, either replacing the current entry, or adding
	    // a new one to the browser history.
	    _updateHash: function(location, fragment, replace) {
	      if (replace) {
	        var href = location.href.replace(/(javascript:|#).*$/, '');
	        location.replace(href + '#' + fragment);
	      } else {
	        // Some browsers require that `hash` contains a leading #.
	        location.hash = '#' + fragment;
	      }
	    }
	
	  });
	
	  // Create the default Backbone.history.
	  Backbone.history = new History;
	
	  // Helpers
	  // -------
	
	  // Helper function to correctly set up the prototype chain for subclasses.
	  // Similar to `goog.inherits`, but uses a hash of prototype properties and
	  // class properties to be extended.
	  var extend = function(protoProps, staticProps) {
	    var parent = this;
	    var child;
	
	    // The constructor function for the new subclass is either defined by you
	    // (the "constructor" property in your `extend` definition), or defaulted
	    // by us to simply call the parent constructor.
	    if (protoProps && _.has(protoProps, 'constructor')) {
	      child = protoProps.constructor;
	    } else {
	      child = function(){ return parent.apply(this, arguments); };
	    }
	
	    // Add static properties to the constructor function, if supplied.
	    _.extend(child, parent, staticProps);
	
	    // Set the prototype chain to inherit from `parent`, without calling
	    // `parent` constructor function.
	    var Surrogate = function(){ this.constructor = child; };
	    Surrogate.prototype = parent.prototype;
	    child.prototype = new Surrogate;
	
	    // Add prototype properties (instance properties) to the subclass,
	    // if supplied.
	    if (protoProps) _.extend(child.prototype, protoProps);
	
	    // Set a convenience property in case the parent's prototype is needed
	    // later.
	    child.__super__ = parent.prototype;
	
	    return child;
	  };
	
	  // Set up inheritance for the model, collection, router, view and history.
	  Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;
	
	  // Throw an error when a URL is needed, and none is supplied.
	  var urlError = function() {
	    throw new Error('A "url" property or function must be specified');
	  };
	
	  // Wrap an optional error callback with a fallback error event.
	  var wrapError = function(model, options) {
	    var error = options.error;
	    options.error = function(resp) {
	      if (error) error.call(options.context, model, resp, options);
	      model.trigger('error', model, resp, options);
	    };
	  };
	
	  return Backbone;
	
	}));
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 402 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v1.12.1
	 * http://jquery.com/
	 *
	 * Includes Sizzle.js
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-02-22T19:07Z
	 */
	
	(function( global, factory ) {
	
		if ( typeof module === "object" && typeof module.exports === "object" ) {
			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}
	
	// Pass this if window is not defined yet
	}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {
	
	// Support: Firefox 18+
	// Can't be in strict mode, several libs including ASP.NET trace
	// the stack via arguments.caller.callee and Firefox dies if
	// you try to trace through "use strict" call chains. (#13335)
	//"use strict";
	var deletedIds = [];
	
	var document = window.document;
	
	var slice = deletedIds.slice;
	
	var concat = deletedIds.concat;
	
	var push = deletedIds.push;
	
	var indexOf = deletedIds.indexOf;
	
	var class2type = {};
	
	var toString = class2type.toString;
	
	var hasOwn = class2type.hasOwnProperty;
	
	var support = {};
	
	
	
	var
		version = "1.12.1",
	
		// Define a local copy of jQuery
		jQuery = function( selector, context ) {
	
			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},
	
		// Support: Android<4.1, IE<9
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
	
		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		rdashAlpha = /-([\da-z])/gi,
	
		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function( all, letter ) {
			return letter.toUpperCase();
		};
	
	jQuery.fn = jQuery.prototype = {
	
		// The current version of jQuery being used
		jquery: version,
	
		constructor: jQuery,
	
		// Start with an empty selector
		selector: "",
	
		// The default length of a jQuery object is 0
		length: 0,
	
		toArray: function() {
			return slice.call( this );
		},
	
		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {
			return num != null ?
	
				// Return just the one element from the set
				( num < 0 ? this[ num + this.length ] : this[ num ] ) :
	
				// Return all the elements in a clean array
				slice.call( this );
		},
	
		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {
	
			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );
	
			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;
			ret.context = this.context;
	
			// Return the newly-formed element set
			return ret;
		},
	
		// Execute a callback for every element in the matched set.
		each: function( callback ) {
			return jQuery.each( this, callback );
		},
	
		map: function( callback ) {
			return this.pushStack( jQuery.map( this, function( elem, i ) {
				return callback.call( elem, i, elem );
			} ) );
		},
	
		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},
	
		first: function() {
			return this.eq( 0 );
		},
	
		last: function() {
			return this.eq( -1 );
		},
	
		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
		},
	
		end: function() {
			return this.prevObject || this.constructor();
		},
	
		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: deletedIds.sort,
		splice: deletedIds.splice
	};
	
	jQuery.extend = jQuery.fn.extend = function() {
		var src, copyIsArray, copy, name, options, clone,
			target = arguments[ 0 ] || {},
			i = 1,
			length = arguments.length,
			deep = false;
	
		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;
	
			// skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}
	
		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
			target = {};
		}
	
		// extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}
	
		for ( ; i < length; i++ ) {
	
			// Only deal with non-null/undefined values
			if ( ( options = arguments[ i ] ) != null ) {
	
				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];
	
					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}
	
					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
						( copyIsArray = jQuery.isArray( copy ) ) ) ) {
	
						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && jQuery.isArray( src ) ? src : [];
	
						} else {
							clone = src && jQuery.isPlainObject( src ) ? src : {};
						}
	
						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );
	
					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}
	
		// Return the modified object
		return target;
	};
	
	jQuery.extend( {
	
		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),
	
		// Assume jQuery is ready without the ready module
		isReady: true,
	
		error: function( msg ) {
			throw new Error( msg );
		},
	
		noop: function() {},
	
		// See test/unit/core.js for details concerning isFunction.
		// Since version 1.3, DOM methods and functions like alert
		// aren't supported. They return false on IE (#2968).
		isFunction: function( obj ) {
			return jQuery.type( obj ) === "function";
		},
	
		isArray: Array.isArray || function( obj ) {
			return jQuery.type( obj ) === "array";
		},
	
		isWindow: function( obj ) {
			/* jshint eqeqeq: false */
			return obj != null && obj == obj.window;
		},
	
		isNumeric: function( obj ) {
	
			// parseFloat NaNs numeric-cast false positives (null|true|false|"")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			// adding 1 corrects loss of precision from parseFloat (#15100)
			var realStringObj = obj && obj.toString();
			return !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;
		},
	
		isEmptyObject: function( obj ) {
			var name;
			for ( name in obj ) {
				return false;
			}
			return true;
		},
	
		isPlainObject: function( obj ) {
			var key;
	
			// Must be an Object.
			// Because of IE, we also have to check the presence of the constructor property.
			// Make sure that DOM nodes and window objects don't pass through, as well
			if ( !obj || jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
				return false;
			}
	
			try {
	
				// Not own constructor property must be Object
				if ( obj.constructor &&
					!hasOwn.call( obj, "constructor" ) &&
					!hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
					return false;
				}
			} catch ( e ) {
	
				// IE8,9 Will throw exceptions on certain host objects #9897
				return false;
			}
	
			// Support: IE<9
			// Handle iteration over inherited properties before own properties.
			if ( !support.ownFirst ) {
				for ( key in obj ) {
					return hasOwn.call( obj, key );
				}
			}
	
			// Own properties are enumerated firstly, so to speed up,
			// if last one is own, then all properties are own.
			for ( key in obj ) {}
	
			return key === undefined || hasOwn.call( obj, key );
		},
	
		type: function( obj ) {
			if ( obj == null ) {
				return obj + "";
			}
			return typeof obj === "object" || typeof obj === "function" ?
				class2type[ toString.call( obj ) ] || "object" :
				typeof obj;
		},
	
		// Workarounds based on findings by Jim Driscoll
		// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
		globalEval: function( data ) {
			if ( data && jQuery.trim( data ) ) {
	
				// We use execScript on Internet Explorer
				// We use an anonymous function so that context is window
				// rather than jQuery in Firefox
				( window.execScript || function( data ) {
					window[ "eval" ].call( window, data ); // jscs:ignore requireDotNotation
				} )( data );
			}
		},
	
		// Convert dashed to camelCase; used by the css and data modules
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function( string ) {
			return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
		},
	
		nodeName: function( elem, name ) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		},
	
		each: function( obj, callback ) {
			var length, i = 0;
	
			if ( isArrayLike( obj ) ) {
				length = obj.length;
				for ( ; i < length; i++ ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			}
	
			return obj;
		},
	
		// Support: Android<4.1, IE<9
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},
	
		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];
	
			if ( arr != null ) {
				if ( isArrayLike( Object( arr ) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}
	
			return ret;
		},
	
		inArray: function( elem, arr, i ) {
			var len;
	
			if ( arr ) {
				if ( indexOf ) {
					return indexOf.call( arr, elem, i );
				}
	
				len = arr.length;
				i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;
	
				for ( ; i < len; i++ ) {
	
					// Skip accessing in sparse arrays
					if ( i in arr && arr[ i ] === elem ) {
						return i;
					}
				}
			}
	
			return -1;
		},
	
		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;
	
			while ( j < len ) {
				first[ i++ ] = second[ j++ ];
			}
	
			// Support: IE<9
			// Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)
			if ( len !== len ) {
				while ( second[ j ] !== undefined ) {
					first[ i++ ] = second[ j++ ];
				}
			}
	
			first.length = i;
	
			return first;
		},
	
		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;
	
			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}
	
			return matches;
		},
	
		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var length, value,
				i = 0,
				ret = [];
	
			// Go through the array, translating each of the items to their new values
			if ( isArrayLike( elems ) ) {
				length = elems.length;
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );
	
					if ( value != null ) {
						ret.push( value );
					}
				}
	
			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );
	
					if ( value != null ) {
						ret.push( value );
					}
				}
			}
	
			// Flatten any nested arrays
			return concat.apply( [], ret );
		},
	
		// A global GUID counter for objects
		guid: 1,
	
		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function( fn, context ) {
			var args, proxy, tmp;
	
			if ( typeof context === "string" ) {
				tmp = fn[ context ];
				context = fn;
				fn = tmp;
			}
	
			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if ( !jQuery.isFunction( fn ) ) {
				return undefined;
			}
	
			// Simulated bind
			args = slice.call( arguments, 2 );
			proxy = function() {
				return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
			};
	
			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;
	
			return proxy;
		},
	
		now: function() {
			return +( new Date() );
		},
	
		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	} );
	
	// JSHint would error on this code due to the Symbol not being defined in ES5.
	// Defining this global in .jshintrc would create a danger of using the global
	// unguarded in another place, it seems safer to just disable JSHint for these
	// three lines.
	/* jshint ignore: start */
	if ( typeof Symbol === "function" ) {
		jQuery.fn[ Symbol.iterator ] = deletedIds[ Symbol.iterator ];
	}
	/* jshint ignore: end */
	
	// Populate the class2type map
	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );
	
	function isArrayLike( obj ) {
	
		// Support: iOS 8.2 (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
			type = jQuery.type( obj );
	
		if ( type === "function" || jQuery.isWindow( obj ) ) {
			return false;
		}
	
		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.2.1
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2015-10-17
	 */
	(function( window ) {
	
	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,
	
		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,
	
		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},
	
		// General-purpose constants
		MAX_NEGATIVE = 1 << 31,
	
		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// http://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},
	
		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
	
		// Regular expressions
	
		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",
	
		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
	
		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",
	
		pseudos = ":(" + identifier + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",
	
		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),
	
		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),
	
		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),
	
		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),
	
		matchExpr = {
			"ID": new RegExp( "^#(" + identifier + ")" ),
			"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
			"TAG": new RegExp( "^(" + identifier + "|[*])" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},
	
		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,
	
		rnative = /^[^{]+\{\s*\[native \w/,
	
		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
	
		rsibling = /[+~]/,
		rescape = /'|\\/g,
	
		// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},
	
		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		};
	
	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?
	
			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :
	
			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}
	
	function Sizzle( selector, context, results, seed ) {
		var m, i, elem, nid, nidselect, match, groups, newSelector,
			newContext = context && context.ownerDocument,
	
			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;
	
		results = results || [];
	
		// Return early from calls with invalid selector or context
		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {
	
			return results;
		}
	
		// Try to shortcut find operations (as opposed to filters) in HTML documents
		if ( !seed ) {
	
			if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
				setDocument( context );
			}
			context = context || document;
	
			if ( documentIsHTML ) {
	
				// If the selector is sufficiently simple, try using a "get*By*" DOM method
				// (excepting DocumentFragment context, where the methods don't exist)
				if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {
	
					// ID selector
					if ( (m = match[1]) ) {
	
						// Document context
						if ( nodeType === 9 ) {
							if ( (elem = context.getElementById( m )) ) {
	
								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if ( elem.id === m ) {
									results.push( elem );
									return results;
								}
							} else {
								return results;
							}
	
						// Element context
						} else {
	
							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( newContext && (elem = newContext.getElementById( m )) &&
								contains( context, elem ) &&
								elem.id === m ) {
	
								results.push( elem );
								return results;
							}
						}
	
					// Type selector
					} else if ( match[2] ) {
						push.apply( results, context.getElementsByTagName( selector ) );
						return results;
	
					// Class selector
					} else if ( (m = match[3]) && support.getElementsByClassName &&
						context.getElementsByClassName ) {
	
						push.apply( results, context.getElementsByClassName( m ) );
						return results;
					}
				}
	
				// Take advantage of querySelectorAll
				if ( support.qsa &&
					!compilerCache[ selector + " " ] &&
					(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
	
					if ( nodeType !== 1 ) {
						newContext = context;
						newSelector = selector;
	
					// qSA looks outside Element context, which is not what we want
					// Thanks to Andrew Dupont for this workaround technique
					// Support: IE <=8
					// Exclude object elements
					} else if ( context.nodeName.toLowerCase() !== "object" ) {
	
						// Capture the context ID, setting it first if necessary
						if ( (nid = context.getAttribute( "id" )) ) {
							nid = nid.replace( rescape, "\\$&" );
						} else {
							context.setAttribute( "id", (nid = expando) );
						}
	
						// Prefix every selector in the list
						groups = tokenize( selector );
						i = groups.length;
						nidselect = ridentifier.test( nid ) ? "#" + nid : "[id='" + nid + "']";
						while ( i-- ) {
							groups[i] = nidselect + " " + toSelector( groups[i] );
						}
						newSelector = groups.join( "," );
	
						// Expand context for sibling selectors
						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
							context;
					}
	
					if ( newSelector ) {
						try {
							push.apply( results,
								newContext.querySelectorAll( newSelector )
							);
							return results;
						} catch ( qsaError ) {
						} finally {
							if ( nid === expando ) {
								context.removeAttribute( "id" );
							}
						}
					}
				}
			}
		}
	
		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}
	
	/**
	 * Create key-value caches of limited size
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];
	
		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}
	
	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}
	
	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created div and expects a boolean result
	 */
	function assert( fn ) {
		var div = document.createElement("div");
	
		try {
			return !!fn( div );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( div.parentNode ) {
				div.parentNode.removeChild( div );
			}
			// release memory in IE
			div = null;
		}
	}
	
	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = arr.length;
	
		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}
	
	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				( ~b.sourceIndex || MAX_NEGATIVE ) -
				( ~a.sourceIndex || MAX_NEGATIVE );
	
		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}
	
		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}
	
		return a ? 1 : -1;
	}
	
	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}
	
	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}
	
	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;
	
				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}
	
	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}
	
	// Expose support vars for convenience
	support = Sizzle.support = {};
	
	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};
	
	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, parent,
			doc = node ? node.ownerDocument || node : preferredDoc;
	
		// Return early if doc is invalid or already selected
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}
	
		// Update global variables
		document = doc;
		docElem = document.documentElement;
		documentIsHTML = !isXML( document );
	
		// Support: IE 9-11, Edge
		// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
		if ( (parent = document.defaultView) && parent.top !== parent ) {
			// Support: IE 11
			if ( parent.addEventListener ) {
				parent.addEventListener( "unload", unloadHandler, false );
	
			// Support: IE 9 - 10 only
			} else if ( parent.attachEvent ) {
				parent.attachEvent( "onunload", unloadHandler );
			}
		}
	
		/* Attributes
		---------------------------------------------------------------------- */
	
		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( div ) {
			div.className = "i";
			return !div.getAttribute("className");
		});
	
		/* getElement(s)By*
		---------------------------------------------------------------------- */
	
		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( div ) {
			div.appendChild( document.createComment("") );
			return !div.getElementsByTagName("*").length;
		});
	
		// Support: IE<9
		support.getElementsByClassName = rnative.test( document.getElementsByClassName );
	
		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( div ) {
			docElem.appendChild( div ).id = expando;
			return !document.getElementsByName || !document.getElementsByName( expando ).length;
		});
	
		// ID find and filter
		if ( support.getById ) {
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var m = context.getElementById( id );
					return m ? [ m ] : [];
				}
			};
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
		} else {
			// Support: IE6/7
			// getElementById is not reliable as a find shortcut
			delete Expr.find["ID"];
	
			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" &&
						elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};
		}
	
		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );
	
				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :
	
			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );
	
				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}
	
					return tmp;
				}
				return results;
			};
	
		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};
	
		/* QSA/matchesSelector
		---------------------------------------------------------------------- */
	
		// QSA and matchesSelector support
	
		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];
	
		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See http://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];
	
		if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( div ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// http://bugs.jquery.com/ticket/12359
				docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\r\\' msallowcapture=''>" +
					"<option selected=''></option></select>";
	
				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( div.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}
	
				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !div.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}
	
				// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
				if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}
	
				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}
	
				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibing-combinator selector` fails
				if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});
	
			assert(function( div ) {
				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = document.createElement("input");
				input.setAttribute( "type", "hidden" );
				div.appendChild( input ).setAttribute( "name", "D" );
	
				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( div.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}
	
				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":enabled").length ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}
	
				// Opera 10-11 does not throw on post-comma invalid pseudos
				div.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}
	
		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {
	
			assert(function( div ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( div, "div" );
	
				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( div, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}
	
		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );
	
		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );
	
		// Element contains another
		// Purposefully self-exclusive
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};
	
		/* Sorting
		---------------------------------------------------------------------- */
	
		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {
	
			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}
	
			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}
	
			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :
	
				// Otherwise we know they are disconnected
				1;
	
			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {
	
				// Choose the first element that is related to our preferred document
				if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}
	
				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}
	
			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}
	
			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];
	
			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === document ? -1 :
					b === document ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
	
			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}
	
			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}
	
			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}
	
			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :
	
				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};
	
		return document;
	};
	
	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};
	
	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}
	
		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );
	
		if ( support.matchesSelector && documentIsHTML &&
			!compilerCache[ expr + " " ] &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {
	
			try {
				var ret = matches.call( elem, expr );
	
				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {}
		}
	
		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};
	
	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};
	
	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}
	
		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;
	
		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};
	
	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};
	
	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;
	
		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );
	
		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}
	
		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;
	
		return results;
	};
	
	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;
	
		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes
	
		return ret;
	};
	
	Expr = Sizzle.selectors = {
	
		// Can be adjusted by the user
		cacheLength: 50,
	
		createPseudo: markFunction,
	
		match: matchExpr,
	
		attrHandle: {},
	
		find: {},
	
		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},
	
		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );
	
				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );
	
				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}
	
				return match.slice( 0, 4 );
			},
	
			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();
	
				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}
	
					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );
	
				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}
	
				return match;
			},
	
			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];
	
				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}
	
				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";
	
				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {
	
					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}
	
				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},
	
		filter: {
	
			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},
	
			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];
	
				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
					});
			},
	
			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );
	
					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}
	
					result += "";
	
					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},
	
			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";
	
				return first === 1 && last === 0 ?
	
					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :
	
					function( elem, context, xml ) {
						var cache, uniqueCache, outerCache, node, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType,
							diff = false;
	
						if ( parent ) {
	
							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) {
	
											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}
	
							start = [ forward ? parent.firstChild : parent.lastChild ];
	
							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {
	
								// Seek `elem` from a previously-cached index
	
								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[ expando ] || (node[ expando ] = {});
	
								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});
	
								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex && cache[ 2 ];
								node = nodeIndex && parent.childNodes[ nodeIndex ];
	
								while ( (node = ++nodeIndex && node && node[ dir ] ||
	
									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {
	
									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}
	
							} else {
								// Use previously-cached element index if available
								if ( useCache ) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[ expando ] || (node[ expando ] = {});
	
									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[ node.uniqueID ] ||
										(outerCache[ node.uniqueID ] = {});
	
									cache = uniqueCache[ type ] || [];
									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
									diff = nodeIndex;
								}
	
								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if ( diff === false ) {
									// Use the same loop as above to seek `elem` from the start
									while ( (node = ++nodeIndex && node && node[ dir ] ||
										(diff = nodeIndex = 0) || start.pop()) ) {
	
										if ( ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) &&
											++diff ) {
	
											// Cache the index of each encountered element
											if ( useCache ) {
												outerCache = node[ expando ] || (node[ expando ] = {});
	
												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[ node.uniqueID ] ||
													(outerCache[ node.uniqueID ] = {});
	
												uniqueCache[ type ] = [ dirruns, diff ];
											}
	
											if ( node === elem ) {
												break;
											}
										}
									}
								}
							}
	
							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},
	
			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );
	
				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}
	
				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}
	
				return fn;
			}
		},
	
		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );
	
				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;
	
						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),
	
			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),
	
			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),
	
			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {
	
							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),
	
			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},
	
			"root": function( elem ) {
				return elem === docElem;
			},
	
			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},
	
			// Boolean properties
			"enabled": function( elem ) {
				return elem.disabled === false;
			},
	
			"disabled": function( elem ) {
				return elem.disabled === true;
			},
	
			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},
	
			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}
	
				return elem.selected === true;
			},
	
			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},
	
			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},
	
			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},
	
			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},
	
			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},
	
			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&
	
					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},
	
			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),
	
			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),
	
			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),
	
			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};
	
	Expr.pseudos["nth"] = Expr.pseudos["eq"];
	
	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}
	
	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();
	
	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];
	
		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}
	
		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;
	
		while ( soFar ) {
	
			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}
	
			matched = false;
	
			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}
	
			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}
	
			if ( !matched ) {
				break;
			}
		}
	
		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};
	
	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}
	
	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			checkNonElements = base && dir === "parentNode",
			doneName = done++;
	
		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
			} :
	
			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, uniqueCache, outerCache,
					newCache = [ dirruns, doneName ];
	
				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});
	
							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});
	
							if ( (oldCache = uniqueCache[ dir ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {
	
								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[ dir ] = newCache;
	
								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
			};
	}
	
	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}
	
	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}
	
	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;
	
		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}
	
		return newUnmatched;
	}
	
	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,
	
				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),
	
				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,
	
				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?
	
						// ...intermediate processing is necessary
						[] :
	
						// ...otherwise use results directly
						results :
					matcherIn;
	
			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}
	
			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );
	
				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}
	
			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}
	
					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {
	
							seed[temp] = !(results[temp] = elem);
						}
					}
				}
	
			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}
	
	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,
	
			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];
	
		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );
	
				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}
	
		return elementMatcher( matchers );
	}
	
	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;
	
				if ( outermost ) {
					outermostContext = context === document || context || outermost;
				}
	
				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						if ( !context && elem.ownerDocument !== document ) {
							setDocument( elem );
							xml = !documentIsHTML;
						}
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context || document, xml) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}
	
					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}
	
						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}
	
				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;
	
				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}
	
					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}
	
						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}
	
					// Add matches to results
					push.apply( results, setMatched );
	
					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {
	
						Sizzle.uniqueSort( results );
					}
				}
	
				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}
	
				return unmatched;
			};
	
		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}
	
	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];
	
		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}
	
			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	
			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};
	
	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );
	
		results = results || [];
	
		// Try to minimize operations if there is only one selector in the list and no seed
		// (the latter of which guarantees us context)
		if ( match.length === 1 ) {
	
			// Reduce context if the leading compound selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {
	
				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;
	
				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}
	
				selector = selector.slice( tokens.shift().value.length );
			}
	
			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];
	
				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {
	
						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}
	
						break;
					}
				}
			}
		}
	
		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};
	
	// One-time assignments
	
	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;
	
	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;
	
	// Initialize against the default document
	setDocument();
	
	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( div1 ) {
		// Should return 1, but returns 4 (following)
		return div1.compareDocumentPosition( document.createElement("div") ) & 1;
	});
	
	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}
	
	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( div ) {
		div.innerHTML = "<input/>";
		div.firstChild.setAttribute( "value", "" );
		return div.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}
	
	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( div ) {
		return div.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}
	
	return Sizzle;
	
	})( window );
	
	
	
	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;
	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;
	
	
	
	var dir = function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;
	
		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	};
	
	
	var siblings = function( n, elem ) {
		var matched = [];
	
		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}
	
		return matched;
	};
	
	
	var rneedsContext = jQuery.expr.match.needsContext;
	
	var rsingleTag = ( /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/ );
	
	
	
	var risSimple = /^.[^:#\[\.,]*$/;
	
	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( jQuery.isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				/* jshint -W018 */
				return !!qualifier.call( elem, i, elem ) !== not;
			} );
	
		}
	
		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			} );
	
		}
	
		if ( typeof qualifier === "string" ) {
			if ( risSimple.test( qualifier ) ) {
				return jQuery.filter( qualifier, elements, not );
			}
	
			qualifier = jQuery.filter( qualifier, elements );
		}
	
		return jQuery.grep( elements, function( elem ) {
			return ( jQuery.inArray( elem, qualifier ) > -1 ) !== not;
		} );
	}
	
	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];
	
		if ( not ) {
			expr = ":not(" + expr + ")";
		}
	
		return elems.length === 1 && elem.nodeType === 1 ?
			jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
			jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
				return elem.nodeType === 1;
			} ) );
	};
	
	jQuery.fn.extend( {
		find: function( selector ) {
			var i,
				ret = [],
				self = this,
				len = self.length;
	
			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter( function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				} ) );
			}
	
			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}
	
			// Needed because $( selector, context ) becomes $( context ).find( selector )
			ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
			ret.selector = this.selector ? this.selector + " " + selector : selector;
			return ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow( this, selector || [], false ) );
		},
		not: function( selector ) {
			return this.pushStack( winnow( this, selector || [], true ) );
		},
		is: function( selector ) {
			return !!winnow(
				this,
	
				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	} );
	
	
	// Initialize a jQuery object
	
	
	// A central reference to the root jQuery(document)
	var rootjQuery,
	
		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
	
		init = jQuery.fn.init = function( selector, context, root ) {
			var match, elem;
	
			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}
	
			// init accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;
	
			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector.charAt( 0 ) === "<" &&
					selector.charAt( selector.length - 1 ) === ">" &&
					selector.length >= 3 ) {
	
					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];
	
				} else {
					match = rquickExpr.exec( selector );
				}
	
				// Match html or make sure no context is specified for #id
				if ( match && ( match[ 1 ] || !context ) ) {
	
					// HANDLE: $(html) -> $(array)
					if ( match[ 1 ] ) {
						context = context instanceof jQuery ? context[ 0 ] : context;
	
						// scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[ 1 ],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );
	
						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {
	
								// Properties of context are called as methods if possible
								if ( jQuery.isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );
	
								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}
	
						return this;
	
					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[ 2 ] );
	
						// Check parentNode to catch when Blackberry 4.6 returns
						// nodes that are no longer in the document #6963
						if ( elem && elem.parentNode ) {
	
							// Handle the case where IE and Opera return items
							// by name instead of ID
							if ( elem.id !== match[ 2 ] ) {
								return rootjQuery.find( selector );
							}
	
							// Otherwise, we inject the element directly into the jQuery object
							this.length = 1;
							this[ 0 ] = elem;
						}
	
						this.context = document;
						this.selector = selector;
						return this;
					}
	
				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || root ).find( selector );
	
				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}
	
			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this.context = this[ 0 ] = selector;
				this.length = 1;
				return this;
	
			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( jQuery.isFunction( selector ) ) {
				return typeof root.ready !== "undefined" ?
					root.ready( selector ) :
	
					// Execute immediately if ready is not present
					selector( jQuery );
			}
	
			if ( selector.selector !== undefined ) {
				this.selector = selector.selector;
				this.context = selector.context;
			}
	
			return jQuery.makeArray( selector, this );
		};
	
	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;
	
	// Initialize central reference
	rootjQuery = jQuery( document );
	
	
	var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	
		// methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};
	
	jQuery.fn.extend( {
		has: function( target ) {
			var i,
				targets = jQuery( target, this ),
				len = targets.length;
	
			return this.filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( this, targets[ i ] ) ) {
						return true;
					}
				}
			} );
		},
	
		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
					jQuery( selectors, context || this.context ) :
					0;
	
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {
	
					// Always skip document fragments
					if ( cur.nodeType < 11 && ( pos ?
						pos.index( cur ) > -1 :
	
						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {
	
						matched.push( cur );
						break;
					}
				}
			}
	
			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
		},
	
		// Determine the position of an element within
		// the matched set of elements
		index: function( elem ) {
	
			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}
	
			// index in selector
			if ( typeof elem === "string" ) {
				return jQuery.inArray( this[ 0 ], jQuery( elem ) );
			}
	
			// Locate the position of the desired element
			return jQuery.inArray(
	
				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem, this );
		},
	
		add: function( selector, context ) {
			return this.pushStack(
				jQuery.uniqueSort(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},
	
		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		}
	} );
	
	function sibling( cur, dir ) {
		do {
			cur = cur[ dir ];
		} while ( cur && cur.nodeType !== 1 );
	
		return cur;
	}
	
	jQuery.each( {
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return siblings( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return siblings( elem.firstChild );
		},
		contents: function( elem ) {
			return jQuery.nodeName( elem, "iframe" ) ?
				elem.contentDocument || elem.contentWindow.document :
				jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var ret = jQuery.map( this, fn, until );
	
			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}
	
			if ( selector && typeof selector === "string" ) {
				ret = jQuery.filter( selector, ret );
			}
	
			if ( this.length > 1 ) {
	
				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					ret = jQuery.uniqueSort( ret );
				}
	
				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					ret = ret.reverse();
				}
			}
	
			return this.pushStack( ret );
		};
	} );
	var rnotwhite = ( /\S+/g );
	
	
	
	// Convert String-formatted options into Object-formatted ones
	function createOptions( options ) {
		var object = {};
		jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		} );
		return object;
	}
	
	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {
	
		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			createOptions( options ) :
			jQuery.extend( {}, options );
	
		var // Flag to know if list is currently firing
			firing,
	
			// Last fire value for non-forgettable lists
			memory,
	
			// Flag to know if list was already fired
			fired,
	
			// Flag to prevent firing
			locked,
	
			// Actual callback list
			list = [],
	
			// Queue of execution data for repeatable lists
			queue = [],
	
			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,
	
			// Fire callbacks
			fire = function() {
	
				// Enforce single-firing
				locked = options.once;
	
				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				fired = firing = true;
				for ( ; queue.length; firingIndex = -1 ) {
					memory = queue.shift();
					while ( ++firingIndex < list.length ) {
	
						// Run callback and check for early termination
						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
							options.stopOnFalse ) {
	
							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}
	
				// Forget the data if we're done with it
				if ( !options.memory ) {
					memory = false;
				}
	
				firing = false;
	
				// Clean up if we're done firing for good
				if ( locked ) {
	
					// Keep an empty list if we have data for future add calls
					if ( memory ) {
						list = [];
	
					// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},
	
			// Actual Callbacks object
			self = {
	
				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {
	
						// If we have memory from a past run, we should fire after adding
						if ( memory && !firing ) {
							firingIndex = list.length - 1;
							queue.push( memory );
						}
	
						( function add( args ) {
							jQuery.each( args, function( _, arg ) {
								if ( jQuery.isFunction( arg ) ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {
	
									// Inspect recursively
									add( arg );
								}
							} );
						} )( arguments );
	
						if ( memory && !firing ) {
							fire();
						}
					}
					return this;
				},
	
				// Remove a callback from the list
				remove: function() {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
	
							// Handle firing indexes
							if ( index <= firingIndex ) {
								firingIndex--;
							}
						}
					} );
					return this;
				},
	
				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ?
						jQuery.inArray( fn, list ) > -1 :
						list.length > 0;
				},
	
				// Remove all callbacks from the list
				empty: function() {
					if ( list ) {
						list = [];
					}
					return this;
				},
	
				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function() {
					locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function() {
					return !list;
				},
	
				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function() {
					locked = true;
					if ( !memory ) {
						self.disable();
					}
					return this;
				},
				locked: function() {
					return !!locked;
				},
	
				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( !locked ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						queue.push( args );
						if ( !firing ) {
							fire();
						}
					}
					return this;
				},
	
				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},
	
				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};
	
		return self;
	};
	
	
	jQuery.extend( {
	
		Deferred: function( func ) {
			var tuples = [
	
					// action, add listener, listener list, final state
					[ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],
					[ "reject", "fail", jQuery.Callbacks( "once memory" ), "rejected" ],
					[ "notify", "progress", jQuery.Callbacks( "memory" ) ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					then: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;
						return jQuery.Deferred( function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {
								var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
	
								// deferred[ done | fail | progress ] for forwarding actions to newDefer
								deferred[ tuple[ 1 ] ]( function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.progress( newDefer.notify )
											.done( newDefer.resolve )
											.fail( newDefer.reject );
									} else {
										newDefer[ tuple[ 0 ] + "With" ](
											this === promise ? newDefer.promise() : this,
											fn ? [ returned ] : arguments
										);
									}
								} );
							} );
							fns = null;
						} ).promise();
					},
	
					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};
	
			// Keep pipe for back-compat
			promise.pipe = promise.then;
	
			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 3 ];
	
				// promise[ done | fail | progress ] = list.add
				promise[ tuple[ 1 ] ] = list.add;
	
				// Handle state
				if ( stateString ) {
					list.add( function() {
	
						// state = [ resolved | rejected ]
						state = stateString;
	
					// [ reject_list | resolve_list ].disable; progress_list.lock
					}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
				}
	
				// deferred[ resolve | reject | notify ]
				deferred[ tuple[ 0 ] ] = function() {
					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? promise : this, arguments );
					return this;
				};
				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
			} );
	
			// Make the deferred a promise
			promise.promise( deferred );
	
			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}
	
			// All done!
			return deferred;
		},
	
		// Deferred helper
		when: function( subordinate /* , ..., subordinateN */ ) {
			var i = 0,
				resolveValues = slice.call( arguments ),
				length = resolveValues.length,
	
				// the count of uncompleted subordinates
				remaining = length !== 1 ||
					( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,
	
				// the master Deferred.
				// If resolveValues consist of only a single Deferred, just use that.
				deferred = remaining === 1 ? subordinate : jQuery.Deferred(),
	
				// Update function for both resolve and progress values
				updateFunc = function( i, contexts, values ) {
					return function( value ) {
						contexts[ i ] = this;
						values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( values === progressValues ) {
							deferred.notifyWith( contexts, values );
	
						} else if ( !( --remaining ) ) {
							deferred.resolveWith( contexts, values );
						}
					};
				},
	
				progressValues, progressContexts, resolveContexts;
	
			// add listeners to Deferred subordinates; treat others as resolved
			if ( length > 1 ) {
				progressValues = new Array( length );
				progressContexts = new Array( length );
				resolveContexts = new Array( length );
				for ( ; i < length; i++ ) {
					if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
						resolveValues[ i ].promise()
							.progress( updateFunc( i, progressContexts, progressValues ) )
							.done( updateFunc( i, resolveContexts, resolveValues ) )
							.fail( deferred.reject );
					} else {
						--remaining;
					}
				}
			}
	
			// if we're not waiting on anything, resolve the master
			if ( !remaining ) {
				deferred.resolveWith( resolveContexts, resolveValues );
			}
	
			return deferred.promise();
		}
	} );
	
	
	// The deferred used on DOM ready
	var readyList;
	
	jQuery.fn.ready = function( fn ) {
	
		// Add the callback
		jQuery.ready.promise().done( fn );
	
		return this;
	};
	
	jQuery.extend( {
	
		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,
	
		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,
	
		// Hold (or release) the ready event
		holdReady: function( hold ) {
			if ( hold ) {
				jQuery.readyWait++;
			} else {
				jQuery.ready( true );
			}
		},
	
		// Handle when the DOM is ready
		ready: function( wait ) {
	
			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}
	
			// Remember that the DOM is ready
			jQuery.isReady = true;
	
			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}
	
			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );
	
			// Trigger any bound ready events
			if ( jQuery.fn.triggerHandler ) {
				jQuery( document ).triggerHandler( "ready" );
				jQuery( document ).off( "ready" );
			}
		}
	} );
	
	/**
	 * Clean-up method for dom ready events
	 */
	function detach() {
		if ( document.addEventListener ) {
			document.removeEventListener( "DOMContentLoaded", completed );
			window.removeEventListener( "load", completed );
	
		} else {
			document.detachEvent( "onreadystatechange", completed );
			window.detachEvent( "onload", completed );
		}
	}
	
	/**
	 * The ready event handler and self cleanup method
	 */
	function completed() {
	
		// readyState === "complete" is good enough for us to call the dom ready in oldIE
		if ( document.addEventListener ||
			window.event.type === "load" ||
			document.readyState === "complete" ) {
	
			detach();
			jQuery.ready();
		}
	}
	
	jQuery.ready.promise = function( obj ) {
		if ( !readyList ) {
	
			readyList = jQuery.Deferred();
	
			// Catch cases where $(document).ready() is called
			// after the browser event has already occurred.
			// Support: IE6-10
			// Older IE sometimes signals "interactive" too soon
			if ( document.readyState === "complete" ||
				( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {
	
				// Handle it asynchronously to allow scripts the opportunity to delay ready
				window.setTimeout( jQuery.ready );
	
			// Standards-based browsers support DOMContentLoaded
			} else if ( document.addEventListener ) {
	
				// Use the handy event callback
				document.addEventListener( "DOMContentLoaded", completed );
	
				// A fallback to window.onload, that will always work
				window.addEventListener( "load", completed );
	
			// If IE event model is used
			} else {
	
				// Ensure firing before onload, maybe late but safe also for iframes
				document.attachEvent( "onreadystatechange", completed );
	
				// A fallback to window.onload, that will always work
				window.attachEvent( "onload", completed );
	
				// If IE and not a frame
				// continually check to see if the document is ready
				var top = false;
	
				try {
					top = window.frameElement == null && document.documentElement;
				} catch ( e ) {}
	
				if ( top && top.doScroll ) {
					( function doScrollCheck() {
						if ( !jQuery.isReady ) {
	
							try {
	
								// Use the trick by Diego Perini
								// http://javascript.nwbox.com/IEContentLoaded/
								top.doScroll( "left" );
							} catch ( e ) {
								return window.setTimeout( doScrollCheck, 50 );
							}
	
							// detach all dom ready events
							detach();
	
							// and execute any waiting functions
							jQuery.ready();
						}
					} )();
				}
			}
		}
		return readyList.promise( obj );
	};
	
	// Kick off the DOM ready check even if the user does not
	jQuery.ready.promise();
	
	
	
	
	// Support: IE<9
	// Iteration over object's inherited properties before its own
	var i;
	for ( i in jQuery( support ) ) {
		break;
	}
	support.ownFirst = i === "0";
	
	// Note: most support tests are defined in their respective modules.
	// false until the test is run
	support.inlineBlockNeedsLayout = false;
	
	// Execute ASAP in case we need to set body.style.zoom
	jQuery( function() {
	
		// Minified: var a,b,c,d
		var val, div, body, container;
	
		body = document.getElementsByTagName( "body" )[ 0 ];
		if ( !body || !body.style ) {
	
			// Return for frameset docs that don't have a body
			return;
		}
	
		// Setup
		div = document.createElement( "div" );
		container = document.createElement( "div" );
		container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
		body.appendChild( container ).appendChild( div );
	
		if ( typeof div.style.zoom !== "undefined" ) {
	
			// Support: IE<8
			// Check if natively block-level elements act like inline-block
			// elements when setting their display to 'inline' and giving
			// them layout
			div.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1";
	
			support.inlineBlockNeedsLayout = val = div.offsetWidth === 3;
			if ( val ) {
	
				// Prevent IE 6 from affecting layout for positioned elements #11048
				// Prevent IE from shrinking the body in IE 7 mode #12869
				// Support: IE<8
				body.style.zoom = 1;
			}
		}
	
		body.removeChild( container );
	} );
	
	
	( function() {
		var div = document.createElement( "div" );
	
		// Support: IE<9
		support.deleteExpando = true;
		try {
			delete div.test;
		} catch ( e ) {
			support.deleteExpando = false;
		}
	
		// Null elements to avoid leaks in IE.
		div = null;
	} )();
	var acceptData = function( elem ) {
		var noData = jQuery.noData[ ( elem.nodeName + " " ).toLowerCase() ],
			nodeType = +elem.nodeType || 1;
	
		// Do not set data on non-element DOM nodes because it will not be cleared (#8335).
		return nodeType !== 1 && nodeType !== 9 ?
			false :
	
			// Nodes accept data unless otherwise specified; rejection can be conditional
			!noData || noData !== true && elem.getAttribute( "classid" ) === noData;
	};
	
	
	
	
	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /([A-Z])/g;
	
	function dataAttr( elem, key, data ) {
	
		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
	
			var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();
	
			data = elem.getAttribute( name );
	
			if ( typeof data === "string" ) {
				try {
					data = data === "true" ? true :
						data === "false" ? false :
						data === "null" ? null :
	
						// Only convert to a number if it doesn't change the string
						+data + "" === data ? +data :
						rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
				} catch ( e ) {}
	
				// Make sure we set the data so it isn't changed later
				jQuery.data( elem, key, data );
	
			} else {
				data = undefined;
			}
		}
	
		return data;
	}
	
	// checks a cache object for emptiness
	function isEmptyDataObject( obj ) {
		var name;
		for ( name in obj ) {
	
			// if the public data object is empty, the private is still empty
			if ( name === "data" && jQuery.isEmptyObject( obj[ name ] ) ) {
				continue;
			}
			if ( name !== "toJSON" ) {
				return false;
			}
		}
	
		return true;
	}
	
	function internalData( elem, name, data, pvt /* Internal Use Only */ ) {
		if ( !acceptData( elem ) ) {
			return;
		}
	
		var ret, thisCache,
			internalKey = jQuery.expando,
	
			// We have to handle DOM nodes and JS objects differently because IE6-7
			// can't GC object references properly across the DOM-JS boundary
			isNode = elem.nodeType,
	
			// Only DOM nodes need the global jQuery cache; JS object data is
			// attached directly to the object so GC can occur automatically
			cache = isNode ? jQuery.cache : elem,
	
			// Only defining an ID for JS objects if its cache already exists allows
			// the code to shortcut on the same path as a DOM node with no cache
			id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;
	
		// Avoid doing any more work than we need to when trying to get data on an
		// object that has no data at all
		if ( ( !id || !cache[ id ] || ( !pvt && !cache[ id ].data ) ) &&
			data === undefined && typeof name === "string" ) {
			return;
		}
	
		if ( !id ) {
	
			// Only DOM nodes need a new unique ID for each element since their data
			// ends up in the global cache
			if ( isNode ) {
				id = elem[ internalKey ] = deletedIds.pop() || jQuery.guid++;
			} else {
				id = internalKey;
			}
		}
	
		if ( !cache[ id ] ) {
	
			// Avoid exposing jQuery metadata on plain JS objects when the object
			// is serialized using JSON.stringify
			cache[ id ] = isNode ? {} : { toJSON: jQuery.noop };
		}
	
		// An object can be passed to jQuery.data instead of a key/value pair; this gets
		// shallow copied over onto the existing cache
		if ( typeof name === "object" || typeof name === "function" ) {
			if ( pvt ) {
				cache[ id ] = jQuery.extend( cache[ id ], name );
			} else {
				cache[ id ].data = jQuery.extend( cache[ id ].data, name );
			}
		}
	
		thisCache = cache[ id ];
	
		// jQuery data() is stored in a separate object inside the object's internal data
		// cache in order to avoid key collisions between internal data and user-defined
		// data.
		if ( !pvt ) {
			if ( !thisCache.data ) {
				thisCache.data = {};
			}
	
			thisCache = thisCache.data;
		}
	
		if ( data !== undefined ) {
			thisCache[ jQuery.camelCase( name ) ] = data;
		}
	
		// Check for both converted-to-camel and non-converted data property names
		// If a data property was specified
		if ( typeof name === "string" ) {
	
			// First Try to find as-is property data
			ret = thisCache[ name ];
	
			// Test for null|undefined property data
			if ( ret == null ) {
	
				// Try to find the camelCased property
				ret = thisCache[ jQuery.camelCase( name ) ];
			}
		} else {
			ret = thisCache;
		}
	
		return ret;
	}
	
	function internalRemoveData( elem, name, pvt ) {
		if ( !acceptData( elem ) ) {
			return;
		}
	
		var thisCache, i,
			isNode = elem.nodeType,
	
			// See jQuery.data for more information
			cache = isNode ? jQuery.cache : elem,
			id = isNode ? elem[ jQuery.expando ] : jQuery.expando;
	
		// If there is already no cache entry for this object, there is no
		// purpose in continuing
		if ( !cache[ id ] ) {
			return;
		}
	
		if ( name ) {
	
			thisCache = pvt ? cache[ id ] : cache[ id ].data;
	
			if ( thisCache ) {
	
				// Support array or space separated string names for data keys
				if ( !jQuery.isArray( name ) ) {
	
					// try the string as a key before any manipulation
					if ( name in thisCache ) {
						name = [ name ];
					} else {
	
						// split the camel cased version by spaces unless a key with the spaces exists
						name = jQuery.camelCase( name );
						if ( name in thisCache ) {
							name = [ name ];
						} else {
							name = name.split( " " );
						}
					}
				} else {
	
					// If "name" is an array of keys...
					// When data is initially created, via ("key", "val") signature,
					// keys will be converted to camelCase.
					// Since there is no way to tell _how_ a key was added, remove
					// both plain key and camelCase key. #12786
					// This will only penalize the array argument path.
					name = name.concat( jQuery.map( name, jQuery.camelCase ) );
				}
	
				i = name.length;
				while ( i-- ) {
					delete thisCache[ name[ i ] ];
				}
	
				// If there is no data left in the cache, we want to continue
				// and let the cache object itself get destroyed
				if ( pvt ? !isEmptyDataObject( thisCache ) : !jQuery.isEmptyObject( thisCache ) ) {
					return;
				}
			}
		}
	
		// See jQuery.data for more information
		if ( !pvt ) {
			delete cache[ id ].data;
	
			// Don't destroy the parent cache unless the internal data object
			// had been the only thing left in it
			if ( !isEmptyDataObject( cache[ id ] ) ) {
				return;
			}
		}
	
		// Destroy the cache
		if ( isNode ) {
			jQuery.cleanData( [ elem ], true );
	
		// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
		/* jshint eqeqeq: false */
		} else if ( support.deleteExpando || cache != cache.window ) {
			/* jshint eqeqeq: true */
			delete cache[ id ];
	
		// When all else fails, undefined
		} else {
			cache[ id ] = undefined;
		}
	}
	
	jQuery.extend( {
		cache: {},
	
		// The following elements (space-suffixed to avoid Object.prototype collisions)
		// throw uncatchable exceptions if you attempt to set expando properties
		noData: {
			"applet ": true,
			"embed ": true,
	
			// ...but Flash objects (which have this classid) *can* handle expandos
			"object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
		},
	
		hasData: function( elem ) {
			elem = elem.nodeType ? jQuery.cache[ elem[ jQuery.expando ] ] : elem[ jQuery.expando ];
			return !!elem && !isEmptyDataObject( elem );
		},
	
		data: function( elem, name, data ) {
			return internalData( elem, name, data );
		},
	
		removeData: function( elem, name ) {
			return internalRemoveData( elem, name );
		},
	
		// For internal use only.
		_data: function( elem, name, data ) {
			return internalData( elem, name, data, true );
		},
	
		_removeData: function( elem, name ) {
			return internalRemoveData( elem, name, true );
		}
	} );
	
	jQuery.fn.extend( {
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;
	
			// Special expections of .data basically thwart jQuery.access,
			// so implement the relevant behavior ourselves
	
			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = jQuery.data( elem );
	
					if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {
	
							// Support: IE11+
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = jQuery.camelCase( name.slice( 5 ) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						jQuery._data( elem, "parsedAttrs", true );
					}
				}
	
				return data;
			}
	
			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each( function() {
					jQuery.data( this, key );
				} );
			}
	
			return arguments.length > 1 ?
	
				// Sets one value
				this.each( function() {
					jQuery.data( this, key, value );
				} ) :
	
				// Gets one value
				// Try to fetch any internally stored data first
				elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : undefined;
		},
	
		removeData: function( key ) {
			return this.each( function() {
				jQuery.removeData( this, key );
			} );
		}
	} );
	
	
	jQuery.extend( {
		queue: function( elem, type, data ) {
			var queue;
	
			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = jQuery._data( elem, type );
	
				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || jQuery.isArray( data ) ) {
						queue = jQuery._data( elem, type, jQuery.makeArray( data ) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},
	
		dequeue: function( elem, type ) {
			type = type || "fx";
	
			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};
	
			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}
	
			if ( fn ) {
	
				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}
	
				// clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}
	
			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},
	
		// not intended for public consumption - generates a queueHooks object,
		// or returns the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return jQuery._data( elem, key ) || jQuery._data( elem, key, {
				empty: jQuery.Callbacks( "once memory" ).add( function() {
					jQuery._removeData( elem, type + "queue" );
					jQuery._removeData( elem, key );
				} )
			} );
		}
	} );
	
	jQuery.fn.extend( {
		queue: function( type, data ) {
			var setter = 2;
	
			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}
	
			if ( arguments.length < setter ) {
				return jQuery.queue( this[ 0 ], type );
			}
	
			return data === undefined ?
				this :
				this.each( function() {
					var queue = jQuery.queue( this, type, data );
	
					// ensure a hooks for this queue
					jQuery._queueHooks( this, type );
	
					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				} );
		},
		dequeue: function( type ) {
			return this.each( function() {
				jQuery.dequeue( this, type );
			} );
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},
	
		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};
	
			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";
	
			while ( i-- ) {
				tmp = jQuery._data( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	} );
	
	
	( function() {
		var shrinkWrapBlocksVal;
	
		support.shrinkWrapBlocks = function() {
			if ( shrinkWrapBlocksVal != null ) {
				return shrinkWrapBlocksVal;
			}
	
			// Will be changed later if needed.
			shrinkWrapBlocksVal = false;
	
			// Minified: var b,c,d
			var div, body, container;
	
			body = document.getElementsByTagName( "body" )[ 0 ];
			if ( !body || !body.style ) {
	
				// Test fired too early or in an unsupported environment, exit.
				return;
			}
	
			// Setup
			div = document.createElement( "div" );
			container = document.createElement( "div" );
			container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
			body.appendChild( container ).appendChild( div );
	
			// Support: IE6
			// Check if elements with layout shrink-wrap their children
			if ( typeof div.style.zoom !== "undefined" ) {
	
				// Reset CSS: box-sizing; display; margin; border
				div.style.cssText =
	
					// Support: Firefox<29, Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
					"box-sizing:content-box;display:block;margin:0;border:0;" +
					"padding:1px;width:1px;zoom:1";
				div.appendChild( document.createElement( "div" ) ).style.width = "5px";
				shrinkWrapBlocksVal = div.offsetWidth !== 3;
			}
	
			body.removeChild( container );
	
			return shrinkWrapBlocksVal;
		};
	
	} )();
	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;
	
	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );
	
	
	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];
	
	var isHidden = function( elem, el ) {
	
			// isHidden might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;
			return jQuery.css( elem, "display" ) === "none" ||
				!jQuery.contains( elem.ownerDocument, elem );
		};
	
	
	
	function adjustCSS( elem, prop, valueParts, tween ) {
		var adjusted,
			scale = 1,
			maxIterations = 20,
			currentValue = tween ?
				function() { return tween.cur(); } :
				function() { return jQuery.css( elem, prop, "" ); },
			initial = currentValue(),
			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),
	
			// Starting value computation is required for potential unit mismatches
			initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
				rcssNum.exec( jQuery.css( elem, prop ) );
	
		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {
	
			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[ 3 ];
	
			// Make sure we update the tween properties later on
			valueParts = valueParts || [];
	
			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;
	
			do {
	
				// If previous iteration zeroed out, double until we get *something*.
				// Use string for doubling so we don't accidentally see scale as unchanged below
				scale = scale || ".5";
	
				// Adjust and apply
				initialInUnit = initialInUnit / scale;
				jQuery.style( elem, prop, initialInUnit + unit );
	
			// Update scale, tolerating zero or NaN from tween.cur()
			// Break the loop if scale is unchanged or perfect, or if we've just had enough.
			} while (
				scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
			);
		}
	
		if ( valueParts ) {
			initialInUnit = +initialInUnit || +initial || 0;
	
			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[ 1 ] ?
				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
				+valueParts[ 2 ];
			if ( tween ) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}
	
	
	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			length = elems.length,
			bulk = key == null;
	
		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				access( elems, fn, i, key[ i ], true, emptyGet, raw );
			}
	
		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;
	
			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}
	
			if ( bulk ) {
	
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;
	
				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}
	
			if ( fn ) {
				for ( ; i < length; i++ ) {
					fn(
						elems[ i ],
						key,
						raw ? value : value.call( elems[ i ], i, fn( elems[ i ], key ) )
					);
				}
			}
		}
	
		return chainable ?
			elems :
	
			// Gets
			bulk ?
				fn.call( elems ) :
				length ? fn( elems[ 0 ], key ) : emptyGet;
	};
	var rcheckableType = ( /^(?:checkbox|radio)$/i );
	
	var rtagName = ( /<([\w:-]+)/ );
	
	var rscriptType = ( /^$|\/(?:java|ecma)script/i );
	
	var rleadingWhitespace = ( /^\s+/ );
	
	var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|" +
			"details|dialog|figcaption|figure|footer|header|hgroup|main|" +
			"mark|meter|nav|output|picture|progress|section|summary|template|time|video";
	
	
	
	function createSafeFragment( document ) {
		var list = nodeNames.split( "|" ),
			safeFrag = document.createDocumentFragment();
	
		if ( safeFrag.createElement ) {
			while ( list.length ) {
				safeFrag.createElement(
					list.pop()
				);
			}
		}
		return safeFrag;
	}
	
	
	( function() {
		var div = document.createElement( "div" ),
			fragment = document.createDocumentFragment(),
			input = document.createElement( "input" );
	
		// Setup
		div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
	
		// IE strips leading whitespace when .innerHTML is used
		support.leadingWhitespace = div.firstChild.nodeType === 3;
	
		// Make sure that tbody elements aren't automatically inserted
		// IE will insert them into empty tables
		support.tbody = !div.getElementsByTagName( "tbody" ).length;
	
		// Make sure that link elements get serialized correctly by innerHTML
		// This requires a wrapper element in IE
		support.htmlSerialize = !!div.getElementsByTagName( "link" ).length;
	
		// Makes sure cloning an html5 element does not cause problems
		// Where outerHTML is undefined, this still works
		support.html5Clone =
			document.createElement( "nav" ).cloneNode( true ).outerHTML !== "<:nav></:nav>";
	
		// Check if a disconnected checkbox will retain its checked
		// value of true after appended to the DOM (IE6/7)
		input.type = "checkbox";
		input.checked = true;
		fragment.appendChild( input );
		support.appendChecked = input.checked;
	
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		// Support: IE6-IE11+
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
	
		// #11217 - WebKit loses check when the name is after the checked attribute
		fragment.appendChild( div );
	
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input = document.createElement( "input" );
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );
	
		div.appendChild( input );
	
		// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
		// old WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;
	
		// Support: IE<9
		// Cloned elements keep attachEvent handlers, we use addEventListener on IE9+
		support.noCloneEvent = !!div.addEventListener;
	
		// Support: IE<9
		// Since attributes and properties are the same in IE,
		// cleanData must set properties to undefined rather than use removeAttribute
		div[ jQuery.expando ] = 1;
		support.attributes = !div.getAttribute( jQuery.expando );
	} )();
	
	
	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		area: [ 1, "<map>", "</map>" ],
	
		// Support: IE8
		param: [ 1, "<object>", "</object>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
	
		// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
		// unless wrapped in a div with non-breaking characters in front of it.
		_default: support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>" ]
	};
	
	// Support: IE8-IE9
	wrapMap.optgroup = wrapMap.option;
	
	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;
	
	
	function getAll( context, tag ) {
		var elems, elem,
			i = 0,
			found = typeof context.getElementsByTagName !== "undefined" ?
				context.getElementsByTagName( tag || "*" ) :
				typeof context.querySelectorAll !== "undefined" ?
					context.querySelectorAll( tag || "*" ) :
					undefined;
	
		if ( !found ) {
			for ( found = [], elems = context.childNodes || context;
				( elem = elems[ i ] ) != null;
				i++
			) {
				if ( !tag || jQuery.nodeName( elem, tag ) ) {
					found.push( elem );
				} else {
					jQuery.merge( found, getAll( elem, tag ) );
				}
			}
		}
	
		return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
			jQuery.merge( [ context ], found ) :
			found;
	}
	
	
	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var elem,
			i = 0;
		for ( ; ( elem = elems[ i ] ) != null; i++ ) {
			jQuery._data(
				elem,
				"globalEval",
				!refElements || jQuery._data( refElements[ i ], "globalEval" )
			);
		}
	}
	
	
	var rhtml = /<|&#?\w+;/,
		rtbody = /<tbody/i;
	
	function fixDefaultChecked( elem ) {
		if ( rcheckableType.test( elem.type ) ) {
			elem.defaultChecked = elem.checked;
		}
	}
	
	function buildFragment( elems, context, scripts, selection, ignored ) {
		var j, elem, contains,
			tmp, tag, tbody, wrap,
			l = elems.length,
	
			// Ensure a safe fragment
			safe = createSafeFragment( context ),
	
			nodes = [],
			i = 0;
	
		for ( ; i < l; i++ ) {
			elem = elems[ i ];
	
			if ( elem || elem === 0 ) {
	
				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );
	
				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );
	
				// Convert html into DOM nodes
				} else {
					tmp = tmp || safe.appendChild( context.createElement( "div" ) );
	
					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
	
					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];
	
					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}
	
					// Manually add leading whitespace removed by IE
					if ( !support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
						nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[ 0 ] ) );
					}
	
					// Remove IE's autoinserted <tbody> from table fragments
					if ( !support.tbody ) {
	
						// String was a <table>, *may* have spurious <tbody>
						elem = tag === "table" && !rtbody.test( elem ) ?
							tmp.firstChild :
	
							// String was a bare <thead> or <tfoot>
							wrap[ 1 ] === "<table>" && !rtbody.test( elem ) ?
								tmp :
								0;
	
						j = elem && elem.childNodes.length;
						while ( j-- ) {
							if ( jQuery.nodeName( ( tbody = elem.childNodes[ j ] ), "tbody" ) &&
								!tbody.childNodes.length ) {
	
								elem.removeChild( tbody );
							}
						}
					}
	
					jQuery.merge( nodes, tmp.childNodes );
	
					// Fix #12392 for WebKit and IE > 9
					tmp.textContent = "";
	
					// Fix #12392 for oldIE
					while ( tmp.firstChild ) {
						tmp.removeChild( tmp.firstChild );
					}
	
					// Remember the top-level container for proper cleanup
					tmp = safe.lastChild;
				}
			}
		}
	
		// Fix #11356: Clear elements from fragment
		if ( tmp ) {
			safe.removeChild( tmp );
		}
	
		// Reset defaultChecked for any radios and checkboxes
		// about to be appended to the DOM in IE 6/7 (#8060)
		if ( !support.appendChecked ) {
			jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
		}
	
		i = 0;
		while ( ( elem = nodes[ i++ ] ) ) {
	
			// Skip elements already in the context collection (trac-4087)
			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
				if ( ignored ) {
					ignored.push( elem );
				}
	
				continue;
			}
	
			contains = jQuery.contains( elem.ownerDocument, elem );
	
			// Append to fragment
			tmp = getAll( safe.appendChild( elem ), "script" );
	
			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}
	
			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( ( elem = tmp[ j++ ] ) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}
	
		tmp = null;
	
		return safe;
	}
	
	
	( function() {
		var i, eventName,
			div = document.createElement( "div" );
	
		// Support: IE<9 (lack submit/change bubble), Firefox (lack focus(in | out) events)
		for ( i in { submit: true, change: true, focusin: true } ) {
			eventName = "on" + i;
	
			if ( !( support[ i ] = eventName in window ) ) {
	
				// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
				div.setAttribute( eventName, "t" );
				support[ i ] = div.attributes[ eventName ].expando === false;
			}
		}
	
		// Null elements to avoid leaks in IE.
		div = null;
	} )();
	
	
	var rformElems = /^(?:input|select|textarea)$/i,
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
	
	function returnTrue() {
		return true;
	}
	
	function returnFalse() {
		return false;
	}
	
	// Support: IE9
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}
	
	function on( elem, types, selector, data, fn, one ) {
		var origFn, type;
	
		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
	
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
	
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				on( elem, type, selector, data, types[ type ], one );
			}
			return elem;
		}
	
		if ( data == null && fn == null ) {
	
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
	
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
	
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return elem;
		}
	
		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
	
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
	
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return elem.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		} );
	}
	
	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {
	
		global: {},
	
		add: function( elem, types, handler, data, selector ) {
			var tmp, events, t, handleObjIn,
				special, eventHandle, handleObj,
				handlers, type, namespaces, origType,
				elemData = jQuery._data( elem );
	
			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}
	
			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}
	
			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}
	
			// Init the element's event structure and main handler, if this is the first
			if ( !( events = elemData.events ) ) {
				events = elemData.events = {};
			}
			if ( !( eventHandle = elemData.handle ) ) {
				eventHandle = elemData.handle = function( e ) {
	
					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" &&
						( !e || jQuery.event.triggered !== e.type ) ?
						jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
						undefined;
				};
	
				// Add elem as a property of the handle fn to prevent a memory leak
				// with IE non-native events
				eventHandle.elem = elem;
			}
	
			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();
	
				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}
	
				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};
	
				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;
	
				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};
	
				// handleObj is passed to all event handlers
				handleObj = jQuery.extend( {
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join( "." )
				}, handleObjIn );
	
				// Init the event handler queue if we're the first
				if ( !( handlers = events[ type ] ) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;
	
					// Only use addEventListener/attachEvent if the special events handler returns false
					if ( !special.setup ||
						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
	
						// Bind the global event handler to the element
						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle, false );
	
						} else if ( elem.attachEvent ) {
							elem.attachEvent( "on" + type, eventHandle );
						}
					}
				}
	
				if ( special.add ) {
					special.add.call( elem, handleObj );
	
					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}
	
				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}
	
				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}
	
			// Nullify elem to prevent memory leaks in IE
			elem = null;
		},
	
		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {
			var j, handleObj, tmp,
				origCount, t, events,
				special, handlers, type,
				namespaces, origType,
				elemData = jQuery.hasData( elem ) && jQuery._data( elem );
	
			if ( !elemData || !( events = elemData.events ) ) {
				return;
			}
	
			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();
	
				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}
	
				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[ 2 ] &&
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );
	
				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];
	
					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector ||
							selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );
	
						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}
	
				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown ||
						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
	
						jQuery.removeEvent( elem, type, elemData.handle );
					}
	
					delete events[ type ];
				}
			}
	
			// Remove the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				delete elemData.handle;
	
				// removeData also checks for emptiness and clears the expando if empty
				// so use it instead of delete
				jQuery._removeData( elem, "events" );
			}
		},
	
		trigger: function( event, data, elem, onlyHandlers ) {
			var handle, ontype, cur,
				bubbleType, special, tmp, i,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];
	
			cur = tmp = elem = elem || document;
	
			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}
	
			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}
	
			if ( type.indexOf( "." ) > -1 ) {
	
				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split( "." );
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf( ":" ) < 0 && "on" + type;
	
			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );
	
			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join( "." );
			event.rnamespace = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
				null;
	
			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}
	
			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );
	
			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}
	
			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {
	
				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}
	
				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === ( elem.ownerDocument || document ) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}
	
			// Fire handlers on the event path
			i = 0;
			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
	
				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;
	
				// jQuery handler
				handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] &&
					jQuery._data( cur, "handle" );
	
				if ( handle ) {
					handle.apply( cur, data );
				}
	
				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;
	
			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {
	
				if (
					( !special._default ||
					 special._default.apply( eventPath.pop(), data ) === false
					) && acceptData( elem )
				) {
	
					// Call a native DOM method on the target with the same name name as the event.
					// Can't use an .isFunction() check here because IE6/7 fails that test.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {
	
						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];
	
						if ( tmp ) {
							elem[ ontype ] = null;
						}
	
						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						try {
							elem[ type ]();
						} catch ( e ) {
	
							// IE<9 dies on focus/blur to hidden element (#1486,#12518)
							// only reproducible on winXP IE8 native, not IE9 in IE8 mode
						}
						jQuery.event.triggered = undefined;
	
						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}
	
			return event.result;
		},
	
		dispatch: function( event ) {
	
			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( event );
	
			var i, j, ret, matched, handleObj,
				handlerQueue = [],
				args = slice.call( arguments ),
				handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};
	
			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[ 0 ] = event;
			event.delegateTarget = this;
	
			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}
	
			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );
	
			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;
	
				j = 0;
				while ( ( handleObj = matched.handlers[ j++ ] ) &&
					!event.isImmediatePropagationStopped() ) {
	
					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {
	
						event.handleObj = handleObj;
						event.data = handleObj.data;
	
						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
							handleObj.handler ).apply( matched.elem, args );
	
						if ( ret !== undefined ) {
							if ( ( event.result = ret ) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}
	
			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}
	
			return event.result;
		},
	
		handlers: function( event, handlers ) {
			var i, matches, sel, handleObj,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;
	
			// Support (at least): Chrome, IE9
			// Find delegate handlers
			// Black-hole SVG <use> instance trees (#13180)
			//
			// Support: Firefox<=42+
			// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
			if ( delegateCount && cur.nodeType &&
				( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {
	
				/* jshint eqeqeq: false */
				for ( ; cur != this; cur = cur.parentNode || this ) {
					/* jshint eqeqeq: true */
	
					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
						matches = [];
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];
	
							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";
	
							if ( matches[ sel ] === undefined ) {
								matches[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) > -1 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matches[ sel ] ) {
								matches.push( handleObj );
							}
						}
						if ( matches.length ) {
							handlerQueue.push( { elem: cur, handlers: matches } );
						}
					}
				}
			}
	
			// Add the remaining (directly-bound) handlers
			if ( delegateCount < handlers.length ) {
				handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
			}
	
			return handlerQueue;
		},
	
		fix: function( event ) {
			if ( event[ jQuery.expando ] ) {
				return event;
			}
	
			// Create a writable copy of the event object and normalize some properties
			var i, prop, copy,
				type = event.type,
				originalEvent = event,
				fixHook = this.fixHooks[ type ];
	
			if ( !fixHook ) {
				this.fixHooks[ type ] = fixHook =
					rmouseEvent.test( type ) ? this.mouseHooks :
					rkeyEvent.test( type ) ? this.keyHooks :
					{};
			}
			copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;
	
			event = new jQuery.Event( originalEvent );
	
			i = copy.length;
			while ( i-- ) {
				prop = copy[ i ];
				event[ prop ] = originalEvent[ prop ];
			}
	
			// Support: IE<9
			// Fix target property (#1925)
			if ( !event.target ) {
				event.target = originalEvent.srcElement || document;
			}
	
			// Support: Safari 6-8+
			// Target should not be a text node (#504, #13143)
			if ( event.target.nodeType === 3 ) {
				event.target = event.target.parentNode;
			}
	
			// Support: IE<9
			// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
			event.metaKey = !!event.metaKey;
	
			return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
		},
	
		// Includes some event props shared by KeyEvent and MouseEvent
		props: ( "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +
			"metaKey relatedTarget shiftKey target timeStamp view which" ).split( " " ),
	
		fixHooks: {},
	
		keyHooks: {
			props: "char charCode key keyCode".split( " " ),
			filter: function( event, original ) {
	
				// Add which for key events
				if ( event.which == null ) {
					event.which = original.charCode != null ? original.charCode : original.keyCode;
				}
	
				return event;
			}
		},
	
		mouseHooks: {
			props: ( "button buttons clientX clientY fromElement offsetX offsetY " +
				"pageX pageY screenX screenY toElement" ).split( " " ),
			filter: function( event, original ) {
				var body, eventDoc, doc,
					button = original.button,
					fromElement = original.fromElement;
	
				// Calculate pageX/Y if missing and clientX/Y available
				if ( event.pageX == null && original.clientX != null ) {
					eventDoc = event.target.ownerDocument || document;
					doc = eventDoc.documentElement;
					body = eventDoc.body;
	
					event.pageX = original.clientX +
						( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -
						( doc && doc.clientLeft || body && body.clientLeft || 0 );
					event.pageY = original.clientY +
						( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -
						( doc && doc.clientTop  || body && body.clientTop  || 0 );
				}
	
				// Add relatedTarget, if necessary
				if ( !event.relatedTarget && fromElement ) {
					event.relatedTarget = fromElement === event.target ?
						original.toElement :
						fromElement;
				}
	
				// Add which for click: 1 === left; 2 === middle; 3 === right
				// Note: button is not normalized, so don't use it
				if ( !event.which && button !== undefined ) {
					event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
				}
	
				return event;
			}
		},
	
		special: {
			load: {
	
				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {
	
				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						try {
							this.focus();
							return false;
						} catch ( e ) {
	
							// Support: IE<9
							// If we error on focus to hidden element (#1486, #12518),
							// let .trigger() run the handlers
						}
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {
	
				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
						this.click();
						return false;
					}
				},
	
				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return jQuery.nodeName( event.target, "a" );
				}
			},
	
			beforeunload: {
				postDispatch: function( event ) {
	
					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		},
	
		// Piggyback on a donor event to simulate a different one
		simulate: function( type, elem, event ) {
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true
	
					// Previously, `originalEvent: {}` was set here, so stopPropagation call
					// would not be triggered on donor event, since in our own
					// jQuery.event.stopPropagation function we had a check for existence of
					// originalEvent.stopPropagation method, so, consequently it would be a noop.
					//
					// Guard for simulated events was moved to jQuery.event.stopPropagation function
					// since `originalEvent` should point to the original event for the
					// constancy with other events and for more focused logic
				}
			);
	
			jQuery.event.trigger( e, null, elem );
	
			if ( e.isDefaultPrevented() ) {
				event.preventDefault();
			}
		}
	};
	
	jQuery.removeEvent = document.removeEventListener ?
		function( elem, type, handle ) {
	
			// This "if" is needed for plain objects
			if ( elem.removeEventListener ) {
				elem.removeEventListener( type, handle );
			}
		} :
		function( elem, type, handle ) {
			var name = "on" + type;
	
			if ( elem.detachEvent ) {
	
				// #8545, #7054, preventing memory leaks for custom events in IE6-8
				// detachEvent needed property on element, by name of that event,
				// to properly expose it to GC
				if ( typeof elem[ name ] === "undefined" ) {
					elem[ name ] = null;
				}
	
				elem.detachEvent( name, handle );
			}
		};
	
	jQuery.Event = function( src, props ) {
	
		// Allow instantiation without the 'new' keyword
		if ( !( this instanceof jQuery.Event ) ) {
			return new jQuery.Event( src, props );
		}
	
		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;
	
			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&
	
					// Support: IE < 9, Android < 4.0
					src.returnValue === false ?
				returnTrue :
				returnFalse;
	
		// Event type
		} else {
			this.type = src;
		}
	
		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}
	
		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();
	
		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};
	
	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,
	
		preventDefault: function() {
			var e = this.originalEvent;
	
			this.isDefaultPrevented = returnTrue;
			if ( !e ) {
				return;
			}
	
			// If preventDefault exists, run it on the original event
			if ( e.preventDefault ) {
				e.preventDefault();
	
			// Support: IE
			// Otherwise set the returnValue property of the original event to false
			} else {
				e.returnValue = false;
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;
	
			this.isPropagationStopped = returnTrue;
	
			if ( !e || this.isSimulated ) {
				return;
			}
	
			// If stopPropagation exists, run it on the original event
			if ( e.stopPropagation ) {
				e.stopPropagation();
			}
	
			// Support: IE
			// Set the cancelBubble property of the original event to true
			e.cancelBubble = true;
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;
	
			this.isImmediatePropagationStopped = returnTrue;
	
			if ( e && e.stopImmediatePropagation ) {
				e.stopImmediatePropagation();
			}
	
			this.stopPropagation();
		}
	};
	
	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://code.google.com/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each( {
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,
	
			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;
	
				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	} );
	
	// IE submit delegation
	if ( !support.submit ) {
	
		jQuery.event.special.submit = {
			setup: function() {
	
				// Only need this for delegated form submit events
				if ( jQuery.nodeName( this, "form" ) ) {
					return false;
				}
	
				// Lazy-add a submit handler when a descendant form may potentially be submitted
				jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
	
					// Node name check avoids a VML-related crash in IE (#9807)
					var elem = e.target,
						form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ?
	
							// Support: IE <=8
							// We use jQuery.prop instead of elem.form
							// to allow fixing the IE8 delegated submit issue (gh-2332)
							// by 3rd party polyfills/workarounds.
							jQuery.prop( elem, "form" ) :
							undefined;
	
					if ( form && !jQuery._data( form, "submit" ) ) {
						jQuery.event.add( form, "submit._submit", function( event ) {
							event._submitBubble = true;
						} );
						jQuery._data( form, "submit", true );
					}
				} );
	
				// return undefined since we don't need an event listener
			},
	
			postDispatch: function( event ) {
	
				// If form was submitted by the user, bubble the event up the tree
				if ( event._submitBubble ) {
					delete event._submitBubble;
					if ( this.parentNode && !event.isTrigger ) {
						jQuery.event.simulate( "submit", this.parentNode, event );
					}
				}
			},
	
			teardown: function() {
	
				// Only need this for delegated form submit events
				if ( jQuery.nodeName( this, "form" ) ) {
					return false;
				}
	
				// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
				jQuery.event.remove( this, "._submit" );
			}
		};
	}
	
	// IE change delegation and checkbox/radio fix
	if ( !support.change ) {
	
		jQuery.event.special.change = {
	
			setup: function() {
	
				if ( rformElems.test( this.nodeName ) ) {
	
					// IE doesn't fire change on a check/radio until blur; trigger it on click
					// after a propertychange. Eat the blur-change in special.change.handle.
					// This still fires onchange a second time for check/radio after blur.
					if ( this.type === "checkbox" || this.type === "radio" ) {
						jQuery.event.add( this, "propertychange._change", function( event ) {
							if ( event.originalEvent.propertyName === "checked" ) {
								this._justChanged = true;
							}
						} );
						jQuery.event.add( this, "click._change", function( event ) {
							if ( this._justChanged && !event.isTrigger ) {
								this._justChanged = false;
							}
	
							// Allow triggered, simulated change events (#11500)
							jQuery.event.simulate( "change", this, event );
						} );
					}
					return false;
				}
	
				// Delegated event; lazy-add a change handler on descendant inputs
				jQuery.event.add( this, "beforeactivate._change", function( e ) {
					var elem = e.target;
	
					if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "change" ) ) {
						jQuery.event.add( elem, "change._change", function( event ) {
							if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
								jQuery.event.simulate( "change", this.parentNode, event );
							}
						} );
						jQuery._data( elem, "change", true );
					}
				} );
			},
	
			handle: function( event ) {
				var elem = event.target;
	
				// Swallow native change events from checkbox/radio, we already triggered them above
				if ( this !== elem || event.isSimulated || event.isTrigger ||
					( elem.type !== "radio" && elem.type !== "checkbox" ) ) {
	
					return event.handleObj.handler.apply( this, arguments );
				}
			},
	
			teardown: function() {
				jQuery.event.remove( this, "._change" );
	
				return !rformElems.test( this.nodeName );
			}
		};
	}
	
	// Support: Firefox
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome, Safari
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
	if ( !support.focusin ) {
		jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {
	
			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
			};
	
			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = jQuery._data( doc, fix );
	
					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					jQuery._data( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = jQuery._data( doc, fix ) - 1;
	
					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						jQuery._removeData( doc, fix );
					} else {
						jQuery._data( doc, fix, attaches );
					}
				}
			};
		} );
	}
	
	jQuery.fn.extend( {
	
		on: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn );
		},
		one: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {
	
				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ?
						handleObj.origType + "." + handleObj.namespace :
						handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {
	
				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {
	
				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each( function() {
				jQuery.event.remove( this, types, fn, selector );
			} );
		},
	
		trigger: function( type, data ) {
			return this.each( function() {
				jQuery.event.trigger( type, data, this );
			} );
		},
		triggerHandler: function( type, data ) {
			var elem = this[ 0 ];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	} );
	
	
	var rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
		rnoshimcache = new RegExp( "<(?:" + nodeNames + ")[\\s/>]", "i" ),
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,
	
		// Support: IE 10-11, Edge 10240+
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,
	
		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptTypeMasked = /^true\/(.*)/,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
		safeFragment = createSafeFragment( document ),
		fragmentDiv = safeFragment.appendChild( document.createElement( "div" ) );
	
	// Support: IE<8
	// Manipulating tables requires a tbody
	function manipulationTarget( elem, content ) {
		return jQuery.nodeName( elem, "table" ) &&
			jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?
	
			elem.getElementsByTagName( "tbody" )[ 0 ] ||
				elem.appendChild( elem.ownerDocument.createElement( "tbody" ) ) :
			elem;
	}
	
	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = ( jQuery.find.attr( elem, "type" ) !== null ) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		var match = rscriptTypeMasked.exec( elem.type );
		if ( match ) {
			elem.type = match[ 1 ];
		} else {
			elem.removeAttribute( "type" );
		}
		return elem;
	}
	
	function cloneCopyEvent( src, dest ) {
		if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
			return;
		}
	
		var type, i, l,
			oldData = jQuery._data( src ),
			curData = jQuery._data( dest, oldData ),
			events = oldData.events;
	
		if ( events ) {
			delete curData.handle;
			curData.events = {};
	
			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	
		// make the cloned public data object a copy from the original
		if ( curData.data ) {
			curData.data = jQuery.extend( {}, curData.data );
		}
	}
	
	function fixCloneNodeIssues( src, dest ) {
		var nodeName, e, data;
	
		// We do not need to do anything for non-Elements
		if ( dest.nodeType !== 1 ) {
			return;
		}
	
		nodeName = dest.nodeName.toLowerCase();
	
		// IE6-8 copies events bound via attachEvent when using cloneNode.
		if ( !support.noCloneEvent && dest[ jQuery.expando ] ) {
			data = jQuery._data( dest );
	
			for ( e in data.events ) {
				jQuery.removeEvent( dest, e, data.handle );
			}
	
			// Event data gets referenced instead of copied if the expando gets copied too
			dest.removeAttribute( jQuery.expando );
		}
	
		// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
		if ( nodeName === "script" && dest.text !== src.text ) {
			disableScript( dest ).text = src.text;
			restoreScript( dest );
	
		// IE6-10 improperly clones children of object elements using classid.
		// IE10 throws NoModificationAllowedError if parent is null, #12132.
		} else if ( nodeName === "object" ) {
			if ( dest.parentNode ) {
				dest.outerHTML = src.outerHTML;
			}
	
			// This path appears unavoidable for IE9. When cloning an object
			// element in IE9, the outerHTML strategy above is not sufficient.
			// If the src has innerHTML and the destination does not,
			// copy the src.innerHTML into the dest.innerHTML. #10324
			if ( support.html5Clone && ( src.innerHTML && !jQuery.trim( dest.innerHTML ) ) ) {
				dest.innerHTML = src.innerHTML;
			}
	
		} else if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
	
			// IE6-8 fails to persist the checked state of a cloned checkbox
			// or radio button. Worse, IE6-7 fail to give the cloned element
			// a checked appearance if the defaultChecked value isn't also set
	
			dest.defaultChecked = dest.checked = src.checked;
	
			// IE6-7 get confused and end up setting the value of a cloned
			// checkbox/radio button to an empty string instead of "on"
			if ( dest.value !== src.value ) {
				dest.value = src.value;
			}
	
		// IE6-8 fails to return the selected option to the default selected
		// state when cloning options
		} else if ( nodeName === "option" ) {
			dest.defaultSelected = dest.selected = src.defaultSelected;
	
		// IE6-8 fails to set the defaultValue to the correct value when
		// cloning other types of input fields
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}
	
	function domManip( collection, args, callback, ignored ) {
	
		// Flatten any nested arrays
		args = concat.apply( [], args );
	
		var first, node, hasScripts,
			scripts, doc, fragment,
			i = 0,
			l = collection.length,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );
	
		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return collection.each( function( index ) {
				var self = collection.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				domManip( self, args, callback, ignored );
			} );
		}
	
		if ( l ) {
			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
			first = fragment.firstChild;
	
			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}
	
			// Require either new content or an interest in ignored elements to invoke the callback
			if ( first || ignored ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;
	
				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;
	
					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );
	
						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
	
							// Support: Android<4.1, PhantomJS<2
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}
	
					callback.call( collection[ i ], node, i );
				}
	
				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;
	
					// Reenable scripts
					jQuery.map( scripts, restoreScript );
	
					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!jQuery._data( node, "globalEval" ) &&
							jQuery.contains( doc, node ) ) {
	
							if ( node.src ) {
	
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval(
									( node.text || node.textContent || node.innerHTML || "" )
										.replace( rcleanScript, "" )
								);
							}
						}
					}
				}
	
				// Fix #11809: Avoid leaking memory
				fragment = first = null;
			}
		}
	
		return collection;
	}
	
	function remove( elem, selector, keepData ) {
		var node,
			elems = selector ? jQuery.filter( selector, elem ) : elem,
			i = 0;
	
		for ( ; ( node = elems[ i ] ) != null; i++ ) {
	
			if ( !keepData && node.nodeType === 1 ) {
				jQuery.cleanData( getAll( node ) );
			}
	
			if ( node.parentNode ) {
				if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
					setGlobalEval( getAll( node, "script" ) );
				}
				node.parentNode.removeChild( node );
			}
		}
	
		return elem;
	}
	
	jQuery.extend( {
		htmlPrefilter: function( html ) {
			return html.replace( rxhtmlTag, "<$1></$2>" );
		},
	
		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var destElements, node, clone, i, srcElements,
				inPage = jQuery.contains( elem.ownerDocument, elem );
	
			if ( support.html5Clone || jQuery.isXMLDoc( elem ) ||
				!rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
	
				clone = elem.cloneNode( true );
	
			// IE<=8 does not properly clone detached, unknown element nodes
			} else {
				fragmentDiv.innerHTML = elem.outerHTML;
				fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
			}
	
			if ( ( !support.noCloneEvent || !support.noCloneChecked ) &&
					( elem.nodeType === 1 || elem.nodeType === 11 ) && !jQuery.isXMLDoc( elem ) ) {
	
				// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );
	
				// Fix all IE cloning issues
				for ( i = 0; ( node = srcElements[ i ] ) != null; ++i ) {
	
					// Ensure that the destination node is not null; Fixes #9587
					if ( destElements[ i ] ) {
						fixCloneNodeIssues( node, destElements[ i ] );
					}
				}
			}
	
			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );
	
					for ( i = 0; ( node = srcElements[ i ] ) != null; i++ ) {
						cloneCopyEvent( node, destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}
	
			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}
	
			destElements = srcElements = node = null;
	
			// Return the cloned set
			return clone;
		},
	
		cleanData: function( elems, /* internal */ forceAcceptData ) {
			var elem, type, id, data,
				i = 0,
				internalKey = jQuery.expando,
				cache = jQuery.cache,
				attributes = support.attributes,
				special = jQuery.event.special;
	
			for ( ; ( elem = elems[ i ] ) != null; i++ ) {
				if ( forceAcceptData || acceptData( elem ) ) {
	
					id = elem[ internalKey ];
					data = id && cache[ id ];
	
					if ( data ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );
	
								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}
	
						// Remove cache only if it was not already removed by jQuery.event.remove
						if ( cache[ id ] ) {
	
							delete cache[ id ];
	
							// Support: IE<9
							// IE does not allow us to delete expando properties from nodes
							// IE creates expando attributes along with the property
							// IE does not have a removeAttribute function on Document nodes
							if ( !attributes && typeof elem.removeAttribute !== "undefined" ) {
								elem.removeAttribute( internalKey );
	
							// Webkit & Blink performance suffers when deleting properties
							// from DOM nodes, so set to undefined instead
							// https://code.google.com/p/chromium/issues/detail?id=378607
							} else {
								elem[ internalKey ] = undefined;
							}
	
							deletedIds.push( id );
						}
					}
				}
			}
		}
	} );
	
	jQuery.fn.extend( {
	
		// Keep domManip exposed until 3.0 (gh-2225)
		domManip: domManip,
	
		detach: function( selector ) {
			return remove( this, selector, true );
		},
	
		remove: function( selector ) {
			return remove( this, selector );
		},
	
		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().append(
						( this[ 0 ] && this[ 0 ].ownerDocument || document ).createTextNode( value )
					);
			}, null, value, arguments.length );
		},
	
		append: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			} );
		},
	
		prepend: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			} );
		},
	
		before: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			} );
		},
	
		after: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			} );
		},
	
		empty: function() {
			var elem,
				i = 0;
	
			for ( ; ( elem = this[ i ] ) != null; i++ ) {
	
				// Remove element nodes and prevent memory leaks
				if ( elem.nodeType === 1 ) {
					jQuery.cleanData( getAll( elem, false ) );
				}
	
				// Remove any remaining nodes
				while ( elem.firstChild ) {
					elem.removeChild( elem.firstChild );
				}
	
				// If this is a select, ensure that it displays empty (#12336)
				// Support: IE<9
				if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
					elem.options.length = 0;
				}
			}
	
			return this;
		},
	
		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
	
			return this.map( function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			} );
		},
	
		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;
	
				if ( value === undefined ) {
					return elem.nodeType === 1 ?
						elem.innerHTML.replace( rinlinejQuery, "" ) :
						undefined;
				}
	
				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					( support.htmlSerialize || !rnoshimcache.test( value )  ) &&
					( support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {
	
					value = jQuery.htmlPrefilter( value );
	
					try {
						for ( ; i < l; i++ ) {
	
							// Remove element nodes and prevent memory leaks
							elem = this[ i ] || {};
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}
	
						elem = 0;
	
					// If using innerHTML throws an exception, use the fallback method
					} catch ( e ) {}
				}
	
				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},
	
		replaceWith: function() {
			var ignored = [];
	
			// Make the changes, replacing each non-ignored context element with the new content
			return domManip( this, arguments, function( elem ) {
				var parent = this.parentNode;
	
				if ( jQuery.inArray( this, ignored ) < 0 ) {
					jQuery.cleanData( getAll( this ) );
					if ( parent ) {
						parent.replaceChild( elem, this );
					}
				}
	
			// Force callback invocation
			}, ignored );
		}
	} );
	
	jQuery.each( {
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				i = 0,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1;
	
			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );
	
				// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
				push.apply( ret, elems.get() );
			}
	
			return this.pushStack( ret );
		};
	} );
	
	
	var iframe,
		elemdisplay = {
	
			// Support: Firefox
			// We have to pre-define these values for FF (#10227)
			HTML: "block",
			BODY: "block"
		};
	
	/**
	 * Retrieve the actual display of a element
	 * @param {String} name nodeName of the element
	 * @param {Object} doc Document object
	 */
	
	// Called only from within defaultDisplay
	function actualDisplay( name, doc ) {
		var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),
	
			display = jQuery.css( elem[ 0 ], "display" );
	
		// We don't have any data stored on the element,
		// so use "detach" method as fast way to get rid of the element
		elem.detach();
	
		return display;
	}
	
	/**
	 * Try to determine the default display value of an element
	 * @param {String} nodeName
	 */
	function defaultDisplay( nodeName ) {
		var doc = document,
			display = elemdisplay[ nodeName ];
	
		if ( !display ) {
			display = actualDisplay( nodeName, doc );
	
			// If the simple way fails, read from inside an iframe
			if ( display === "none" || !display ) {
	
				// Use the already-created iframe if possible
				iframe = ( iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" ) )
					.appendTo( doc.documentElement );
	
				// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
				doc = ( iframe[ 0 ].contentWindow || iframe[ 0 ].contentDocument ).document;
	
				// Support: IE
				doc.write();
				doc.close();
	
				display = actualDisplay( nodeName, doc );
				iframe.detach();
			}
	
			// Store the correct default display
			elemdisplay[ nodeName ] = display;
		}
	
		return display;
	}
	var rmargin = ( /^margin/ );
	
	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );
	
	var swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};
	
		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}
	
		ret = callback.apply( elem, args || [] );
	
		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}
	
		return ret;
	};
	
	
	var documentElement = document.documentElement;
	
	
	
	( function() {
		var pixelPositionVal, pixelMarginRightVal, boxSizingReliableVal,
			reliableHiddenOffsetsVal, reliableMarginRightVal, reliableMarginLeftVal,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );
	
		// Finish early in limited (non-browser) environments
		if ( !div.style ) {
			return;
		}
	
		div.style.cssText = "float:left;opacity:.5";
	
		// Support: IE<9
		// Make sure that element opacity exists (as opposed to filter)
		support.opacity = div.style.opacity === "0.5";
	
		// Verify style float existence
		// (IE uses styleFloat instead of cssFloat)
		support.cssFloat = !!div.style.cssFloat;
	
		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";
	
		container = document.createElement( "div" );
		container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
			"padding:0;margin-top:1px;position:absolute";
		div.innerHTML = "";
		container.appendChild( div );
	
		// Support: Firefox<29, Android 2.3
		// Vendor-prefix box-sizing
		support.boxSizing = div.style.boxSizing === "" || div.style.MozBoxSizing === "" ||
			div.style.WebkitBoxSizing === "";
	
		jQuery.extend( support, {
			reliableHiddenOffsets: function() {
				if ( pixelPositionVal == null ) {
					computeStyleTests();
				}
				return reliableHiddenOffsetsVal;
			},
	
			boxSizingReliable: function() {
	
				// We're checking for pixelPositionVal here instead of boxSizingReliableVal
				// since that compresses better and they're computed together anyway.
				if ( pixelPositionVal == null ) {
					computeStyleTests();
				}
				return boxSizingReliableVal;
			},
	
			pixelMarginRight: function() {
	
				// Support: Android 4.0-4.3
				if ( pixelPositionVal == null ) {
					computeStyleTests();
				}
				return pixelMarginRightVal;
			},
	
			pixelPosition: function() {
				if ( pixelPositionVal == null ) {
					computeStyleTests();
				}
				return pixelPositionVal;
			},
	
			reliableMarginRight: function() {
	
				// Support: Android 2.3
				if ( pixelPositionVal == null ) {
					computeStyleTests();
				}
				return reliableMarginRightVal;
			},
	
			reliableMarginLeft: function() {
	
				// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
				if ( pixelPositionVal == null ) {
					computeStyleTests();
				}
				return reliableMarginLeftVal;
			}
		} );
	
		function computeStyleTests() {
			var contents, divStyle,
				documentElement = document.documentElement;
	
			// Setup
			documentElement.appendChild( container );
	
			div.style.cssText =
	
				// Support: Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:border-box;box-sizing:border-box;" +
				"position:relative;display:block;" +
				"margin:auto;border:1px;padding:1px;" +
				"top:1%;width:50%";
	
			// Support: IE<9
			// Assume reasonable values in the absence of getComputedStyle
			pixelPositionVal = boxSizingReliableVal = reliableMarginLeftVal = false;
			pixelMarginRightVal = reliableMarginRightVal = true;
	
			// Check for getComputedStyle so that this code is not run in IE<9.
			if ( window.getComputedStyle ) {
				divStyle = window.getComputedStyle( div );
				pixelPositionVal = ( divStyle || {} ).top !== "1%";
				reliableMarginLeftVal = ( divStyle || {} ).marginLeft === "2px";
				boxSizingReliableVal = ( divStyle || { width: "4px" } ).width === "4px";
	
				// Support: Android 4.0 - 4.3 only
				// Some styles come back with percentage values, even though they shouldn't
				div.style.marginRight = "50%";
				pixelMarginRightVal = ( divStyle || { marginRight: "4px" } ).marginRight === "4px";
	
				// Support: Android 2.3 only
				// Div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				contents = div.appendChild( document.createElement( "div" ) );
	
				// Reset CSS: box-sizing; display; margin; border; padding
				contents.style.cssText = div.style.cssText =
	
					// Support: Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
					"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
				contents.style.marginRight = contents.style.width = "0";
				div.style.width = "1px";
	
				reliableMarginRightVal =
					!parseFloat( ( window.getComputedStyle( contents ) || {} ).marginRight );
	
				div.removeChild( contents );
			}
	
			// Support: IE6-8
			// First check that getClientRects works as expected
			// Check if table cells still have offsetWidth/Height when they are set
			// to display:none and there are still other visible table cells in a
			// table row; if so, offsetWidth/Height are not reliable for use when
			// determining if an element has been hidden directly using
			// display:none (it is still safe to use offsets if a parent element is
			// hidden; don safety goggles and see bug #4512 for more information).
			div.style.display = "none";
			reliableHiddenOffsetsVal = div.getClientRects().length === 0;
			if ( reliableHiddenOffsetsVal ) {
				div.style.display = "";
				div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
				contents = div.getElementsByTagName( "td" );
				contents[ 0 ].style.cssText = "margin:0;border:0;padding:0;display:none";
				reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
				if ( reliableHiddenOffsetsVal ) {
					contents[ 0 ].style.display = "";
					contents[ 1 ].style.display = "none";
					reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
				}
			}
	
			// Teardown
			documentElement.removeChild( container );
		}
	
	} )();
	
	
	var getStyles, curCSS,
		rposition = /^(top|right|bottom|left)$/;
	
	if ( window.getComputedStyle ) {
		getStyles = function( elem ) {
	
			// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;
	
			if ( !view || !view.opener ) {
				view = window;
			}
	
			return view.getComputedStyle( elem );
		};
	
		curCSS = function( elem, name, computed ) {
			var width, minWidth, maxWidth, ret,
				style = elem.style;
	
			computed = computed || getStyles( elem );
	
			// getPropertyValue is only needed for .css('filter') in IE9, see #12537
			ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;
	
			// Support: Opera 12.1x only
			// Fall back to style even without computed
			// computed is undefined for elems on document fragments
			if ( ( ret === "" || ret === undefined ) && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}
	
			if ( computed ) {
	
				// A tribute to the "awesome hack by Dean Edwards"
				// Chrome < 17 and Safari 5.0 uses "computed value"
				// instead of "used value" for margin-right
				// Safari 5.1.7 (at least) returns percentage for a larger set of values,
				// but width seems to be reliably pixels
				// this is against the CSSOM draft spec:
				// http://dev.w3.org/csswg/cssom/#resolved-values
				if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {
	
					// Remember the original values
					width = style.width;
					minWidth = style.minWidth;
					maxWidth = style.maxWidth;
	
					// Put in the new values to get a computed value out
					style.minWidth = style.maxWidth = style.width = ret;
					ret = computed.width;
	
					// Revert the changed values
					style.width = width;
					style.minWidth = minWidth;
					style.maxWidth = maxWidth;
				}
			}
	
			// Support: IE
			// IE returns zIndex value as an integer.
			return ret === undefined ?
				ret :
				ret + "";
		};
	} else if ( documentElement.currentStyle ) {
		getStyles = function( elem ) {
			return elem.currentStyle;
		};
	
		curCSS = function( elem, name, computed ) {
			var left, rs, rsLeft, ret,
				style = elem.style;
	
			computed = computed || getStyles( elem );
			ret = computed ? computed[ name ] : undefined;
	
			// Avoid setting ret to empty string here
			// so we don't default to auto
			if ( ret == null && style && style[ name ] ) {
				ret = style[ name ];
			}
	
			// From the awesome hack by Dean Edwards
			// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291
	
			// If we're not dealing with a regular pixel number
			// but a number that has a weird ending, we need to convert it to pixels
			// but not position css attributes, as those are
			// proportional to the parent element instead
			// and we can't measure the parent instead because it
			// might trigger a "stacking dolls" problem
			if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {
	
				// Remember the original values
				left = style.left;
				rs = elem.runtimeStyle;
				rsLeft = rs && rs.left;
	
				// Put in the new values to get a computed value out
				if ( rsLeft ) {
					rs.left = elem.currentStyle.left;
				}
				style.left = name === "fontSize" ? "1em" : ret;
				ret = style.pixelLeft + "px";
	
				// Revert the changed values
				style.left = left;
				if ( rsLeft ) {
					rs.left = rsLeft;
				}
			}
	
			// Support: IE
			// IE returns zIndex value as an integer.
			return ret === undefined ?
				ret :
				ret + "" || "auto";
		};
	}
	
	
	
	
	function addGetHookIf( conditionFn, hookFn ) {
	
		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {
	
					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}
	
				// Hook needed; redefine it so that the support test is not executed again.
				return ( this.get = hookFn ).apply( this, arguments );
			}
		};
	}
	
	
	var
	
			ralpha = /alpha\([^)]*\)/i,
		ropacity = /opacity\s*=\s*([^)]*)/i,
	
		// swappable if display is none or starts with table except
		// "table", "table-cell", or "table-caption"
		// see here for display values:
		// https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
		rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
	
		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},
	
		cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],
		emptyStyle = document.createElement( "div" ).style;
	
	
	// return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( name ) {
	
		// shortcut for names that are not vendor prefixed
		if ( name in emptyStyle ) {
			return name;
		}
	
		// check for vendor prefixed names
		var capName = name.charAt( 0 ).toUpperCase() + name.slice( 1 ),
			i = cssPrefixes.length;
	
		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in emptyStyle ) {
				return name;
			}
		}
	}
	
	function showHide( elements, show ) {
		var display, elem, hidden,
			values = [],
			index = 0,
			length = elements.length;
	
		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
	
			values[ index ] = jQuery._data( elem, "olddisplay" );
			display = elem.style.display;
			if ( show ) {
	
				// Reset the inline display of this element to learn if it is
				// being hidden by cascaded rules or not
				if ( !values[ index ] && display === "none" ) {
					elem.style.display = "";
				}
	
				// Set elements which have been overridden with display: none
				// in a stylesheet to whatever the default browser style is
				// for such an element
				if ( elem.style.display === "" && isHidden( elem ) ) {
					values[ index ] =
						jQuery._data( elem, "olddisplay", defaultDisplay( elem.nodeName ) );
				}
			} else {
				hidden = isHidden( elem );
	
				if ( display && display !== "none" || !hidden ) {
					jQuery._data(
						elem,
						"olddisplay",
						hidden ? display : jQuery.css( elem, "display" )
					);
				}
			}
		}
	
		// Set the display of most of the elements in a second loop
		// to avoid the constant reflow
		for ( index = 0; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
			if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
				elem.style.display = show ? values[ index ] || "" : "none";
			}
		}
	
		return elements;
	}
	
	function setPositiveNumber( elem, value, subtract ) {
		var matches = rnumsplit.exec( value );
		return matches ?
	
			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
			value;
	}
	
	function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
		var i = extra === ( isBorderBox ? "border" : "content" ) ?
	
			// If we already have the right measurement, avoid augmentation
			4 :
	
			// Otherwise initialize for horizontal or vertical properties
			name === "width" ? 1 : 0,
	
			val = 0;
	
		for ( ; i < 4; i += 2 ) {
	
			// both box models exclude margin, so add it if we want it
			if ( extra === "margin" ) {
				val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
			}
	
			if ( isBorderBox ) {
	
				// border-box includes padding, so remove it if we want content
				if ( extra === "content" ) {
					val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}
	
				// at this point, extra isn't border nor margin, so remove border
				if ( extra !== "margin" ) {
					val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			} else {
	
				// at this point, extra isn't content, so add padding
				val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
	
				// at this point, extra isn't content nor padding, so add border
				if ( extra !== "padding" ) {
					val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}
	
		return val;
	}
	
	function getWidthOrHeight( elem, name, extra ) {
	
		// Start with offset property, which is equivalent to the border-box value
		var valueIsBorderBox = true,
			val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
			styles = getStyles( elem ),
			isBorderBox = support.boxSizing &&
				jQuery.css( elem, "boxSizing", false, styles ) === "border-box";
	
		// Support: IE11 only
		// In IE 11 fullscreen elements inside of an iframe have
		// 100x too small dimensions (gh-1764).
		if ( document.msFullscreenElement && window.top !== window ) {
	
			// Support: IE11 only
			// Running getBoundingClientRect on a disconnected node
			// in IE throws an error.
			if ( elem.getClientRects().length ) {
				val = Math.round( elem.getBoundingClientRect()[ name ] * 100 );
			}
		}
	
		// some non-html elements return undefined for offsetWidth, so check for null/undefined
		// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
		// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
		if ( val <= 0 || val == null ) {
	
			// Fall back to computed then uncomputed css if necessary
			val = curCSS( elem, name, styles );
			if ( val < 0 || val == null ) {
				val = elem.style[ name ];
			}
	
			// Computed unit is not pixels. Stop here and return.
			if ( rnumnonpx.test( val ) ) {
				return val;
			}
	
			// we need the check for style in case a browser which returns unreliable values
			// for getComputedStyle silently falls back to the reliable elem.style
			valueIsBorderBox = isBorderBox &&
				( support.boxSizingReliable() || val === elem.style[ name ] );
	
			// Normalize "", auto, and prepare for extra
			val = parseFloat( val ) || 0;
		}
	
		// use the active box-sizing model to add/subtract irrelevant styles
		return ( val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles
			)
		) + "px";
	}
	
	jQuery.extend( {
	
		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {
	
						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},
	
		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},
	
		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
	
			// normalize float css property
			"float": support.cssFloat ? "cssFloat" : "styleFloat"
		},
	
		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {
	
			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}
	
			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = jQuery.camelCase( name ),
				style = elem.style;
	
			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );
	
			// gets hook for the prefixed version
			// followed by the unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
	
			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;
	
				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
					value = adjustCSS( elem, name, ret );
	
					// Fixes bug #9237
					type = "number";
				}
	
				// Make sure that null and NaN values aren't set. See: #7116
				if ( value == null || value !== value ) {
					return;
				}
	
				// If a number was passed in, add the unit (except for certain CSS properties)
				if ( type === "number" ) {
					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
				}
	
				// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
				// but it would mean to define eight
				// (for every problematic property) identical functions
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}
	
				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !( "set" in hooks ) ||
					( value = hooks.set( elem, value, extra ) ) !== undefined ) {
	
					// Support: IE
					// Swallow errors from 'invalid' CSS values (#5509)
					try {
						style[ name ] = value;
					} catch ( e ) {}
				}
	
			} else {
	
				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks &&
					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {
	
					return ret;
				}
	
				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},
	
		css: function( elem, name, extra, styles ) {
			var num, val, hooks,
				origName = jQuery.camelCase( name );
	
			// Make sure that we're working with the right name
			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );
	
			// gets hook for the prefixed version
			// followed by the unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
	
			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}
	
			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}
	
			//convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}
	
			// Return, converting to number if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || isFinite( num ) ? num || 0 : val;
			}
			return val;
		}
	} );
	
	jQuery.each( [ "height", "width" ], function( i, name ) {
		jQuery.cssHooks[ name ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {
	
					// certain elements can have dimension info if we invisibly show them
					// however, it must have a current display style that would benefit from this
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
						elem.offsetWidth === 0 ?
							swap( elem, cssShow, function() {
								return getWidthOrHeight( elem, name, extra );
							} ) :
							getWidthOrHeight( elem, name, extra );
				}
			},
	
			set: function( elem, value, extra ) {
				var styles = extra && getStyles( elem );
				return setPositiveNumber( elem, value, extra ?
					augmentWidthOrHeight(
						elem,
						name,
						extra,
						support.boxSizing &&
							jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
						styles
					) : 0
				);
			}
		};
	} );
	
	if ( !support.opacity ) {
		jQuery.cssHooks.opacity = {
			get: function( elem, computed ) {
	
				// IE uses filters for opacity
				return ropacity.test( ( computed && elem.currentStyle ?
					elem.currentStyle.filter :
					elem.style.filter ) || "" ) ?
						( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
						computed ? "1" : "";
			},
	
			set: function( elem, value ) {
				var style = elem.style,
					currentStyle = elem.currentStyle,
					opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
					filter = currentStyle && currentStyle.filter || style.filter || "";
	
				// IE has trouble with opacity if it does not have layout
				// Force it by setting the zoom level
				style.zoom = 1;
	
				// if setting opacity to 1, and no other filters exist -
				// attempt to remove filter attribute #6652
				// if value === "", then remove inline opacity #12685
				if ( ( value >= 1 || value === "" ) &&
						jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
						style.removeAttribute ) {
	
					// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
					// if "filter:" is present at all, clearType is disabled, we want to avoid this
					// style.removeAttribute is IE Only, but so apparently is this code path...
					style.removeAttribute( "filter" );
	
					// if there is no filter style applied in a css rule
					// or unset inline opacity, we are done
					if ( value === "" || currentStyle && !currentStyle.filter ) {
						return;
					}
				}
	
				// otherwise, set new filter values
				style.filter = ralpha.test( filter ) ?
					filter.replace( ralpha, opacity ) :
					filter + " " + opacity;
			}
		};
	}
	
	jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
		function( elem, computed ) {
			if ( computed ) {
				return swap( elem, { "display": "inline-block" },
					curCSS, [ elem, "marginRight" ] );
			}
		}
	);
	
	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
		function( elem, computed ) {
			if ( computed ) {
				return (
					parseFloat( curCSS( elem, "marginLeft" ) ) ||
	
					// Support: IE<=11+
					// Running getBoundingClientRect on a disconnected node in IE throws an error
					// Support: IE8 only
					// getClientRects() errors on disconnected elems
					( jQuery.contains( elem.ownerDocument, elem ) ?
						elem.getBoundingClientRect().left -
							swap( elem, { marginLeft: 0 }, function() {
								return elem.getBoundingClientRect().left;
							} ) :
						0
					)
				) + "px";
			}
		}
	);
	
	// These hooks are used by animate to expand properties
	jQuery.each( {
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},
	
					// assumes a single number if not a string
					parts = typeof value === "string" ? value.split( " " ) : [ value ];
	
				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}
	
				return expanded;
			}
		};
	
		if ( !rmargin.test( prefix ) ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	} );
	
	jQuery.fn.extend( {
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;
	
				if ( jQuery.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;
	
					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}
	
					return map;
				}
	
				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		},
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}
	
			return this.each( function() {
				if ( isHidden( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			} );
		}
	} );
	
	
	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;
	
	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];
	
			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];
	
			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;
	
			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}
	
			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};
	
	Tween.prototype.init.prototype = Tween.prototype;
	
	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;
	
				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if ( tween.elem.nodeType !== 1 ||
					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
					return tween.elem[ tween.prop ];
				}
	
				// passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails
				// so, simple values such as "10px" are parsed to Float.
				// complex values such as "rotate(1rad)" are returned as is.
				result = jQuery.css( tween.elem, tween.prop, "" );
	
				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {
	
				// use step hook for back compat - use cssHook if its there - use .style if its
				// available and use plain properties where available
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.nodeType === 1 &&
					( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
						jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};
	
	// Support: IE <=9
	// Panic based approach to setting things on disconnected nodes
	
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};
	
	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		},
		_default: "swing"
	};
	
	jQuery.fx = Tween.prototype.init;
	
	// Back Compat <1.8 extension point
	jQuery.fx.step = {};
	
	
	
	
	var
		fxNow, timerId,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rrun = /queueHooks$/;
	
	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout( function() {
			fxNow = undefined;
		} );
		return ( fxNow = jQuery.now() );
	}
	
	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			attrs = { height: type },
			i = 0;
	
		// if we include width, step value is 1 to do all cssExpand values,
		// if we don't include width, step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4 ; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}
	
		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}
	
		return attrs;
	}
	
	function createTween( value, prop, animation ) {
		var tween,
			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {
	
				// we're done with this property
				return tween;
			}
		}
	}
	
	function defaultPrefilter( elem, props, opts ) {
		/* jshint validthis: true */
		var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHidden( elem ),
			dataShow = jQuery._data( elem, "fxshow" );
	
		// handle queue: false promises
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;
	
			anim.always( function() {
	
				// doing this makes sure that the complete handler will be called
				// before this completes
				anim.always( function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				} );
			} );
		}
	
		// height/width overflow pass
		if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
	
			// Make sure that nothing sneaks out
			// Record all 3 overflow attributes because IE does not
			// change the overflow attribute when overflowX and
			// overflowY are set to the same value
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];
	
			// Set display property to inline-block for height/width
			// animations on inline elements that are having width/height animated
			display = jQuery.css( elem, "display" );
	
			// Test default display if display is currently "none"
			checkDisplay = display === "none" ?
				jQuery._data( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;
	
			if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
	
				// inline-level elements accept inline-block;
				// block-level elements need to be inline with layout
				if ( !support.inlineBlockNeedsLayout || defaultDisplay( elem.nodeName ) === "inline" ) {
					style.display = "inline-block";
				} else {
					style.zoom = 1;
				}
			}
		}
	
		if ( opts.overflow ) {
			style.overflow = "hidden";
			if ( !support.shrinkWrapBlocks() ) {
				anim.always( function() {
					style.overflow = opts.overflow[ 0 ];
					style.overflowX = opts.overflow[ 1 ];
					style.overflowY = opts.overflow[ 2 ];
				} );
			}
		}
	
		// show/hide pass
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.exec( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {
	
					// If there is dataShow left over from a stopped hide or show
					// and we are going to proceed with show, we should pretend to be hidden
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
	
			// Any non-fx value stops us from restoring the original display value
			} else {
				display = undefined;
			}
		}
	
		if ( !jQuery.isEmptyObject( orig ) ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = jQuery._data( elem, "fxshow", {} );
			}
	
			// store state if its toggle - enables .stop().toggle() to "reverse"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}
			if ( hidden ) {
				jQuery( elem ).show();
			} else {
				anim.done( function() {
					jQuery( elem ).hide();
				} );
			}
			anim.done( function() {
				var prop;
				jQuery._removeData( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
			for ( prop in orig ) {
				tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
	
				if ( !( prop in dataShow ) ) {
					dataShow[ prop ] = tween.start;
					if ( hidden ) {
						tween.end = tween.start;
						tween.start = prop === "width" || prop === "height" ? 1 : 0;
					}
				}
			}
	
		// If this is a noop like .hide().hide(), restore an overwritten display value
		} else if ( ( display === "none" ? defaultDisplay( elem.nodeName ) : display ) === "inline" ) {
			style.display = display;
		}
	}
	
	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;
	
		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = jQuery.camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( jQuery.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}
	
			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}
	
			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];
	
				// not quite $.extend, this wont overwrite keys already present.
				// also - reusing 'index' from above because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}
	
	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = Animation.prefilters.length,
			deferred = jQuery.Deferred().always( function() {
	
				// don't match elem in the :animated selector
				delete tick.elem;
			} ),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
	
					// Support: Android 2.3
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;
	
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( percent );
				}
	
				deferred.notifyWith( elem, [ animation, percent, remaining ] );
	
				if ( percent < 1 && length ) {
					return remaining;
				} else {
					deferred.resolveWith( elem, [ animation ] );
					return false;
				}
			},
			animation = deferred.promise( {
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,
	
						// if we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length ; index++ ) {
						animation.tweens[ index ].run( 1 );
					}
	
					// resolve when we played the last frame
					// otherwise, reject
					if ( gotoEnd ) {
						deferred.notifyWith( elem, [ animation, 1, 0 ] );
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			} ),
			props = animation.props;
	
		propFilter( props, animation.opts.specialEasing );
	
		for ( ; index < length ; index++ ) {
			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				if ( jQuery.isFunction( result.stop ) ) {
					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
						jQuery.proxy( result.stop, result );
				}
				return result;
			}
		}
	
		jQuery.map( props, createTween, animation );
	
		if ( jQuery.isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}
	
		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			} )
		);
	
		// attach callbacks from options
		return animation.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );
	}
	
	jQuery.Animation = jQuery.extend( Animation, {
	
		tweeners: {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value );
				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
				return tween;
			} ]
		},
	
		tweener: function( props, callback ) {
			if ( jQuery.isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.match( rnotwhite );
			}
	
			var prop,
				index = 0,
				length = props.length;
	
			for ( ; index < length ; index++ ) {
				prop = props[ index ];
				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
				Animation.tweeners[ prop ].unshift( callback );
			}
		},
	
		prefilters: [ defaultPrefilter ],
	
		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				Animation.prefilters.unshift( callback );
			} else {
				Animation.prefilters.push( callback );
			}
		}
	} );
	
	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};
	
		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
			opt.duration in jQuery.fx.speeds ?
				jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;
	
		// normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}
	
		// Queueing
		opt.old = opt.complete;
	
		opt.complete = function() {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}
	
			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};
	
		return opt;
	};
	
	jQuery.fn.extend( {
		fadeTo: function( speed, to, easing, callback ) {
	
			// show any hidden elements after setting opacity to 0
			return this.filter( isHidden ).css( "opacity", 0 ).show()
	
				// animate to the value specified
				.end().animate( { opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {
	
					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );
	
					// Empty animations, or finishing resolves immediately
					if ( empty || jQuery._data( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;
	
			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};
	
			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}
	
			return this.each( function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = jQuery._data( this );
	
				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}
	
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this &&
						( type == null || timers[ index ].queue === type ) ) {
	
						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}
	
				// start the next in the queue if the last step wasn't forced
				// timers currently will call their complete callbacks, which will dequeue
				// but only if they were gotoEnd
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			} );
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each( function() {
				var index,
					data = jQuery._data( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;
	
				// enable finishing flag on private data
				data.finish = true;
	
				// empty the queue first
				jQuery.queue( this, type, [] );
	
				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}
	
				// look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}
	
				// look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}
	
				// turn off finishing flag
				delete data.finish;
			} );
		}
	} );
	
	jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	} );
	
	// Generate shortcuts for custom animations
	jQuery.each( {
		slideDown: genFx( "show" ),
		slideUp: genFx( "hide" ),
		slideToggle: genFx( "toggle" ),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	} );
	
	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			timers = jQuery.timers,
			i = 0;
	
		fxNow = jQuery.now();
	
		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];
	
			// Checks the timer has not already been removed
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}
	
		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};
	
	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		if ( timer() ) {
			jQuery.fx.start();
		} else {
			jQuery.timers.pop();
		}
	};
	
	jQuery.fx.interval = 13;
	
	jQuery.fx.start = function() {
		if ( !timerId ) {
			timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
		}
	};
	
	jQuery.fx.stop = function() {
		window.clearInterval( timerId );
		timerId = null;
	};
	
	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,
	
		// Default speed
		_default: 400
	};
	
	
	// Based off of the plugin by Clint Helfers, with permission.
	// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";
	
		return this.queue( type, function( next, hooks ) {
			var timeout = window.setTimeout( next, time );
			hooks.stop = function() {
				window.clearTimeout( timeout );
			};
		} );
	};
	
	
	( function() {
		var a,
			input = document.createElement( "input" ),
			div = document.createElement( "div" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );
	
		// Setup
		div = document.createElement( "div" );
		div.setAttribute( "className", "t" );
		div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
		a = div.getElementsByTagName( "a" )[ 0 ];
	
		// Support: Windows Web Apps (WWA)
		// `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "checkbox" );
		div.appendChild( input );
	
		a = div.getElementsByTagName( "a" )[ 0 ];
	
		// First batch of tests.
		a.style.cssText = "top:1px";
	
		// Test setAttribute on camelCase class.
		// If it works, we need attrFixes when doing get/setAttribute (ie6/7)
		support.getSetAttribute = div.className !== "t";
	
		// Get the style information from getAttribute
		// (IE uses .cssText instead)
		support.style = /top/.test( a.getAttribute( "style" ) );
	
		// Make sure that URLs aren't manipulated
		// (IE normalizes it by default)
		support.hrefNormalized = a.getAttribute( "href" ) === "/a";
	
		// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
		support.checkOn = !!input.value;
	
		// Make sure that a selected-by-default option has a working selected property.
		// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
		support.optSelected = opt.selected;
	
		// Tests for enctype support on a form (#6743)
		support.enctype = !!document.createElement( "form" ).enctype;
	
		// Make sure that the options inside disabled selects aren't marked as disabled
		// (WebKit marks them as disabled)
		select.disabled = true;
		support.optDisabled = !opt.disabled;
	
		// Support: IE8 only
		// Check if we can trust getAttribute("value")
		input = document.createElement( "input" );
		input.setAttribute( "value", "" );
		support.input = input.getAttribute( "value" ) === "";
	
		// Check if an input maintains its value after becoming a radio
		input.value = "t";
		input.setAttribute( "type", "radio" );
		support.radioValue = input.value === "t";
	} )();
	
	
	var rreturn = /\r/g;
	
	jQuery.fn.extend( {
		val: function( value ) {
			var hooks, ret, isFunction,
				elem = this[ 0 ];
	
			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] ||
						jQuery.valHooks[ elem.nodeName.toLowerCase() ];
	
					if (
						hooks &&
						"get" in hooks &&
						( ret = hooks.get( elem, "value" ) ) !== undefined
					) {
						return ret;
					}
	
					ret = elem.value;
	
					return typeof ret === "string" ?
	
						// handle most common string cases
						ret.replace( rreturn, "" ) :
	
						// handle cases where value is null/undef or number
						ret == null ? "" : ret;
				}
	
				return;
			}
	
			isFunction = jQuery.isFunction( value );
	
			return this.each( function( i ) {
				var val;
	
				if ( this.nodeType !== 1 ) {
					return;
				}
	
				if ( isFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}
	
				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";
				} else if ( typeof val === "number" ) {
					val += "";
				} else if ( jQuery.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					} );
				}
	
				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];
	
				// If set returns undefined, fall back to normal setting
				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			} );
		}
	} );
	
	jQuery.extend( {
		valHooks: {
			option: {
				get: function( elem ) {
					var val = jQuery.find.attr( elem, "value" );
					return val != null ?
						val :
	
						// Support: IE10-11+
						// option.text throws exceptions (#14686, #14858)
						jQuery.trim( jQuery.text( elem ) );
				}
			},
			select: {
				get: function( elem ) {
					var value, option,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one" || index < 0,
						values = one ? null : [],
						max = one ? index + 1 : options.length,
						i = index < 0 ?
							max :
							one ? index : 0;
	
					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];
	
						// oldIE doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&
	
								// Don't return options that are disabled or in a disabled optgroup
								( support.optDisabled ?
									!option.disabled :
									option.getAttribute( "disabled" ) === null ) &&
								( !option.parentNode.disabled ||
									!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {
	
							// Get the specific value for the option
							value = jQuery( option ).val();
	
							// We don't need an array for one selects
							if ( one ) {
								return value;
							}
	
							// Multi-Selects return an array
							values.push( value );
						}
					}
	
					return values;
				},
	
				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;
	
					while ( i-- ) {
						option = options[ i ];
	
						if ( jQuery.inArray( jQuery.valHooks.option.get( option ), values ) >= 0 ) {
	
							// Support: IE6
							// When new option element is added to select box we need to
							// force reflow of newly added node in order to workaround delay
							// of initialization properties
							try {
								option.selected = optionSet = true;
	
							} catch ( _ ) {
	
								// Will be executed only in IE6
								option.scrollHeight;
							}
	
						} else {
							option.selected = false;
						}
					}
	
					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
	
					return options;
				}
			}
		}
	} );
	
	// Radios and checkboxes getter/setter
	jQuery.each( [ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( jQuery.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
			};
		}
	} );
	
	
	
	
	var nodeHook, boolHook,
		attrHandle = jQuery.expr.attrHandle,
		ruseDefault = /^(?:checked|selected)$/i,
		getSetAttribute = support.getSetAttribute,
		getSetInput = support.input;
	
	jQuery.fn.extend( {
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},
	
		removeAttr: function( name ) {
			return this.each( function() {
				jQuery.removeAttr( this, name );
			} );
		}
	} );
	
	jQuery.extend( {
		attr: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;
	
			// Don't get/set attributes on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}
	
			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === "undefined" ) {
				return jQuery.prop( elem, name, value );
			}
	
			// All attributes are lowercase
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				name = name.toLowerCase();
				hooks = jQuery.attrHooks[ name ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
			}
	
			if ( value !== undefined ) {
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
					return;
				}
	
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}
	
				elem.setAttribute( name, value + "" );
				return value;
			}
	
			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}
	
			ret = jQuery.find.attr( elem, name );
	
			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},
	
		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						jQuery.nodeName( elem, "input" ) ) {
	
						// Setting the type on a radio button after the value resets the value in IE8-9
						// Reset value to default in case type is set after value during creation
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},
	
		removeAttr: function( elem, value ) {
			var name, propName,
				i = 0,
				attrNames = value && value.match( rnotwhite );
	
			if ( attrNames && elem.nodeType === 1 ) {
				while ( ( name = attrNames[ i++ ] ) ) {
					propName = jQuery.propFix[ name ] || name;
	
					// Boolean attributes get special treatment (#10870)
					if ( jQuery.expr.match.bool.test( name ) ) {
	
						// Set corresponding property to false
						if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
							elem[ propName ] = false;
	
						// Support: IE<9
						// Also clear defaultChecked/defaultSelected (if appropriate)
						} else {
							elem[ jQuery.camelCase( "default-" + name ) ] =
								elem[ propName ] = false;
						}
	
					// See #9699 for explanation of this approach (setting first, then removal)
					} else {
						jQuery.attr( elem, name, "" );
					}
	
					elem.removeAttribute( getSetAttribute ? name : propName );
				}
			}
		}
	} );
	
	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {
	
				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
	
				// IE<8 needs the *property* name
				elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );
	
			} else {
	
				// Support: IE<9
				// Use defaultChecked and defaultSelected for oldIE
				elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
			}
			return name;
		}
	};
	
	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;
	
		if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
			attrHandle[ name ] = function( elem, name, isXML ) {
				var ret, handle;
				if ( !isXML ) {
	
					// Avoid an infinite loop by temporarily removing this function from the getter
					handle = attrHandle[ name ];
					attrHandle[ name ] = ret;
					ret = getter( elem, name, isXML ) != null ?
						name.toLowerCase() :
						null;
					attrHandle[ name ] = handle;
				}
				return ret;
			};
		} else {
			attrHandle[ name ] = function( elem, name, isXML ) {
				if ( !isXML ) {
					return elem[ jQuery.camelCase( "default-" + name ) ] ?
						name.toLowerCase() :
						null;
				}
			};
		}
	} );
	
	// fix oldIE attroperties
	if ( !getSetInput || !getSetAttribute ) {
		jQuery.attrHooks.value = {
			set: function( elem, value, name ) {
				if ( jQuery.nodeName( elem, "input" ) ) {
	
					// Does not return so that setAttribute is also used
					elem.defaultValue = value;
				} else {
	
					// Use nodeHook if defined (#1954); otherwise setAttribute is fine
					return nodeHook && nodeHook.set( elem, value, name );
				}
			}
		};
	}
	
	// IE6/7 do not support getting/setting some attributes with get/setAttribute
	if ( !getSetAttribute ) {
	
		// Use this for any attribute in IE6/7
		// This fixes almost every IE6/7 issue
		nodeHook = {
			set: function( elem, value, name ) {
	
				// Set the existing or create a new attribute node
				var ret = elem.getAttributeNode( name );
				if ( !ret ) {
					elem.setAttributeNode(
						( ret = elem.ownerDocument.createAttribute( name ) )
					);
				}
	
				ret.value = value += "";
	
				// Break association with cloned elements by also using setAttribute (#9646)
				if ( name === "value" || value === elem.getAttribute( name ) ) {
					return value;
				}
			}
		};
	
		// Some attributes are constructed with empty-string values when not defined
		attrHandle.id = attrHandle.name = attrHandle.coords =
			function( elem, name, isXML ) {
				var ret;
				if ( !isXML ) {
					return ( ret = elem.getAttributeNode( name ) ) && ret.value !== "" ?
						ret.value :
						null;
				}
			};
	
		// Fixing value retrieval on a button requires this module
		jQuery.valHooks.button = {
			get: function( elem, name ) {
				var ret = elem.getAttributeNode( name );
				if ( ret && ret.specified ) {
					return ret.value;
				}
			},
			set: nodeHook.set
		};
	
		// Set contenteditable to false on removals(#10429)
		// Setting to empty string throws an error as an invalid value
		jQuery.attrHooks.contenteditable = {
			set: function( elem, value, name ) {
				nodeHook.set( elem, value === "" ? false : value, name );
			}
		};
	
		// Set width and height to auto instead of 0 on empty string( Bug #8150 )
		// This is for removals
		jQuery.each( [ "width", "height" ], function( i, name ) {
			jQuery.attrHooks[ name ] = {
				set: function( elem, value ) {
					if ( value === "" ) {
						elem.setAttribute( name, "auto" );
						return value;
					}
				}
			};
		} );
	}
	
	if ( !support.style ) {
		jQuery.attrHooks.style = {
			get: function( elem ) {
	
				// Return undefined in the case of empty string
				// Note: IE uppercases css property names, but if we were to .toLowerCase()
				// .cssText, that would destroy case sensitivity in URL's, like in "background"
				return elem.style.cssText || undefined;
			},
			set: function( elem, value ) {
				return ( elem.style.cssText = value + "" );
			}
		};
	}
	
	
	
	
	var rfocusable = /^(?:input|select|textarea|button|object)$/i,
		rclickable = /^(?:a|area)$/i;
	
	jQuery.fn.extend( {
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},
	
		removeProp: function( name ) {
			name = jQuery.propFix[ name ] || name;
			return this.each( function() {
	
				// try/catch handles cases where IE balks (such as removing a property on window)
				try {
					this[ name ] = undefined;
					delete this[ name ];
				} catch ( e ) {}
			} );
		}
	} );
	
	jQuery.extend( {
		prop: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;
	
			// Don't get/set properties on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}
	
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
	
				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}
	
			if ( value !== undefined ) {
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}
	
				return ( elem[ name ] = value );
			}
	
			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}
	
			return elem[ name ];
		},
	
		propHooks: {
			tabIndex: {
				get: function( elem ) {
	
					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );
	
					return tabindex ?
						parseInt( tabindex, 10 ) :
						rfocusable.test( elem.nodeName ) ||
							rclickable.test( elem.nodeName ) && elem.href ?
								0 :
								-1;
				}
			}
		},
	
		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	} );
	
	// Some attributes require a special call on IE
	// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !support.hrefNormalized ) {
	
		// href/src property should get the full normalized URL (#10299/#12915)
		jQuery.each( [ "href", "src" ], function( i, name ) {
			jQuery.propHooks[ name ] = {
				get: function( elem ) {
					return elem.getAttribute( name, 4 );
				}
			};
		} );
	}
	
	// Support: Safari, IE9+
	// mis-reports the default selected property of an option
	// Accessing the parent's selectedIndex property fixes it
	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {
				var parent = elem.parentNode;
	
				if ( parent ) {
					parent.selectedIndex;
	
					// Make sure that it also works with optgroups, see #5701
					if ( parent.parentNode ) {
						parent.parentNode.selectedIndex;
					}
				}
				return null;
			}
		};
	}
	
	jQuery.each( [
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	} );
	
	// IE6/7 call enctype encoding
	if ( !support.enctype ) {
		jQuery.propFix.enctype = "encoding";
	}
	
	
	
	
	var rclass = /[\t\r\n\f]/g;
	
	function getClass( elem ) {
		return jQuery.attr( elem, "class" ) || "";
	}
	
	jQuery.fn.extend( {
		addClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
				} );
			}
	
			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];
	
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );
	
					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}
	
						// only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							jQuery.attr( elem, "class", finalValue );
						}
					}
				}
			}
	
			return this;
		},
	
		removeClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
				} );
			}
	
			if ( !arguments.length ) {
				return this.attr( "class", "" );
			}
	
			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];
	
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
	
					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );
	
					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
	
							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}
	
						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							jQuery.attr( elem, "class", finalValue );
						}
					}
				}
			}
	
			return this;
		},
	
		toggleClass: function( value, stateVal ) {
			var type = typeof value;
	
			if ( typeof stateVal === "boolean" && type === "string" ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( i ) {
					jQuery( this ).toggleClass(
						value.call( this, i, getClass( this ), stateVal ),
						stateVal
					);
				} );
			}
	
			return this.each( function() {
				var className, i, self, classNames;
	
				if ( type === "string" ) {
	
					// Toggle individual class names
					i = 0;
					self = jQuery( this );
					classNames = value.match( rnotwhite ) || [];
	
					while ( ( className = classNames[ i++ ] ) ) {
	
						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}
	
				// Toggle whole class name
				} else if ( value === undefined || type === "boolean" ) {
					className = getClass( this );
					if ( className ) {
	
						// store className if set
						jQuery._data( this, "__className__", className );
					}
	
					// If the element has a class name or if we're passed "false",
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					jQuery.attr( this, "class",
						className || value === false ?
						"" :
						jQuery._data( this, "__className__" ) || ""
					);
				}
			} );
		},
	
		hasClass: function( selector ) {
			var className, elem,
				i = 0;
	
			className = " " + selector + " ";
			while ( ( elem = this[ i++ ] ) ) {
				if ( elem.nodeType === 1 &&
					( " " + getClass( elem ) + " " ).replace( rclass, " " )
						.indexOf( className ) > -1
				) {
					return true;
				}
			}
	
			return false;
		}
	} );
	
	
	
	
	// Return jQuery for attributes-only inclusion
	
	
	jQuery.each( ( "blur focus focusin focusout load resize scroll unload click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup error contextmenu" ).split( " " ),
		function( i, name ) {
	
		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );
	
	jQuery.fn.extend( {
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		}
	} );
	
	
	var location = window.location;
	
	var nonce = jQuery.now();
	
	var rquery = ( /\?/ );
	
	
	
	var rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;
	
	jQuery.parseJSON = function( data ) {
	
		// Attempt to parse using the native JSON parser first
		if ( window.JSON && window.JSON.parse ) {
	
			// Support: Android 2.3
			// Workaround failure to string-cast null input
			return window.JSON.parse( data + "" );
		}
	
		var requireNonComma,
			depth = null,
			str = jQuery.trim( data + "" );
	
		// Guard against invalid (and possibly dangerous) input by ensuring that nothing remains
		// after removing valid tokens
		return str && !jQuery.trim( str.replace( rvalidtokens, function( token, comma, open, close ) {
	
			// Force termination if we see a misplaced comma
			if ( requireNonComma && comma ) {
				depth = 0;
			}
	
			// Perform no more replacements after returning to outermost depth
			if ( depth === 0 ) {
				return token;
			}
	
			// Commas must not follow "[", "{", or ","
			requireNonComma = open || comma;
	
			// Determine new depth
			// array/object open ("[" or "{"): depth += true - false (increment)
			// array/object close ("]" or "}"): depth += false - true (decrement)
			// other cases ("," or primitive): depth += true - true (numeric cast)
			depth += !close - !open;
	
			// Remove this token
			return "";
		} ) ) ?
			( Function( "return " + str ) )() :
			jQuery.error( "Invalid JSON: " + data );
	};
	
	
	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml, tmp;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		try {
			if ( window.DOMParser ) { // Standard
				tmp = new window.DOMParser();
				xml = tmp.parseFromString( data, "text/xml" );
			} else { // IE
				xml = new window.ActiveXObject( "Microsoft.XMLDOM" );
				xml.async = "false";
				xml.loadXML( data );
			}
		} catch ( e ) {
			xml = undefined;
		}
		if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};
	
	
	var
		rhash = /#.*$/,
		rts = /([?&])_=[^&]*/,
	
		// IE leaves an \r character at EOL
		rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg,
	
		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,
		rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,
	
		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},
	
		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},
	
		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),
	
		// Document location
		ajaxLocation = location.href,
	
		// Segment location into parts
		ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];
	
	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {
	
		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {
	
			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}
	
			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];
	
			if ( jQuery.isFunction( func ) ) {
	
				// For each dataType in the dataTypeExpression
				while ( ( dataType = dataTypes[ i++ ] ) ) {
	
					// Prepend if requested
					if ( dataType.charAt( 0 ) === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );
	
					// Otherwise append
					} else {
						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
					}
				}
			}
		};
	}
	
	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {
	
		var inspected = {},
			seekingTransport = ( structure === transports );
	
		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" &&
					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {
	
					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			} );
			return selected;
		}
	
		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}
	
	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var deep, key,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};
	
		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}
	
		return target;
	}
	
	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {
		var firstDataType, ct, finalDataType, type,
			contents = s.contents,
			dataTypes = s.dataTypes;
	
		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
			}
		}
	
		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}
	
		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {
	
			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}
	
			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}
	
		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}
	
	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},
	
			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();
	
		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}
	
		current = dataTypes.shift();
	
		// Convert to each sequential dataType
		while ( current ) {
	
			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}
	
			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}
	
			prev = current;
			current = dataTypes.shift();
	
			if ( current ) {
	
				// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {
	
					current = prev;
	
				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {
	
					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];
	
					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {
	
							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {
	
								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {
	
									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];
	
									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}
	
					// Apply converter (if not an equivalence)
					if ( conv !== true ) {
	
						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s[ "throws" ] ) { // jscs:ignore requireDotNotation
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}
	
		return { state: "success", data: response };
	}
	
	jQuery.extend( {
	
		// Counter for holding the number of active queries
		active: 0,
	
		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},
	
		ajaxSettings: {
			url: ajaxLocation,
			type: "GET",
			isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/
	
			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},
	
			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},
	
			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},
	
			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {
	
				// Convert anything to text
				"* text": String,
	
				// Text to html (true = no transformation)
				"text html": true,
	
				// Evaluate text as a json expression
				"text json": jQuery.parseJSON,
	
				// Parse text as xml
				"text xml": jQuery.parseXML
			},
	
			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},
	
		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?
	
				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :
	
				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},
	
		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),
	
		// Main method
		ajax: function( url, options ) {
	
			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}
	
			// Force options to be an object
			options = options || {};
	
			var
	
				// Cross-domain detection vars
				parts,
	
				// Loop variable
				i,
	
				// URL without anti-cache param
				cacheURL,
	
				// Response headers as string
				responseHeadersString,
	
				// timeout handle
				timeoutTimer,
	
				// To know if global events are to be dispatched
				fireGlobals,
	
				transport,
	
				// Response headers
				responseHeaders,
	
				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),
	
				// Callbacks context
				callbackContext = s.context || s,
	
				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context &&
					( callbackContext.nodeType || callbackContext.jquery ) ?
						jQuery( callbackContext ) :
						jQuery.event,
	
				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks( "once memory" ),
	
				// Status-dependent callbacks
				statusCode = s.statusCode || {},
	
				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},
	
				// The jqXHR state
				state = 0,
	
				// Default abort message
				strAbort = "canceled",
	
				// Fake xhr
				jqXHR = {
					readyState: 0,
	
					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( state === 2 ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
									responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},
	
					// Raw string
					getAllResponseHeaders: function() {
						return state === 2 ? responseHeadersString : null;
					},
	
					// Caches the header
					setRequestHeader: function( name, value ) {
						var lname = name.toLowerCase();
						if ( !state ) {
							name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},
	
					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( !state ) {
							s.mimeType = type;
						}
						return this;
					},
	
					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( state < 2 ) {
								for ( code in map ) {
	
									// Lazy-add the new callback in a way that preserves old ones
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							} else {
	
								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							}
						}
						return this;
					},
	
					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};
	
			// Attach deferreds
			deferred.promise( jqXHR ).complete = completeDeferred.add;
			jqXHR.success = jqXHR.done;
			jqXHR.error = jqXHR.fail;
	
			// Remove hash character (#7531: and string promotion)
			// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || ajaxLocation ) + "" )
				.replace( rhash, "" )
				.replace( rprotocol, ajaxLocParts[ 1 ] + "//" );
	
			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;
	
			// Extract dataTypes list
			s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];
	
			// A cross-domain request is in order when we have a protocol:host:port mismatch
			if ( s.crossDomain == null ) {
				parts = rurl.exec( s.url.toLowerCase() );
				s.crossDomain = !!( parts &&
					( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
						( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
							( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
				);
			}
	
			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}
	
			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );
	
			// If request was aborted inside a prefilter, stop there
			if ( state === 2 ) {
				return jqXHR;
			}
	
			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;
	
			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger( "ajaxStart" );
			}
	
			// Uppercase the type
			s.type = s.type.toUpperCase();
	
			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );
	
			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			cacheURL = s.url;
	
			// More options handling for requests with no content
			if ( !s.hasContent ) {
	
				// If data is available, append data to url
				if ( s.data ) {
					cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
	
					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}
	
				// Add anti-cache in url if needed
				if ( s.cache === false ) {
					s.url = rts.test( cacheURL ) ?
	
						// If there is already a '_' parameter, set its value
						cacheURL.replace( rts, "$1_=" + nonce++ ) :
	
						// Otherwise add one to the end
						cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
				}
			}
	
			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}
	
			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}
	
			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
					s.accepts[ s.dataTypes[ 0 ] ] +
						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);
	
			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}
	
			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend &&
				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
	
				// Abort if not done already and return
				return jqXHR.abort();
			}
	
			// aborting is no longer a cancellation
			strAbort = "abort";
	
			// Install callbacks on deferreds
			for ( i in { success: 1, error: 1, complete: 1 } ) {
				jqXHR[ i ]( s[ i ] );
			}
	
			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );
	
			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;
	
				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}
	
				// If request was aborted inside ajaxSend, stop there
				if ( state === 2 ) {
					return jqXHR;
				}
	
				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = window.setTimeout( function() {
						jqXHR.abort( "timeout" );
					}, s.timeout );
				}
	
				try {
					state = 1;
					transport.send( requestHeaders, done );
				} catch ( e ) {
	
					// Propagate exception as error if not done
					if ( state < 2 ) {
						done( -1, e );
	
					// Simply rethrow otherwise
					} else {
						throw e;
					}
				}
			}
	
			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;
	
				// Called once
				if ( state === 2 ) {
					return;
				}
	
				// State is "done" now
				state = 2;
	
				// Clear timeout if it exists
				if ( timeoutTimer ) {
					window.clearTimeout( timeoutTimer );
				}
	
				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;
	
				// Cache response headers
				responseHeadersString = headers || "";
	
				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;
	
				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;
	
				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}
	
				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );
	
				// If successful, handle type chaining
				if ( isSuccess ) {
	
					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader( "Last-Modified" );
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader( "etag" );
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}
	
					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";
	
					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";
	
					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {
	
					// We extract error from statusText
					// then normalize statusText and status for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}
	
				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";
	
				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}
	
				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;
	
				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}
	
				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );
	
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
	
					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger( "ajaxStop" );
					}
				}
			}
	
			return jqXHR;
		},
	
		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},
	
		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	} );
	
	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {
	
			// shift arguments if data argument was omitted
			if ( jQuery.isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}
	
			// The url can be an options object (which then must have .url)
			return jQuery.ajax( jQuery.extend( {
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject( url ) && url ) );
		};
	} );
	
	
	jQuery._evalUrl = function( url ) {
		return jQuery.ajax( {
			url: url,
	
			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			cache: true,
			async: false,
			global: false,
			"throws": true
		} );
	};
	
	
	jQuery.fn.extend( {
		wrapAll: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapAll( html.call( this, i ) );
				} );
			}
	
			if ( this[ 0 ] ) {
	
				// The elements to wrap the target around
				var wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );
	
				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}
	
				wrap.map( function() {
					var elem = this;
	
					while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
						elem = elem.firstChild;
					}
	
					return elem;
				} ).append( this );
			}
	
			return this;
		},
	
		wrapInner: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapInner( html.call( this, i ) );
				} );
			}
	
			return this.each( function() {
				var self = jQuery( this ),
					contents = self.contents();
	
				if ( contents.length ) {
					contents.wrapAll( html );
	
				} else {
					self.append( html );
				}
			} );
		},
	
		wrap: function( html ) {
			var isFunction = jQuery.isFunction( html );
	
			return this.each( function( i ) {
				jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
			} );
		},
	
		unwrap: function() {
			return this.parent().each( function() {
				if ( !jQuery.nodeName( this, "body" ) ) {
					jQuery( this ).replaceWith( this.childNodes );
				}
			} ).end();
		}
	} );
	
	
	function getDisplay( elem ) {
		return elem.style && elem.style.display || jQuery.css( elem, "display" );
	}
	
	function filterHidden( elem ) {
		while ( elem && elem.nodeType === 1 ) {
			if ( getDisplay( elem ) === "none" || elem.type === "hidden" ) {
				return true;
			}
			elem = elem.parentNode;
		}
		return false;
	}
	
	jQuery.expr.filters.hidden = function( elem ) {
	
		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		return support.reliableHiddenOffsets() ?
			( elem.offsetWidth <= 0 && elem.offsetHeight <= 0 &&
				!elem.getClientRects().length ) :
				filterHidden( elem );
	};
	
	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};
	
	
	
	
	var r20 = /%20/g,
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;
	
	function buildParams( prefix, obj, traditional, add ) {
		var name;
	
		if ( jQuery.isArray( obj ) ) {
	
			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {
	
					// Treat each array item as a scalar.
					add( prefix, v );
	
				} else {
	
					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(
						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
						v,
						traditional,
						add
					);
				}
			} );
	
		} else if ( !traditional && jQuery.type( obj ) === "object" ) {
	
			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}
	
		} else {
	
			// Serialize scalar item.
			add( prefix, obj );
		}
	}
	
	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, value ) {
	
				// If value is a function, invoke it and return its value
				value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
				s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
			};
	
		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if ( traditional === undefined ) {
			traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
		}
	
		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
	
			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			} );
	
		} else {
	
			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}
	
		// Return the resulting serialization
		return s.join( "&" ).replace( r20, "+" );
	};
	
	jQuery.fn.extend( {
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map( function() {
	
				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			} )
			.filter( function() {
				var type = this.type;
	
				// Use .is(":disabled") so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			} )
			.map( function( i, elem ) {
				var val = jQuery( this ).val();
	
				return val == null ?
					null :
					jQuery.isArray( val ) ?
						jQuery.map( val, function( val ) {
							return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
						} ) :
						{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			} ).get();
		}
	} );
	
	
	// Create the request object
	// (This is still attached to ajaxSettings for backward compatibility)
	jQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ?
	
		// Support: IE6-IE8
		function() {
	
			// XHR cannot access local files, always use ActiveX for that case
			if ( this.isLocal ) {
				return createActiveXHR();
			}
	
			// Support: IE 9-11
			// IE seems to error on cross-domain PATCH requests when ActiveX XHR
			// is used. In IE 9+ always use the native XHR.
			// Note: this condition won't catch Edge as it doesn't define
			// document.documentMode but it also doesn't support ActiveX so it won't
			// reach this code.
			if ( document.documentMode > 8 ) {
				return createStandardXHR();
			}
	
			// Support: IE<9
			// oldIE XHR does not support non-RFC2616 methods (#13240)
			// See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx
			// and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9
			// Although this check for six methods instead of eight
			// since IE also does not support "trace" and "connect"
			return /^(get|post|head|put|delete|options)$/i.test( this.type ) &&
				createStandardXHR() || createActiveXHR();
		} :
	
		// For all other browsers, use the standard XMLHttpRequest object
		createStandardXHR;
	
	var xhrId = 0,
		xhrCallbacks = {},
		xhrSupported = jQuery.ajaxSettings.xhr();
	
	// Support: IE<10
	// Open requests must be manually aborted on unload (#5280)
	// See https://support.microsoft.com/kb/2856746 for more info
	if ( window.attachEvent ) {
		window.attachEvent( "onunload", function() {
			for ( var key in xhrCallbacks ) {
				xhrCallbacks[ key ]( undefined, true );
			}
		} );
	}
	
	// Determine support properties
	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	xhrSupported = support.ajax = !!xhrSupported;
	
	// Create transport if the browser can provide an xhr
	if ( xhrSupported ) {
	
		jQuery.ajaxTransport( function( options ) {
	
			// Cross domain only allowed if supported through XMLHttpRequest
			if ( !options.crossDomain || support.cors ) {
	
				var callback;
	
				return {
					send: function( headers, complete ) {
						var i,
							xhr = options.xhr(),
							id = ++xhrId;
	
						// Open the socket
						xhr.open(
							options.type,
							options.url,
							options.async,
							options.username,
							options.password
						);
	
						// Apply custom fields if provided
						if ( options.xhrFields ) {
							for ( i in options.xhrFields ) {
								xhr[ i ] = options.xhrFields[ i ];
							}
						}
	
						// Override mime type if needed
						if ( options.mimeType && xhr.overrideMimeType ) {
							xhr.overrideMimeType( options.mimeType );
						}
	
						// X-Requested-With header
						// For cross-domain requests, seeing as conditions for a preflight are
						// akin to a jigsaw puzzle, we simply never set it to be sure.
						// (it can always be set on a per-request basis or even using ajaxSetup)
						// For same-domain requests, won't change header if already provided.
						if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
							headers[ "X-Requested-With" ] = "XMLHttpRequest";
						}
	
						// Set headers
						for ( i in headers ) {
	
							// Support: IE<9
							// IE's ActiveXObject throws a 'Type Mismatch' exception when setting
							// request header to a null-value.
							//
							// To keep consistent with other XHR implementations, cast the value
							// to string and ignore `undefined`.
							if ( headers[ i ] !== undefined ) {
								xhr.setRequestHeader( i, headers[ i ] + "" );
							}
						}
	
						// Do send the request
						// This may raise an exception which is actually
						// handled in jQuery.ajax (so no try/catch here)
						xhr.send( ( options.hasContent && options.data ) || null );
	
						// Listener
						callback = function( _, isAbort ) {
							var status, statusText, responses;
	
							// Was never called and is aborted or complete
							if ( callback && ( isAbort || xhr.readyState === 4 ) ) {
	
								// Clean up
								delete xhrCallbacks[ id ];
								callback = undefined;
								xhr.onreadystatechange = jQuery.noop;
	
								// Abort manually if needed
								if ( isAbort ) {
									if ( xhr.readyState !== 4 ) {
										xhr.abort();
									}
								} else {
									responses = {};
									status = xhr.status;
	
									// Support: IE<10
									// Accessing binary-data responseText throws an exception
									// (#11426)
									if ( typeof xhr.responseText === "string" ) {
										responses.text = xhr.responseText;
									}
	
									// Firefox throws an exception when accessing
									// statusText for faulty cross-domain requests
									try {
										statusText = xhr.statusText;
									} catch ( e ) {
	
										// We normalize with Webkit giving an empty statusText
										statusText = "";
									}
	
									// Filter status for non standard behaviors
	
									// If the request is local and we have data: assume a success
									// (success with no data won't get notified, that's the best we
									// can do given current implementations)
									if ( !status && options.isLocal && !options.crossDomain ) {
										status = responses.text ? 200 : 404;
	
									// IE - #1450: sometimes returns 1223 when it should be 204
									} else if ( status === 1223 ) {
										status = 204;
									}
								}
							}
	
							// Call complete if needed
							if ( responses ) {
								complete( status, statusText, responses, xhr.getAllResponseHeaders() );
							}
						};
	
						// Do send the request
						// `xhr.send` may raise an exception, but it will be
						// handled in jQuery.ajax (so no try/catch here)
						if ( !options.async ) {
	
							// If we're in sync mode we fire the callback
							callback();
						} else if ( xhr.readyState === 4 ) {
	
							// (IE6 & IE7) if it's in cache and has been
							// retrieved directly we need to fire the callback
							window.setTimeout( callback );
						} else {
	
							// Register the callback, but delay it in case `xhr.send` throws
							// Add to the list of active xhr callbacks
							xhr.onreadystatechange = xhrCallbacks[ id ] = callback;
						}
					},
	
					abort: function() {
						if ( callback ) {
							callback( undefined, true );
						}
					}
				};
			}
		} );
	}
	
	// Functions to create xhrs
	function createStandardXHR() {
		try {
			return new window.XMLHttpRequest();
		} catch ( e ) {}
	}
	
	function createActiveXHR() {
		try {
			return new window.ActiveXObject( "Microsoft.XMLHTTP" );
		} catch ( e ) {}
	}
	
	
	
	
	// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
	jQuery.ajaxPrefilter( function( s ) {
		if ( s.crossDomain ) {
			s.contents.script = false;
		}
	} );
	
	// Install script dataType
	jQuery.ajaxSetup( {
		accepts: {
			script: "text/javascript, application/javascript, " +
				"application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	} );
	
	// Handle cache's special case and global
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
			s.global = false;
		}
	} );
	
	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {
	
		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {
	
			var script,
				head = document.head || jQuery( "head" )[ 0 ] || document.documentElement;
	
			return {
	
				send: function( _, callback ) {
	
					script = document.createElement( "script" );
	
					script.async = true;
	
					if ( s.scriptCharset ) {
						script.charset = s.scriptCharset;
					}
	
					script.src = s.url;
	
					// Attach handlers for all browsers
					script.onload = script.onreadystatechange = function( _, isAbort ) {
	
						if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {
	
							// Handle memory leak in IE
							script.onload = script.onreadystatechange = null;
	
							// Remove the script
							if ( script.parentNode ) {
								script.parentNode.removeChild( script );
							}
	
							// Dereference the script
							script = null;
	
							// Callback if not abort
							if ( !isAbort ) {
								callback( 200, "success" );
							}
						}
					};
	
					// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
					// Use native DOM manipulation to avoid our domManip AJAX trickery
					head.insertBefore( script, head.firstChild );
				},
	
				abort: function() {
					if ( script ) {
						script.onload( undefined, true );
					}
				}
			};
		}
	} );
	
	
	
	
	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;
	
	// Default jsonp settings
	jQuery.ajaxSetup( {
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	} );
	
	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {
	
		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" &&
					( s.contentType || "" )
						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
					rjsonp.test( s.data ) && "data"
			);
	
		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {
	
			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;
	
			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}
	
			// Use data converter to retrieve json after script execution
			s.converters[ "script json" ] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};
	
			// force json dataType
			s.dataTypes[ 0 ] = "json";
	
			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};
	
			// Clean-up function (fires after converters)
			jqXHR.always( function() {
	
				// If previous value didn't exist - remove it
				if ( overwritten === undefined ) {
					jQuery( window ).removeProp( callbackName );
	
				// Otherwise restore preexisting value
				} else {
					window[ callbackName ] = overwritten;
				}
	
				// Save back as free
				if ( s[ callbackName ] ) {
	
					// make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;
	
					// save the callback name for future use
					oldCallbacks.push( callbackName );
				}
	
				// Call if it was a function and we have a response
				if ( responseContainer && jQuery.isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}
	
				responseContainer = overwritten = undefined;
			} );
	
			// Delegate to script
			return "script";
		}
	} );
	
	
	
	
	// Support: Safari 8+
	// In Safari 8 documents created via document.implementation.createHTMLDocument
	// collapse sibling forms: the second one becomes a child of the first one.
	// Because of that, this security measure has to be disabled in Safari 8.
	// https://bugs.webkit.org/show_bug.cgi?id=137337
	support.createHTMLDocument = ( function() {
		if ( !document.implementation.createHTMLDocument ) {
			return false;
		}
		var doc = document.implementation.createHTMLDocument( "" );
		doc.body.innerHTML = "<form></form><form></form>";
		return doc.body.childNodes.length === 2;
	} )();
	
	
	// data: string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
	
		// document.implementation stops scripts or inline event handlers from
		// being executed immediately
		context = context || ( support.createHTMLDocument ?
			document.implementation.createHTMLDocument( "" ) :
			document );
	
		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];
	
		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[ 1 ] ) ];
		}
	
		parsed = buildFragment( [ data ], context, scripts );
	
		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}
	
		return jQuery.merge( [], parsed.childNodes );
	};
	
	
	// Keep a copy of the old load method
	var _load = jQuery.fn.load;
	
	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		if ( typeof url !== "string" && _load ) {
			return _load.apply( this, arguments );
		}
	
		var selector, type, response,
			self = this,
			off = url.indexOf( " " );
	
		if ( off > -1 ) {
			selector = jQuery.trim( url.slice( off, url.length ) );
			url = url.slice( 0, off );
		}
	
		// If it's a function
		if ( jQuery.isFunction( params ) ) {
	
			// We assume that it's the callback
			callback = params;
			params = undefined;
	
		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}
	
		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax( {
				url: url,
	
				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			} ).done( function( responseText ) {
	
				// Save response for use in complete callback
				response = arguments;
	
				self.html( selector ?
	
					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :
	
					// Otherwise use the full result
					responseText );
	
			// If the request succeeds, this function gets "data", "status", "jqXHR"
			// but they are ignored because response was set above.
			// If it fails, this function gets "jqXHR", "status", "error"
			} ).always( callback && function( jqXHR, status ) {
				self.each( function() {
					callback.apply( self, response || [ jqXHR.responseText, status, jqXHR ] );
				} );
			} );
		}
	
		return this;
	};
	
	
	
	
	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [
		"ajaxStart",
		"ajaxStop",
		"ajaxComplete",
		"ajaxError",
		"ajaxSuccess",
		"ajaxSend"
	], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	} );
	
	
	
	
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep( jQuery.timers, function( fn ) {
			return elem === fn.elem;
		} ).length;
	};
	
	
	
	
	
	/**
	 * Gets a window from an element
	 */
	function getWindow( elem ) {
		return jQuery.isWindow( elem ) ?
			elem :
			elem.nodeType === 9 ?
				elem.defaultView || elem.parentWindow :
				false;
	}
	
	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};
	
			// set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}
	
			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				jQuery.inArray( "auto", [ curCSSTop, curCSSLeft ] ) > -1;
	
			// need to be able to calculate position if either top or left
			// is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;
			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}
	
			if ( jQuery.isFunction( options ) ) {
	
				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
			}
	
			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}
	
			if ( "using" in options ) {
				options.using.call( elem, props );
			} else {
				curElem.css( props );
			}
		}
	};
	
	jQuery.fn.extend( {
		offset: function( options ) {
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each( function( i ) {
						jQuery.offset.setOffset( this, options, i );
					} );
			}
	
			var docElem, win,
				box = { top: 0, left: 0 },
				elem = this[ 0 ],
				doc = elem && elem.ownerDocument;
	
			if ( !doc ) {
				return;
			}
	
			docElem = doc.documentElement;
	
			// Make sure it's not a disconnected DOM node
			if ( !jQuery.contains( docElem, elem ) ) {
				return box;
			}
	
			// If we don't have gBCR, just use 0,0 rather than error
			// BlackBerry 5, iOS 3 (original iPhone)
			if ( typeof elem.getBoundingClientRect !== "undefined" ) {
				box = elem.getBoundingClientRect();
			}
			win = getWindow( doc );
			return {
				top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
				left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
			};
		},
	
		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}
	
			var offsetParent, offset,
				parentOffset = { top: 0, left: 0 },
				elem = this[ 0 ];
	
			// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
			// because it is its only offset parent
			if ( jQuery.css( elem, "position" ) === "fixed" ) {
	
				// we assume that getBoundingClientRect is available when computed position is fixed
				offset = elem.getBoundingClientRect();
			} else {
	
				// Get *real* offsetParent
				offsetParent = this.offsetParent();
	
				// Get correct offsets
				offset = this.offset();
				if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
					parentOffset = offsetParent.offset();
				}
	
				// Add offsetParent borders
				parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
			}
	
			// Subtract parent offsets and element margins
			// note: when an element has margin: auto the offsetLeft and marginLeft
			// are the same in Safari causing offset.left to incorrectly be 0
			return {
				top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},
	
		offsetParent: function() {
			return this.map( function() {
				var offsetParent = this.offsetParent;
	
				while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) &&
					jQuery.css( offsetParent, "position" ) === "static" ) ) {
					offsetParent = offsetParent.offsetParent;
				}
				return offsetParent || documentElement;
			} );
		}
	} );
	
	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = /Y/.test( prop );
	
		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {
				var win = getWindow( elem );
	
				if ( val === undefined ) {
					return win ? ( prop in win ) ? win[ prop ] :
						win.document.documentElement[ method ] :
						elem[ method ];
				}
	
				if ( win ) {
					win.scrollTo(
						!top ? val : jQuery( win ).scrollLeft(),
						top ? val : jQuery( win ).scrollTop()
					);
	
				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length, null );
		};
	} );
	
	// Support: Safari<7-8+, Chrome<37-44+
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// getComputedStyle returns percent when specified for top/left/bottom/right
	// rather than make the css module depend on the offset module, we just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );
	
					// if curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	} );
	
	
	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {
	
			// margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );
	
				return access( this, function( elem, type, value ) {
					var doc;
	
					if ( jQuery.isWindow( elem ) ) {
	
						// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
						// isn't a whole lot we can do. See pull request at this URL for discussion:
						// https://github.com/jquery/jquery/pull/764
						return elem.document.documentElement[ "client" + name ];
					}
	
					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;
	
						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						// unfortunately, this causes bug #3838 in IE6/8 only,
						// but there is currently no good, small way to fix it.
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}
	
					return value === undefined ?
	
						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :
	
						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable, null );
			};
		} );
	} );
	
	
	jQuery.fn.extend( {
	
		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},
	
		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {
	
			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ?
				this.off( selector, "**" ) :
				this.off( types, selector || "**", fn );
		}
	} );
	
	// The number of elements contained in the matched element set
	jQuery.fn.size = function() {
		return this.length;
	};
	
	jQuery.fn.andSelf = jQuery.fn.addBack;
	
	
	
	
	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.
	
	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon
	
	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}
	
	
	
	var
	
		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,
	
		// Map over the $ in case of overwrite
		_$ = window.$;
	
	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}
	
		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}
	
		return jQuery;
	};
	
	// Expose jQuery and $ identifiers, even in
	// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( !noGlobal ) {
		window.jQuery = window.$ = jQuery;
	}
	
	return jQuery;
	}));


/***/ },
/* 403 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/* eslint okta/enforce-requirejs-names: 0, okta/no-specific-modules: 0, max-params: 0, max-statements: 0 */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(332), __webpack_require__(330), __webpack_require__(404), __webpack_require__(405), __webpack_require__(416), __webpack_require__(417)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Handlebars, _, $, StringUtil, markdownToHtml, moment) {
	
	  var CACHE_BUST_URL_PREFIX = '/assets';
	
	  function formatDate(format, dateInISOString) {
	    return moment.utc(dateInISOString).utcOffset('-07:00').format(format);
	  }
	
	  function trim(str) {
	    return str && str.replace(/^\s+|\s+$/g, '');
	  }
	
	  function prependCachebustPrefix(path) {
	    if (path.indexOf(CACHE_BUST_URL_PREFIX) === 0) {
	      return path;
	    }
	    return CACHE_BUST_URL_PREFIX + path;
	  }
	
	  Handlebars.registerHelper('i18n', function (options) {
	    var params,
	        key = trim(options.hash.code),
	        bundle = trim(options.hash.bundle),
	        args = trim(options.hash['arguments']);
	
	    if (args) {
	      params = _.map(trim(args).split(';'), function (param) {
	        param = trim(param);
	        var val,
	            data = this;
	        /*
	         * the context(data) may be a deep object, ex {user: {name: 'John', gender: 'M'}}
	         * arguments may be 'user.name'
	         * return data['user']['name']
	         */
	        _.each(param.split('.'), function (p) {
	          val = val ? val[p] : data[p];
	        });
	        return val;
	      }, this);
	    }
	
	    return StringUtil.localize(key, bundle, params);
	  });
	
	  Handlebars.registerHelper('xsrfTokenInput', function () {
	    return new Handlebars.SafeString('<input type="hidden" class="hide" name="_xsrfToken" ' + 'value="' + $('#_xsrfToken').text() + '">');
	  });
	
	  Handlebars.registerHelper('img', function (options) {
	    /*global okta */
	    var cdn = typeof okta != 'undefined' && okta.cdnUrlHostname || '';
	    var hash = _.pick(options.hash, ['src', 'alt', 'width', 'height', 'class', 'title']);
	    hash.src = '' + cdn + prependCachebustPrefix(hash.src);
	    var attrs = _.map(hash, function (value, attr) {
	      return attr + '="' + Handlebars.Utils.escapeExpression(value) + '"';
	    });
	    return new Handlebars.SafeString('<img ' + attrs.join(' ') + '/>');
	  });
	
	  Handlebars.registerHelper('shortDate', _.partial(formatDate, 'MMM Do'));
	  Handlebars.registerHelper('mediumDate', _.partial(formatDate, 'MMMM DD, YYYY'));
	  Handlebars.registerHelper('longDate', _.partial(formatDate, 'MMMM DD, YYYY, h:mma'));
	  Handlebars.registerHelper('formatDate', formatDate);
	
	  Handlebars.registerHelper('markdown', function (mdText) {
	    return markdownToHtml(Handlebars, mdText);
	  });
	
	  return Handlebars;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 404 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/* eslint-disable okta/enforce-requirejs-names, okta/no-specific-modules */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(402)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($) {
	  $.ajaxSetup({
	    beforeSend: function beforeSend(xhr) {
	      xhr.setRequestHeader('X-Okta-XsrfToken', $('#_xsrfToken').text());
	    },
	    converters: {
	      'text secureJSON': function textSecureJSON(str) {
	        if (str.substring(0, 11) === 'while(1){};') {
	          str = str.substring(11);
	        }
	        return JSON.parse(str);
	      }
	    }
	  });
	
	  // Selenium Hook
	  // Widget such as autocomplete and autosuggest needs to be triggered from the running version of jQuery.
	  // We have 2 versions of jQuery running in parallel and they don't share the same events bus
	  window.jQueryCourage = $;
	  return $;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 405 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _stringify = __webpack_require__(406);
	
	var _stringify2 = _interopRequireDefault(_stringify);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(404), __webpack_require__(408), __webpack_require__(415)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, $, Bundles) {
	
	  var entityMap = {
	    '&amp;': '&',
	    '&lt;': '<',
	    '&gt;': '>',
	    '&quot;': '"',
	    '&#39;': '\'',
	    '&#039;': '\'',
	    '&#x2F;': '/'
	  };
	
	  /* eslint max-len: 0*/
	  var emailValidator = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@(?!-)((\[?[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\]?)|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
	
	  /**
	   * Handy utility functions to handle strings.
	   *
	   * @class module:Okta.internal.util.StringUtil
	   * @hideconstructor
	   */
	  var StringUtil = /** @lends module:Okta.internal.util.StringUtil */{
	    /** @static */
	    sprintf: function sprintf() {
	      /* eslint max-statements: [2, 11] */
	
	      var args = Array.prototype.slice.apply(arguments),
	          value = args.shift(),
	          oldValue = value;
	
	      function triggerError() {
	        throw new Error('Mismatch number of variables: ' + arguments[0] + ', ' + (0, _stringify2.default)(args));
	      }
	
	      for (var i = 0, l = args.length; i < l; i++) {
	        var entity = args[i];
	        value = value.replace('{' + i + '}', entity);
	        if (entity === undefined || entity === null || value === oldValue) {
	          triggerError();
	        }
	        oldValue = value;
	      }
	
	      if (/\{[\d+]\}/.test(value)) {
	        triggerError();
	      }
	
	      return value;
	    },
	
	    /**
	     * Converts a URI encoded query string into a hash map
	     * @param  {String} query The query string
	     * @return {Object} The map
	     * @static
	     * @example
	     * StringUtil.parseQuery('foo=bar&baz=qux') // {foo: 'bar', baz: 'qux'}
	     */
	    parseQuery: function parseQuery(query) {
	      var params = {};
	      var pairs = decodeURIComponent(query.replace(/\+/g, ' ')).split('&');
	      for (var i = 0; i < pairs.length; i++) {
	        var pair = pairs[i];
	        var data = pair.split('=');
	        params[data.shift()] = data.join('=');
	      }
	      return params;
	    },
	
	    /** @static */
	    encodeJSObject: function encodeJSObject(jsObj) {
	      return encodeURIComponent((0, _stringify2.default)(jsObj));
	    },
	
	    /** @static */
	    decodeJSObject: function decodeJSObject(jsObj) {
	      try {
	        return JSON.parse(decodeURIComponent(jsObj));
	      } catch (e) {
	        return null;
	      }
	    },
	
	    /** @static */
	    unescapeHtml: function unescapeHtml(string) {
	      return String(string).replace(/&[\w\#\d]{2,};/g, function (s) {
	        return entityMap[s] || s;
	      });
	    },
	
	    /**
	     * Translate a key to the localized value
	     * @static
	     * @param  {String} key The key
	     * @param  {String} [bundle="messages"] The name of the i18n bundle. Defaults to the first bundle in the list.
	     * @param  {Array} [params] A list of parameters to apply as tokens to the i18n value
	     * @return {String} The localized value
	     */
	    localize: function localize(key, bundleName, params) {
	      var bundle = bundleName ? Bundles[bundleName] : Bundles[_.keys(Bundles)[0]];
	
	      if (!bundle) {
	        return 'L10N_ERROR[' + bundleName + ']';
	      }
	
	      var value = bundle[key];
	
	      try {
	        params = params && params.slice ? params.slice(0) : [];
	        params.unshift(value);
	        value = StringUtil.sprintf.apply(null, params);
	      } catch (e) {
	        value = null;
	      }
	
	      return value || 'L10N_ERROR[' + key + ']';
	    },
	
	    /**
	    * Convert a string to a float if valid, otherwise return the string.
	    * Valid numbers may contain a negative sign and a decimal point.
	    * @static
	    * @param {String} string The string to convert to a number
	    * @return {String|Number} Returns a number if the string can be casted, otherwise returns the original string
	    */
	    parseFloat: function (_parseFloat) {
	      function parseFloat(_x) {
	        return _parseFloat.apply(this, arguments);
	      }
	
	      parseFloat.toString = function () {
	        return _parseFloat.toString();
	      };
	
	      return parseFloat;
	    }(function (string) {
	      var number = +string;
	      return typeof string == 'string' && number === parseFloat(string) ? number : string;
	    }),
	
	    /**
	     * Convert a string to an integer if valid, otherwise return the string
	     * @static
	     * @param {String} string The string to convert to an integer
	     * @return {String|integer} Returns an integer if the string can be casted, otherwise, returns the original string
	     */
	    parseInt: function (_parseInt) {
	      function parseInt(_x2) {
	        return _parseInt.apply(this, arguments);
	      }
	
	      parseInt.toString = function () {
	        return _parseInt.toString();
	      };
	
	      return parseInt;
	    }(function (string) {
	      var int = +string;
	      return _.isString(string) && int === parseInt(string, 10) ? int : string;
	    }),
	
	    /**
	     * Convert a string to an object if valid, otherwise return the string
	     * @static
	     * @param {String} string The string to convert to an object
	     * @return {String|object} Returns an object if the string can be casted, otherwise, returns the original string
	     */
	    parseObject: function parseObject(string) {
	      if (!_.isString(string)) {
	        return string;
	      }
	
	      try {
	        var object = JSON.parse(string);
	        return $.isPlainObject(object) ? object : string;
	      } catch (e) {
	        return string;
	      }
	    },
	
	    /**
	     * Returns a random string from [a-z][A-Z][0-9] of a given length
	     * @static
	     * @param {Number} length The length of the random string.
	     * @return {String} Returns a random string from [a-z][A-Z][0-9] of a given length
	     */
	    randomString: function randomString(length) {
	      var characters = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz';
	
	      if (length === undefined) {
	        length = _.random(characters.length);
	      } else if (length === 0) {
	        return '';
	      }
	
	      var stringArray = [];
	      while (length--) {
	        stringArray.push(characters[_.random(characters.length - 1)]);
	      }
	      return stringArray.join('');
	    },
	
	    /**
	     * Returns if a str ends with another string
	     * @static
	     * @param {String} str The string to search
	     * @param {String} ends The string it should end with
	     *
	     * @return {Boolean} Returns if the str ends with ends
	     */
	    endsWith: function endsWith(str, ends) {
	      str += '';
	      ends += '';
	      return str.length >= ends.length && str.substring(str.length - ends.length) === ends;
	    },
	
	    /** @static */
	    isEmail: function isEmail(str) {
	      var target = $.trim(str);
	      return !_.isEmpty(target) && emailValidator.test(target);
	    }
	
	  };
	
	  return StringUtil;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 406 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(407), __esModule: true };

/***/ },
/* 407 */
/***/ function(module, exports, __webpack_require__) {

	var core = __webpack_require__(345);
	var $JSON = core.JSON || (core.JSON = { stringify: JSON.stringify });
	module.exports = function stringify(it) { // eslint-disable-line no-unused-vars
	  return $JSON.stringify.apply($JSON, arguments);
	};


/***/ },
/* 408 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _stringify = __webpack_require__(406);
	
	var _stringify2 = _interopRequireDefault(_stringify);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(409), __webpack_require__(404), __webpack_require__(414), __webpack_require__(410), __webpack_require__(411), __webpack_require__(412), __webpack_require__(413)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, Q, $, login, country, Logger, config, BrowserFeatures) {
	
	  var STORAGE_KEY = 'osw.languages';
	
	  var bundlePathTpl = _.template('/labels/jsonp/{{bundle}}_{{languageCode}}.jsonp');
	
	  /**
	   * Converts options to our internal format, which distinguishes between
	   * login and country bundles.
	   *
	   * Example options.i18n passed in by the developer:
	   * {
	   *   'en': {
	   *     'needhelp': 'need help override',
	   *     'primaryauth.title': 'new sign in text',
	   *     'country.JP' = 'Japan, Japan'
	   *   }
	   * }
	   *
	   * Parsed:
	   * {
	   *  'en': {
	   *    'login': {
	   *      'needhelp': 'need help override',
	   *      'primaryauth.title': 'new sign in text',
	   *    },
	   *    'country': {
	   *      'JP': 'Japan, Japan'
	   *    }
	   *  }
	   * }
	   */
	  function parseOverrides(i18n) {
	    if (!i18n) {
	      return {};
	    }
	
	    var i18nWithLowerCaseKeys = {};
	
	    _.each(_.keys(i18n), function (key) {
	      i18nWithLowerCaseKeys[key.toLowerCase()] = i18n[key];
	    });
	
	    return _.mapObject(i18nWithLowerCaseKeys, function (props) {
	      var mapped = { login: {}, country: {} };
	      if (!_.isObject(props)) {
	        throw new Error('Invalid format for "i18n"');
	      }
	      _.each(props, function (val, key) {
	        var split = key.split(/^country\./);
	        if (split.length > 1) {
	          mapped.country[split[1]] = val;
	        } else {
	          mapped.login[split[0]] = val;
	        }
	      });
	      return mapped;
	    });
	  }
	
	  // Caching: We only bundle English by default in the Sign-In Widget. Other
	  // languages are loaded on demand and cached in localStorage. These languages
	  // are tied to the version of the widget - when it bumps, we reset the cache.
	
	  function getCachedLanguages() {
	    var storage = JSON.parse(localStorage.getItem(STORAGE_KEY));
	    if (!storage || storage.version !== config.version) {
	      storage = {
	        version: config.version
	      };
	    }
	    return storage;
	  }
	
	  function addLanguageToCache(language, loginJson, countryJson) {
	    var current = getCachedLanguages();
	    current[language] = {
	      login: loginJson,
	      country: countryJson
	    };
	    localStorage.setItem(STORAGE_KEY, (0, _stringify2.default)(current));
	  }
	
	  // We use jsonp to get around any CORS issues if the developer is using
	  // the hosted version of the widget - by default, the assets.bundleUrl is
	  // tied to the Okta CDN.
	  //
	  // There are two overrides available for modifying where we load the asset
	  // bundles from:
	  //
	  // 1. assets.baseUrl
	  //
	  //    This is the base path the OSW pulls assets from, which in this case is
	  //    the Okta CDN. Override this config option if you want to host the
	  //    files on your own domain, or if you're using a new version of the
	  //    widget whose language files haven't been published to the CDN yet.
	  //
	  // 2. assets.rewrite
	  //
	  //    This is a function that can be used to modify the path + fileName of
	  //    the bundle we're loading, relative to the baseUrl. When called, it
	  //    will pass the current path, and expect the new path to be returned.
	  //    This is useful, for example, if your build process has an extra
	  //    cachebusting step, i.e:
	  //
	  //    function rewrite(file) {
	  //      // file: /labels/jsonp/login_ja.jsonp
	  //      return file.replace('.jsonp', '.' + md5file(file) + '.jsonp');
	  //    }
	  //
	  // Note: Most developers will not need to use these overrides - the default
	  // is to use the Okta CDN and to use the same path + file structure the
	  // widget module publishes by default.
	  function fetchJsonp(bundle, language, assets) {
	    var languageCode, path;
	
	    // Our bundles use _ to separate country and region, i.e:
	    // zh-CN -> zh_CN
	    languageCode = language.replace('-', '_');
	
	    path = assets.rewrite(bundlePathTpl({
	      bundle: bundle,
	      languageCode: languageCode
	    }));
	
	    return $.ajax({
	      url: assets.baseUrl + path,
	      dataType: 'jsonp',
	      cache: true,
	      // jQuery jsonp doesn't handle errors, so set a long timeout as a
	      // fallback option
	      timeout: 5000,
	      jsonpCallback: 'jsonp_' + bundle
	    });
	  }
	
	  function getBundles(language, assets) {
	    // Two special cases:
	    // 1. English is already bundled with the widget
	    // 2. If the language is not in our config file, it means that they've
	    //    probably defined it on their own.
	    if (language === 'en' || !_.contains(config.supportedLanguages, language)) {
	      return Q({});
	    }
	
	    //local storage does not work correctly with android web views (embeded browers)
	    //so skip the caching and just make the request to get the local info
	    var localStorageIsSupported = !BrowserFeatures.localStorageIsNotSupported();
	    if (localStorageIsSupported) {
	      var cached = getCachedLanguages();
	      if (cached[language]) {
	        return Q(cached[language]);
	      }
	    }
	
	    return Q.all([fetchJsonp('login', language, assets), fetchJsonp('country', language, assets)]).spread(function (loginJson, countryJson) {
	      if (localStorageIsSupported) {
	        addLanguageToCache(language, loginJson, countryJson);
	      }
	      return { login: loginJson, country: countryJson };
	    }).fail(function () {
	      // If there is an error, this will default to the bundled language and
	      // we will no longer try to load the language this session.
	      Logger.warn('Unable to load language: ' + language);
	      return {};
	    });
	  }
	
	  return {
	    login: login,
	    country: country,
	    // Courage components within the sign in widget point to courage bundle to look
	    // up i18nkeys. Since we dont have courage.properties inside the sign in widget
	    // we are pointing courage bundle to login.
	    courage: login,
	
	    currentLanguage: null,
	
	    isLoaded: function isLoaded(language) {
	      return this.currentLanguage === language;
	    },
	
	    remove: function remove() {
	      this.currentLanguage = null;
	    },
	
	    loadLanguage: function loadLanguage(language, overrides, assets) {
	      var parsedOverrides = parseOverrides(overrides);
	      var lowerCaseLanguage = language.toLowerCase();
	      return getBundles(language, assets).then(_.bind(function (bundles) {
	        // Always extend from the built in defaults in the event that some
	        // properties are not translated
	        this.login = _.extend({}, login, bundles.login);
	        this.country = _.extend({}, country, bundles.country);
	        this.courage = _.extend({}, login, bundles.login);
	        if (parsedOverrides[lowerCaseLanguage]) {
	          _.extend(this.login, parsedOverrides[lowerCaseLanguage]['login']);
	          _.extend(this.country, parsedOverrides[lowerCaseLanguage]['country']);
	          _.extend(this.courage, parsedOverrides[lowerCaseLanguage]['login']);
	        }
	        this.currentLanguage = language;
	      }, this));
	    }
	
	  };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 409 */
/***/ function(module, exports, __webpack_require__) {

	// vim:ts=4:sts=4:sw=4:
	/*!
	 *
	 * Copyright 2009-2012 Kris Kowal under the terms of the MIT
	 * license found at http://github.com/kriskowal/q/raw/master/LICENSE
	 *
	 * With parts by Tyler Close
	 * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found
	 * at http://www.opensource.org/licenses/mit-license.html
	 * Forked at ref_send.js version: 2009-05-11
	 *
	 * With parts by Mark Miller
	 * Copyright (C) 2011 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */
	
	(function (definition) {
	    "use strict";
	
	    // This file will function properly as a <script> tag, or a module
	    // using CommonJS and NodeJS or RequireJS module formats.  In
	    // Common/Node/RequireJS, the module exports the Q API and when
	    // executed as a simple <script>, it creates a Q global instead.
	
	    // Montage Require
	    if (typeof bootstrap === "function") {
	        bootstrap("promise", definition);
	
	    // CommonJS
	    } else if (true) {
	        module.exports = definition();
	
	    // RequireJS
	    } else if (typeof define === "function" && define.amd) {
	        define(definition);
	
	    // SES (Secure EcmaScript)
	    } else if (typeof ses !== "undefined") {
	        if (!ses.ok()) {
	            return;
	        } else {
	            ses.makeQ = definition;
	        }
	
	    // <script>
	    } else if (typeof window !== "undefined" || typeof self !== "undefined") {
	        // Prefer window over self for add-on scripts. Use self for
	        // non-windowed contexts.
	        var global = typeof window !== "undefined" ? window : self;
	
	        // Get the `window` object, save the previous Q global
	        // and initialize Q as a global.
	        var previousQ = global.Q;
	        global.Q = definition();
	
	        // Add a noConflict function so Q can be removed from the
	        // global namespace.
	        global.Q.noConflict = function () {
	            global.Q = previousQ;
	            return this;
	        };
	
	    } else {
	        throw new Error("This environment was not anticipated by Q. Please file a bug.");
	    }
	
	})(function () {
	"use strict";
	
	var hasStacks = false;
	try {
	    throw new Error();
	} catch (e) {
	    hasStacks = !!e.stack;
	}
	
	// All code after this point will be filtered from stack traces reported
	// by Q.
	var qStartingLine = captureLine();
	var qFileName;
	
	// shims
	
	// used for fallback in "allResolved"
	var noop = function () {};
	
	// Use the fastest possible means to execute a task in a future turn
	// of the event loop.
	var nextTick =(function () {
	    // linked list of tasks (single, with head node)
	    var head = {task: void 0, next: null};
	    var tail = head;
	    var flushing = false;
	    var requestTick = void 0;
	    var isNodeJS = false;
	    // queue for late tasks, used by unhandled rejection tracking
	    var laterQueue = [];
	
	    function flush() {
	        /* jshint loopfunc: true */
	        var task, domain;
	
	        while (head.next) {
	            head = head.next;
	            task = head.task;
	            head.task = void 0;
	            domain = head.domain;
	
	            if (domain) {
	                head.domain = void 0;
	                domain.enter();
	            }
	            runSingle(task, domain);
	
	        }
	        while (laterQueue.length) {
	            task = laterQueue.pop();
	            runSingle(task);
	        }
	        flushing = false;
	    }
	    // runs a single function in the async queue
	    function runSingle(task, domain) {
	        try {
	            task();
	
	        } catch (e) {
	            if (isNodeJS) {
	                // In node, uncaught exceptions are considered fatal errors.
	                // Re-throw them synchronously to interrupt flushing!
	
	                // Ensure continuation if the uncaught exception is suppressed
	                // listening "uncaughtException" events (as domains does).
	                // Continue in next event to avoid tick recursion.
	                if (domain) {
	                    domain.exit();
	                }
	                setTimeout(flush, 0);
	                if (domain) {
	                    domain.enter();
	                }
	
	                throw e;
	
	            } else {
	                // In browsers, uncaught exceptions are not fatal.
	                // Re-throw them asynchronously to avoid slow-downs.
	                setTimeout(function () {
	                    throw e;
	                }, 0);
	            }
	        }
	
	        if (domain) {
	            domain.exit();
	        }
	    }
	
	    nextTick = function (task) {
	        tail = tail.next = {
	            task: task,
	            domain: isNodeJS && process.domain,
	            next: null
	        };
	
	        if (!flushing) {
	            flushing = true;
	            requestTick();
	        }
	    };
	
	    if (typeof process === "object" &&
	        process.toString() === "[object process]" && process.nextTick) {
	        // Ensure Q is in a real Node environment, with a `process.nextTick`.
	        // To see through fake Node environments:
	        // * Mocha test runner - exposes a `process` global without a `nextTick`
	        // * Browserify - exposes a `process.nexTick` function that uses
	        //   `setTimeout`. In this case `setImmediate` is preferred because
	        //    it is faster. Browserify's `process.toString()` yields
	        //   "[object Object]", while in a real Node environment
	        //   `process.nextTick()` yields "[object process]".
	        isNodeJS = true;
	
	        requestTick = function () {
	            process.nextTick(flush);
	        };
	
	    } else if (typeof setImmediate === "function") {
	        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate
	        if (typeof window !== "undefined") {
	            requestTick = setImmediate.bind(window, flush);
	        } else {
	            requestTick = function () {
	                setImmediate(flush);
	            };
	        }
	
	    } else if (typeof MessageChannel !== "undefined") {
	        // modern browsers
	        // http://www.nonblocking.io/2011/06/windownexttick.html
	        var channel = new MessageChannel();
	        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create
	        // working message ports the first time a page loads.
	        channel.port1.onmessage = function () {
	            requestTick = requestPortTick;
	            channel.port1.onmessage = flush;
	            flush();
	        };
	        var requestPortTick = function () {
	            // Opera requires us to provide a message payload, regardless of
	            // whether we use it.
	            channel.port2.postMessage(0);
	        };
	        requestTick = function () {
	            setTimeout(flush, 0);
	            requestPortTick();
	        };
	
	    } else {
	        // old browsers
	        requestTick = function () {
	            setTimeout(flush, 0);
	        };
	    }
	    // runs a task after all other tasks have been run
	    // this is useful for unhandled rejection tracking that needs to happen
	    // after all `then`d tasks have been run.
	    nextTick.runAfter = function (task) {
	        laterQueue.push(task);
	        if (!flushing) {
	            flushing = true;
	            requestTick();
	        }
	    };
	    return nextTick;
	})();
	
	// Attempt to make generics safe in the face of downstream
	// modifications.
	// There is no situation where this is necessary.
	// If you need a security guarantee, these primordials need to be
	// deeply frozen anyway, and if you don’t need a security guarantee,
	// this is just plain paranoid.
	// However, this **might** have the nice side-effect of reducing the size of
	// the minified code by reducing x.call() to merely x()
	// See Mark Miller’s explanation of what this does.
	// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming
	var call = Function.call;
	function uncurryThis(f) {
	    return function () {
	        return call.apply(f, arguments);
	    };
	}
	// This is equivalent, but slower:
	// uncurryThis = Function_bind.bind(Function_bind.call);
	// http://jsperf.com/uncurrythis
	
	var array_slice = uncurryThis(Array.prototype.slice);
	
	var array_reduce = uncurryThis(
	    Array.prototype.reduce || function (callback, basis) {
	        var index = 0,
	            length = this.length;
	        // concerning the initial value, if one is not provided
	        if (arguments.length === 1) {
	            // seek to the first value in the array, accounting
	            // for the possibility that is is a sparse array
	            do {
	                if (index in this) {
	                    basis = this[index++];
	                    break;
	                }
	                if (++index >= length) {
	                    throw new TypeError();
	                }
	            } while (1);
	        }
	        // reduce
	        for (; index < length; index++) {
	            // account for the possibility that the array is sparse
	            if (index in this) {
	                basis = callback(basis, this[index], index);
	            }
	        }
	        return basis;
	    }
	);
	
	var array_indexOf = uncurryThis(
	    Array.prototype.indexOf || function (value) {
	        // not a very good shim, but good enough for our one use of it
	        for (var i = 0; i < this.length; i++) {
	            if (this[i] === value) {
	                return i;
	            }
	        }
	        return -1;
	    }
	);
	
	var array_map = uncurryThis(
	    Array.prototype.map || function (callback, thisp) {
	        var self = this;
	        var collect = [];
	        array_reduce(self, function (undefined, value, index) {
	            collect.push(callback.call(thisp, value, index, self));
	        }, void 0);
	        return collect;
	    }
	);
	
	var object_create = Object.create || function (prototype) {
	    function Type() { }
	    Type.prototype = prototype;
	    return new Type();
	};
	
	var object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);
	
	var object_keys = Object.keys || function (object) {
	    var keys = [];
	    for (var key in object) {
	        if (object_hasOwnProperty(object, key)) {
	            keys.push(key);
	        }
	    }
	    return keys;
	};
	
	var object_toString = uncurryThis(Object.prototype.toString);
	
	function isObject(value) {
	    return value === Object(value);
	}
	
	// generator related shims
	
	// FIXME: Remove this function once ES6 generators are in SpiderMonkey.
	function isStopIteration(exception) {
	    return (
	        object_toString(exception) === "[object StopIteration]" ||
	        exception instanceof QReturnValue
	    );
	}
	
	// FIXME: Remove this helper and Q.return once ES6 generators are in
	// SpiderMonkey.
	var QReturnValue;
	if (typeof ReturnValue !== "undefined") {
	    QReturnValue = ReturnValue;
	} else {
	    QReturnValue = function (value) {
	        this.value = value;
	    };
	}
	
	// long stack traces
	
	var STACK_JUMP_SEPARATOR = "From previous event:";
	
	function makeStackTraceLong(error, promise) {
	    // If possible, transform the error stack trace by removing Node and Q
	    // cruft, then concatenating with the stack trace of `promise`. See #57.
	    if (hasStacks &&
	        promise.stack &&
	        typeof error === "object" &&
	        error !== null &&
	        error.stack &&
	        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1
	    ) {
	        var stacks = [];
	        for (var p = promise; !!p; p = p.source) {
	            if (p.stack) {
	                stacks.unshift(p.stack);
	            }
	        }
	        stacks.unshift(error.stack);
	
	        var concatedStacks = stacks.join("\n" + STACK_JUMP_SEPARATOR + "\n");
	        error.stack = filterStackString(concatedStacks);
	    }
	}
	
	function filterStackString(stackString) {
	    var lines = stackString.split("\n");
	    var desiredLines = [];
	    for (var i = 0; i < lines.length; ++i) {
	        var line = lines[i];
	
	        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
	            desiredLines.push(line);
	        }
	    }
	    return desiredLines.join("\n");
	}
	
	function isNodeFrame(stackLine) {
	    return stackLine.indexOf("(module.js:") !== -1 ||
	           stackLine.indexOf("(node.js:") !== -1;
	}
	
	function getFileNameAndLineNumber(stackLine) {
	    // Named functions: "at functionName (filename:lineNumber:columnNumber)"
	    // In IE10 function name can have spaces ("Anonymous function") O_o
	    var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine);
	    if (attempt1) {
	        return [attempt1[1], Number(attempt1[2])];
	    }
	
	    // Anonymous functions: "at filename:lineNumber:columnNumber"
	    var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine);
	    if (attempt2) {
	        return [attempt2[1], Number(attempt2[2])];
	    }
	
	    // Firefox style: "function@filename:lineNumber or @filename:lineNumber"
	    var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine);
	    if (attempt3) {
	        return [attempt3[1], Number(attempt3[2])];
	    }
	}
	
	function isInternalFrame(stackLine) {
	    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);
	
	    if (!fileNameAndLineNumber) {
	        return false;
	    }
	
	    var fileName = fileNameAndLineNumber[0];
	    var lineNumber = fileNameAndLineNumber[1];
	
	    return fileName === qFileName &&
	        lineNumber >= qStartingLine &&
	        lineNumber <= qEndingLine;
	}
	
	// discover own file name and line number range for filtering stack
	// traces
	function captureLine() {
	    if (!hasStacks) {
	        return;
	    }
	
	    try {
	        throw new Error();
	    } catch (e) {
	        var lines = e.stack.split("\n");
	        var firstLine = lines[0].indexOf("@") > 0 ? lines[1] : lines[2];
	        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);
	        if (!fileNameAndLineNumber) {
	            return;
	        }
	
	        qFileName = fileNameAndLineNumber[0];
	        return fileNameAndLineNumber[1];
	    }
	}
	
	function deprecate(callback, name, alternative) {
	    return function () {
	        if (typeof console !== "undefined" &&
	            typeof console.warn === "function") {
	            console.warn(name + " is deprecated, use " + alternative +
	                         " instead.", new Error("").stack);
	        }
	        return callback.apply(callback, arguments);
	    };
	}
	
	// end of shims
	// beginning of real work
	
	/**
	 * Constructs a promise for an immediate reference, passes promises through, or
	 * coerces promises from different systems.
	 * @param value immediate reference or promise
	 */
	function Q(value) {
	    // If the object is already a Promise, return it directly.  This enables
	    // the resolve function to both be used to created references from objects,
	    // but to tolerably coerce non-promises to promises.
	    if (value instanceof Promise) {
	        return value;
	    }
	
	    // assimilate thenables
	    if (isPromiseAlike(value)) {
	        return coerce(value);
	    } else {
	        return fulfill(value);
	    }
	}
	Q.resolve = Q;
	
	/**
	 * Performs a task in a future turn of the event loop.
	 * @param {Function} task
	 */
	Q.nextTick = nextTick;
	
	/**
	 * Controls whether or not long stack traces will be on
	 */
	Q.longStackSupport = false;
	
	// enable long stacks if Q_DEBUG is set
	if (typeof process === "object" && process && process.env && process.env.Q_DEBUG) {
	    Q.longStackSupport = true;
	}
	
	/**
	 * Constructs a {promise, resolve, reject} object.
	 *
	 * `resolve` is a callback to invoke with a more resolved value for the
	 * promise. To fulfill the promise, invoke `resolve` with any value that is
	 * not a thenable. To reject the promise, invoke `resolve` with a rejected
	 * thenable, or invoke `reject` with the reason directly. To resolve the
	 * promise to another thenable, thus putting it in the same state, invoke
	 * `resolve` with that other thenable.
	 */
	Q.defer = defer;
	function defer() {
	    // if "messages" is an "Array", that indicates that the promise has not yet
	    // been resolved.  If it is "undefined", it has been resolved.  Each
	    // element of the messages array is itself an array of complete arguments to
	    // forward to the resolved promise.  We coerce the resolution value to a
	    // promise using the `resolve` function because it handles both fully
	    // non-thenable values and other thenables gracefully.
	    var messages = [], progressListeners = [], resolvedPromise;
	
	    var deferred = object_create(defer.prototype);
	    var promise = object_create(Promise.prototype);
	
	    promise.promiseDispatch = function (resolve, op, operands) {
	        var args = array_slice(arguments);
	        if (messages) {
	            messages.push(args);
	            if (op === "when" && operands[1]) { // progress operand
	                progressListeners.push(operands[1]);
	            }
	        } else {
	            Q.nextTick(function () {
	                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);
	            });
	        }
	    };
	
	    // XXX deprecated
	    promise.valueOf = function () {
	        if (messages) {
	            return promise;
	        }
	        var nearerValue = nearer(resolvedPromise);
	        if (isPromise(nearerValue)) {
	            resolvedPromise = nearerValue; // shorten chain
	        }
	        return nearerValue;
	    };
	
	    promise.inspect = function () {
	        if (!resolvedPromise) {
	            return { state: "pending" };
	        }
	        return resolvedPromise.inspect();
	    };
	
	    if (Q.longStackSupport && hasStacks) {
	        try {
	            throw new Error();
	        } catch (e) {
	            // NOTE: don't try to use `Error.captureStackTrace` or transfer the
	            // accessor around; that causes memory leaks as per GH-111. Just
	            // reify the stack trace as a string ASAP.
	            //
	            // At the same time, cut off the first line; it's always just
	            // "[object Promise]\n", as per the `toString`.
	            promise.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
	        }
	    }
	
	    // NOTE: we do the checks for `resolvedPromise` in each method, instead of
	    // consolidating them into `become`, since otherwise we'd create new
	    // promises with the lines `become(whatever(value))`. See e.g. GH-252.
	
	    function become(newPromise) {
	        resolvedPromise = newPromise;
	        promise.source = newPromise;
	
	        array_reduce(messages, function (undefined, message) {
	            Q.nextTick(function () {
	                newPromise.promiseDispatch.apply(newPromise, message);
	            });
	        }, void 0);
	
	        messages = void 0;
	        progressListeners = void 0;
	    }
	
	    deferred.promise = promise;
	    deferred.resolve = function (value) {
	        if (resolvedPromise) {
	            return;
	        }
	
	        become(Q(value));
	    };
	
	    deferred.fulfill = function (value) {
	        if (resolvedPromise) {
	            return;
	        }
	
	        become(fulfill(value));
	    };
	    deferred.reject = function (reason) {
	        if (resolvedPromise) {
	            return;
	        }
	
	        become(reject(reason));
	    };
	    deferred.notify = function (progress) {
	        if (resolvedPromise) {
	            return;
	        }
	
	        array_reduce(progressListeners, function (undefined, progressListener) {
	            Q.nextTick(function () {
	                progressListener(progress);
	            });
	        }, void 0);
	    };
	
	    return deferred;
	}
	
	/**
	 * Creates a Node-style callback that will resolve or reject the deferred
	 * promise.
	 * @returns a nodeback
	 */
	defer.prototype.makeNodeResolver = function () {
	    var self = this;
	    return function (error, value) {
	        if (error) {
	            self.reject(error);
	        } else if (arguments.length > 2) {
	            self.resolve(array_slice(arguments, 1));
	        } else {
	            self.resolve(value);
	        }
	    };
	};
	
	/**
	 * @param resolver {Function} a function that returns nothing and accepts
	 * the resolve, reject, and notify functions for a deferred.
	 * @returns a promise that may be resolved with the given resolve and reject
	 * functions, or rejected by a thrown exception in resolver
	 */
	Q.Promise = promise; // ES6
	Q.promise = promise;
	function promise(resolver) {
	    if (typeof resolver !== "function") {
	        throw new TypeError("resolver must be a function.");
	    }
	    var deferred = defer();
	    try {
	        resolver(deferred.resolve, deferred.reject, deferred.notify);
	    } catch (reason) {
	        deferred.reject(reason);
	    }
	    return deferred.promise;
	}
	
	promise.race = race; // ES6
	promise.all = all; // ES6
	promise.reject = reject; // ES6
	promise.resolve = Q; // ES6
	
	// XXX experimental.  This method is a way to denote that a local value is
	// serializable and should be immediately dispatched to a remote upon request,
	// instead of passing a reference.
	Q.passByCopy = function (object) {
	    //freeze(object);
	    //passByCopies.set(object, true);
	    return object;
	};
	
	Promise.prototype.passByCopy = function () {
	    //freeze(object);
	    //passByCopies.set(object, true);
	    return this;
	};
	
	/**
	 * If two promises eventually fulfill to the same value, promises that value,
	 * but otherwise rejects.
	 * @param x {Any*}
	 * @param y {Any*}
	 * @returns {Any*} a promise for x and y if they are the same, but a rejection
	 * otherwise.
	 *
	 */
	Q.join = function (x, y) {
	    return Q(x).join(y);
	};
	
	Promise.prototype.join = function (that) {
	    return Q([this, that]).spread(function (x, y) {
	        if (x === y) {
	            // TODO: "===" should be Object.is or equiv
	            return x;
	        } else {
	            throw new Error("Can't join: not the same: " + x + " " + y);
	        }
	    });
	};
	
	/**
	 * Returns a promise for the first of an array of promises to become settled.
	 * @param answers {Array[Any*]} promises to race
	 * @returns {Any*} the first promise to be settled
	 */
	Q.race = race;
	function race(answerPs) {
	    return promise(function (resolve, reject) {
	        // Switch to this once we can assume at least ES5
	        // answerPs.forEach(function (answerP) {
	        //     Q(answerP).then(resolve, reject);
	        // });
	        // Use this in the meantime
	        for (var i = 0, len = answerPs.length; i < len; i++) {
	            Q(answerPs[i]).then(resolve, reject);
	        }
	    });
	}
	
	Promise.prototype.race = function () {
	    return this.then(Q.race);
	};
	
	/**
	 * Constructs a Promise with a promise descriptor object and optional fallback
	 * function.  The descriptor contains methods like when(rejected), get(name),
	 * set(name, value), post(name, args), and delete(name), which all
	 * return either a value, a promise for a value, or a rejection.  The fallback
	 * accepts the operation name, a resolver, and any further arguments that would
	 * have been forwarded to the appropriate method above had a method been
	 * provided with the proper name.  The API makes no guarantees about the nature
	 * of the returned object, apart from that it is usable whereever promises are
	 * bought and sold.
	 */
	Q.makePromise = Promise;
	function Promise(descriptor, fallback, inspect) {
	    if (fallback === void 0) {
	        fallback = function (op) {
	            return reject(new Error(
	                "Promise does not support operation: " + op
	            ));
	        };
	    }
	    if (inspect === void 0) {
	        inspect = function () {
	            return {state: "unknown"};
	        };
	    }
	
	    var promise = object_create(Promise.prototype);
	
	    promise.promiseDispatch = function (resolve, op, args) {
	        var result;
	        try {
	            if (descriptor[op]) {
	                result = descriptor[op].apply(promise, args);
	            } else {
	                result = fallback.call(promise, op, args);
	            }
	        } catch (exception) {
	            result = reject(exception);
	        }
	        if (resolve) {
	            resolve(result);
	        }
	    };
	
	    promise.inspect = inspect;
	
	    // XXX deprecated `valueOf` and `exception` support
	    if (inspect) {
	        var inspected = inspect();
	        if (inspected.state === "rejected") {
	            promise.exception = inspected.reason;
	        }
	
	        promise.valueOf = function () {
	            var inspected = inspect();
	            if (inspected.state === "pending" ||
	                inspected.state === "rejected") {
	                return promise;
	            }
	            return inspected.value;
	        };
	    }
	
	    return promise;
	}
	
	Promise.prototype.toString = function () {
	    return "[object Promise]";
	};
	
	Promise.prototype.then = function (fulfilled, rejected, progressed) {
	    var self = this;
	    var deferred = defer();
	    var done = false;   // ensure the untrusted promise makes at most a
	                        // single call to one of the callbacks
	
	    function _fulfilled(value) {
	        try {
	            return typeof fulfilled === "function" ? fulfilled(value) : value;
	        } catch (exception) {
	            return reject(exception);
	        }
	    }
	
	    function _rejected(exception) {
	        if (typeof rejected === "function") {
	            makeStackTraceLong(exception, self);
	            try {
	                return rejected(exception);
	            } catch (newException) {
	                return reject(newException);
	            }
	        }
	        return reject(exception);
	    }
	
	    function _progressed(value) {
	        return typeof progressed === "function" ? progressed(value) : value;
	    }
	
	    Q.nextTick(function () {
	        self.promiseDispatch(function (value) {
	            if (done) {
	                return;
	            }
	            done = true;
	
	            deferred.resolve(_fulfilled(value));
	        }, "when", [function (exception) {
	            if (done) {
	                return;
	            }
	            done = true;
	
	            deferred.resolve(_rejected(exception));
	        }]);
	    });
	
	    // Progress propagator need to be attached in the current tick.
	    self.promiseDispatch(void 0, "when", [void 0, function (value) {
	        var newValue;
	        var threw = false;
	        try {
	            newValue = _progressed(value);
	        } catch (e) {
	            threw = true;
	            if (Q.onerror) {
	                Q.onerror(e);
	            } else {
	                throw e;
	            }
	        }
	
	        if (!threw) {
	            deferred.notify(newValue);
	        }
	    }]);
	
	    return deferred.promise;
	};
	
	Q.tap = function (promise, callback) {
	    return Q(promise).tap(callback);
	};
	
	/**
	 * Works almost like "finally", but not called for rejections.
	 * Original resolution value is passed through callback unaffected.
	 * Callback may return a promise that will be awaited for.
	 * @param {Function} callback
	 * @returns {Q.Promise}
	 * @example
	 * doSomething()
	 *   .then(...)
	 *   .tap(console.log)
	 *   .then(...);
	 */
	Promise.prototype.tap = function (callback) {
	    callback = Q(callback);
	
	    return this.then(function (value) {
	        return callback.fcall(value).thenResolve(value);
	    });
	};
	
	/**
	 * Registers an observer on a promise.
	 *
	 * Guarantees:
	 *
	 * 1. that fulfilled and rejected will be called only once.
	 * 2. that either the fulfilled callback or the rejected callback will be
	 *    called, but not both.
	 * 3. that fulfilled and rejected will not be called in this turn.
	 *
	 * @param value      promise or immediate reference to observe
	 * @param fulfilled  function to be called with the fulfilled value
	 * @param rejected   function to be called with the rejection exception
	 * @param progressed function to be called on any progress notifications
	 * @return promise for the return value from the invoked callback
	 */
	Q.when = when;
	function when(value, fulfilled, rejected, progressed) {
	    return Q(value).then(fulfilled, rejected, progressed);
	}
	
	Promise.prototype.thenResolve = function (value) {
	    return this.then(function () { return value; });
	};
	
	Q.thenResolve = function (promise, value) {
	    return Q(promise).thenResolve(value);
	};
	
	Promise.prototype.thenReject = function (reason) {
	    return this.then(function () { throw reason; });
	};
	
	Q.thenReject = function (promise, reason) {
	    return Q(promise).thenReject(reason);
	};
	
	/**
	 * If an object is not a promise, it is as "near" as possible.
	 * If a promise is rejected, it is as "near" as possible too.
	 * If it’s a fulfilled promise, the fulfillment value is nearer.
	 * If it’s a deferred promise and the deferred has been resolved, the
	 * resolution is "nearer".
	 * @param object
	 * @returns most resolved (nearest) form of the object
	 */
	
	// XXX should we re-do this?
	Q.nearer = nearer;
	function nearer(value) {
	    if (isPromise(value)) {
	        var inspected = value.inspect();
	        if (inspected.state === "fulfilled") {
	            return inspected.value;
	        }
	    }
	    return value;
	}
	
	/**
	 * @returns whether the given object is a promise.
	 * Otherwise it is a fulfilled value.
	 */
	Q.isPromise = isPromise;
	function isPromise(object) {
	    return object instanceof Promise;
	}
	
	Q.isPromiseAlike = isPromiseAlike;
	function isPromiseAlike(object) {
	    return isObject(object) && typeof object.then === "function";
	}
	
	/**
	 * @returns whether the given object is a pending promise, meaning not
	 * fulfilled or rejected.
	 */
	Q.isPending = isPending;
	function isPending(object) {
	    return isPromise(object) && object.inspect().state === "pending";
	}
	
	Promise.prototype.isPending = function () {
	    return this.inspect().state === "pending";
	};
	
	/**
	 * @returns whether the given object is a value or fulfilled
	 * promise.
	 */
	Q.isFulfilled = isFulfilled;
	function isFulfilled(object) {
	    return !isPromise(object) || object.inspect().state === "fulfilled";
	}
	
	Promise.prototype.isFulfilled = function () {
	    return this.inspect().state === "fulfilled";
	};
	
	/**
	 * @returns whether the given object is a rejected promise.
	 */
	Q.isRejected = isRejected;
	function isRejected(object) {
	    return isPromise(object) && object.inspect().state === "rejected";
	}
	
	Promise.prototype.isRejected = function () {
	    return this.inspect().state === "rejected";
	};
	
	//// BEGIN UNHANDLED REJECTION TRACKING
	
	// This promise library consumes exceptions thrown in handlers so they can be
	// handled by a subsequent promise.  The exceptions get added to this array when
	// they are created, and removed when they are handled.  Note that in ES6 or
	// shimmed environments, this would naturally be a `Set`.
	var unhandledReasons = [];
	var unhandledRejections = [];
	var reportedUnhandledRejections = [];
	var trackUnhandledRejections = true;
	
	function resetUnhandledRejections() {
	    unhandledReasons.length = 0;
	    unhandledRejections.length = 0;
	
	    if (!trackUnhandledRejections) {
	        trackUnhandledRejections = true;
	    }
	}
	
	function trackRejection(promise, reason) {
	    if (!trackUnhandledRejections) {
	        return;
	    }
	    if (typeof process === "object" && typeof process.emit === "function") {
	        Q.nextTick.runAfter(function () {
	            if (array_indexOf(unhandledRejections, promise) !== -1) {
	                process.emit("unhandledRejection", reason, promise);
	                reportedUnhandledRejections.push(promise);
	            }
	        });
	    }
	
	    unhandledRejections.push(promise);
	    if (reason && typeof reason.stack !== "undefined") {
	        unhandledReasons.push(reason.stack);
	    } else {
	        unhandledReasons.push("(no stack) " + reason);
	    }
	}
	
	function untrackRejection(promise) {
	    if (!trackUnhandledRejections) {
	        return;
	    }
	
	    var at = array_indexOf(unhandledRejections, promise);
	    if (at !== -1) {
	        if (typeof process === "object" && typeof process.emit === "function") {
	            Q.nextTick.runAfter(function () {
	                var atReport = array_indexOf(reportedUnhandledRejections, promise);
	                if (atReport !== -1) {
	                    process.emit("rejectionHandled", unhandledReasons[at], promise);
	                    reportedUnhandledRejections.splice(atReport, 1);
	                }
	            });
	        }
	        unhandledRejections.splice(at, 1);
	        unhandledReasons.splice(at, 1);
	    }
	}
	
	Q.resetUnhandledRejections = resetUnhandledRejections;
	
	Q.getUnhandledReasons = function () {
	    // Make a copy so that consumers can't interfere with our internal state.
	    return unhandledReasons.slice();
	};
	
	Q.stopUnhandledRejectionTracking = function () {
	    resetUnhandledRejections();
	    trackUnhandledRejections = false;
	};
	
	resetUnhandledRejections();
	
	//// END UNHANDLED REJECTION TRACKING
	
	/**
	 * Constructs a rejected promise.
	 * @param reason value describing the failure
	 */
	Q.reject = reject;
	function reject(reason) {
	    var rejection = Promise({
	        "when": function (rejected) {
	            // note that the error has been handled
	            if (rejected) {
	                untrackRejection(this);
	            }
	            return rejected ? rejected(reason) : this;
	        }
	    }, function fallback() {
	        return this;
	    }, function inspect() {
	        return { state: "rejected", reason: reason };
	    });
	
	    // Note that the reason has not been handled.
	    trackRejection(rejection, reason);
	
	    return rejection;
	}
	
	/**
	 * Constructs a fulfilled promise for an immediate reference.
	 * @param value immediate reference
	 */
	Q.fulfill = fulfill;
	function fulfill(value) {
	    return Promise({
	        "when": function () {
	            return value;
	        },
	        "get": function (name) {
	            return value[name];
	        },
	        "set": function (name, rhs) {
	            value[name] = rhs;
	        },
	        "delete": function (name) {
	            delete value[name];
	        },
	        "post": function (name, args) {
	            // Mark Miller proposes that post with no name should apply a
	            // promised function.
	            if (name === null || name === void 0) {
	                return value.apply(void 0, args);
	            } else {
	                return value[name].apply(value, args);
	            }
	        },
	        "apply": function (thisp, args) {
	            return value.apply(thisp, args);
	        },
	        "keys": function () {
	            return object_keys(value);
	        }
	    }, void 0, function inspect() {
	        return { state: "fulfilled", value: value };
	    });
	}
	
	/**
	 * Converts thenables to Q promises.
	 * @param promise thenable promise
	 * @returns a Q promise
	 */
	function coerce(promise) {
	    var deferred = defer();
	    Q.nextTick(function () {
	        try {
	            promise.then(deferred.resolve, deferred.reject, deferred.notify);
	        } catch (exception) {
	            deferred.reject(exception);
	        }
	    });
	    return deferred.promise;
	}
	
	/**
	 * Annotates an object such that it will never be
	 * transferred away from this process over any promise
	 * communication channel.
	 * @param object
	 * @returns promise a wrapping of that object that
	 * additionally responds to the "isDef" message
	 * without a rejection.
	 */
	Q.master = master;
	function master(object) {
	    return Promise({
	        "isDef": function () {}
	    }, function fallback(op, args) {
	        return dispatch(object, op, args);
	    }, function () {
	        return Q(object).inspect();
	    });
	}
	
	/**
	 * Spreads the values of a promised array of arguments into the
	 * fulfillment callback.
	 * @param fulfilled callback that receives variadic arguments from the
	 * promised array
	 * @param rejected callback that receives the exception if the promise
	 * is rejected.
	 * @returns a promise for the return value or thrown exception of
	 * either callback.
	 */
	Q.spread = spread;
	function spread(value, fulfilled, rejected) {
	    return Q(value).spread(fulfilled, rejected);
	}
	
	Promise.prototype.spread = function (fulfilled, rejected) {
	    return this.all().then(function (array) {
	        return fulfilled.apply(void 0, array);
	    }, rejected);
	};
	
	/**
	 * The async function is a decorator for generator functions, turning
	 * them into asynchronous generators.  Although generators are only part
	 * of the newest ECMAScript 6 drafts, this code does not cause syntax
	 * errors in older engines.  This code should continue to work and will
	 * in fact improve over time as the language improves.
	 *
	 * ES6 generators are currently part of V8 version 3.19 with the
	 * --harmony-generators runtime flag enabled.  SpiderMonkey has had them
	 * for longer, but under an older Python-inspired form.  This function
	 * works on both kinds of generators.
	 *
	 * Decorates a generator function such that:
	 *  - it may yield promises
	 *  - execution will continue when that promise is fulfilled
	 *  - the value of the yield expression will be the fulfilled value
	 *  - it returns a promise for the return value (when the generator
	 *    stops iterating)
	 *  - the decorated function returns a promise for the return value
	 *    of the generator or the first rejected promise among those
	 *    yielded.
	 *  - if an error is thrown in the generator, it propagates through
	 *    every following yield until it is caught, or until it escapes
	 *    the generator function altogether, and is translated into a
	 *    rejection for the promise returned by the decorated generator.
	 */
	Q.async = async;
	function async(makeGenerator) {
	    return function () {
	        // when verb is "send", arg is a value
	        // when verb is "throw", arg is an exception
	        function continuer(verb, arg) {
	            var result;
	
	            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only
	            // engine that has a deployed base of browsers that support generators.
	            // However, SM's generators use the Python-inspired semantics of
	            // outdated ES6 drafts.  We would like to support ES6, but we'd also
	            // like to make it possible to use generators in deployed browsers, so
	            // we also support Python-style generators.  At some point we can remove
	            // this block.
	
	            if (typeof StopIteration === "undefined") {
	                // ES6 Generators
	                try {
	                    result = generator[verb](arg);
	                } catch (exception) {
	                    return reject(exception);
	                }
	                if (result.done) {
	                    return Q(result.value);
	                } else {
	                    return when(result.value, callback, errback);
	                }
	            } else {
	                // SpiderMonkey Generators
	                // FIXME: Remove this case when SM does ES6 generators.
	                try {
	                    result = generator[verb](arg);
	                } catch (exception) {
	                    if (isStopIteration(exception)) {
	                        return Q(exception.value);
	                    } else {
	                        return reject(exception);
	                    }
	                }
	                return when(result, callback, errback);
	            }
	        }
	        var generator = makeGenerator.apply(this, arguments);
	        var callback = continuer.bind(continuer, "next");
	        var errback = continuer.bind(continuer, "throw");
	        return callback();
	    };
	}
	
	/**
	 * The spawn function is a small wrapper around async that immediately
	 * calls the generator and also ends the promise chain, so that any
	 * unhandled errors are thrown instead of forwarded to the error
	 * handler. This is useful because it's extremely common to run
	 * generators at the top-level to work with libraries.
	 */
	Q.spawn = spawn;
	function spawn(makeGenerator) {
	    Q.done(Q.async(makeGenerator)());
	}
	
	// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.
	/**
	 * Throws a ReturnValue exception to stop an asynchronous generator.
	 *
	 * This interface is a stop-gap measure to support generator return
	 * values in older Firefox/SpiderMonkey.  In browsers that support ES6
	 * generators like Chromium 29, just use "return" in your generator
	 * functions.
	 *
	 * @param value the return value for the surrounding generator
	 * @throws ReturnValue exception with the value.
	 * @example
	 * // ES6 style
	 * Q.async(function* () {
	 *      var foo = yield getFooPromise();
	 *      var bar = yield getBarPromise();
	 *      return foo + bar;
	 * })
	 * // Older SpiderMonkey style
	 * Q.async(function () {
	 *      var foo = yield getFooPromise();
	 *      var bar = yield getBarPromise();
	 *      Q.return(foo + bar);
	 * })
	 */
	Q["return"] = _return;
	function _return(value) {
	    throw new QReturnValue(value);
	}
	
	/**
	 * The promised function decorator ensures that any promise arguments
	 * are settled and passed as values (`this` is also settled and passed
	 * as a value).  It will also ensure that the result of a function is
	 * always a promise.
	 *
	 * @example
	 * var add = Q.promised(function (a, b) {
	 *     return a + b;
	 * });
	 * add(Q(a), Q(B));
	 *
	 * @param {function} callback The function to decorate
	 * @returns {function} a function that has been decorated.
	 */
	Q.promised = promised;
	function promised(callback) {
	    return function () {
	        return spread([this, all(arguments)], function (self, args) {
	            return callback.apply(self, args);
	        });
	    };
	}
	
	/**
	 * sends a message to a value in a future turn
	 * @param object* the recipient
	 * @param op the name of the message operation, e.g., "when",
	 * @param args further arguments to be forwarded to the operation
	 * @returns result {Promise} a promise for the result of the operation
	 */
	Q.dispatch = dispatch;
	function dispatch(object, op, args) {
	    return Q(object).dispatch(op, args);
	}
	
	Promise.prototype.dispatch = function (op, args) {
	    var self = this;
	    var deferred = defer();
	    Q.nextTick(function () {
	        self.promiseDispatch(deferred.resolve, op, args);
	    });
	    return deferred.promise;
	};
	
	/**
	 * Gets the value of a property in a future turn.
	 * @param object    promise or immediate reference for target object
	 * @param name      name of property to get
	 * @return promise for the property value
	 */
	Q.get = function (object, key) {
	    return Q(object).dispatch("get", [key]);
	};
	
	Promise.prototype.get = function (key) {
	    return this.dispatch("get", [key]);
	};
	
	/**
	 * Sets the value of a property in a future turn.
	 * @param object    promise or immediate reference for object object
	 * @param name      name of property to set
	 * @param value     new value of property
	 * @return promise for the return value
	 */
	Q.set = function (object, key, value) {
	    return Q(object).dispatch("set", [key, value]);
	};
	
	Promise.prototype.set = function (key, value) {
	    return this.dispatch("set", [key, value]);
	};
	
	/**
	 * Deletes a property in a future turn.
	 * @param object    promise or immediate reference for target object
	 * @param name      name of property to delete
	 * @return promise for the return value
	 */
	Q.del = // XXX legacy
	Q["delete"] = function (object, key) {
	    return Q(object).dispatch("delete", [key]);
	};
	
	Promise.prototype.del = // XXX legacy
	Promise.prototype["delete"] = function (key) {
	    return this.dispatch("delete", [key]);
	};
	
	/**
	 * Invokes a method in a future turn.
	 * @param object    promise or immediate reference for target object
	 * @param name      name of method to invoke
	 * @param value     a value to post, typically an array of
	 *                  invocation arguments for promises that
	 *                  are ultimately backed with `resolve` values,
	 *                  as opposed to those backed with URLs
	 *                  wherein the posted value can be any
	 *                  JSON serializable object.
	 * @return promise for the return value
	 */
	// bound locally because it is used by other methods
	Q.mapply = // XXX As proposed by "Redsandro"
	Q.post = function (object, name, args) {
	    return Q(object).dispatch("post", [name, args]);
	};
	
	Promise.prototype.mapply = // XXX As proposed by "Redsandro"
	Promise.prototype.post = function (name, args) {
	    return this.dispatch("post", [name, args]);
	};
	
	/**
	 * Invokes a method in a future turn.
	 * @param object    promise or immediate reference for target object
	 * @param name      name of method to invoke
	 * @param ...args   array of invocation arguments
	 * @return promise for the return value
	 */
	Q.send = // XXX Mark Miller's proposed parlance
	Q.mcall = // XXX As proposed by "Redsandro"
	Q.invoke = function (object, name /*...args*/) {
	    return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
	};
	
	Promise.prototype.send = // XXX Mark Miller's proposed parlance
	Promise.prototype.mcall = // XXX As proposed by "Redsandro"
	Promise.prototype.invoke = function (name /*...args*/) {
	    return this.dispatch("post", [name, array_slice(arguments, 1)]);
	};
	
	/**
	 * Applies the promised function in a future turn.
	 * @param object    promise or immediate reference for target function
	 * @param args      array of application arguments
	 */
	Q.fapply = function (object, args) {
	    return Q(object).dispatch("apply", [void 0, args]);
	};
	
	Promise.prototype.fapply = function (args) {
	    return this.dispatch("apply", [void 0, args]);
	};
	
	/**
	 * Calls the promised function in a future turn.
	 * @param object    promise or immediate reference for target function
	 * @param ...args   array of application arguments
	 */
	Q["try"] =
	Q.fcall = function (object /* ...args*/) {
	    return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
	};
	
	Promise.prototype.fcall = function (/*...args*/) {
	    return this.dispatch("apply", [void 0, array_slice(arguments)]);
	};
	
	/**
	 * Binds the promised function, transforming return values into a fulfilled
	 * promise and thrown errors into a rejected one.
	 * @param object    promise or immediate reference for target function
	 * @param ...args   array of application arguments
	 */
	Q.fbind = function (object /*...args*/) {
	    var promise = Q(object);
	    var args = array_slice(arguments, 1);
	    return function fbound() {
	        return promise.dispatch("apply", [
	            this,
	            args.concat(array_slice(arguments))
	        ]);
	    };
	};
	Promise.prototype.fbind = function (/*...args*/) {
	    var promise = this;
	    var args = array_slice(arguments);
	    return function fbound() {
	        return promise.dispatch("apply", [
	            this,
	            args.concat(array_slice(arguments))
	        ]);
	    };
	};
	
	/**
	 * Requests the names of the owned properties of a promised
	 * object in a future turn.
	 * @param object    promise or immediate reference for target object
	 * @return promise for the keys of the eventually settled object
	 */
	Q.keys = function (object) {
	    return Q(object).dispatch("keys", []);
	};
	
	Promise.prototype.keys = function () {
	    return this.dispatch("keys", []);
	};
	
	/**
	 * Turns an array of promises into a promise for an array.  If any of
	 * the promises gets rejected, the whole array is rejected immediately.
	 * @param {Array*} an array (or promise for an array) of values (or
	 * promises for values)
	 * @returns a promise for an array of the corresponding values
	 */
	// By Mark Miller
	// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled
	Q.all = all;
	function all(promises) {
	    return when(promises, function (promises) {
	        var pendingCount = 0;
	        var deferred = defer();
	        array_reduce(promises, function (undefined, promise, index) {
	            var snapshot;
	            if (
	                isPromise(promise) &&
	                (snapshot = promise.inspect()).state === "fulfilled"
	            ) {
	                promises[index] = snapshot.value;
	            } else {
	                ++pendingCount;
	                when(
	                    promise,
	                    function (value) {
	                        promises[index] = value;
	                        if (--pendingCount === 0) {
	                            deferred.resolve(promises);
	                        }
	                    },
	                    deferred.reject,
	                    function (progress) {
	                        deferred.notify({ index: index, value: progress });
	                    }
	                );
	            }
	        }, void 0);
	        if (pendingCount === 0) {
	            deferred.resolve(promises);
	        }
	        return deferred.promise;
	    });
	}
	
	Promise.prototype.all = function () {
	    return all(this);
	};
	
	/**
	 * Returns the first resolved promise of an array. Prior rejected promises are
	 * ignored.  Rejects only if all promises are rejected.
	 * @param {Array*} an array containing values or promises for values
	 * @returns a promise fulfilled with the value of the first resolved promise,
	 * or a rejected promise if all promises are rejected.
	 */
	Q.any = any;
	
	function any(promises) {
	    if (promises.length === 0) {
	        return Q.resolve();
	    }
	
	    var deferred = Q.defer();
	    var pendingCount = 0;
	    array_reduce(promises, function (prev, current, index) {
	        var promise = promises[index];
	
	        pendingCount++;
	
	        when(promise, onFulfilled, onRejected, onProgress);
	        function onFulfilled(result) {
	            deferred.resolve(result);
	        }
	        function onRejected() {
	            pendingCount--;
	            if (pendingCount === 0) {
	                deferred.reject(new Error(
	                    "Can't get fulfillment value from any promise, all " +
	                    "promises were rejected."
	                ));
	            }
	        }
	        function onProgress(progress) {
	            deferred.notify({
	                index: index,
	                value: progress
	            });
	        }
	    }, undefined);
	
	    return deferred.promise;
	}
	
	Promise.prototype.any = function () {
	    return any(this);
	};
	
	/**
	 * Waits for all promises to be settled, either fulfilled or
	 * rejected.  This is distinct from `all` since that would stop
	 * waiting at the first rejection.  The promise returned by
	 * `allResolved` will never be rejected.
	 * @param promises a promise for an array (or an array) of promises
	 * (or values)
	 * @return a promise for an array of promises
	 */
	Q.allResolved = deprecate(allResolved, "allResolved", "allSettled");
	function allResolved(promises) {
	    return when(promises, function (promises) {
	        promises = array_map(promises, Q);
	        return when(all(array_map(promises, function (promise) {
	            return when(promise, noop, noop);
	        })), function () {
	            return promises;
	        });
	    });
	}
	
	Promise.prototype.allResolved = function () {
	    return allResolved(this);
	};
	
	/**
	 * @see Promise#allSettled
	 */
	Q.allSettled = allSettled;
	function allSettled(promises) {
	    return Q(promises).allSettled();
	}
	
	/**
	 * Turns an array of promises into a promise for an array of their states (as
	 * returned by `inspect`) when they have all settled.
	 * @param {Array[Any*]} values an array (or promise for an array) of values (or
	 * promises for values)
	 * @returns {Array[State]} an array of states for the respective values.
	 */
	Promise.prototype.allSettled = function () {
	    return this.then(function (promises) {
	        return all(array_map(promises, function (promise) {
	            promise = Q(promise);
	            function regardless() {
	                return promise.inspect();
	            }
	            return promise.then(regardless, regardless);
	        }));
	    });
	};
	
	/**
	 * Captures the failure of a promise, giving an oportunity to recover
	 * with a callback.  If the given promise is fulfilled, the returned
	 * promise is fulfilled.
	 * @param {Any*} promise for something
	 * @param {Function} callback to fulfill the returned promise if the
	 * given promise is rejected
	 * @returns a promise for the return value of the callback
	 */
	Q.fail = // XXX legacy
	Q["catch"] = function (object, rejected) {
	    return Q(object).then(void 0, rejected);
	};
	
	Promise.prototype.fail = // XXX legacy
	Promise.prototype["catch"] = function (rejected) {
	    return this.then(void 0, rejected);
	};
	
	/**
	 * Attaches a listener that can respond to progress notifications from a
	 * promise's originating deferred. This listener receives the exact arguments
	 * passed to ``deferred.notify``.
	 * @param {Any*} promise for something
	 * @param {Function} callback to receive any progress notifications
	 * @returns the given promise, unchanged
	 */
	Q.progress = progress;
	function progress(object, progressed) {
	    return Q(object).then(void 0, void 0, progressed);
	}
	
	Promise.prototype.progress = function (progressed) {
	    return this.then(void 0, void 0, progressed);
	};
	
	/**
	 * Provides an opportunity to observe the settling of a promise,
	 * regardless of whether the promise is fulfilled or rejected.  Forwards
	 * the resolution to the returned promise when the callback is done.
	 * The callback can return a promise to defer completion.
	 * @param {Any*} promise
	 * @param {Function} callback to observe the resolution of the given
	 * promise, takes no arguments.
	 * @returns a promise for the resolution of the given promise when
	 * ``fin`` is done.
	 */
	Q.fin = // XXX legacy
	Q["finally"] = function (object, callback) {
	    return Q(object)["finally"](callback);
	};
	
	Promise.prototype.fin = // XXX legacy
	Promise.prototype["finally"] = function (callback) {
	    callback = Q(callback);
	    return this.then(function (value) {
	        return callback.fcall().then(function () {
	            return value;
	        });
	    }, function (reason) {
	        // TODO attempt to recycle the rejection with "this".
	        return callback.fcall().then(function () {
	            throw reason;
	        });
	    });
	};
	
	/**
	 * Terminates a chain of promises, forcing rejections to be
	 * thrown as exceptions.
	 * @param {Any*} promise at the end of a chain of promises
	 * @returns nothing
	 */
	Q.done = function (object, fulfilled, rejected, progress) {
	    return Q(object).done(fulfilled, rejected, progress);
	};
	
	Promise.prototype.done = function (fulfilled, rejected, progress) {
	    var onUnhandledError = function (error) {
	        // forward to a future turn so that ``when``
	        // does not catch it and turn it into a rejection.
	        Q.nextTick(function () {
	            makeStackTraceLong(error, promise);
	            if (Q.onerror) {
	                Q.onerror(error);
	            } else {
	                throw error;
	            }
	        });
	    };
	
	    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.
	    var promise = fulfilled || rejected || progress ?
	        this.then(fulfilled, rejected, progress) :
	        this;
	
	    if (typeof process === "object" && process && process.domain) {
	        onUnhandledError = process.domain.bind(onUnhandledError);
	    }
	
	    promise.then(void 0, onUnhandledError);
	};
	
	/**
	 * Causes a promise to be rejected if it does not get fulfilled before
	 * some milliseconds time out.
	 * @param {Any*} promise
	 * @param {Number} milliseconds timeout
	 * @param {Any*} custom error message or Error object (optional)
	 * @returns a promise for the resolution of the given promise if it is
	 * fulfilled before the timeout, otherwise rejected.
	 */
	Q.timeout = function (object, ms, error) {
	    return Q(object).timeout(ms, error);
	};
	
	Promise.prototype.timeout = function (ms, error) {
	    var deferred = defer();
	    var timeoutId = setTimeout(function () {
	        if (!error || "string" === typeof error) {
	            error = new Error(error || "Timed out after " + ms + " ms");
	            error.code = "ETIMEDOUT";
	        }
	        deferred.reject(error);
	    }, ms);
	
	    this.then(function (value) {
	        clearTimeout(timeoutId);
	        deferred.resolve(value);
	    }, function (exception) {
	        clearTimeout(timeoutId);
	        deferred.reject(exception);
	    }, deferred.notify);
	
	    return deferred.promise;
	};
	
	/**
	 * Returns a promise for the given value (or promised value), some
	 * milliseconds after it resolved. Passes rejections immediately.
	 * @param {Any*} promise
	 * @param {Number} milliseconds
	 * @returns a promise for the resolution of the given promise after milliseconds
	 * time has elapsed since the resolution of the given promise.
	 * If the given promise rejects, that is passed immediately.
	 */
	Q.delay = function (object, timeout) {
	    if (timeout === void 0) {
	        timeout = object;
	        object = void 0;
	    }
	    return Q(object).delay(timeout);
	};
	
	Promise.prototype.delay = function (timeout) {
	    return this.then(function (value) {
	        var deferred = defer();
	        setTimeout(function () {
	            deferred.resolve(value);
	        }, timeout);
	        return deferred.promise;
	    });
	};
	
	/**
	 * Passes a continuation to a Node function, which is called with the given
	 * arguments provided as an array, and returns a promise.
	 *
	 *      Q.nfapply(FS.readFile, [__filename])
	 *      .then(function (content) {
	 *      })
	 *
	 */
	Q.nfapply = function (callback, args) {
	    return Q(callback).nfapply(args);
	};
	
	Promise.prototype.nfapply = function (args) {
	    var deferred = defer();
	    var nodeArgs = array_slice(args);
	    nodeArgs.push(deferred.makeNodeResolver());
	    this.fapply(nodeArgs).fail(deferred.reject);
	    return deferred.promise;
	};
	
	/**
	 * Passes a continuation to a Node function, which is called with the given
	 * arguments provided individually, and returns a promise.
	 * @example
	 * Q.nfcall(FS.readFile, __filename)
	 * .then(function (content) {
	 * })
	 *
	 */
	Q.nfcall = function (callback /*...args*/) {
	    var args = array_slice(arguments, 1);
	    return Q(callback).nfapply(args);
	};
	
	Promise.prototype.nfcall = function (/*...args*/) {
	    var nodeArgs = array_slice(arguments);
	    var deferred = defer();
	    nodeArgs.push(deferred.makeNodeResolver());
	    this.fapply(nodeArgs).fail(deferred.reject);
	    return deferred.promise;
	};
	
	/**
	 * Wraps a NodeJS continuation passing function and returns an equivalent
	 * version that returns a promise.
	 * @example
	 * Q.nfbind(FS.readFile, __filename)("utf-8")
	 * .then(console.log)
	 * .done()
	 */
	Q.nfbind =
	Q.denodeify = function (callback /*...args*/) {
	    var baseArgs = array_slice(arguments, 1);
	    return function () {
	        var nodeArgs = baseArgs.concat(array_slice(arguments));
	        var deferred = defer();
	        nodeArgs.push(deferred.makeNodeResolver());
	        Q(callback).fapply(nodeArgs).fail(deferred.reject);
	        return deferred.promise;
	    };
	};
	
	Promise.prototype.nfbind =
	Promise.prototype.denodeify = function (/*...args*/) {
	    var args = array_slice(arguments);
	    args.unshift(this);
	    return Q.denodeify.apply(void 0, args);
	};
	
	Q.nbind = function (callback, thisp /*...args*/) {
	    var baseArgs = array_slice(arguments, 2);
	    return function () {
	        var nodeArgs = baseArgs.concat(array_slice(arguments));
	        var deferred = defer();
	        nodeArgs.push(deferred.makeNodeResolver());
	        function bound() {
	            return callback.apply(thisp, arguments);
	        }
	        Q(bound).fapply(nodeArgs).fail(deferred.reject);
	        return deferred.promise;
	    };
	};
	
	Promise.prototype.nbind = function (/*thisp, ...args*/) {
	    var args = array_slice(arguments, 0);
	    args.unshift(this);
	    return Q.nbind.apply(void 0, args);
	};
	
	/**
	 * Calls a method of a Node-style object that accepts a Node-style
	 * callback with a given array of arguments, plus a provided callback.
	 * @param object an object that has the named method
	 * @param {String} name name of the method of object
	 * @param {Array} args arguments to pass to the method; the callback
	 * will be provided by Q and appended to these arguments.
	 * @returns a promise for the value or error
	 */
	Q.nmapply = // XXX As proposed by "Redsandro"
	Q.npost = function (object, name, args) {
	    return Q(object).npost(name, args);
	};
	
	Promise.prototype.nmapply = // XXX As proposed by "Redsandro"
	Promise.prototype.npost = function (name, args) {
	    var nodeArgs = array_slice(args || []);
	    var deferred = defer();
	    nodeArgs.push(deferred.makeNodeResolver());
	    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
	    return deferred.promise;
	};
	
	/**
	 * Calls a method of a Node-style object that accepts a Node-style
	 * callback, forwarding the given variadic arguments, plus a provided
	 * callback argument.
	 * @param object an object that has the named method
	 * @param {String} name name of the method of object
	 * @param ...args arguments to pass to the method; the callback will
	 * be provided by Q and appended to these arguments.
	 * @returns a promise for the value or error
	 */
	Q.nsend = // XXX Based on Mark Miller's proposed "send"
	Q.nmcall = // XXX Based on "Redsandro's" proposal
	Q.ninvoke = function (object, name /*...args*/) {
	    var nodeArgs = array_slice(arguments, 2);
	    var deferred = defer();
	    nodeArgs.push(deferred.makeNodeResolver());
	    Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
	    return deferred.promise;
	};
	
	Promise.prototype.nsend = // XXX Based on Mark Miller's proposed "send"
	Promise.prototype.nmcall = // XXX Based on "Redsandro's" proposal
	Promise.prototype.ninvoke = function (name /*...args*/) {
	    var nodeArgs = array_slice(arguments, 1);
	    var deferred = defer();
	    nodeArgs.push(deferred.makeNodeResolver());
	    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
	    return deferred.promise;
	};
	
	/**
	 * If a function would like to support both Node continuation-passing-style and
	 * promise-returning-style, it can end its internal promise chain with
	 * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user
	 * elects to use a nodeback, the result will be sent there.  If they do not
	 * pass a nodeback, they will receive the result promise.
	 * @param object a result (or a promise for a result)
	 * @param {Function} nodeback a Node.js-style callback
	 * @returns either the promise or nothing
	 */
	Q.nodeify = nodeify;
	function nodeify(object, nodeback) {
	    return Q(object).nodeify(nodeback);
	}
	
	Promise.prototype.nodeify = function (nodeback) {
	    if (nodeback) {
	        this.then(function (value) {
	            Q.nextTick(function () {
	                nodeback(null, value);
	            });
	        }, function (error) {
	            Q.nextTick(function () {
	                nodeback(error);
	            });
	        });
	    } else {
	        return this;
	    }
	};
	
	Q.noConflict = function() {
	    throw new Error("Q.noConflict only works when Q is used as a global");
	};
	
	// All code before this point will be filtered from stack traces.
	var qEndingLine = captureLine();
	
	return Q;
	
	});


/***/ },
/* 410 */
/***/ function(module, exports) {

	module.exports = {
		"AF": "Afghanistan",
		"AX": "Åland Islands",
		"AL": "Albania",
		"DZ": "Algeria",
		"AS": "American Samoa",
		"AD": "Andorra",
		"AO": "Angola",
		"AI": "Anguilla",
		"AQ": "Antarctica",
		"AG": "Antigua and Barbuda",
		"AR": "Argentina",
		"AM": "Armenia",
		"AW": "Aruba",
		"AU": "Australia",
		"AT": "Austria",
		"AZ": "Azerbaijan",
		"BS": "Bahamas",
		"BH": "Bahrain",
		"BD": "Bangladesh",
		"BB": "Barbados",
		"BY": "Belarus",
		"BE": "Belgium",
		"BZ": "Belize",
		"BJ": "Benin",
		"BM": "Bermuda",
		"BT": "Bhutan",
		"BO": "Bolivia, Plurinational State of",
		"BA": "Bosnia and Herzegovina",
		"BW": "Botswana",
		"BV": "Bouvet Island",
		"BR": "Brazil",
		"IO": "British Indian Ocean Territory",
		"VG": "Virgin Islands, British",
		"BN": "Brunei Darussalam",
		"BG": "Bulgaria",
		"BF": "Burkina Faso",
		"BI": "Burundi",
		"KH": "Cambodia",
		"CM": "Cameroon",
		"CA": "Canada",
		"CV": "Cape Verde",
		"KY": "Cayman Islands",
		"CF": "Central African Republic",
		"TD": "Chad",
		"CL": "Chile",
		"CN": "China",
		"CX": "Christmas Island",
		"CO": "Colombia",
		"KM": "Comoros",
		"CG": "Congo",
		"CK": "Cook Islands",
		"CR": "Costa Rica",
		"CI": "Côte d'Ivoire",
		"HR": "Croatia",
		"CU": "Cuba",
		"CY": "Cyprus",
		"CZ": "Czech Republic",
		"CD": "Congo, the Democratic Republic of the",
		"DK": "Denmark",
		"DJ": "Djibouti",
		"DM": "Dominica",
		"DO": "Dominican Republic",
		"TL": "Timor-Leste",
		"EC": "Ecuador",
		"EG": "Egypt",
		"SV": "El Salvador",
		"GQ": "Equatorial Guinea",
		"ER": "Eritrea",
		"EE": "Estonia",
		"ET": "Ethiopia",
		"FK": "Falkland Islands (Malvinas)",
		"FO": "Faroe Islands",
		"FJ": "Fiji",
		"FI": "Finland",
		"FR": "France",
		"GF": "French Guiana",
		"PF": "French Polynesia",
		"TF": "French Southern Territories",
		"GA": "Gabon",
		"GM": "Gambia",
		"GE": "Georgia",
		"DE": "Germany",
		"GH": "Ghana",
		"GI": "Gibraltar",
		"GR": "Greece",
		"GL": "Greenland",
		"GD": "Grenada",
		"GP": "Guadeloupe",
		"GU": "Guam",
		"GT": "Guatemala",
		"GG": "Guernsey",
		"GN": "Guinea",
		"GW": "Guinea-Bissau",
		"GY": "Guyana",
		"HT": "Haiti",
		"HM": "Heard Island and McDonald Islands",
		"HN": "Honduras",
		"HK": "Hong Kong",
		"HU": "Hungary",
		"IS": "Iceland",
		"IN": "India",
		"ID": "Indonesia",
		"IR": "Iran, Islamic Republic of",
		"IQ": "Iraq",
		"IE": "Ireland",
		"IL": "Israel",
		"IT": "Italy",
		"JM": "Jamaica",
		"JP": "Japan",
		"JE": "Jersey",
		"JO": "Jordan",
		"KZ": "Kazakhstan",
		"KE": "Kenya",
		"KI": "Kiribati",
		"KR": "Korea, Republic of",
		"XK": "Kosovo, Republic of",
		"KW": "Kuwait",
		"KG": "Kyrgyzstan",
		"LA": "Lao People's Democratic Republic",
		"LV": "Latvia",
		"LB": "Lebanon",
		"LS": "Lesotho",
		"LR": "Liberia",
		"LY": "Libya",
		"LI": "Liechtenstein",
		"LT": "Lithuania",
		"LU": "Luxembourg",
		"MO": "Macao",
		"MK": "Macedonia, the former Yugoslav Republic of",
		"MG": "Madagascar",
		"MW": "Malawi",
		"MY": "Malaysia",
		"MV": "Maldives",
		"ML": "Mali",
		"MT": "Malta",
		"MH": "Marshall Islands",
		"MQ": "Martinique",
		"MR": "Mauritania",
		"MU": "Mauritius",
		"YT": "Mayotte",
		"MX": "Mexico",
		"FM": "Micronesia, Federated States of",
		"MD": "Moldova, Republic of",
		"MC": "Monaco",
		"MN": "Mongolia",
		"ME": "Montenegro",
		"MS": "Montserrat",
		"MA": "Morocco",
		"MZ": "Mozambique",
		"MM": "Myanmar",
		"NA": "Namibia",
		"NR": "Nauru",
		"NP": "Nepal",
		"NL": "Netherlands",
		"AN": "Netherlands Antilles",
		"NC": "New Caledonia",
		"NZ": "New Zealand",
		"NI": "Nicaragua",
		"NE": "Niger",
		"NG": "Nigeria",
		"NU": "Niue",
		"NF": "Norfolk Island",
		"KP": "Korea, Democratic People's Republic of",
		"MP": "Northern Mariana Islands",
		"NO": "Norway",
		"OM": "Oman",
		"PK": "Pakistan",
		"PW": "Palau",
		"PS": "Palestine, State of",
		"PA": "Panama",
		"PG": "Papua New Guinea",
		"PY": "Paraguay",
		"PE": "Peru",
		"PH": "Philippines",
		"PN": "Pitcairn",
		"PL": "Poland",
		"PT": "Portugal",
		"PR": "Puerto Rico",
		"QA": "Qatar",
		"RE": "Réunion",
		"RO": "Romania",
		"RU": "Russian Federation",
		"RW": "Rwanda",
		"SH": "Saint Helena, Ascension and Tristan da Cunha",
		"KN": "Saint Kitts and Nevis",
		"LC": "Saint Lucia",
		"PM": "Saint Pierre and Miquelon",
		"VC": "Saint Vincent and the Grenadines",
		"WS": "Samoa",
		"SM": "San Marino",
		"ST": "São Tomé and Príncipe",
		"SA": "Saudi Arabia",
		"SN": "Senegal",
		"RS": "Serbia",
		"SC": "Seychelles",
		"SL": "Sierra Leone",
		"SG": "Singapore",
		"SK": "Slovakia",
		"SI": "Slovenia",
		"SB": "Solomon Islands",
		"SO": "Somalia",
		"ZA": "South Africa",
		"GS": "South Georgia and the South Sandwich Islands",
		"SS": "South Sudan",
		"ES": "Spain",
		"LK": "Sri Lanka",
		"SD": "Sudan",
		"SR": "Suriname",
		"SJ": "Svalbard and Jan Mayen",
		"SZ": "Swaziland",
		"SE": "Sweden",
		"CH": "Switzerland",
		"SY": "Syrian Arab Republic",
		"TW": "Taiwan",
		"TJ": "Tajikistan",
		"TZ": "Tanzania, United Republic of",
		"TH": "Thailand",
		"TG": "Togo",
		"TK": "Tokelau",
		"TO": "Tonga",
		"TT": "Trinidad and Tobago",
		"TN": "Tunisia",
		"TR": "Turkey",
		"TM": "Turkmenistan",
		"TC": "Turks and Caicos Islands",
		"TV": "Tuvalu",
		"VI": "Virgin Islands, U.S.",
		"UG": "Uganda",
		"UA": "Ukraine",
		"AE": "United Arab Emirates",
		"GB": "United Kingdom",
		"US": "United States",
		"UM": "United States Minor Outlying Islands",
		"UY": "Uruguay",
		"UZ": "Uzbekistan",
		"VU": "Vanuatu",
		"VA": "Holy See (Vatican City State)",
		"VE": "Venezuela, Bolivarian Republic of",
		"VN": "Viet Nam",
		"WF": "Wallis and Futuna",
		"EH": "Western Sahara",
		"YE": "Yemen",
		"ZM": "Zambia",
		"ZW": "Zimbabwe"
	};

/***/ },
/* 411 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	
	  function _log(level, args) {
	    // Only log statements in development mode or if
	    // throwing an error through console.error
	    if (true) {
	      window.console[level].apply(window.console, args);
	    }
	  }
	
	  /**
	   * Utility library of logging functions.
	   */
	  return {
	
	    trace: function trace() {
	      return _log('trace', arguments);
	    },
	
	    dir: function dir() {
	      return _log('dir', arguments);
	    },
	
	    time: function time() {
	      return _log('time', arguments);
	    },
	
	    timeEnd: function timeEnd() {
	      return _log('timeEnd', arguments);
	    },
	
	    group: function group() {
	      return _log('group', arguments);
	    },
	
	    groupEnd: function groupEnd() {
	      return _log('groupEnd', arguments);
	    },
	
	    assert: function assert() {
	      return _log('assert', arguments);
	    },
	
	    log: function log() {
	      return _log('log', arguments);
	    },
	
	    info: function info() {
	      return _log('info', arguments);
	    },
	
	    warn: function warn() {
	      return _log('warn', arguments);
	    },
	
	    error: function error() {
	      return _log('error', arguments);
	    },
	
	    deprecate: function deprecate(msg) {
	      return _log('warn', ['[okta-signin-widget] DEPRECATED:', msg]);
	    }
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 412 */
/***/ function(module, exports) {

	module.exports = {
		"version": "2.13.0",
		"supportedLanguages": [
			"en",
			"cs",
			"da",
			"de",
			"el",
			"es",
			"fi",
			"fr",
			"hu",
			"id",
			"in",
			"it",
			"ja",
			"ko",
			"ms",
			"nb",
			"nl-NL",
			"pl",
			"pt-BR",
			"ro",
			"ru",
			"sv",
			"th",
			"tr",
			"uk",
			"zh-CN",
			"zh-TW"
		]
	};

/***/ },
/* 413 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_) {
	
	  var fn = {},
	      hasFullCorsSupport = 'withCredentials' in new window.XMLHttpRequest(),
	      hasXDomainRequest = typeof XDomainRequest !== 'undefined';
	
	  fn.corsIsNotSupported = function () {
	    return !(hasFullCorsSupport || hasXDomainRequest);
	  };
	
	  fn.corsIsNotEnabled = function (jqXhr) {
	    // Not a definitive check, but it's the best we've got.
	    // Note: This will change when OktaAuth is updated
	    return jqXhr.status === 0;
	  };
	
	  // This is currently not being used, but we'll keep it around for when we
	  // want a fallback mechanism - i.e. use localStorage if it exists, else fall
	  // back to cookies.
	  fn.localStorageIsNotSupported = function () {
	    var test = 'test';
	    try {
	      localStorage.setItem(test, test);
	      localStorage.removeItem(test);
	      return false;
	    } catch (e) {
	      return true;
	    }
	  };
	
	  fn.supportsPushState = function (win) {
	    win = win || window;
	    return !!(win.history && win.history.pushState);
	  };
	
	  fn.isIE = function () {
	    return (/(msie|trident)/i.test(navigator.userAgent)
	    );
	  };
	
	  fn.isFirefox = function () {
	    return navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
	  };
	
	  // Returns a list of languages the user has configured for their browser, in
	  // order of preference.
	  fn.getUserLanguages = function () {
	    var languages, properties;
	
	    // Chrome, Firefox
	    if (navigator.languages) {
	      return navigator.languages;
	    }
	
	    languages = [];
	    properties = ['language', // Safari, IE11
	    'userLanguage', // IE
	    'browserLanguage', // IE
	    'systemLanguage' // IE
	    ];
	
	    _.each(properties, function (property) {
	      if (navigator[property]) {
	        languages.push(navigator[property]);
	      }
	    });
	
	    return languages;
	  };
	
	  return fn;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 414 */
/***/ function(module, exports) {

	module.exports = {
		"signout": "Sign Out",
		"remember": "Remember me",
		"rememberDevice": "Trust this device",
		"rememberDevice.timebased": "Do not challenge me on this device for the next {0}",
		"rememberDevice.devicebased": "Do not challenge me on this device again",
		"autoPush": "Send push automatically",
		"unlockaccount": "Unlock account?",
		"needhelp": "Need help signing in?",
		"goback": "Back to Sign In",
		"forgotpassword": "Forgot password?",
		"help": "Help",
		"retry": "Retry",
		"minutes.oneMinute": "minute",
		"minutes": "{0} minutes",
		"hours": "{0} hours",
		"days": "{0} days",
		"error.config": "There was a configuration error",
		"error.required.authParams": "Missing parameters for the configured authentication scheme - \"OAUTH2\"",
		"error.required.baseUrl": "\"baseUrl\" is a required widget parameter",
		"error.required.success": "A success handler is required",
		"error.required.el": "\"el\" is a required widget parameter",
		"error.unsupported.browser": "Unsupported browser",
		"error.unsupported.cors": "Unsupported browser - missing CORS support",
		"error.unsupported.localStorage": "Unsupported browser - missing localStorage support",
		"error.enabled.cors": "There was an error sending the request - have you enabled CORS?",
		"error.expired.session": "Your session has expired. Please try to log in again.",
		"error.auth.lockedOut": "Your account is locked. Please contact your administrator.",
		"error.oauth.idToken": "There was a problem generating the id_token for the user. Please try again.",
		"error.network.connection": "Unable to connect to the server. Please check your network connection.",
		"error.username.required": "Please enter a username",
		"error.password.required": "Please enter a password",
		"errors.E0000004": "Sign in failed!",
		"errors.E0000069": "Your account was locked due to excessive MFA attempts.",
		"errors.E0000047": "You exceeded the maximum number of requests. Try again in a while.",
		"errors.E0000001": "Api validation failed: {0}",
		"errors.E0000002": "The request was not valid: {0}",
		"errors.E0000003": "The request body was not well-formed.",
		"errors.E0000005": "Invalid session",
		"errors.E0000006": "You do not have permission to perform the requested action",
		"errors.E0000007": "Not found: {0}",
		"errors.E0000008": "The requested path was not found",
		"errors.E0000009": "Internal Server Error",
		"errors.E0000010": "Service is in read only mode",
		"errors.E0000011": "Invalid token provided",
		"errors.E0000012": "Unsupported media type",
		"errors.E0000013": "Invalid client app id",
		"errors.E0000015": "You do not have permission to access the feature you are requesting",
		"errors.E0000016": "Activation failed because the user is already active",
		"errors.E0000017": "Password reset failed",
		"errors.E0000018": "Bad request.  Accept and/or Content-Type headers are likely not set.",
		"errors.E0000019": "Bad request.  Accept and/or Content-Type headers likely do not match supported values.",
		"errors.E0000020": "Bad request.",
		"errors.E0000021": "Bad request.  Accept and/or Content-Type headers likely do not match supported values.",
		"errors.E0000022": "The endpoint does not support the provided HTTP method",
		"errors.E0000023": "Operation failed because user profile is mastered under another system",
		"errors.E0000024": "Bad request.  This operation on app metadata is not yet supported.",
		"errors.E0000025": "App version assignment failed.",
		"errors.E0000026": "This endpoint has been deprecated.",
		"errors.E0000027": "Group push bad request : {0}",
		"errors.E0000028": "The request is missing a required parameter.",
		"errors.E0000029": "Invalid paging request.",
		"errors.E0000030": "Bad request. Invalid date. Dates must be of the form yyyy-MM-dd''T''HH:mm:ss.SSSZZ, e.g. 2013-01-01T12:00:00.000-07:00.",
		"errors.E0000031": "Invalid search criteria.",
		"errors.E0000032": "Unlock is not allowed for this user.",
		"errors.E0000033": "Bad request. Can't specify a search query and filter in the same request.",
		"errors.E0000034": "Forgot password not allowed on specified user.",
		"errors.E0000035": "Change password not allowed on specified user.",
		"errors.E0000036": "Change recovery question not allowed on specified user.",
		"errors.E0000037": "Type mismatch exception.",
		"errors.E0000038": "This operation is not allowed in the user''s current status.",
		"errors.E0000039": "Operation on application settings failed.",
		"errors.E0000040": "Application label must not be the same as an existing application label.",
		"errors.E0000041": "Credentials should not be set on this resource based on the scheme.",
		"errors.E0000042": "Setting the error page redirect URL failed.",
		"errors.E0000043": "Self service application assignment is not enabled.",
		"errors.E0000044": "Self service application assignment is not supported.",
		"errors.E0000045": "Field mapping bad request.",
		"errors.E0000046": "Deactivate application for user forbidden.",
		"errors.E0000048": "Entity not found exception.",
		"errors.E0000049": "Invalid SCIM data from SCIM implementation.",
		"errors.E0000050": "Invalid SCIM data from client.",
		"errors.E0000051": "No response from SCIM implementation.",
		"errors.E0000052": "Endpoint not implemented.",
		"errors.E0000053": "Invalid SCIM filter.",
		"errors.E0000054": "Invalid pagination properties.",
		"errors.E0000055": "Duplicate group.",
		"errors.E0000056": "Delete application forbidden.",
		"errors.E0000057": "Access to this application is denied due to a policy.",
		"errors.E0000058": "Access to this application requires MFA: {0}",
		"errors.E0000059": "The connector configuration could not be tested. Make sure that the URL, Authentication Parameters are correct and that there is an implementation available at the URL provided.",
		"errors.E0000060": "Unsupported operation.",
		"errors.E0000061": "Tab error: {0}",
		"errors.E0000062": "The specified user is already assigned to the application.",
		"errors.E0000063": "Invalid combination of parameters specified.",
		"errors.E0000064": "Password is expired and must be changed.",
		"errors.E0000065": "Internal error processing app metadata.",
		"errors.E0000066": "APNS is not configured, contact your admin",
		"errors.E0000067": "Factors Service Error.",
		"errors.E0000070": "Waiting for ACK",
		"errors.E0000071": "Unsupported OS Version: {0}",
		"errors.E0000072": "MIM policy settings have disallowed enrollment for this user",
		"errors.E0000073": "User rejected authentication",
		"errors.E0000074": "Factor Service Error",
		"errors.E0000075": "Cannot modify the {0} attribute because it has a field mapping and profile push is enabled.",
		"errors.E0000076": "Cannot modify the app user because it is mastered by an external app.",
		"errors.E0000077": "Cannot modify the {0} attribute because it is read-only.",
		"errors.E0000078": "Cannot modify the {0} attribute because it is immutable.",
		"errors.E0000079": "This operation is not allowed in the current authentication state.",
		"errors.E0000081": "Cannot modify the {0} attribute because it is a reserved attribute for this application.",
		"errors.E0000082": "Each code can only be used once. Please wait for a new code and try again.",
		"errors.E0000083": "PassCode is valid but exceeded time window.",
		"errors.E0000084": "App evaluation error.",
		"errors.E0000085": "You do not have permission to access your account at this time.",
		"errors.E0000086": "This policy cannot be activated at this time.",
		"errors.E0000087": "The recovery question answer did not match our records.",
		"errors.E0000090": "The role specified is already assigned to the user.",
		"errors.E0000091": "The provided role type was not the same as required role type.",
		"errors.E0000092": "Access to this application requires re-authentication: {0}",
		"errors.E0000093": "Target count limit exceeded",
		"errors.E0000094": "The provided filter is unsupported.",
		"errors.E0000095": "Recovery not allowed for unknown user.",
		"errors.E0000096": "This certificate has already been uploaded with kid={0}.",
		"errors.E0000097": "There is no verified phone number on file.",
		"errors.E0000098": "This phone number is invalid.",
		"errors.E0000099": "Only numbers located in US and Canada are allowed.  Contact your administrator if this is a problem.",
		"errors.E0000100": "Unable to perform search query.",
		"errors.E0000101": "Upload failed because of a problem with your ipa file, {0}",
		"errors.E0000102": "YubiKey cannot be deleted while assigned to an user. Please deactivate YubiKey using reset MFA and try again",
		"errors.E0000103": "Action on device already in queue or in progress",
		"errors.E0000104": "Device is already locked and cannot be locked again",
		"errors.E0000105": "You have accessed an account recovery link that has expired or been previously used.",
		"errors.E0000106": "Wait for token to change, then enter the new tokencode.",
		"errors.E0000107": "The entity is not in the expected state for the requested transition.",
		"errors.E0000109": "An SMS message was recently sent. Please wait 30 seconds before trying again.",
		"errors.E0000110": "You have accessed a link that has expired or has been previously used.",
		"errors.E0000111": "Cannot modify the {0} object because it is read-only.",
		"errors.E0000112": "Cannot update this user because they are still being activated. Please try again in a few minutes.",
		"errors.E0000113": "{0}.",
		"errors.E0000114": "A user with this login already exists in the current organization.",
		"errors.E0000115": "Upload failed, {0}",
		"errors.E0000116": "{0}",
		"errors.E0000119": "Your account is locked. Please contact your administrator.",
		"errors.E0000124": "Could not create user. To create a user and expire their password immediately, a password must be specified",
		"errors.E0000125": "Could not create user. To create a user and expire their password immediately, \"activate\" must be true",
		"errors.E0000133": "A phone call was recently made. Please wait 30 seconds before trying again.",
		"oform.next": "Next",
		"oform.verify": "Verify",
		"oform.send": "Send",
		"oform.back": "Back",
		"oform.save": "Save",
		"oform.cancel": "Cancel",
		"oform.edit": "Edit",
		"oform.previous": "Previous",
		"oform.errorbanner.title": "We found some errors. Please review the form and make corrections.",
		"oform.errormsg.title": "Please review the form to correct the following errors:",
		"oform.error.unexpected": "There was an unexpected internal error. Please try again.",
		"model.validation.field.blank": "The field cannot be left blank",
		"model.validation.field.ascii": "The field cannot contain Non-ASCII characters",
		"model.validation.field.wrong.type": "The field is of the wrong type",
		"model.validation.field.invalid": "The field has an invalid value",
		"model.validation.field.value.not.allowed": "The field value is not allowed",
		"model.validation.field.array.minItems": "The array does not have enough items",
		"model.validation.field.array.maxItems": "The array contains too many items",
		"model.validation.field.array.unique": "The array can only have unique values",
		"model.validation.field.too.long": "The field cannot exceed {0} characters",
		"model.validation.field.too.small": "The field cannot be less than {0} characters",
		"model.validation.field.string.minLength": "This field cannot be less than the minimum required characters",
		"model.validation.field.string.maxLength": "This field cannot exceed the maximum allowed characters",
		"model.validation.field.invalid.format.email": "This value is not a valid email address",
		"model.validation.field.invalid.format.uri": "This value is not a valid URI",
		"model.validation.field.invalid.format.ipv4": "This value is not a valid IPv4 address",
		"model.validation.field.invalid.format.hostname": "This value is not a valid hostname",
		"model.validation.field.username": "Please check your username",
		"factor.totpSoft.oktaVerify": "Okta Verify",
		"factor.totpSoft.googleAuthenticator": "Google Authenticator",
		"factor.totpSoft.description": "Enter single-use code from the mobile app.",
		"factor.totpHard.rsaSecurId": "RSA SecurID",
		"factor.totpHard.symantecVip": "Symantec VIP",
		"factor.totpHard.description": "Enter a single-use code from a hardware token.",
		"factor.totpHard.yubikey": "Yubikey",
		"factor.totpHard.yubikey.description": "Insert your Yubikey and tap it to get a verification code.",
		"factor.totpHard.yubikey.placeholder": "Click here, then tap your Yubikey",
		"factor.oktaVerifyPush": "Okta Verify",
		"factor.push.description": "Use a push notification sent to the mobile app.",
		"factor.duo": "Duo Security",
		"factor.duo.description": "Use Push Notification, SMS, or Voice call to authenticate.",
		"factor.sms": "SMS Authentication",
		"factor.sms.description": "Enter a single-use code sent to your mobile phone.",
		"factor.call": "Voice Call Authentication",
		"factor.call.description": "Use a phone to authenticate by following voice instructions.",
		"factor.securityQuestion": "Security Question",
		"factor.securityQuestion.description": "Use the answer to a security question to authenticate.",
		"factor.windowsHello": "Windows Hello",
		"factor.windowsHello.signin.description": "Sign in to Okta using Windows Hello.",
		"factor.u2f": "Security Key (U2F)",
		"factor.u2f.description": "Use a Universal 2nd Factor (U2F) security key to sign on to Okta.",
		"factor.email": "Email Authentication",
		"factor.password": "Password",
		"factor.customFactor.description": "Redirect to a third party MFA provider to sign in to Okta.",
		"mfa.challenge.verify": "Verify",
		"mfa.challenge.answer.placeholder": "Answer",
		"mfa.challenge.answer.tooltip": "Answer",
		"mfa.challenge.answer.showAnswer": "Show",
		"mfa.challenge.answer.hideAnswer": "Hide",
		"mfa.challenge.enterCode.placeholder": "Enter Code",
		"mfa.challenge.enterCode.tooltip": "Enter Code",
		"mfa.challenge.password.placeholder": "Password",
		"mfa.backToFactors": "Back to factor list",
		"mfa.phoneNumber.placeholder": "Phone number",
		"mfa.phoneNumber.ext.placeholder": "Extension",
		"mfa.sendCode": "Send code",
		"mfa.sent": "Sent",
		"mfa.resendCode": "Re-send code",
		"mfa.call": "Call",
		"mfa.calling": "Calling",
		"mfa.redial": "Redial",
		"mfa.sendEmail": "Send email",
		"mfa.resendEmail": "Re-send email",
		"mfa.scanBarcode": "Scan barcode",
		"mfa.noAccessToEmail": "Can't access email",
		"password.reset": "Reset Password",
		"password.oldPassword.placeholder": "Old password",
		"password.oldPassword.tooltip": "Old password",
		"password.newPassword.placeholder": "New password",
		"password.newPassword.tooltip": "New password",
		"password.confirmPassword.placeholder": "Repeat password",
		"password.confirmPassword.tooltip": "Repeat password",
		"password.error.match": "New passwords must match",
		"recovery.sms.hint": "SMS can only be used if a mobile phone number has been configured.",
		"recovery.mobile.hint": "{0} can only be used if a mobile phone number has been configured.",
		"recovery.sms": "SMS",
		"recovery.call": "Voice Call",
		"recovery.smsOrCall": "SMS or Voice Call",
		"enroll.choices.title": "Set up multifactor authentication",
		"enroll.choices.description": "Your company requires multifactor authentication to add an additional layer of security when signing in to your Okta account",
		"enroll.choices.optional": "You can configure any additional optional factor or click finish",
		"enroll.choices.list.setup": "Setup required",
		"enroll.choices.list.enrolled": "Enrolled factors",
		"enroll.choices.list.optional": "Additional optional factors",
		"enroll.choices.step": "{0} of {1}",
		"enroll.choices.setup": "Setup",
		"enroll.choices.submit.finish": "Finish",
		"enroll.choices.submit.configure": "Configure factor",
		"enroll.choices.submit.next": "Configure next factor",
		"enroll.securityQuestion.setup": "Setup secret question authentication",
		"security.disliked_food": "What is the food you least liked as a child?",
		"security.name_of_first_plush_toy": "What is the name of your first stuffed animal?",
		"security.first_award": "What did you earn your first medal or award for?",
		"security.favorite_security_question": "What is your favorite security question?",
		"security.favorite_toy": "What is the toy/stuffed animal you liked the most as a kid?",
		"security.first_computer_game": "What was the first computer game you played?",
		"security.favorite_movie_quote": "What is your favorite movie quote?",
		"security.first_sports_team_mascot": "What was the mascot of the first sports team you played on?",
		"security.first_music_purchase": "What music album or song did you first purchase?",
		"security.favorite_art_piece": "What is your favorite piece of art?",
		"security.grandmother_favorite_desert": "What was your grandmother's favorite dessert?",
		"security.first_thing_cooked": "What was the first thing you learned to cook?",
		"security.childhood_dream_job": "What was your dream job as a child?",
		"security.first_kiss_location": "Where did you have your first kiss?",
		"security.place_where_significant_other_was_met": "Where did you meet your spouse/significant other?",
		"security.favorite_vacation_location": "Where did you go for your favorite vacation?",
		"security.new_years_two_thousand": "Where were you on New Year's Eve in the year 2000?",
		"security.favorite_speaker_actor": "Who is your favorite speaker/orator?",
		"security.favorite_book_movie_character": "Who is your favorite book/movie character?",
		"security.favorite_sports_player": "Who is your favorite sports player?",
		"enroll.sms.setup": "Receive a code via SMS to authenticate",
		"enroll.sms.try_again": "The number you entered seems invalid. If the number is correct, please try again.",
		"enroll.call.setup": "Follow phone call instructions to authenticate",
		"enroll.onprem.username.placeholder": "Enter {0} username",
		"enroll.onprem.username.tooltip": "Enter {0} username",
		"enroll.onprem.passcode.placeholder": "Enter {0} passcode",
		"enroll.onprem.passcode.tooltip": "Enter {0} passcode",
		"enroll.symantecVip.subtitle": "Enter Credential ID and two consecutive generated codes",
		"enroll.symantecVip.credentialId.placeholder": "Enter credential ID",
		"enroll.symantecVip.credentialId.tooltip": "Enter credential ID",
		"enroll.symantecVip.passcode1.placeholder": "Security code 1",
		"enroll.symantecVip.passcode1.tooltip": "Security code 1",
		"enroll.symantecVip.passcode2.placeholder": "Security code 2",
		"enroll.symantecVip.passcode2.tooltip": "Security code 2",
		"enroll.yubikey.title": "Setup Yubikey",
		"enroll.yubikey.subtitle": "Insert your Yubikey into a USB port and tap it to generate a verification code",
		"enroll.totp.title": "Setup {0}",
		"enroll.totp.selectDevice": "Select your device type",
		"enroll.totp.downloadApp": "Download <a href=\"{0}\" class=\"inline-link\">{1} from the {2}</a> onto your mobile device.",
		"enroll.totp.installApp": "Install {0}",
		"enroll.duo.title": "Setup Duo Security",
		"enroll.windowsHello.title": "Enroll Windows Hello",
		"enroll.windowsHello.subtitle": "Click below to enroll Windows Hello as a second form of authentication",
		"enroll.windowsHello.subtitle.loading": "Please wait while Windows Hello is loading...",
		"enroll.windowsHello.save": "Enroll Windows Hello",
		"enroll.windowsHello.error.notWindows": "Windows Hello can only be used on Windows Edge with Windows 10. Contact your admin for assistance.",
		"enroll.windowsHello.error.notConfiguredHtml": "Windows Hello is not configured. Select the <b>Start</b> button, then select <b>Settings</b> &gt; <b>Accounts</b> &gt; <b>Sign-in</b> to configure Windows Hello.",
		"verify.windowsHello.subtitle": "Verify your identity with Windows Hello",
		"verify.windowsHello.subtitle.loading": "Please wait while Windows Hello is loading...",
		"verify.windowsHello.subtitle.signingIn": "Signing in to Okta...",
		"verify.windowsHello.save": "Verify with Windows Hello",
		"verify.windowsHello.error.notFound": "Your Windows Hello enrollment does not match our records. Contact your administrator for assistance.",
		"verify.windowsHello.error.notFound.selectAnother": "Your Windows Hello enrollment does not match our records. Select another factor or contact your administrator for assistance.",
		"enroll.u2f.title": "Setup Security Key (U2F)",
		"enroll.u2f.save": "Register Security Key",
		"enroll.u2f.general2": "Make sure you have a Security Key. If already inserted, remove it now.<br>If you have a Bluetooth Security Key, turn on your computer's Bluetooth.",
		"enroll.u2f.general3": "Click the button below to register",
		"enroll.u2f.instructions": "Insert your Security Key into a USB port on this computer. If it has a button or gold disk, tap it.",
		"enroll.u2f.instructionsBluetooth": "If you are using a Bluetooth Security Key, press the button.",
		"u2f.error.factorNotSupported": "Security Key (U2F) is not supported on this browser. Select another factor or contact your admin for assistance.",
		"u2f.error.factorNotSupported.oneFactor": "Security Key (U2F) is not supported on this browser. Contact your admin for assistance.",
		"u2f.error.other": "An unknown error has occured. Try again or select another factor.",
		"u2f.error.other.oneFactor": "An unknown error has occured. Try again or contact your admin for assistance.",
		"u2f.error.badRequest": "There was an error with the U2F request. Try again or select another factor.",
		"u2f.error.badRequest.oneFactor": "There was an error with the U2F request. Try again or contact your admin for assistance.",
		"u2f.error.unsupported": "The security key is unsupported. Select another factor.",
		"u2f.error.unsupported.oneFactor": "The security key is unsupported. Contact your admin for assistance.",
		"u2f.error.timeout": "You have timed out of the authentication period. Please try again.",
		"verify.u2f.instructions": "Insert your Security Key. If it has a button or gold disk, tap it.",
		"verify.u2f.instructionsBluetooth": "If you are using a Bluetooth Security Key, turn on your computer's Bluetooth and press the button.",
		"verify.u2f.retry": "Retry",
		"enroll.customFactor.subtitle": "Clicking below will redirect to MFA enrollment with {0}",
		"enroll.customFactor.save": "Enroll",
		"verify.customFactor.subtitle": "Clicking below will redirect to verification with {0}",
		"enroll.totp.enterCode": "Enter code displayed from the application",
		"enroll.totp.setupApp": "Launch {0} application on your mobile device and select Add an account.",
		"enroll.totp.setupGoogleAuthApp": "Launch {0}, tap the \"+\" icon, then select \"Scan barcode\".",
		"enroll.totp.cannotScan": "Can't scan?",
		"enroll.totp.refreshBarcode": "Refresh code",
		"enroll.totp.cannotScanBarcode": "Can't scan barcode?",
		"enroll.totp.manualSetupInstructions": "To set up manually enter your Okta Account username and then input the following in the Secret Key Field",
		"enroll.totp.sharedSecretInstructions": "Enter your Okta Account username and enter the following in the Secret Key Field",
		"enroll.totp.sendSms": "Send activation link via SMS",
		"enroll.totp.sendEmail": "Send activation link via email",
		"enroll.totp.setupManually": "Setup manually without push notification",
		"enroll.totp.enrollViaEmail.title": "Activation email sent!",
		"enroll.totp.enrollViaEmail.msg": "Open the email from your mobile device.",
		"enroll.totp.enrollViaSms.title": "SMS sent!",
		"enroll.totp.enrollViaSms.msg": "View the SMS on your mobile device.",
		"recoveryChallenge.sms.title": "Enter verification code sent via SMS",
		"recoveryChallenge.call.title": "Enter verification code received via Voice Call",
		"mfa.factors.dropdown.title": "Select an authentication factor",
		"mfa.duoSecurity.push": "Push — {0}",
		"mfa.duoSecurity.sms": "SMS — {0}",
		"mfa.duoSecurity.call": "Call — {0}",
		"mfa.challenge.title": "Enter your {0} passcode",
		"mfa.challenge.orEnterCode": "Or enter code",
		"oktaverify.send": "Send Push",
		"oktaverify.resend": "Re-send Push",
		"oktaverify.sent": "Push sent!",
		"oktaverify.rejected": "You have chosen to reject this login.",
		"oktaverify.timeout": "Your push notification has expired.",
		"oktaverify.warning": "Haven't received a push notification yet? Try opening the Okta Verify App on your phone.",
		"primaryauth.title": "Sign In",
		"primaryauth.username.placeholder": "Username",
		"primaryauth.username.tooltip": "Username",
		"primaryauth.password.placeholder": "Password",
		"primaryauth.password.tooltip": "Password",
		"primaryauth.submit": "Sign In",
		"primaryauth.newUser.tooltip": "This is the first time you are connecting to {0} from this browser",
		"primaryauth.newUser.tooltip.close": "Close",
		"idpDiscovery.email.placeholder": "Email",
		"password.forgot.email.or.username.placeholder": "Email or Username",
		"password.forgot.email.or.username.tooltip": "Email or Username",
		"password.forgot.sendText": "Reset via SMS",
		"password.forgot.sendEmail": "Reset via Email",
		"password.forgot.call": "Reset via Voice Call",
		"password.forgot.emailSent.title": "Email sent!",
		"password.forgot.emailSent.desc": "Email has been sent to {0} with instructions on resetting your password.",
		"password.forgot.question.title": "Answer Forgotten Password Challenge",
		"password.forgot.question.submit": "Reset Password",
		"password.forgot.code.notReceived": "Didn't receive a code? Reset via email",
		"password.forgot.noFactorsEnabled": "No password reset options available. Please contact your administrator.",
		"password.reset.title": "Reset your Okta password",
		"password.complexity.requirements": "Password requirements: {0}.",
		"password.complexity.history": "Your password cannot be any of your last {0} passwords.",
		"password.complexity.minAgeMinutes": "At least {0} minute(s) must have elapsed since you last changed your password.",
		"password.complexity.minAgeHours": "At least {0} hour(s) must have elapsed since you last changed your password.",
		"password.complexity.minAgeDays": "At least {0} day(s) must have elapsed since you last changed your password.",
		"password.complexity.length": "at least {0} characters",
		"password.complexity.list.element": ", {0}",
		"password.complexity.lowercase": "a lowercase letter",
		"password.complexity.uppercase": "an uppercase letter",
		"password.complexity.number": "a number",
		"password.complexity.symbol": "a symbol",
		"password.complexity.no_username": "no parts of your username",
		"password.complexity.no_first_name": "does not include your first name",
		"password.complexity.no_last_name": "does not include your last name",
		"password.expired.submit": "Change Password",
		"password.expired.title": "Your Okta password has expired",
		"password.expiring.later": "Remind me later",
		"password.expiring.title": "Your password will expire in {0} days",
		"password.expiring.today": "Your password will expire later today",
		"password.expiring.soon": "Your password is expiring soon",
		"password.expiring.subtitle": "When password expires you may be locked out of Okta Mobile, mobile email, and other services.",
		"password.expired.custom.submit": "Go to {0}",
		"password.expired.custom.subtitle": "This password is set on another website. Click the button below to go there and set a new password.",
		"account.unlock.title": "Unlock account",
		"account.unlock.email.or.username.placeholder": "Email or username",
		"account.unlock.email.or.username.tooltip": "Email or username",
		"account.unlock.sendText": "Send SMS",
		"account.unlock.voiceCall": "Voice Call",
		"account.unlock.sendEmail": "Send Email",
		"account.unlock.emailSent.title": "Email sent!",
		"account.unlock.emailSent.desc": "Email has been sent to {0} with instructions on unlocking your account.",
		"account.unlock.question.title": "Answer Unlock Account Challenge",
		"account.unlock.question.submit": "Unlock Account",
		"account.unlock.unlocked.title": "Account successfully unlocked!",
		"account.unlock.unlocked.desc": "You can log in using your existing username and password.",
		"account.unlock.code.notReceived": "Didn't receive a code? Unlock via email",
		"account.unlock.noFactorsEnabled": "No unlock options available. Please contact your administrator.",
		"contact.support": "If you didn't provide a secondary email address or don't have access to email, please contact your administrator at {0}",
		"socialauth.divider.text": "OR",
		"socialauth.facebook.label": "Sign in with Facebook",
		"socialauth.google.label": "Sign in with Google",
		"socialauth.linkedin.label": "Sign in with LinkedIn",
		"socialauth.microsoft.label": "Sign in with Microsoft",
		"socialauth.popup.title": "External Identity Provider User Authentication",
		"authbutton.divider.text": "or",
		"registration.signup.label": "Don't have an account?",
		"registration.signup.text": "Sign up",
		"registration.complete.title": "Verification email sent",
		"registration.complete.desc": "We just sent a verification email to {0}. Please check your email and verify your account to continue.",
		"registration.form.title": "Create Account",
		"registration.form.submit": "Register",
		"registration.passwordComplexity.minLength": "At least {0} character(s)",
		"registration.passwordComplexity.minLower": "At least {0} lowercase letter(s)",
		"registration.passwordComplexity.minUpper": "At least {0} uppercase letter(s)",
		"registration.passwordComplexity.minNumber": "At least {0} number(s)",
		"registration.passwordComplexity.minSymbol": "At least {0} symbol(s)",
		"registration.passwordComplexity.excludeUsername": "Does not contain part of username",
		"registration.passwordComplexity.excludeAttribute": "Does not contain '{0}'",
		"registration.required.fields.label": "* indicates required field",
		"registration.default.callbackhook.error": "We could not process your registration at this time. Please try again later.",
		"registration.error.userName.invalidEmail": "Invalid email address",
		"registration.error.password.passwordRequirementsNotMet": "Password requirements were not met",
		"registration.error.userName.notUniqueWithinOrg": "An account with that email already exists",
		"piv.card": "PIV Card",
		"piv.card.insert": "Please insert your PIV card and select the user certificate.",
		"piv.card.error": "Certificate authentication failed. Contact your admin.",
		"piv.card.error.empty": "No certificate selected. Choose a certificate and try again.",
		"piv.card.error.invalid": "Certificate validation failed. Choose another certificate and try again.",
		"unsupported.oneDrive.title": "Your OneDrive version is not supported",
		"unsupported.oneDrive.desc": "Upgrade now by installing the OneDrive for Business Next Generation Sync Client to login to Okta",
		"unsupported.oneDrive.action": "Learn how to upgrade",
		"unsupported.cookies.title": "Cookies are required",
		"unsupported.cookies.desc": "Cookies are disabled on your browser. Please enable Cookies and refresh this page.",
		"unsupported.cookies.action": "Refresh",
		"deviceTrust.sso.text": "Sign in to access company resources",
		"deviceTrust.sso.subtitle.2": "Your company uses Okta Mobile to get you approved to access this app.",
		"deviceTrust.sso.button": "Sign in with Okta Mobile",
		"deviceTrust.sso.expire.title": "Oops let's get you back on track",
		"deviceTrust.sso.expire.subtitle": "Unfortunately the steps required to sign in took longer than expected and your attempt timed out.",
		"deviceTrust.sso.expire.button": "Sign in using Okta Mobile",
		"deviceTrust.universalLink.fallback.getOktaMobile.title": "Get Okta Mobile",
		"deviceTrust.universalLink.fallback.getOktaMobile.subtitle": "Go to the {0}AppStore{1}, {0}search{1} for {0}Okta Mobile{1} and tap on {0}GET{1} Okta Mobile. Once installed, sign in to Okta Mobile and follow the instructions to secure your device.",
		"consent.required.text": "<b>{0}</b> would like to do the following on your behalf, <b>{1}</b>:",
		"consent.required.headline": "<b>{0}</b> is requesting permissions to:",
		"consent.required.description": "By clicking Allow Access, you allow this app access to the actions listed above.",
		"consent.required.termsOfService": "Terms of Service",
		"consent.required.privacyPolicy": "Privacy Policy",
		"consent.required.consentButton": "Allow Access",
		"consent.required.cancelButton": "Don't Allow",
		"cert.authentication.title": "Certificate authentication",
		"u2f.error.notSupportedBrowser": "The Security Key is only supported for Chrome or Firefox browsers. Select another factor or contact your admin for assistance.",
		"u2f.error.notSupportedBrowser.oneFactor": "The Security Key is only supported for Chrome or Firefox browsers. Contact your admin for assistance.",
		"u2f.error.notSupportedMobileDevice": "Security Key (U2F) is not supported on mobile devices. Select another 2FA method to sign in.",
		"u2f.error.notSupportedMobileDevice.oneFactor": "Security Key (U2F) is not supported on mobile devices.",
		"error.invalid.identifierFirst": "\"identifierFirst\" can only be enabled if \"idpDiscovery\" is enabled as well",
		"deviceTrust.sso.subtitle": "Okta Mobile will check that your device is secure and make it easy to sign in.",
		"enroll.u2f.general1": "If using Firefox download and install the U2F browser extension.",
		"u2f.error.noFirefoxExtension": "<a target=\"_blank\" href=\"https://addons.mozilla.org/en-US/firefox/addon/u2f-support-add-on/\">Download</a> and install the Firefox U2F browser extension before proceeding. You may be required to restart your browser after installation."
	};

/***/ },
/* 415 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _stringify = __webpack_require__(406);
	
	var _stringify2 = _interopRequireDefault(_stringify);
	
	var _typeof2 = __webpack_require__(334);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	    json2.js
	    2012-10-08
	
	    Public Domain.
	
	    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.
	
	    See http://www.JSON.org/js.html
	
	
	    This code should be minified before deployment.
	    See http://javascript.crockford.com/jsmin.html
	
	    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO
	    NOT CONTROL.
	
	
	    This file creates a global JSON object containing two methods: stringify
	    and parse.
	
	        JSON.stringify(value, replacer, space)
	            value       any JavaScript value, usually an object or array.
	
	            replacer    an optional parameter that determines how object
	                        values are stringified for objects. It can be a
	                        function or an array of strings.
	
	            space       an optional parameter that specifies the indentation
	                        of nested structures. If it is omitted, the text will
	                        be packed without extra whitespace. If it is a number,
	                        it will specify the number of spaces to indent at each
	                        level. If it is a string (such as '\t' or '&nbsp;'),
	                        it contains the characters used to indent at each level.
	
	            This method produces a JSON text from a JavaScript value.
	
	            When an object value is found, if the object contains a toJSON
	            method, its toJSON method will be called and the result will be
	            stringified. A toJSON method does not serialize: it returns the
	            value represented by the name/value pair that should be serialized,
	            or undefined if nothing should be serialized. The toJSON method
	            will be passed the key associated with the value, and this will be
	            bound to the value
	
	            For example, this would serialize Dates as ISO strings.
	
	                Date.prototype.toJSON = function (key) {
	                    function f(n) {
	                        // Format integers to have at least two digits.
	                        return n < 10 ? '0' + n : n;
	                    }
	
	                    return this.getUTCFullYear()   + '-' +
	                         f(this.getUTCMonth() + 1) + '-' +
	                         f(this.getUTCDate())      + 'T' +
	                         f(this.getUTCHours())     + ':' +
	                         f(this.getUTCMinutes())   + ':' +
	                         f(this.getUTCSeconds())   + 'Z';
	                };
	
	            You can provide an optional replacer method. It will be passed the
	            key and value of each member, with this bound to the containing
	            object. The value that is returned from your method will be
	            serialized. If your method returns undefined, then the member will
	            be excluded from the serialization.
	
	            If the replacer parameter is an array of strings, then it will be
	            used to select the members to be serialized. It filters the results
	            such that only members with keys listed in the replacer array are
	            stringified.
	
	            Values that do not have JSON representations, such as undefined or
	            functions, will not be serialized. Such values in objects will be
	            dropped; in arrays they will be replaced with null. You can use
	            a replacer function to replace those with JSON values.
	            JSON.stringify(undefined) returns undefined.
	
	            The optional space parameter produces a stringification of the
	            value that is filled with line breaks and indentation to make it
	            easier to read.
	
	            If the space parameter is a non-empty string, then that string will
	            be used for indentation. If the space parameter is a number, then
	            the indentation will be that many spaces.
	
	            Example:
	
	            text = JSON.stringify(['e', {pluribus: 'unum'}]);
	            // text is '["e",{"pluribus":"unum"}]'
	
	
	            text = JSON.stringify(['e', {pluribus: 'unum'}], null, '\t');
	            // text is '[\n\t"e",\n\t{\n\t\t"pluribus": "unum"\n\t}\n]'
	
	            text = JSON.stringify([new Date()], function (key, value) {
	                return this[key] instanceof Date ?
	                    'Date(' + this[key] + ')' : value;
	            });
	            // text is '["Date(---current time---)"]'
	
	
	        JSON.parse(text, reviver)
	            This method parses a JSON text to produce an object or array.
	            It can throw a SyntaxError exception.
	
	            The optional reviver parameter is a function that can filter and
	            transform the results. It receives each of the keys and values,
	            and its return value is used instead of the original value.
	            If it returns what it received, then the structure is not modified.
	            If it returns undefined then the member is deleted.
	
	            Example:
	
	            // Parse the text. Values that look like ISO date strings will
	            // be converted to Date objects.
	
	            myData = JSON.parse(text, function (key, value) {
	                var a;
	                if (typeof value === 'string') {
	                    a =
	/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
	                    if (a) {
	                        return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],
	                            +a[5], +a[6]));
	                    }
	                }
	                return value;
	            });
	
	            myData = JSON.parse('["Date(09/09/2001)"]', function (key, value) {
	                var d;
	                if (typeof value === 'string' &&
	                        value.slice(0, 5) === 'Date(' &&
	                        value.slice(-1) === ')') {
	                    d = new Date(value.slice(5, -1));
	                    if (d) {
	                        return d;
	                    }
	                }
	                return value;
	            });
	
	
	    This is a reference implementation. You are free to copy, modify, or
	    redistribute.
	*/
	
	/*jslint evil: true, regexp: true */
	
	/*members "", "\b", "\t", "\n", "\f", "\r", "\"", JSON, "\\", apply,
	    call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,
	    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,
	    lastIndex, length, parse, prototype, push, replace, slice, stringify,
	    test, toJSON, toString, valueOf
	*/
	
	// Create a JSON object only if one does not already exist. We create the
	// methods in a closure to avoid creating global variables.
	
	if ((typeof JSON === 'undefined' ? 'undefined' : (0, _typeof3.default)(JSON)) !== 'object') {
	    JSON = {};
	}
	
	(function () {
	    'use strict';
	
	    function f(n) {
	        // Format integers to have at least two digits.
	        return n < 10 ? '0' + n : n;
	    }
	
	    if (typeof Date.prototype.toJSON !== 'function') {
	
	        Date.prototype.toJSON = function (key) {
	
	            return isFinite(this.valueOf()) ? this.getUTCFullYear() + '-' + f(this.getUTCMonth() + 1) + '-' + f(this.getUTCDate()) + 'T' + f(this.getUTCHours()) + ':' + f(this.getUTCMinutes()) + ':' + f(this.getUTCSeconds()) + 'Z' : null;
	        };
	
	        String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function (key) {
	            return this.valueOf();
	        };
	    }
	
	    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
	        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
	        gap,
	        indent,
	        meta = { // table of character substitutions
	        '\b': '\\b',
	        '\t': '\\t',
	        '\n': '\\n',
	        '\f': '\\f',
	        '\r': '\\r',
	        '"': '\\"',
	        '\\': '\\\\'
	    },
	        rep;
	
	    function quote(string) {
	
	        // If the string contains no control characters, no quote characters, and no
	        // backslash characters, then we can safely slap some quotes around it.
	        // Otherwise we must also replace the offending characters with safe escape
	        // sequences.
	
	        escapable.lastIndex = 0;
	        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
	            var c = meta[a];
	            return typeof c === 'string' ? c : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
	        }) + '"' : '"' + string + '"';
	    }
	
	    function str(key, holder) {
	
	        // Produce a string from holder[key].
	
	        var i,
	            // The loop counter.
	        k,
	            // The member key.
	        v,
	            // The member value.
	        length,
	            mind = gap,
	            partial,
	            value = holder[key];
	
	        // If the value has a toJSON method, call it to obtain a replacement value.
	
	        if (value && (typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) === 'object' && typeof value.toJSON === 'function') {
	            value = value.toJSON(key);
	        }
	
	        // If we were called with a replacer function, then call the replacer to
	        // obtain a replacement value.
	
	        if (typeof rep === 'function') {
	            value = rep.call(holder, key, value);
	        }
	
	        // What happens next depends on the value's type.
	
	        switch (typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) {
	            case 'string':
	                return quote(value);
	
	            case 'number':
	
	                // JSON numbers must be finite. Encode non-finite numbers as null.
	
	                return isFinite(value) ? String(value) : 'null';
	
	            case 'boolean':
	            case 'null':
	
	                // If the value is a boolean or null, convert it to a string. Note:
	                // typeof null does not produce 'null'. The case is included here in
	                // the remote chance that this gets fixed someday.
	
	                return String(value);
	
	            // If the type is 'object', we might be dealing with an object or an array or
	            // null.
	
	            case 'object':
	
	                // Due to a specification blunder in ECMAScript, typeof null is 'object',
	                // so watch out for that case.
	
	                if (!value) {
	                    return 'null';
	                }
	
	                // Make an array to hold the partial results of stringifying this object value.
	
	                gap += indent;
	                partial = [];
	
	                // Is the value an array?
	
	                if (Object.prototype.toString.apply(value) === '[object Array]') {
	
	                    // The value is an array. Stringify every element. Use null as a placeholder
	                    // for non-JSON values.
	
	                    length = value.length;
	                    for (i = 0; i < length; i += 1) {
	                        partial[i] = str(i, value) || 'null';
	                    }
	
	                    // Join all of the elements together, separated with commas, and wrap them in
	                    // brackets.
	
	                    v = partial.length === 0 ? '[]' : gap ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' : '[' + partial.join(',') + ']';
	                    gap = mind;
	                    return v;
	                }
	
	                // If the replacer is an array, use it to select the members to be stringified.
	
	                if (rep && (typeof rep === 'undefined' ? 'undefined' : (0, _typeof3.default)(rep)) === 'object') {
	                    length = rep.length;
	                    for (i = 0; i < length; i += 1) {
	                        if (typeof rep[i] === 'string') {
	                            k = rep[i];
	                            v = str(k, value);
	                            if (v) {
	                                partial.push(quote(k) + (gap ? ': ' : ':') + v);
	                            }
	                        }
	                    }
	                } else {
	
	                    // Otherwise, iterate through all of the keys in the object.
	
	                    for (k in value) {
	                        if (Object.prototype.hasOwnProperty.call(value, k)) {
	                            v = str(k, value);
	                            if (v) {
	                                partial.push(quote(k) + (gap ? ': ' : ':') + v);
	                            }
	                        }
	                    }
	                }
	
	                // Join all of the member texts together, separated with commas,
	                // and wrap them in braces.
	
	                v = partial.length === 0 ? '{}' : gap ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' : '{' + partial.join(',') + '}';
	                gap = mind;
	                return v;
	        }
	    }
	
	    // If the JSON object does not yet have a stringify method, give it one.
	
	    if (typeof _stringify2.default !== 'function') {
	        JSON.stringify = function (value, replacer, space) {
	
	            // The stringify method takes a value and an optional replacer, and an optional
	            // space parameter, and returns a JSON text. The replacer can be a function
	            // that can replace values, or an array of strings that will select the keys.
	            // A default replacer method can be provided. Use of the space parameter can
	            // produce text that is more easily readable.
	
	            var i;
	            gap = '';
	            indent = '';
	
	            // If the space parameter is a number, make an indent string containing that
	            // many spaces.
	
	            if (typeof space === 'number') {
	                for (i = 0; i < space; i += 1) {
	                    indent += ' ';
	                }
	
	                // If the space parameter is a string, it will be used as the indent string.
	            } else if (typeof space === 'string') {
	                indent = space;
	            }
	
	            // If there is a replacer, it must be a function or an array.
	            // Otherwise, throw an error.
	
	            rep = replacer;
	            if (replacer && typeof replacer !== 'function' && ((typeof replacer === 'undefined' ? 'undefined' : (0, _typeof3.default)(replacer)) !== 'object' || typeof replacer.length !== 'number')) {
	                throw new Error('JSON.stringify');
	            }
	
	            // Make a fake root object containing our value under the key of ''.
	            // Return the result of stringifying the value.
	
	            return str('', { '': value });
	        };
	    }
	
	    // If the JSON object does not yet have a parse method, give it one.
	
	    if (typeof JSON.parse !== 'function') {
	        JSON.parse = function (text, reviver) {
	
	            // The parse method takes a text and an optional reviver function, and returns
	            // a JavaScript value if the text is a valid JSON text.
	
	            var j;
	
	            function walk(holder, key) {
	
	                // The walk method is used to recursively walk the resulting structure so
	                // that modifications can be made.
	
	                var k,
	                    v,
	                    value = holder[key];
	                if (value && (typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) === 'object') {
	                    for (k in value) {
	                        if (Object.prototype.hasOwnProperty.call(value, k)) {
	                            v = walk(value, k);
	                            if (v !== undefined) {
	                                value[k] = v;
	                            } else {
	                                delete value[k];
	                            }
	                        }
	                    }
	                }
	                return reviver.call(holder, key, value);
	            }
	
	            // Parsing happens in four stages. In the first stage, we replace certain
	            // Unicode characters with escape sequences. JavaScript handles many characters
	            // incorrectly, either silently deleting them, or treating them as line endings.
	
	            text = String(text);
	            cx.lastIndex = 0;
	            if (cx.test(text)) {
	                text = text.replace(cx, function (a) {
	                    return '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
	                });
	            }
	
	            // In the second stage, we run the text against regular expressions that look
	            // for non-JSON patterns. We are especially concerned with '()' and 'new'
	            // because they can cause invocation, and '=' because it can cause mutation.
	            // But just to be safe, we want to reject all unexpected forms.
	
	            // We split the second stage into 4 regexp operations in order to work around
	            // crippling inefficiencies in IE's and Safari's regexp engines. First we
	            // replace the JSON backslash pairs with '@' (a non-JSON character). Second, we
	            // replace all simple value tokens with ']' characters. Third, we delete all
	            // open brackets that follow a colon or comma or that begin the text. Finally,
	            // we look to see that the remaining characters are only whitespace or ']' or
	            // ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.
	
	            if (/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@').replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {
	
	                // In the third stage we use the eval function to compile the text into a
	                // JavaScript structure. The '{' operator is subject to a syntactic ambiguity
	                // in JavaScript: it can begin a block or an object literal. We wrap the text
	                // in parens to eliminate the ambiguity.
	
	                j = eval('(' + text + ')');
	
	                // In the optional fourth stage, we recursively walk the new structure, passing
	                // each name/value pair to a reviver function for possible transformation.
	
	                return typeof reviver === 'function' ? walk({ '': j }, '') : j;
	            }
	
	            // If the text is not JSON parseable, then a SyntaxError is thrown.
	
	            throw new SyntaxError('JSON.parse');
	        };
	    }
	})();

/***/ },
/* 416 */
/***/ function(module, exports) {

	// empty (null-loader)

/***/ },
/* 417 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {//! moment.js
	//! version : 2.12.0
	//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
	//! license : MIT
	//! momentjs.com
	
	;(function (global, factory) {
	     true ? module.exports = factory() :
	    typeof define === 'function' && define.amd ? define(factory) :
	    global.moment = factory()
	}(this, function () { 'use strict';
	
	    var hookCallback;
	
	    function utils_hooks__hooks () {
	        return hookCallback.apply(null, arguments);
	    }
	
	    // This is done to register the method called with moment()
	    // without creating circular dependencies.
	    function setHookCallback (callback) {
	        hookCallback = callback;
	    }
	
	    function isArray(input) {
	        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
	    }
	
	    function isDate(input) {
	        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
	    }
	
	    function map(arr, fn) {
	        var res = [], i;
	        for (i = 0; i < arr.length; ++i) {
	            res.push(fn(arr[i], i));
	        }
	        return res;
	    }
	
	    function hasOwnProp(a, b) {
	        return Object.prototype.hasOwnProperty.call(a, b);
	    }
	
	    function extend(a, b) {
	        for (var i in b) {
	            if (hasOwnProp(b, i)) {
	                a[i] = b[i];
	            }
	        }
	
	        if (hasOwnProp(b, 'toString')) {
	            a.toString = b.toString;
	        }
	
	        if (hasOwnProp(b, 'valueOf')) {
	            a.valueOf = b.valueOf;
	        }
	
	        return a;
	    }
	
	    function create_utc__createUTC (input, format, locale, strict) {
	        return createLocalOrUTC(input, format, locale, strict, true).utc();
	    }
	
	    function defaultParsingFlags() {
	        // We need to deep clone this object.
	        return {
	            empty           : false,
	            unusedTokens    : [],
	            unusedInput     : [],
	            overflow        : -2,
	            charsLeftOver   : 0,
	            nullInput       : false,
	            invalidMonth    : null,
	            invalidFormat   : false,
	            userInvalidated : false,
	            iso             : false
	        };
	    }
	
	    function getParsingFlags(m) {
	        if (m._pf == null) {
	            m._pf = defaultParsingFlags();
	        }
	        return m._pf;
	    }
	
	    function valid__isValid(m) {
	        if (m._isValid == null) {
	            var flags = getParsingFlags(m);
	            m._isValid = !isNaN(m._d.getTime()) &&
	                flags.overflow < 0 &&
	                !flags.empty &&
	                !flags.invalidMonth &&
	                !flags.invalidWeekday &&
	                !flags.nullInput &&
	                !flags.invalidFormat &&
	                !flags.userInvalidated;
	
	            if (m._strict) {
	                m._isValid = m._isValid &&
	                    flags.charsLeftOver === 0 &&
	                    flags.unusedTokens.length === 0 &&
	                    flags.bigHour === undefined;
	            }
	        }
	        return m._isValid;
	    }
	
	    function valid__createInvalid (flags) {
	        var m = create_utc__createUTC(NaN);
	        if (flags != null) {
	            extend(getParsingFlags(m), flags);
	        }
	        else {
	            getParsingFlags(m).userInvalidated = true;
	        }
	
	        return m;
	    }
	
	    function isUndefined(input) {
	        return input === void 0;
	    }
	
	    // Plugins that add properties should also add the key here (null value),
	    // so we can properly clone ourselves.
	    var momentProperties = utils_hooks__hooks.momentProperties = [];
	
	    function copyConfig(to, from) {
	        var i, prop, val;
	
	        if (!isUndefined(from._isAMomentObject)) {
	            to._isAMomentObject = from._isAMomentObject;
	        }
	        if (!isUndefined(from._i)) {
	            to._i = from._i;
	        }
	        if (!isUndefined(from._f)) {
	            to._f = from._f;
	        }
	        if (!isUndefined(from._l)) {
	            to._l = from._l;
	        }
	        if (!isUndefined(from._strict)) {
	            to._strict = from._strict;
	        }
	        if (!isUndefined(from._tzm)) {
	            to._tzm = from._tzm;
	        }
	        if (!isUndefined(from._isUTC)) {
	            to._isUTC = from._isUTC;
	        }
	        if (!isUndefined(from._offset)) {
	            to._offset = from._offset;
	        }
	        if (!isUndefined(from._pf)) {
	            to._pf = getParsingFlags(from);
	        }
	        if (!isUndefined(from._locale)) {
	            to._locale = from._locale;
	        }
	
	        if (momentProperties.length > 0) {
	            for (i in momentProperties) {
	                prop = momentProperties[i];
	                val = from[prop];
	                if (!isUndefined(val)) {
	                    to[prop] = val;
	                }
	            }
	        }
	
	        return to;
	    }
	
	    var updateInProgress = false;
	
	    // Moment prototype object
	    function Moment(config) {
	        copyConfig(this, config);
	        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
	        // Prevent infinite loop in case updateOffset creates new moment
	        // objects.
	        if (updateInProgress === false) {
	            updateInProgress = true;
	            utils_hooks__hooks.updateOffset(this);
	            updateInProgress = false;
	        }
	    }
	
	    function isMoment (obj) {
	        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
	    }
	
	    function absFloor (number) {
	        if (number < 0) {
	            return Math.ceil(number);
	        } else {
	            return Math.floor(number);
	        }
	    }
	
	    function toInt(argumentForCoercion) {
	        var coercedNumber = +argumentForCoercion,
	            value = 0;
	
	        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
	            value = absFloor(coercedNumber);
	        }
	
	        return value;
	    }
	
	    // compare two arrays, return the number of differences
	    function compareArrays(array1, array2, dontConvert) {
	        var len = Math.min(array1.length, array2.length),
	            lengthDiff = Math.abs(array1.length - array2.length),
	            diffs = 0,
	            i;
	        for (i = 0; i < len; i++) {
	            if ((dontConvert && array1[i] !== array2[i]) ||
	                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
	                diffs++;
	            }
	        }
	        return diffs + lengthDiff;
	    }
	
	    function warn(msg) {
	        if (utils_hooks__hooks.suppressDeprecationWarnings === false &&
	                (typeof console !==  'undefined') && console.warn) {
	            console.warn('Deprecation warning: ' + msg);
	        }
	    }
	
	    function deprecate(msg, fn) {
	        var firstTime = true;
	
	        return extend(function () {
	            if (firstTime) {
	                warn(msg + '\nArguments: ' + Array.prototype.slice.call(arguments).join(', ') + '\n' + (new Error()).stack);
	                firstTime = false;
	            }
	            return fn.apply(this, arguments);
	        }, fn);
	    }
	
	    var deprecations = {};
	
	    function deprecateSimple(name, msg) {
	        if (!deprecations[name]) {
	            warn(msg);
	            deprecations[name] = true;
	        }
	    }
	
	    utils_hooks__hooks.suppressDeprecationWarnings = false;
	
	    function isFunction(input) {
	        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
	    }
	
	    function isObject(input) {
	        return Object.prototype.toString.call(input) === '[object Object]';
	    }
	
	    function locale_set__set (config) {
	        var prop, i;
	        for (i in config) {
	            prop = config[i];
	            if (isFunction(prop)) {
	                this[i] = prop;
	            } else {
	                this['_' + i] = prop;
	            }
	        }
	        this._config = config;
	        // Lenient ordinal parsing accepts just a number in addition to
	        // number + (possibly) stuff coming from _ordinalParseLenient.
	        this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\d{1,2}/).source);
	    }
	
	    function mergeConfigs(parentConfig, childConfig) {
	        var res = extend({}, parentConfig), prop;
	        for (prop in childConfig) {
	            if (hasOwnProp(childConfig, prop)) {
	                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
	                    res[prop] = {};
	                    extend(res[prop], parentConfig[prop]);
	                    extend(res[prop], childConfig[prop]);
	                } else if (childConfig[prop] != null) {
	                    res[prop] = childConfig[prop];
	                } else {
	                    delete res[prop];
	                }
	            }
	        }
	        return res;
	    }
	
	    function Locale(config) {
	        if (config != null) {
	            this.set(config);
	        }
	    }
	
	    // internal storage for locale config files
	    var locales = {};
	    var globalLocale;
	
	    function normalizeLocale(key) {
	        return key ? key.toLowerCase().replace('_', '-') : key;
	    }
	
	    // pick the locale from the array
	    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
	    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
	    function chooseLocale(names) {
	        var i = 0, j, next, locale, split;
	
	        while (i < names.length) {
	            split = normalizeLocale(names[i]).split('-');
	            j = split.length;
	            next = normalizeLocale(names[i + 1]);
	            next = next ? next.split('-') : null;
	            while (j > 0) {
	                locale = loadLocale(split.slice(0, j).join('-'));
	                if (locale) {
	                    return locale;
	                }
	                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
	                    //the next array item is better than a shallower substring of this one
	                    break;
	                }
	                j--;
	            }
	            i++;
	        }
	        return null;
	    }
	
	    function loadLocale(name) {
	        var oldLocale = null;
	        // TODO: Find a better way to register and load all the locales in Node
	        if (!locales[name] && (typeof module !== 'undefined') &&
	                module && module.exports) {
	            try {
	                oldLocale = globalLocale._abbr;
	                __webpack_require__(419)("./" + name);
	                // because defineLocale currently also sets the global locale, we
	                // want to undo that for lazy loaded locales
	                locale_locales__getSetGlobalLocale(oldLocale);
	            } catch (e) { }
	        }
	        return locales[name];
	    }
	
	    // This function will load locale and then set the global locale.  If
	    // no arguments are passed in, it will simply return the current global
	    // locale key.
	    function locale_locales__getSetGlobalLocale (key, values) {
	        var data;
	        if (key) {
	            if (isUndefined(values)) {
	                data = locale_locales__getLocale(key);
	            }
	            else {
	                data = defineLocale(key, values);
	            }
	
	            if (data) {
	                // moment.duration._locale = moment._locale = data;
	                globalLocale = data;
	            }
	        }
	
	        return globalLocale._abbr;
	    }
	
	    function defineLocale (name, config) {
	        if (config !== null) {
	            config.abbr = name;
	            if (locales[name] != null) {
	                deprecateSimple('defineLocaleOverride',
	                        'use moment.updateLocale(localeName, config) to change ' +
	                        'an existing locale. moment.defineLocale(localeName, ' +
	                        'config) should only be used for creating a new locale');
	                config = mergeConfigs(locales[name]._config, config);
	            } else if (config.parentLocale != null) {
	                if (locales[config.parentLocale] != null) {
	                    config = mergeConfigs(locales[config.parentLocale]._config, config);
	                } else {
	                    // treat as if there is no base config
	                    deprecateSimple('parentLocaleUndefined',
	                            'specified parentLocale is not defined yet');
	                }
	            }
	            locales[name] = new Locale(config);
	
	            // backwards compat for now: also set the locale
	            locale_locales__getSetGlobalLocale(name);
	
	            return locales[name];
	        } else {
	            // useful for testing
	            delete locales[name];
	            return null;
	        }
	    }
	
	    function updateLocale(name, config) {
	        if (config != null) {
	            var locale;
	            if (locales[name] != null) {
	                config = mergeConfigs(locales[name]._config, config);
	            }
	            locale = new Locale(config);
	            locale.parentLocale = locales[name];
	            locales[name] = locale;
	
	            // backwards compat for now: also set the locale
	            locale_locales__getSetGlobalLocale(name);
	        } else {
	            // pass null for config to unupdate, useful for tests
	            if (locales[name] != null) {
	                if (locales[name].parentLocale != null) {
	                    locales[name] = locales[name].parentLocale;
	                } else if (locales[name] != null) {
	                    delete locales[name];
	                }
	            }
	        }
	        return locales[name];
	    }
	
	    // returns locale data
	    function locale_locales__getLocale (key) {
	        var locale;
	
	        if (key && key._locale && key._locale._abbr) {
	            key = key._locale._abbr;
	        }
	
	        if (!key) {
	            return globalLocale;
	        }
	
	        if (!isArray(key)) {
	            //short-circuit everything else
	            locale = loadLocale(key);
	            if (locale) {
	                return locale;
	            }
	            key = [key];
	        }
	
	        return chooseLocale(key);
	    }
	
	    function locale_locales__listLocales() {
	        return Object.keys(locales);
	    }
	
	    var aliases = {};
	
	    function addUnitAlias (unit, shorthand) {
	        var lowerCase = unit.toLowerCase();
	        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
	    }
	
	    function normalizeUnits(units) {
	        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
	    }
	
	    function normalizeObjectUnits(inputObject) {
	        var normalizedInput = {},
	            normalizedProp,
	            prop;
	
	        for (prop in inputObject) {
	            if (hasOwnProp(inputObject, prop)) {
	                normalizedProp = normalizeUnits(prop);
	                if (normalizedProp) {
	                    normalizedInput[normalizedProp] = inputObject[prop];
	                }
	            }
	        }
	
	        return normalizedInput;
	    }
	
	    function makeGetSet (unit, keepTime) {
	        return function (value) {
	            if (value != null) {
	                get_set__set(this, unit, value);
	                utils_hooks__hooks.updateOffset(this, keepTime);
	                return this;
	            } else {
	                return get_set__get(this, unit);
	            }
	        };
	    }
	
	    function get_set__get (mom, unit) {
	        return mom.isValid() ?
	            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
	    }
	
	    function get_set__set (mom, unit, value) {
	        if (mom.isValid()) {
	            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
	        }
	    }
	
	    // MOMENTS
	
	    function getSet (units, value) {
	        var unit;
	        if (typeof units === 'object') {
	            for (unit in units) {
	                this.set(unit, units[unit]);
	            }
	        } else {
	            units = normalizeUnits(units);
	            if (isFunction(this[units])) {
	                return this[units](value);
	            }
	        }
	        return this;
	    }
	
	    function zeroFill(number, targetLength, forceSign) {
	        var absNumber = '' + Math.abs(number),
	            zerosToFill = targetLength - absNumber.length,
	            sign = number >= 0;
	        return (sign ? (forceSign ? '+' : '') : '-') +
	            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
	    }
	
	    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
	
	    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
	
	    var formatFunctions = {};
	
	    var formatTokenFunctions = {};
	
	    // token:    'M'
	    // padded:   ['MM', 2]
	    // ordinal:  'Mo'
	    // callback: function () { this.month() + 1 }
	    function addFormatToken (token, padded, ordinal, callback) {
	        var func = callback;
	        if (typeof callback === 'string') {
	            func = function () {
	                return this[callback]();
	            };
	        }
	        if (token) {
	            formatTokenFunctions[token] = func;
	        }
	        if (padded) {
	            formatTokenFunctions[padded[0]] = function () {
	                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
	            };
	        }
	        if (ordinal) {
	            formatTokenFunctions[ordinal] = function () {
	                return this.localeData().ordinal(func.apply(this, arguments), token);
	            };
	        }
	    }
	
	    function removeFormattingTokens(input) {
	        if (input.match(/\[[\s\S]/)) {
	            return input.replace(/^\[|\]$/g, '');
	        }
	        return input.replace(/\\/g, '');
	    }
	
	    function makeFormatFunction(format) {
	        var array = format.match(formattingTokens), i, length;
	
	        for (i = 0, length = array.length; i < length; i++) {
	            if (formatTokenFunctions[array[i]]) {
	                array[i] = formatTokenFunctions[array[i]];
	            } else {
	                array[i] = removeFormattingTokens(array[i]);
	            }
	        }
	
	        return function (mom) {
	            var output = '';
	            for (i = 0; i < length; i++) {
	                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
	            }
	            return output;
	        };
	    }
	
	    // format date using native date object
	    function formatMoment(m, format) {
	        if (!m.isValid()) {
	            return m.localeData().invalidDate();
	        }
	
	        format = expandFormat(format, m.localeData());
	        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
	
	        return formatFunctions[format](m);
	    }
	
	    function expandFormat(format, locale) {
	        var i = 5;
	
	        function replaceLongDateFormatTokens(input) {
	            return locale.longDateFormat(input) || input;
	        }
	
	        localFormattingTokens.lastIndex = 0;
	        while (i >= 0 && localFormattingTokens.test(format)) {
	            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
	            localFormattingTokens.lastIndex = 0;
	            i -= 1;
	        }
	
	        return format;
	    }
	
	    var match1         = /\d/;            //       0 - 9
	    var match2         = /\d\d/;          //      00 - 99
	    var match3         = /\d{3}/;         //     000 - 999
	    var match4         = /\d{4}/;         //    0000 - 9999
	    var match6         = /[+-]?\d{6}/;    // -999999 - 999999
	    var match1to2      = /\d\d?/;         //       0 - 99
	    var match3to4      = /\d\d\d\d?/;     //     999 - 9999
	    var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
	    var match1to3      = /\d{1,3}/;       //       0 - 999
	    var match1to4      = /\d{1,4}/;       //       0 - 9999
	    var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999
	
	    var matchUnsigned  = /\d+/;           //       0 - inf
	    var matchSigned    = /[+-]?\d+/;      //    -inf - inf
	
	    var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
	    var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z
	
	    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123
	
	    // any word (or two) characters or numbers including two/three word month in arabic.
	    // includes scottish gaelic two word and hyphenated months
	    var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;
	
	
	    var regexes = {};
	
	    function addRegexToken (token, regex, strictRegex) {
	        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
	            return (isStrict && strictRegex) ? strictRegex : regex;
	        };
	    }
	
	    function getParseRegexForToken (token, config) {
	        if (!hasOwnProp(regexes, token)) {
	            return new RegExp(unescapeFormat(token));
	        }
	
	        return regexes[token](config._strict, config._locale);
	    }
	
	    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
	    function unescapeFormat(s) {
	        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
	            return p1 || p2 || p3 || p4;
	        }));
	    }
	
	    function regexEscape(s) {
	        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	    }
	
	    var tokens = {};
	
	    function addParseToken (token, callback) {
	        var i, func = callback;
	        if (typeof token === 'string') {
	            token = [token];
	        }
	        if (typeof callback === 'number') {
	            func = function (input, array) {
	                array[callback] = toInt(input);
	            };
	        }
	        for (i = 0; i < token.length; i++) {
	            tokens[token[i]] = func;
	        }
	    }
	
	    function addWeekParseToken (token, callback) {
	        addParseToken(token, function (input, array, config, token) {
	            config._w = config._w || {};
	            callback(input, config._w, config, token);
	        });
	    }
	
	    function addTimeToArrayFromToken(token, input, config) {
	        if (input != null && hasOwnProp(tokens, token)) {
	            tokens[token](input, config._a, config, token);
	        }
	    }
	
	    var YEAR = 0;
	    var MONTH = 1;
	    var DATE = 2;
	    var HOUR = 3;
	    var MINUTE = 4;
	    var SECOND = 5;
	    var MILLISECOND = 6;
	    var WEEK = 7;
	    var WEEKDAY = 8;
	
	    function daysInMonth(year, month) {
	        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
	    }
	
	    // FORMATTING
	
	    addFormatToken('M', ['MM', 2], 'Mo', function () {
	        return this.month() + 1;
	    });
	
	    addFormatToken('MMM', 0, 0, function (format) {
	        return this.localeData().monthsShort(this, format);
	    });
	
	    addFormatToken('MMMM', 0, 0, function (format) {
	        return this.localeData().months(this, format);
	    });
	
	    // ALIASES
	
	    addUnitAlias('month', 'M');
	
	    // PARSING
	
	    addRegexToken('M',    match1to2);
	    addRegexToken('MM',   match1to2, match2);
	    addRegexToken('MMM',  function (isStrict, locale) {
	        return locale.monthsShortRegex(isStrict);
	    });
	    addRegexToken('MMMM', function (isStrict, locale) {
	        return locale.monthsRegex(isStrict);
	    });
	
	    addParseToken(['M', 'MM'], function (input, array) {
	        array[MONTH] = toInt(input) - 1;
	    });
	
	    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
	        var month = config._locale.monthsParse(input, token, config._strict);
	        // if we didn't find a month name, mark the date as invalid.
	        if (month != null) {
	            array[MONTH] = month;
	        } else {
	            getParsingFlags(config).invalidMonth = input;
	        }
	    });
	
	    // LOCALES
	
	    var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/;
	    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
	    function localeMonths (m, format) {
	        return isArray(this._months) ? this._months[m.month()] :
	            this._months[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
	    }
	
	    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
	    function localeMonthsShort (m, format) {
	        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
	            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
	    }
	
	    function localeMonthsParse (monthName, format, strict) {
	        var i, mom, regex;
	
	        if (!this._monthsParse) {
	            this._monthsParse = [];
	            this._longMonthsParse = [];
	            this._shortMonthsParse = [];
	        }
	
	        for (i = 0; i < 12; i++) {
	            // make the regex if we don't have it already
	            mom = create_utc__createUTC([2000, i]);
	            if (strict && !this._longMonthsParse[i]) {
	                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
	                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
	            }
	            if (!strict && !this._monthsParse[i]) {
	                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
	                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
	            }
	            // test the regex
	            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
	                return i;
	            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
	                return i;
	            } else if (!strict && this._monthsParse[i].test(monthName)) {
	                return i;
	            }
	        }
	    }
	
	    // MOMENTS
	
	    function setMonth (mom, value) {
	        var dayOfMonth;
	
	        if (!mom.isValid()) {
	            // No op
	            return mom;
	        }
	
	        if (typeof value === 'string') {
	            if (/^\d+$/.test(value)) {
	                value = toInt(value);
	            } else {
	                value = mom.localeData().monthsParse(value);
	                // TODO: Another silent failure?
	                if (typeof value !== 'number') {
	                    return mom;
	                }
	            }
	        }
	
	        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
	        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
	        return mom;
	    }
	
	    function getSetMonth (value) {
	        if (value != null) {
	            setMonth(this, value);
	            utils_hooks__hooks.updateOffset(this, true);
	            return this;
	        } else {
	            return get_set__get(this, 'Month');
	        }
	    }
	
	    function getDaysInMonth () {
	        return daysInMonth(this.year(), this.month());
	    }
	
	    var defaultMonthsShortRegex = matchWord;
	    function monthsShortRegex (isStrict) {
	        if (this._monthsParseExact) {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                computeMonthsParse.call(this);
	            }
	            if (isStrict) {
	                return this._monthsShortStrictRegex;
	            } else {
	                return this._monthsShortRegex;
	            }
	        } else {
	            return this._monthsShortStrictRegex && isStrict ?
	                this._monthsShortStrictRegex : this._monthsShortRegex;
	        }
	    }
	
	    var defaultMonthsRegex = matchWord;
	    function monthsRegex (isStrict) {
	        if (this._monthsParseExact) {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                computeMonthsParse.call(this);
	            }
	            if (isStrict) {
	                return this._monthsStrictRegex;
	            } else {
	                return this._monthsRegex;
	            }
	        } else {
	            return this._monthsStrictRegex && isStrict ?
	                this._monthsStrictRegex : this._monthsRegex;
	        }
	    }
	
	    function computeMonthsParse () {
	        function cmpLenRev(a, b) {
	            return b.length - a.length;
	        }
	
	        var shortPieces = [], longPieces = [], mixedPieces = [],
	            i, mom;
	        for (i = 0; i < 12; i++) {
	            // make the regex if we don't have it already
	            mom = create_utc__createUTC([2000, i]);
	            shortPieces.push(this.monthsShort(mom, ''));
	            longPieces.push(this.months(mom, ''));
	            mixedPieces.push(this.months(mom, ''));
	            mixedPieces.push(this.monthsShort(mom, ''));
	        }
	        // Sorting makes sure if one month (or abbr) is a prefix of another it
	        // will match the longer piece.
	        shortPieces.sort(cmpLenRev);
	        longPieces.sort(cmpLenRev);
	        mixedPieces.sort(cmpLenRev);
	        for (i = 0; i < 12; i++) {
	            shortPieces[i] = regexEscape(shortPieces[i]);
	            longPieces[i] = regexEscape(longPieces[i]);
	            mixedPieces[i] = regexEscape(mixedPieces[i]);
	        }
	
	        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	        this._monthsShortRegex = this._monthsRegex;
	        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')$', 'i');
	        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')$', 'i');
	    }
	
	    function checkOverflow (m) {
	        var overflow;
	        var a = m._a;
	
	        if (a && getParsingFlags(m).overflow === -2) {
	            overflow =
	                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
	                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
	                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
	                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
	                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
	                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
	                -1;
	
	            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
	                overflow = DATE;
	            }
	            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
	                overflow = WEEK;
	            }
	            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
	                overflow = WEEKDAY;
	            }
	
	            getParsingFlags(m).overflow = overflow;
	        }
	
	        return m;
	    }
	
	    // iso 8601 regex
	    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
	    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
	    var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
	
	    var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;
	
	    var isoDates = [
	        ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
	        ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
	        ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
	        ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
	        ['YYYY-DDD', /\d{4}-\d{3}/],
	        ['YYYY-MM', /\d{4}-\d\d/, false],
	        ['YYYYYYMMDD', /[+-]\d{10}/],
	        ['YYYYMMDD', /\d{8}/],
	        // YYYYMM is NOT allowed by the standard
	        ['GGGG[W]WWE', /\d{4}W\d{3}/],
	        ['GGGG[W]WW', /\d{4}W\d{2}/, false],
	        ['YYYYDDD', /\d{7}/]
	    ];
	
	    // iso time formats and regexes
	    var isoTimes = [
	        ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
	        ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
	        ['HH:mm:ss', /\d\d:\d\d:\d\d/],
	        ['HH:mm', /\d\d:\d\d/],
	        ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
	        ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
	        ['HHmmss', /\d\d\d\d\d\d/],
	        ['HHmm', /\d\d\d\d/],
	        ['HH', /\d\d/]
	    ];
	
	    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;
	
	    // date from iso format
	    function configFromISO(config) {
	        var i, l,
	            string = config._i,
	            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
	            allowTime, dateFormat, timeFormat, tzFormat;
	
	        if (match) {
	            getParsingFlags(config).iso = true;
	
	            for (i = 0, l = isoDates.length; i < l; i++) {
	                if (isoDates[i][1].exec(match[1])) {
	                    dateFormat = isoDates[i][0];
	                    allowTime = isoDates[i][2] !== false;
	                    break;
	                }
	            }
	            if (dateFormat == null) {
	                config._isValid = false;
	                return;
	            }
	            if (match[3]) {
	                for (i = 0, l = isoTimes.length; i < l; i++) {
	                    if (isoTimes[i][1].exec(match[3])) {
	                        // match[2] should be 'T' or space
	                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
	                        break;
	                    }
	                }
	                if (timeFormat == null) {
	                    config._isValid = false;
	                    return;
	                }
	            }
	            if (!allowTime && timeFormat != null) {
	                config._isValid = false;
	                return;
	            }
	            if (match[4]) {
	                if (tzRegex.exec(match[4])) {
	                    tzFormat = 'Z';
	                } else {
	                    config._isValid = false;
	                    return;
	                }
	            }
	            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
	            configFromStringAndFormat(config);
	        } else {
	            config._isValid = false;
	        }
	    }
	
	    // date from iso format or fallback
	    function configFromString(config) {
	        var matched = aspNetJsonRegex.exec(config._i);
	
	        if (matched !== null) {
	            config._d = new Date(+matched[1]);
	            return;
	        }
	
	        configFromISO(config);
	        if (config._isValid === false) {
	            delete config._isValid;
	            utils_hooks__hooks.createFromInputFallback(config);
	        }
	    }
	
	    utils_hooks__hooks.createFromInputFallback = deprecate(
	        'moment construction falls back to js Date. This is ' +
	        'discouraged and will be removed in upcoming major ' +
	        'release. Please refer to ' +
	        'https://github.com/moment/moment/issues/1407 for more info.',
	        function (config) {
	            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
	        }
	    );
	
	    function createDate (y, m, d, h, M, s, ms) {
	        //can't just apply() to create a date:
	        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
	        var date = new Date(y, m, d, h, M, s, ms);
	
	        //the date constructor remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
	            date.setFullYear(y);
	        }
	        return date;
	    }
	
	    function createUTCDate (y) {
	        var date = new Date(Date.UTC.apply(null, arguments));
	
	        //the Date.UTC function remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
	            date.setUTCFullYear(y);
	        }
	        return date;
	    }
	
	    // FORMATTING
	
	    addFormatToken('Y', 0, 0, function () {
	        var y = this.year();
	        return y <= 9999 ? '' + y : '+' + y;
	    });
	
	    addFormatToken(0, ['YY', 2], 0, function () {
	        return this.year() % 100;
	    });
	
	    addFormatToken(0, ['YYYY',   4],       0, 'year');
	    addFormatToken(0, ['YYYYY',  5],       0, 'year');
	    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');
	
	    // ALIASES
	
	    addUnitAlias('year', 'y');
	
	    // PARSING
	
	    addRegexToken('Y',      matchSigned);
	    addRegexToken('YY',     match1to2, match2);
	    addRegexToken('YYYY',   match1to4, match4);
	    addRegexToken('YYYYY',  match1to6, match6);
	    addRegexToken('YYYYYY', match1to6, match6);
	
	    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
	    addParseToken('YYYY', function (input, array) {
	        array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input);
	    });
	    addParseToken('YY', function (input, array) {
	        array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);
	    });
	    addParseToken('Y', function (input, array) {
	        array[YEAR] = parseInt(input, 10);
	    });
	
	    // HELPERS
	
	    function daysInYear(year) {
	        return isLeapYear(year) ? 366 : 365;
	    }
	
	    function isLeapYear(year) {
	        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
	    }
	
	    // HOOKS
	
	    utils_hooks__hooks.parseTwoDigitYear = function (input) {
	        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
	    };
	
	    // MOMENTS
	
	    var getSetYear = makeGetSet('FullYear', false);
	
	    function getIsLeapYear () {
	        return isLeapYear(this.year());
	    }
	
	    // start-of-first-week - start-of-year
	    function firstWeekOffset(year, dow, doy) {
	        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
	            fwd = 7 + dow - doy,
	            // first-week day local weekday -- which local weekday is fwd
	            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
	
	        return -fwdlw + fwd - 1;
	    }
	
	    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
	    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
	        var localWeekday = (7 + weekday - dow) % 7,
	            weekOffset = firstWeekOffset(year, dow, doy),
	            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
	            resYear, resDayOfYear;
	
	        if (dayOfYear <= 0) {
	            resYear = year - 1;
	            resDayOfYear = daysInYear(resYear) + dayOfYear;
	        } else if (dayOfYear > daysInYear(year)) {
	            resYear = year + 1;
	            resDayOfYear = dayOfYear - daysInYear(year);
	        } else {
	            resYear = year;
	            resDayOfYear = dayOfYear;
	        }
	
	        return {
	            year: resYear,
	            dayOfYear: resDayOfYear
	        };
	    }
	
	    function weekOfYear(mom, dow, doy) {
	        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
	            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
	            resWeek, resYear;
	
	        if (week < 1) {
	            resYear = mom.year() - 1;
	            resWeek = week + weeksInYear(resYear, dow, doy);
	        } else if (week > weeksInYear(mom.year(), dow, doy)) {
	            resWeek = week - weeksInYear(mom.year(), dow, doy);
	            resYear = mom.year() + 1;
	        } else {
	            resYear = mom.year();
	            resWeek = week;
	        }
	
	        return {
	            week: resWeek,
	            year: resYear
	        };
	    }
	
	    function weeksInYear(year, dow, doy) {
	        var weekOffset = firstWeekOffset(year, dow, doy),
	            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
	        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
	    }
	
	    // Pick the first defined of two or three arguments.
	    function defaults(a, b, c) {
	        if (a != null) {
	            return a;
	        }
	        if (b != null) {
	            return b;
	        }
	        return c;
	    }
	
	    function currentDateArray(config) {
	        // hooks is actually the exported moment object
	        var nowValue = new Date(utils_hooks__hooks.now());
	        if (config._useUTC) {
	            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
	        }
	        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
	    }
	
	    // convert an array to a date.
	    // the array should mirror the parameters below
	    // note: all values past the year are optional and will default to the lowest possible value.
	    // [year, month, day , hour, minute, second, millisecond]
	    function configFromArray (config) {
	        var i, date, input = [], currentDate, yearToUse;
	
	        if (config._d) {
	            return;
	        }
	
	        currentDate = currentDateArray(config);
	
	        //compute day of the year from weeks and weekdays
	        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
	            dayOfYearFromWeekInfo(config);
	        }
	
	        //if the day of the year is set, figure out what it is
	        if (config._dayOfYear) {
	            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
	
	            if (config._dayOfYear > daysInYear(yearToUse)) {
	                getParsingFlags(config)._overflowDayOfYear = true;
	            }
	
	            date = createUTCDate(yearToUse, 0, config._dayOfYear);
	            config._a[MONTH] = date.getUTCMonth();
	            config._a[DATE] = date.getUTCDate();
	        }
	
	        // Default to current date.
	        // * if no year, month, day of month are given, default to today
	        // * if day of month is given, default month and year
	        // * if month is given, default only year
	        // * if year is given, don't default anything
	        for (i = 0; i < 3 && config._a[i] == null; ++i) {
	            config._a[i] = input[i] = currentDate[i];
	        }
	
	        // Zero out whatever was not defaulted, including time
	        for (; i < 7; i++) {
	            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
	        }
	
	        // Check for 24:00:00.000
	        if (config._a[HOUR] === 24 &&
	                config._a[MINUTE] === 0 &&
	                config._a[SECOND] === 0 &&
	                config._a[MILLISECOND] === 0) {
	            config._nextDay = true;
	            config._a[HOUR] = 0;
	        }
	
	        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
	        // Apply timezone offset from input. The actual utcOffset can be changed
	        // with parseZone.
	        if (config._tzm != null) {
	            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
	        }
	
	        if (config._nextDay) {
	            config._a[HOUR] = 24;
	        }
	    }
	
	    function dayOfYearFromWeekInfo(config) {
	        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;
	
	        w = config._w;
	        if (w.GG != null || w.W != null || w.E != null) {
	            dow = 1;
	            doy = 4;
	
	            // TODO: We need to take the current isoWeekYear, but that depends on
	            // how we interpret now (local, utc, fixed offset). So create
	            // a now version of current config (take local/utc/offset flags, and
	            // create now).
	            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);
	            week = defaults(w.W, 1);
	            weekday = defaults(w.E, 1);
	            if (weekday < 1 || weekday > 7) {
	                weekdayOverflow = true;
	            }
	        } else {
	            dow = config._locale._week.dow;
	            doy = config._locale._week.doy;
	
	            weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);
	            week = defaults(w.w, 1);
	
	            if (w.d != null) {
	                // weekday -- low day numbers are considered next week
	                weekday = w.d;
	                if (weekday < 0 || weekday > 6) {
	                    weekdayOverflow = true;
	                }
	            } else if (w.e != null) {
	                // local weekday -- counting starts from begining of week
	                weekday = w.e + dow;
	                if (w.e < 0 || w.e > 6) {
	                    weekdayOverflow = true;
	                }
	            } else {
	                // default to begining of week
	                weekday = dow;
	            }
	        }
	        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
	            getParsingFlags(config)._overflowWeeks = true;
	        } else if (weekdayOverflow != null) {
	            getParsingFlags(config)._overflowWeekday = true;
	        } else {
	            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
	            config._a[YEAR] = temp.year;
	            config._dayOfYear = temp.dayOfYear;
	        }
	    }
	
	    // constant that refers to the ISO standard
	    utils_hooks__hooks.ISO_8601 = function () {};
	
	    // date from string and format string
	    function configFromStringAndFormat(config) {
	        // TODO: Move this to another part of the creation flow to prevent circular deps
	        if (config._f === utils_hooks__hooks.ISO_8601) {
	            configFromISO(config);
	            return;
	        }
	
	        config._a = [];
	        getParsingFlags(config).empty = true;
	
	        // This array is used to make a Date, either with `new Date` or `Date.UTC`
	        var string = '' + config._i,
	            i, parsedInput, tokens, token, skipped,
	            stringLength = string.length,
	            totalParsedInputLength = 0;
	
	        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
	
	        for (i = 0; i < tokens.length; i++) {
	            token = tokens[i];
	            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
	            // console.log('token', token, 'parsedInput', parsedInput,
	            //         'regex', getParseRegexForToken(token, config));
	            if (parsedInput) {
	                skipped = string.substr(0, string.indexOf(parsedInput));
	                if (skipped.length > 0) {
	                    getParsingFlags(config).unusedInput.push(skipped);
	                }
	                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
	                totalParsedInputLength += parsedInput.length;
	            }
	            // don't parse if it's not a known token
	            if (formatTokenFunctions[token]) {
	                if (parsedInput) {
	                    getParsingFlags(config).empty = false;
	                }
	                else {
	                    getParsingFlags(config).unusedTokens.push(token);
	                }
	                addTimeToArrayFromToken(token, parsedInput, config);
	            }
	            else if (config._strict && !parsedInput) {
	                getParsingFlags(config).unusedTokens.push(token);
	            }
	        }
	
	        // add remaining unparsed input length to the string
	        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
	        if (string.length > 0) {
	            getParsingFlags(config).unusedInput.push(string);
	        }
	
	        // clear _12h flag if hour is <= 12
	        if (getParsingFlags(config).bigHour === true &&
	                config._a[HOUR] <= 12 &&
	                config._a[HOUR] > 0) {
	            getParsingFlags(config).bigHour = undefined;
	        }
	        // handle meridiem
	        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
	
	        configFromArray(config);
	        checkOverflow(config);
	    }
	
	
	    function meridiemFixWrap (locale, hour, meridiem) {
	        var isPm;
	
	        if (meridiem == null) {
	            // nothing to do
	            return hour;
	        }
	        if (locale.meridiemHour != null) {
	            return locale.meridiemHour(hour, meridiem);
	        } else if (locale.isPM != null) {
	            // Fallback
	            isPm = locale.isPM(meridiem);
	            if (isPm && hour < 12) {
	                hour += 12;
	            }
	            if (!isPm && hour === 12) {
	                hour = 0;
	            }
	            return hour;
	        } else {
	            // this is not supposed to happen
	            return hour;
	        }
	    }
	
	    // date from string and array of format strings
	    function configFromStringAndArray(config) {
	        var tempConfig,
	            bestMoment,
	
	            scoreToBeat,
	            i,
	            currentScore;
	
	        if (config._f.length === 0) {
	            getParsingFlags(config).invalidFormat = true;
	            config._d = new Date(NaN);
	            return;
	        }
	
	        for (i = 0; i < config._f.length; i++) {
	            currentScore = 0;
	            tempConfig = copyConfig({}, config);
	            if (config._useUTC != null) {
	                tempConfig._useUTC = config._useUTC;
	            }
	            tempConfig._f = config._f[i];
	            configFromStringAndFormat(tempConfig);
	
	            if (!valid__isValid(tempConfig)) {
	                continue;
	            }
	
	            // if there is any input that was not parsed add a penalty for that format
	            currentScore += getParsingFlags(tempConfig).charsLeftOver;
	
	            //or tokens
	            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
	
	            getParsingFlags(tempConfig).score = currentScore;
	
	            if (scoreToBeat == null || currentScore < scoreToBeat) {
	                scoreToBeat = currentScore;
	                bestMoment = tempConfig;
	            }
	        }
	
	        extend(config, bestMoment || tempConfig);
	    }
	
	    function configFromObject(config) {
	        if (config._d) {
	            return;
	        }
	
	        var i = normalizeObjectUnits(config._i);
	        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
	            return obj && parseInt(obj, 10);
	        });
	
	        configFromArray(config);
	    }
	
	    function createFromConfig (config) {
	        var res = new Moment(checkOverflow(prepareConfig(config)));
	        if (res._nextDay) {
	            // Adding is smart enough around DST
	            res.add(1, 'd');
	            res._nextDay = undefined;
	        }
	
	        return res;
	    }
	
	    function prepareConfig (config) {
	        var input = config._i,
	            format = config._f;
	
	        config._locale = config._locale || locale_locales__getLocale(config._l);
	
	        if (input === null || (format === undefined && input === '')) {
	            return valid__createInvalid({nullInput: true});
	        }
	
	        if (typeof input === 'string') {
	            config._i = input = config._locale.preparse(input);
	        }
	
	        if (isMoment(input)) {
	            return new Moment(checkOverflow(input));
	        } else if (isArray(format)) {
	            configFromStringAndArray(config);
	        } else if (format) {
	            configFromStringAndFormat(config);
	        } else if (isDate(input)) {
	            config._d = input;
	        } else {
	            configFromInput(config);
	        }
	
	        if (!valid__isValid(config)) {
	            config._d = null;
	        }
	
	        return config;
	    }
	
	    function configFromInput(config) {
	        var input = config._i;
	        if (input === undefined) {
	            config._d = new Date(utils_hooks__hooks.now());
	        } else if (isDate(input)) {
	            config._d = new Date(+input);
	        } else if (typeof input === 'string') {
	            configFromString(config);
	        } else if (isArray(input)) {
	            config._a = map(input.slice(0), function (obj) {
	                return parseInt(obj, 10);
	            });
	            configFromArray(config);
	        } else if (typeof(input) === 'object') {
	            configFromObject(config);
	        } else if (typeof(input) === 'number') {
	            // from milliseconds
	            config._d = new Date(input);
	        } else {
	            utils_hooks__hooks.createFromInputFallback(config);
	        }
	    }
	
	    function createLocalOrUTC (input, format, locale, strict, isUTC) {
	        var c = {};
	
	        if (typeof(locale) === 'boolean') {
	            strict = locale;
	            locale = undefined;
	        }
	        // object construction must be done this way.
	        // https://github.com/moment/moment/issues/1423
	        c._isAMomentObject = true;
	        c._useUTC = c._isUTC = isUTC;
	        c._l = locale;
	        c._i = input;
	        c._f = format;
	        c._strict = strict;
	
	        return createFromConfig(c);
	    }
	
	    function local__createLocal (input, format, locale, strict) {
	        return createLocalOrUTC(input, format, locale, strict, false);
	    }
	
	    var prototypeMin = deprecate(
	         'moment().min is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548',
	         function () {
	             var other = local__createLocal.apply(null, arguments);
	             if (this.isValid() && other.isValid()) {
	                 return other < this ? this : other;
	             } else {
	                 return valid__createInvalid();
	             }
	         }
	     );
	
	    var prototypeMax = deprecate(
	        'moment().max is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548',
	        function () {
	            var other = local__createLocal.apply(null, arguments);
	            if (this.isValid() && other.isValid()) {
	                return other > this ? this : other;
	            } else {
	                return valid__createInvalid();
	            }
	        }
	    );
	
	    // Pick a moment m from moments so that m[fn](other) is true for all
	    // other. This relies on the function fn to be transitive.
	    //
	    // moments should either be an array of moment objects or an array, whose
	    // first element is an array of moment objects.
	    function pickBy(fn, moments) {
	        var res, i;
	        if (moments.length === 1 && isArray(moments[0])) {
	            moments = moments[0];
	        }
	        if (!moments.length) {
	            return local__createLocal();
	        }
	        res = moments[0];
	        for (i = 1; i < moments.length; ++i) {
	            if (!moments[i].isValid() || moments[i][fn](res)) {
	                res = moments[i];
	            }
	        }
	        return res;
	    }
	
	    // TODO: Use [].sort instead?
	    function min () {
	        var args = [].slice.call(arguments, 0);
	
	        return pickBy('isBefore', args);
	    }
	
	    function max () {
	        var args = [].slice.call(arguments, 0);
	
	        return pickBy('isAfter', args);
	    }
	
	    var now = function () {
	        return Date.now ? Date.now() : +(new Date());
	    };
	
	    function Duration (duration) {
	        var normalizedInput = normalizeObjectUnits(duration),
	            years = normalizedInput.year || 0,
	            quarters = normalizedInput.quarter || 0,
	            months = normalizedInput.month || 0,
	            weeks = normalizedInput.week || 0,
	            days = normalizedInput.day || 0,
	            hours = normalizedInput.hour || 0,
	            minutes = normalizedInput.minute || 0,
	            seconds = normalizedInput.second || 0,
	            milliseconds = normalizedInput.millisecond || 0;
	
	        // representation for dateAddRemove
	        this._milliseconds = +milliseconds +
	            seconds * 1e3 + // 1000
	            minutes * 6e4 + // 1000 * 60
	            hours * 36e5; // 1000 * 60 * 60
	        // Because of dateAddRemove treats 24 hours as different from a
	        // day when working around DST, we need to store them separately
	        this._days = +days +
	            weeks * 7;
	        // It is impossible translate months into days without knowing
	        // which months you are are talking about, so we have to store
	        // it separately.
	        this._months = +months +
	            quarters * 3 +
	            years * 12;
	
	        this._data = {};
	
	        this._locale = locale_locales__getLocale();
	
	        this._bubble();
	    }
	
	    function isDuration (obj) {
	        return obj instanceof Duration;
	    }
	
	    // FORMATTING
	
	    function offset (token, separator) {
	        addFormatToken(token, 0, 0, function () {
	            var offset = this.utcOffset();
	            var sign = '+';
	            if (offset < 0) {
	                offset = -offset;
	                sign = '-';
	            }
	            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
	        });
	    }
	
	    offset('Z', ':');
	    offset('ZZ', '');
	
	    // PARSING
	
	    addRegexToken('Z',  matchShortOffset);
	    addRegexToken('ZZ', matchShortOffset);
	    addParseToken(['Z', 'ZZ'], function (input, array, config) {
	        config._useUTC = true;
	        config._tzm = offsetFromString(matchShortOffset, input);
	    });
	
	    // HELPERS
	
	    // timezone chunker
	    // '+10:00' > ['10',  '00']
	    // '-1530'  > ['-15', '30']
	    var chunkOffset = /([\+\-]|\d\d)/gi;
	
	    function offsetFromString(matcher, string) {
	        var matches = ((string || '').match(matcher) || []);
	        var chunk   = matches[matches.length - 1] || [];
	        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
	        var minutes = +(parts[1] * 60) + toInt(parts[2]);
	
	        return parts[0] === '+' ? minutes : -minutes;
	    }
	
	    // Return a moment from input, that is local/utc/zone equivalent to model.
	    function cloneWithOffset(input, model) {
	        var res, diff;
	        if (model._isUTC) {
	            res = model.clone();
	            diff = (isMoment(input) || isDate(input) ? +input : +local__createLocal(input)) - (+res);
	            // Use low-level api, because this fn is low-level api.
	            res._d.setTime(+res._d + diff);
	            utils_hooks__hooks.updateOffset(res, false);
	            return res;
	        } else {
	            return local__createLocal(input).local();
	        }
	    }
	
	    function getDateOffset (m) {
	        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
	        // https://github.com/moment/moment/pull/1871
	        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
	    }
	
	    // HOOKS
	
	    // This function will be called whenever a moment is mutated.
	    // It is intended to keep the offset in sync with the timezone.
	    utils_hooks__hooks.updateOffset = function () {};
	
	    // MOMENTS
	
	    // keepLocalTime = true means only change the timezone, without
	    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
	    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
	    // +0200, so we adjust the time as needed, to be valid.
	    //
	    // Keeping the time actually adds/subtracts (one hour)
	    // from the actual represented time. That is why we call updateOffset
	    // a second time. In case it wants us to change the offset again
	    // _changeInProgress == true case, then we have to adjust, because
	    // there is no such time in the given timezone.
	    function getSetOffset (input, keepLocalTime) {
	        var offset = this._offset || 0,
	            localAdjust;
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        if (input != null) {
	            if (typeof input === 'string') {
	                input = offsetFromString(matchShortOffset, input);
	            } else if (Math.abs(input) < 16) {
	                input = input * 60;
	            }
	            if (!this._isUTC && keepLocalTime) {
	                localAdjust = getDateOffset(this);
	            }
	            this._offset = input;
	            this._isUTC = true;
	            if (localAdjust != null) {
	                this.add(localAdjust, 'm');
	            }
	            if (offset !== input) {
	                if (!keepLocalTime || this._changeInProgress) {
	                    add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false);
	                } else if (!this._changeInProgress) {
	                    this._changeInProgress = true;
	                    utils_hooks__hooks.updateOffset(this, true);
	                    this._changeInProgress = null;
	                }
	            }
	            return this;
	        } else {
	            return this._isUTC ? offset : getDateOffset(this);
	        }
	    }
	
	    function getSetZone (input, keepLocalTime) {
	        if (input != null) {
	            if (typeof input !== 'string') {
	                input = -input;
	            }
	
	            this.utcOffset(input, keepLocalTime);
	
	            return this;
	        } else {
	            return -this.utcOffset();
	        }
	    }
	
	    function setOffsetToUTC (keepLocalTime) {
	        return this.utcOffset(0, keepLocalTime);
	    }
	
	    function setOffsetToLocal (keepLocalTime) {
	        if (this._isUTC) {
	            this.utcOffset(0, keepLocalTime);
	            this._isUTC = false;
	
	            if (keepLocalTime) {
	                this.subtract(getDateOffset(this), 'm');
	            }
	        }
	        return this;
	    }
	
	    function setOffsetToParsedOffset () {
	        if (this._tzm) {
	            this.utcOffset(this._tzm);
	        } else if (typeof this._i === 'string') {
	            this.utcOffset(offsetFromString(matchOffset, this._i));
	        }
	        return this;
	    }
	
	    function hasAlignedHourOffset (input) {
	        if (!this.isValid()) {
	            return false;
	        }
	        input = input ? local__createLocal(input).utcOffset() : 0;
	
	        return (this.utcOffset() - input) % 60 === 0;
	    }
	
	    function isDaylightSavingTime () {
	        return (
	            this.utcOffset() > this.clone().month(0).utcOffset() ||
	            this.utcOffset() > this.clone().month(5).utcOffset()
	        );
	    }
	
	    function isDaylightSavingTimeShifted () {
	        if (!isUndefined(this._isDSTShifted)) {
	            return this._isDSTShifted;
	        }
	
	        var c = {};
	
	        copyConfig(c, this);
	        c = prepareConfig(c);
	
	        if (c._a) {
	            var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);
	            this._isDSTShifted = this.isValid() &&
	                compareArrays(c._a, other.toArray()) > 0;
	        } else {
	            this._isDSTShifted = false;
	        }
	
	        return this._isDSTShifted;
	    }
	
	    function isLocal () {
	        return this.isValid() ? !this._isUTC : false;
	    }
	
	    function isUtcOffset () {
	        return this.isValid() ? this._isUTC : false;
	    }
	
	    function isUtc () {
	        return this.isValid() ? this._isUTC && this._offset === 0 : false;
	    }
	
	    // ASP.NET json date format regex
	    var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?\d*)?$/;
	
	    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
	    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
	    // and further modified to allow for strings containing both week and day
	    var isoRegex = /^(-)?P(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)W)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?$/;
	
	    function create__createDuration (input, key) {
	        var duration = input,
	            // matching against regexp is expensive, do it on demand
	            match = null,
	            sign,
	            ret,
	            diffRes;
	
	        if (isDuration(input)) {
	            duration = {
	                ms : input._milliseconds,
	                d  : input._days,
	                M  : input._months
	            };
	        } else if (typeof input === 'number') {
	            duration = {};
	            if (key) {
	                duration[key] = input;
	            } else {
	                duration.milliseconds = input;
	            }
	        } else if (!!(match = aspNetRegex.exec(input))) {
	            sign = (match[1] === '-') ? -1 : 1;
	            duration = {
	                y  : 0,
	                d  : toInt(match[DATE])        * sign,
	                h  : toInt(match[HOUR])        * sign,
	                m  : toInt(match[MINUTE])      * sign,
	                s  : toInt(match[SECOND])      * sign,
	                ms : toInt(match[MILLISECOND]) * sign
	            };
	        } else if (!!(match = isoRegex.exec(input))) {
	            sign = (match[1] === '-') ? -1 : 1;
	            duration = {
	                y : parseIso(match[2], sign),
	                M : parseIso(match[3], sign),
	                w : parseIso(match[4], sign),
	                d : parseIso(match[5], sign),
	                h : parseIso(match[6], sign),
	                m : parseIso(match[7], sign),
	                s : parseIso(match[8], sign)
	            };
	        } else if (duration == null) {// checks for null or undefined
	            duration = {};
	        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
	            diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));
	
	            duration = {};
	            duration.ms = diffRes.milliseconds;
	            duration.M = diffRes.months;
	        }
	
	        ret = new Duration(duration);
	
	        if (isDuration(input) && hasOwnProp(input, '_locale')) {
	            ret._locale = input._locale;
	        }
	
	        return ret;
	    }
	
	    create__createDuration.fn = Duration.prototype;
	
	    function parseIso (inp, sign) {
	        // We'd normally use ~~inp for this, but unfortunately it also
	        // converts floats to ints.
	        // inp may be undefined, so careful calling replace on it.
	        var res = inp && parseFloat(inp.replace(',', '.'));
	        // apply sign while we're at it
	        return (isNaN(res) ? 0 : res) * sign;
	    }
	
	    function positiveMomentsDifference(base, other) {
	        var res = {milliseconds: 0, months: 0};
	
	        res.months = other.month() - base.month() +
	            (other.year() - base.year()) * 12;
	        if (base.clone().add(res.months, 'M').isAfter(other)) {
	            --res.months;
	        }
	
	        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));
	
	        return res;
	    }
	
	    function momentsDifference(base, other) {
	        var res;
	        if (!(base.isValid() && other.isValid())) {
	            return {milliseconds: 0, months: 0};
	        }
	
	        other = cloneWithOffset(other, base);
	        if (base.isBefore(other)) {
	            res = positiveMomentsDifference(base, other);
	        } else {
	            res = positiveMomentsDifference(other, base);
	            res.milliseconds = -res.milliseconds;
	            res.months = -res.months;
	        }
	
	        return res;
	    }
	
	    function absRound (number) {
	        if (number < 0) {
	            return Math.round(-1 * number) * -1;
	        } else {
	            return Math.round(number);
	        }
	    }
	
	    // TODO: remove 'name' arg after deprecation is removed
	    function createAdder(direction, name) {
	        return function (val, period) {
	            var dur, tmp;
	            //invert the arguments, but complain about it
	            if (period !== null && !isNaN(+period)) {
	                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period).');
	                tmp = val; val = period; period = tmp;
	            }
	
	            val = typeof val === 'string' ? +val : val;
	            dur = create__createDuration(val, period);
	            add_subtract__addSubtract(this, dur, direction);
	            return this;
	        };
	    }
	
	    function add_subtract__addSubtract (mom, duration, isAdding, updateOffset) {
	        var milliseconds = duration._milliseconds,
	            days = absRound(duration._days),
	            months = absRound(duration._months);
	
	        if (!mom.isValid()) {
	            // No op
	            return;
	        }
	
	        updateOffset = updateOffset == null ? true : updateOffset;
	
	        if (milliseconds) {
	            mom._d.setTime(+mom._d + milliseconds * isAdding);
	        }
	        if (days) {
	            get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding);
	        }
	        if (months) {
	            setMonth(mom, get_set__get(mom, 'Month') + months * isAdding);
	        }
	        if (updateOffset) {
	            utils_hooks__hooks.updateOffset(mom, days || months);
	        }
	    }
	
	    var add_subtract__add      = createAdder(1, 'add');
	    var add_subtract__subtract = createAdder(-1, 'subtract');
	
	    function moment_calendar__calendar (time, formats) {
	        // We want to compare the start of today, vs this.
	        // Getting start-of-today depends on whether we're local/utc/offset or not.
	        var now = time || local__createLocal(),
	            sod = cloneWithOffset(now, this).startOf('day'),
	            diff = this.diff(sod, 'days', true),
	            format = diff < -6 ? 'sameElse' :
	                diff < -1 ? 'lastWeek' :
	                diff < 0 ? 'lastDay' :
	                diff < 1 ? 'sameDay' :
	                diff < 2 ? 'nextDay' :
	                diff < 7 ? 'nextWeek' : 'sameElse';
	
	        var output = formats && (isFunction(formats[format]) ? formats[format]() : formats[format]);
	
	        return this.format(output || this.localeData().calendar(format, this, local__createLocal(now)));
	    }
	
	    function clone () {
	        return new Moment(this);
	    }
	
	    function isAfter (input, units) {
	        var localInput = isMoment(input) ? input : local__createLocal(input);
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
	        if (units === 'millisecond') {
	            return +this > +localInput;
	        } else {
	            return +localInput < +this.clone().startOf(units);
	        }
	    }
	
	    function isBefore (input, units) {
	        var localInput = isMoment(input) ? input : local__createLocal(input);
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
	        if (units === 'millisecond') {
	            return +this < +localInput;
	        } else {
	            return +this.clone().endOf(units) < +localInput;
	        }
	    }
	
	    function isBetween (from, to, units) {
	        return this.isAfter(from, units) && this.isBefore(to, units);
	    }
	
	    function isSame (input, units) {
	        var localInput = isMoment(input) ? input : local__createLocal(input),
	            inputMs;
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(units || 'millisecond');
	        if (units === 'millisecond') {
	            return +this === +localInput;
	        } else {
	            inputMs = +localInput;
	            return +(this.clone().startOf(units)) <= inputMs && inputMs <= +(this.clone().endOf(units));
	        }
	    }
	
	    function isSameOrAfter (input, units) {
	        return this.isSame(input, units) || this.isAfter(input,units);
	    }
	
	    function isSameOrBefore (input, units) {
	        return this.isSame(input, units) || this.isBefore(input,units);
	    }
	
	    function diff (input, units, asFloat) {
	        var that,
	            zoneDelta,
	            delta, output;
	
	        if (!this.isValid()) {
	            return NaN;
	        }
	
	        that = cloneWithOffset(input, this);
	
	        if (!that.isValid()) {
	            return NaN;
	        }
	
	        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
	
	        units = normalizeUnits(units);
	
	        if (units === 'year' || units === 'month' || units === 'quarter') {
	            output = monthDiff(this, that);
	            if (units === 'quarter') {
	                output = output / 3;
	            } else if (units === 'year') {
	                output = output / 12;
	            }
	        } else {
	            delta = this - that;
	            output = units === 'second' ? delta / 1e3 : // 1000
	                units === 'minute' ? delta / 6e4 : // 1000 * 60
	                units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
	                units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
	                units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
	                delta;
	        }
	        return asFloat ? output : absFloor(output);
	    }
	
	    function monthDiff (a, b) {
	        // difference in months
	        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
	            // b is in (anchor - 1 month, anchor + 1 month)
	            anchor = a.clone().add(wholeMonthDiff, 'months'),
	            anchor2, adjust;
	
	        if (b - anchor < 0) {
	            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
	            // linear across the month
	            adjust = (b - anchor) / (anchor - anchor2);
	        } else {
	            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
	            // linear across the month
	            adjust = (b - anchor) / (anchor2 - anchor);
	        }
	
	        return -(wholeMonthDiff + adjust);
	    }
	
	    utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
	
	    function toString () {
	        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
	    }
	
	    function moment_format__toISOString () {
	        var m = this.clone().utc();
	        if (0 < m.year() && m.year() <= 9999) {
	            if (isFunction(Date.prototype.toISOString)) {
	                // native implementation is ~50x faster, use it when we can
	                return this.toDate().toISOString();
	            } else {
	                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
	            }
	        } else {
	            return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
	        }
	    }
	
	    function format (inputString) {
	        var output = formatMoment(this, inputString || utils_hooks__hooks.defaultFormat);
	        return this.localeData().postformat(output);
	    }
	
	    function from (time, withoutSuffix) {
	        if (this.isValid() &&
	                ((isMoment(time) && time.isValid()) ||
	                 local__createLocal(time).isValid())) {
	            return create__createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
	        } else {
	            return this.localeData().invalidDate();
	        }
	    }
	
	    function fromNow (withoutSuffix) {
	        return this.from(local__createLocal(), withoutSuffix);
	    }
	
	    function to (time, withoutSuffix) {
	        if (this.isValid() &&
	                ((isMoment(time) && time.isValid()) ||
	                 local__createLocal(time).isValid())) {
	            return create__createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
	        } else {
	            return this.localeData().invalidDate();
	        }
	    }
	
	    function toNow (withoutSuffix) {
	        return this.to(local__createLocal(), withoutSuffix);
	    }
	
	    // If passed a locale key, it will set the locale for this
	    // instance.  Otherwise, it will return the locale configuration
	    // variables for this instance.
	    function locale (key) {
	        var newLocaleData;
	
	        if (key === undefined) {
	            return this._locale._abbr;
	        } else {
	            newLocaleData = locale_locales__getLocale(key);
	            if (newLocaleData != null) {
	                this._locale = newLocaleData;
	            }
	            return this;
	        }
	    }
	
	    var lang = deprecate(
	        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
	        function (key) {
	            if (key === undefined) {
	                return this.localeData();
	            } else {
	                return this.locale(key);
	            }
	        }
	    );
	
	    function localeData () {
	        return this._locale;
	    }
	
	    function startOf (units) {
	        units = normalizeUnits(units);
	        // the following switch intentionally omits break keywords
	        // to utilize falling through the cases.
	        switch (units) {
	        case 'year':
	            this.month(0);
	            /* falls through */
	        case 'quarter':
	        case 'month':
	            this.date(1);
	            /* falls through */
	        case 'week':
	        case 'isoWeek':
	        case 'day':
	            this.hours(0);
	            /* falls through */
	        case 'hour':
	            this.minutes(0);
	            /* falls through */
	        case 'minute':
	            this.seconds(0);
	            /* falls through */
	        case 'second':
	            this.milliseconds(0);
	        }
	
	        // weeks are a special case
	        if (units === 'week') {
	            this.weekday(0);
	        }
	        if (units === 'isoWeek') {
	            this.isoWeekday(1);
	        }
	
	        // quarters are also special
	        if (units === 'quarter') {
	            this.month(Math.floor(this.month() / 3) * 3);
	        }
	
	        return this;
	    }
	
	    function endOf (units) {
	        units = normalizeUnits(units);
	        if (units === undefined || units === 'millisecond') {
	            return this;
	        }
	        return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
	    }
	
	    function to_type__valueOf () {
	        return +this._d - ((this._offset || 0) * 60000);
	    }
	
	    function unix () {
	        return Math.floor(+this / 1000);
	    }
	
	    function toDate () {
	        return this._offset ? new Date(+this) : this._d;
	    }
	
	    function toArray () {
	        var m = this;
	        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
	    }
	
	    function toObject () {
	        var m = this;
	        return {
	            years: m.year(),
	            months: m.month(),
	            date: m.date(),
	            hours: m.hours(),
	            minutes: m.minutes(),
	            seconds: m.seconds(),
	            milliseconds: m.milliseconds()
	        };
	    }
	
	    function toJSON () {
	        // new Date(NaN).toJSON() === null
	        return this.isValid() ? this.toISOString() : null;
	    }
	
	    function moment_valid__isValid () {
	        return valid__isValid(this);
	    }
	
	    function parsingFlags () {
	        return extend({}, getParsingFlags(this));
	    }
	
	    function invalidAt () {
	        return getParsingFlags(this).overflow;
	    }
	
	    function creationData() {
	        return {
	            input: this._i,
	            format: this._f,
	            locale: this._locale,
	            isUTC: this._isUTC,
	            strict: this._strict
	        };
	    }
	
	    // FORMATTING
	
	    addFormatToken(0, ['gg', 2], 0, function () {
	        return this.weekYear() % 100;
	    });
	
	    addFormatToken(0, ['GG', 2], 0, function () {
	        return this.isoWeekYear() % 100;
	    });
	
	    function addWeekYearFormatToken (token, getter) {
	        addFormatToken(0, [token, token.length], 0, getter);
	    }
	
	    addWeekYearFormatToken('gggg',     'weekYear');
	    addWeekYearFormatToken('ggggg',    'weekYear');
	    addWeekYearFormatToken('GGGG',  'isoWeekYear');
	    addWeekYearFormatToken('GGGGG', 'isoWeekYear');
	
	    // ALIASES
	
	    addUnitAlias('weekYear', 'gg');
	    addUnitAlias('isoWeekYear', 'GG');
	
	    // PARSING
	
	    addRegexToken('G',      matchSigned);
	    addRegexToken('g',      matchSigned);
	    addRegexToken('GG',     match1to2, match2);
	    addRegexToken('gg',     match1to2, match2);
	    addRegexToken('GGGG',   match1to4, match4);
	    addRegexToken('gggg',   match1to4, match4);
	    addRegexToken('GGGGG',  match1to6, match6);
	    addRegexToken('ggggg',  match1to6, match6);
	
	    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
	        week[token.substr(0, 2)] = toInt(input);
	    });
	
	    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
	        week[token] = utils_hooks__hooks.parseTwoDigitYear(input);
	    });
	
	    // MOMENTS
	
	    function getSetWeekYear (input) {
	        return getSetWeekYearHelper.call(this,
	                input,
	                this.week(),
	                this.weekday(),
	                this.localeData()._week.dow,
	                this.localeData()._week.doy);
	    }
	
	    function getSetISOWeekYear (input) {
	        return getSetWeekYearHelper.call(this,
	                input, this.isoWeek(), this.isoWeekday(), 1, 4);
	    }
	
	    function getISOWeeksInYear () {
	        return weeksInYear(this.year(), 1, 4);
	    }
	
	    function getWeeksInYear () {
	        var weekInfo = this.localeData()._week;
	        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
	    }
	
	    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
	        var weeksTarget;
	        if (input == null) {
	            return weekOfYear(this, dow, doy).year;
	        } else {
	            weeksTarget = weeksInYear(input, dow, doy);
	            if (week > weeksTarget) {
	                week = weeksTarget;
	            }
	            return setWeekAll.call(this, input, week, weekday, dow, doy);
	        }
	    }
	
	    function setWeekAll(weekYear, week, weekday, dow, doy) {
	        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
	            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
	
	        this.year(date.getUTCFullYear());
	        this.month(date.getUTCMonth());
	        this.date(date.getUTCDate());
	        return this;
	    }
	
	    // FORMATTING
	
	    addFormatToken('Q', 0, 'Qo', 'quarter');
	
	    // ALIASES
	
	    addUnitAlias('quarter', 'Q');
	
	    // PARSING
	
	    addRegexToken('Q', match1);
	    addParseToken('Q', function (input, array) {
	        array[MONTH] = (toInt(input) - 1) * 3;
	    });
	
	    // MOMENTS
	
	    function getSetQuarter (input) {
	        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
	    }
	
	    // FORMATTING
	
	    addFormatToken('w', ['ww', 2], 'wo', 'week');
	    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');
	
	    // ALIASES
	
	    addUnitAlias('week', 'w');
	    addUnitAlias('isoWeek', 'W');
	
	    // PARSING
	
	    addRegexToken('w',  match1to2);
	    addRegexToken('ww', match1to2, match2);
	    addRegexToken('W',  match1to2);
	    addRegexToken('WW', match1to2, match2);
	
	    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
	        week[token.substr(0, 1)] = toInt(input);
	    });
	
	    // HELPERS
	
	    // LOCALES
	
	    function localeWeek (mom) {
	        return weekOfYear(mom, this._week.dow, this._week.doy).week;
	    }
	
	    var defaultLocaleWeek = {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    };
	
	    function localeFirstDayOfWeek () {
	        return this._week.dow;
	    }
	
	    function localeFirstDayOfYear () {
	        return this._week.doy;
	    }
	
	    // MOMENTS
	
	    function getSetWeek (input) {
	        var week = this.localeData().week(this);
	        return input == null ? week : this.add((input - week) * 7, 'd');
	    }
	
	    function getSetISOWeek (input) {
	        var week = weekOfYear(this, 1, 4).week;
	        return input == null ? week : this.add((input - week) * 7, 'd');
	    }
	
	    // FORMATTING
	
	    addFormatToken('D', ['DD', 2], 'Do', 'date');
	
	    // ALIASES
	
	    addUnitAlias('date', 'D');
	
	    // PARSING
	
	    addRegexToken('D',  match1to2);
	    addRegexToken('DD', match1to2, match2);
	    addRegexToken('Do', function (isStrict, locale) {
	        return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
	    });
	
	    addParseToken(['D', 'DD'], DATE);
	    addParseToken('Do', function (input, array) {
	        array[DATE] = toInt(input.match(match1to2)[0], 10);
	    });
	
	    // MOMENTS
	
	    var getSetDayOfMonth = makeGetSet('Date', true);
	
	    // FORMATTING
	
	    addFormatToken('d', 0, 'do', 'day');
	
	    addFormatToken('dd', 0, 0, function (format) {
	        return this.localeData().weekdaysMin(this, format);
	    });
	
	    addFormatToken('ddd', 0, 0, function (format) {
	        return this.localeData().weekdaysShort(this, format);
	    });
	
	    addFormatToken('dddd', 0, 0, function (format) {
	        return this.localeData().weekdays(this, format);
	    });
	
	    addFormatToken('e', 0, 0, 'weekday');
	    addFormatToken('E', 0, 0, 'isoWeekday');
	
	    // ALIASES
	
	    addUnitAlias('day', 'd');
	    addUnitAlias('weekday', 'e');
	    addUnitAlias('isoWeekday', 'E');
	
	    // PARSING
	
	    addRegexToken('d',    match1to2);
	    addRegexToken('e',    match1to2);
	    addRegexToken('E',    match1to2);
	    addRegexToken('dd',   matchWord);
	    addRegexToken('ddd',  matchWord);
	    addRegexToken('dddd', matchWord);
	
	    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
	        var weekday = config._locale.weekdaysParse(input, token, config._strict);
	        // if we didn't get a weekday name, mark the date as invalid
	        if (weekday != null) {
	            week.d = weekday;
	        } else {
	            getParsingFlags(config).invalidWeekday = input;
	        }
	    });
	
	    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
	        week[token] = toInt(input);
	    });
	
	    // HELPERS
	
	    function parseWeekday(input, locale) {
	        if (typeof input !== 'string') {
	            return input;
	        }
	
	        if (!isNaN(input)) {
	            return parseInt(input, 10);
	        }
	
	        input = locale.weekdaysParse(input);
	        if (typeof input === 'number') {
	            return input;
	        }
	
	        return null;
	    }
	
	    // LOCALES
	
	    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
	    function localeWeekdays (m, format) {
	        return isArray(this._weekdays) ? this._weekdays[m.day()] :
	            this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
	    }
	
	    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
	    function localeWeekdaysShort (m) {
	        return this._weekdaysShort[m.day()];
	    }
	
	    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
	    function localeWeekdaysMin (m) {
	        return this._weekdaysMin[m.day()];
	    }
	
	    function localeWeekdaysParse (weekdayName, format, strict) {
	        var i, mom, regex;
	
	        if (!this._weekdaysParse) {
	            this._weekdaysParse = [];
	            this._minWeekdaysParse = [];
	            this._shortWeekdaysParse = [];
	            this._fullWeekdaysParse = [];
	        }
	
	        for (i = 0; i < 7; i++) {
	            // make the regex if we don't have it already
	
	            mom = local__createLocal([2000, 1]).day(i);
	            if (strict && !this._fullWeekdaysParse[i]) {
	                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
	                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
	                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
	            }
	            if (!this._weekdaysParse[i]) {
	                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
	                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
	            }
	            // test the regex
	            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
	                return i;
	            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
	                return i;
	            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
	                return i;
	            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
	                return i;
	            }
	        }
	    }
	
	    // MOMENTS
	
	    function getSetDayOfWeek (input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
	        if (input != null) {
	            input = parseWeekday(input, this.localeData());
	            return this.add(input - day, 'd');
	        } else {
	            return day;
	        }
	    }
	
	    function getSetLocaleDayOfWeek (input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
	        return input == null ? weekday : this.add(input - weekday, 'd');
	    }
	
	    function getSetISODayOfWeek (input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        // behaves the same as moment#day except
	        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
	        // as a setter, sunday should belong to the previous week.
	        return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
	    }
	
	    // FORMATTING
	
	    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');
	
	    // ALIASES
	
	    addUnitAlias('dayOfYear', 'DDD');
	
	    // PARSING
	
	    addRegexToken('DDD',  match1to3);
	    addRegexToken('DDDD', match3);
	    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
	        config._dayOfYear = toInt(input);
	    });
	
	    // HELPERS
	
	    // MOMENTS
	
	    function getSetDayOfYear (input) {
	        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
	        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
	    }
	
	    // FORMATTING
	
	    function hFormat() {
	        return this.hours() % 12 || 12;
	    }
	
	    addFormatToken('H', ['HH', 2], 0, 'hour');
	    addFormatToken('h', ['hh', 2], 0, hFormat);
	
	    addFormatToken('hmm', 0, 0, function () {
	        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
	    });
	
	    addFormatToken('hmmss', 0, 0, function () {
	        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
	            zeroFill(this.seconds(), 2);
	    });
	
	    addFormatToken('Hmm', 0, 0, function () {
	        return '' + this.hours() + zeroFill(this.minutes(), 2);
	    });
	
	    addFormatToken('Hmmss', 0, 0, function () {
	        return '' + this.hours() + zeroFill(this.minutes(), 2) +
	            zeroFill(this.seconds(), 2);
	    });
	
	    function meridiem (token, lowercase) {
	        addFormatToken(token, 0, 0, function () {
	            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
	        });
	    }
	
	    meridiem('a', true);
	    meridiem('A', false);
	
	    // ALIASES
	
	    addUnitAlias('hour', 'h');
	
	    // PARSING
	
	    function matchMeridiem (isStrict, locale) {
	        return locale._meridiemParse;
	    }
	
	    addRegexToken('a',  matchMeridiem);
	    addRegexToken('A',  matchMeridiem);
	    addRegexToken('H',  match1to2);
	    addRegexToken('h',  match1to2);
	    addRegexToken('HH', match1to2, match2);
	    addRegexToken('hh', match1to2, match2);
	
	    addRegexToken('hmm', match3to4);
	    addRegexToken('hmmss', match5to6);
	    addRegexToken('Hmm', match3to4);
	    addRegexToken('Hmmss', match5to6);
	
	    addParseToken(['H', 'HH'], HOUR);
	    addParseToken(['a', 'A'], function (input, array, config) {
	        config._isPm = config._locale.isPM(input);
	        config._meridiem = input;
	    });
	    addParseToken(['h', 'hh'], function (input, array, config) {
	        array[HOUR] = toInt(input);
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('hmm', function (input, array, config) {
	        var pos = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos));
	        array[MINUTE] = toInt(input.substr(pos));
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('hmmss', function (input, array, config) {
	        var pos1 = input.length - 4;
	        var pos2 = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos1));
	        array[MINUTE] = toInt(input.substr(pos1, 2));
	        array[SECOND] = toInt(input.substr(pos2));
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('Hmm', function (input, array, config) {
	        var pos = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos));
	        array[MINUTE] = toInt(input.substr(pos));
	    });
	    addParseToken('Hmmss', function (input, array, config) {
	        var pos1 = input.length - 4;
	        var pos2 = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos1));
	        array[MINUTE] = toInt(input.substr(pos1, 2));
	        array[SECOND] = toInt(input.substr(pos2));
	    });
	
	    // LOCALES
	
	    function localeIsPM (input) {
	        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
	        // Using charAt should be more compatible.
	        return ((input + '').toLowerCase().charAt(0) === 'p');
	    }
	
	    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
	    function localeMeridiem (hours, minutes, isLower) {
	        if (hours > 11) {
	            return isLower ? 'pm' : 'PM';
	        } else {
	            return isLower ? 'am' : 'AM';
	        }
	    }
	
	
	    // MOMENTS
	
	    // Setting the hour should keep the time, because the user explicitly
	    // specified which hour he wants. So trying to maintain the same hour (in
	    // a new timezone) makes sense. Adding/subtracting hours does not follow
	    // this rule.
	    var getSetHour = makeGetSet('Hours', true);
	
	    // FORMATTING
	
	    addFormatToken('m', ['mm', 2], 0, 'minute');
	
	    // ALIASES
	
	    addUnitAlias('minute', 'm');
	
	    // PARSING
	
	    addRegexToken('m',  match1to2);
	    addRegexToken('mm', match1to2, match2);
	    addParseToken(['m', 'mm'], MINUTE);
	
	    // MOMENTS
	
	    var getSetMinute = makeGetSet('Minutes', false);
	
	    // FORMATTING
	
	    addFormatToken('s', ['ss', 2], 0, 'second');
	
	    // ALIASES
	
	    addUnitAlias('second', 's');
	
	    // PARSING
	
	    addRegexToken('s',  match1to2);
	    addRegexToken('ss', match1to2, match2);
	    addParseToken(['s', 'ss'], SECOND);
	
	    // MOMENTS
	
	    var getSetSecond = makeGetSet('Seconds', false);
	
	    // FORMATTING
	
	    addFormatToken('S', 0, 0, function () {
	        return ~~(this.millisecond() / 100);
	    });
	
	    addFormatToken(0, ['SS', 2], 0, function () {
	        return ~~(this.millisecond() / 10);
	    });
	
	    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
	    addFormatToken(0, ['SSSS', 4], 0, function () {
	        return this.millisecond() * 10;
	    });
	    addFormatToken(0, ['SSSSS', 5], 0, function () {
	        return this.millisecond() * 100;
	    });
	    addFormatToken(0, ['SSSSSS', 6], 0, function () {
	        return this.millisecond() * 1000;
	    });
	    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
	        return this.millisecond() * 10000;
	    });
	    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
	        return this.millisecond() * 100000;
	    });
	    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
	        return this.millisecond() * 1000000;
	    });
	
	
	    // ALIASES
	
	    addUnitAlias('millisecond', 'ms');
	
	    // PARSING
	
	    addRegexToken('S',    match1to3, match1);
	    addRegexToken('SS',   match1to3, match2);
	    addRegexToken('SSS',  match1to3, match3);
	
	    var token;
	    for (token = 'SSSS'; token.length <= 9; token += 'S') {
	        addRegexToken(token, matchUnsigned);
	    }
	
	    function parseMs(input, array) {
	        array[MILLISECOND] = toInt(('0.' + input) * 1000);
	    }
	
	    for (token = 'S'; token.length <= 9; token += 'S') {
	        addParseToken(token, parseMs);
	    }
	    // MOMENTS
	
	    var getSetMillisecond = makeGetSet('Milliseconds', false);
	
	    // FORMATTING
	
	    addFormatToken('z',  0, 0, 'zoneAbbr');
	    addFormatToken('zz', 0, 0, 'zoneName');
	
	    // MOMENTS
	
	    function getZoneAbbr () {
	        return this._isUTC ? 'UTC' : '';
	    }
	
	    function getZoneName () {
	        return this._isUTC ? 'Coordinated Universal Time' : '';
	    }
	
	    var momentPrototype__proto = Moment.prototype;
	
	    momentPrototype__proto.add               = add_subtract__add;
	    momentPrototype__proto.calendar          = moment_calendar__calendar;
	    momentPrototype__proto.clone             = clone;
	    momentPrototype__proto.diff              = diff;
	    momentPrototype__proto.endOf             = endOf;
	    momentPrototype__proto.format            = format;
	    momentPrototype__proto.from              = from;
	    momentPrototype__proto.fromNow           = fromNow;
	    momentPrototype__proto.to                = to;
	    momentPrototype__proto.toNow             = toNow;
	    momentPrototype__proto.get               = getSet;
	    momentPrototype__proto.invalidAt         = invalidAt;
	    momentPrototype__proto.isAfter           = isAfter;
	    momentPrototype__proto.isBefore          = isBefore;
	    momentPrototype__proto.isBetween         = isBetween;
	    momentPrototype__proto.isSame            = isSame;
	    momentPrototype__proto.isSameOrAfter     = isSameOrAfter;
	    momentPrototype__proto.isSameOrBefore    = isSameOrBefore;
	    momentPrototype__proto.isValid           = moment_valid__isValid;
	    momentPrototype__proto.lang              = lang;
	    momentPrototype__proto.locale            = locale;
	    momentPrototype__proto.localeData        = localeData;
	    momentPrototype__proto.max               = prototypeMax;
	    momentPrototype__proto.min               = prototypeMin;
	    momentPrototype__proto.parsingFlags      = parsingFlags;
	    momentPrototype__proto.set               = getSet;
	    momentPrototype__proto.startOf           = startOf;
	    momentPrototype__proto.subtract          = add_subtract__subtract;
	    momentPrototype__proto.toArray           = toArray;
	    momentPrototype__proto.toObject          = toObject;
	    momentPrototype__proto.toDate            = toDate;
	    momentPrototype__proto.toISOString       = moment_format__toISOString;
	    momentPrototype__proto.toJSON            = toJSON;
	    momentPrototype__proto.toString          = toString;
	    momentPrototype__proto.unix              = unix;
	    momentPrototype__proto.valueOf           = to_type__valueOf;
	    momentPrototype__proto.creationData      = creationData;
	
	    // Year
	    momentPrototype__proto.year       = getSetYear;
	    momentPrototype__proto.isLeapYear = getIsLeapYear;
	
	    // Week Year
	    momentPrototype__proto.weekYear    = getSetWeekYear;
	    momentPrototype__proto.isoWeekYear = getSetISOWeekYear;
	
	    // Quarter
	    momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;
	
	    // Month
	    momentPrototype__proto.month       = getSetMonth;
	    momentPrototype__proto.daysInMonth = getDaysInMonth;
	
	    // Week
	    momentPrototype__proto.week           = momentPrototype__proto.weeks        = getSetWeek;
	    momentPrototype__proto.isoWeek        = momentPrototype__proto.isoWeeks     = getSetISOWeek;
	    momentPrototype__proto.weeksInYear    = getWeeksInYear;
	    momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;
	
	    // Day
	    momentPrototype__proto.date       = getSetDayOfMonth;
	    momentPrototype__proto.day        = momentPrototype__proto.days             = getSetDayOfWeek;
	    momentPrototype__proto.weekday    = getSetLocaleDayOfWeek;
	    momentPrototype__proto.isoWeekday = getSetISODayOfWeek;
	    momentPrototype__proto.dayOfYear  = getSetDayOfYear;
	
	    // Hour
	    momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;
	
	    // Minute
	    momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;
	
	    // Second
	    momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;
	
	    // Millisecond
	    momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;
	
	    // Offset
	    momentPrototype__proto.utcOffset            = getSetOffset;
	    momentPrototype__proto.utc                  = setOffsetToUTC;
	    momentPrototype__proto.local                = setOffsetToLocal;
	    momentPrototype__proto.parseZone            = setOffsetToParsedOffset;
	    momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;
	    momentPrototype__proto.isDST                = isDaylightSavingTime;
	    momentPrototype__proto.isDSTShifted         = isDaylightSavingTimeShifted;
	    momentPrototype__proto.isLocal              = isLocal;
	    momentPrototype__proto.isUtcOffset          = isUtcOffset;
	    momentPrototype__proto.isUtc                = isUtc;
	    momentPrototype__proto.isUTC                = isUtc;
	
	    // Timezone
	    momentPrototype__proto.zoneAbbr = getZoneAbbr;
	    momentPrototype__proto.zoneName = getZoneName;
	
	    // Deprecations
	    momentPrototype__proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
	    momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
	    momentPrototype__proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
	    momentPrototype__proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779', getSetZone);
	
	    var momentPrototype = momentPrototype__proto;
	
	    function moment__createUnix (input) {
	        return local__createLocal(input * 1000);
	    }
	
	    function moment__createInZone () {
	        return local__createLocal.apply(null, arguments).parseZone();
	    }
	
	    var defaultCalendar = {
	        sameDay : '[Today at] LT',
	        nextDay : '[Tomorrow at] LT',
	        nextWeek : 'dddd [at] LT',
	        lastDay : '[Yesterday at] LT',
	        lastWeek : '[Last] dddd [at] LT',
	        sameElse : 'L'
	    };
	
	    function locale_calendar__calendar (key, mom, now) {
	        var output = this._calendar[key];
	        return isFunction(output) ? output.call(mom, now) : output;
	    }
	
	    var defaultLongDateFormat = {
	        LTS  : 'h:mm:ss A',
	        LT   : 'h:mm A',
	        L    : 'MM/DD/YYYY',
	        LL   : 'MMMM D, YYYY',
	        LLL  : 'MMMM D, YYYY h:mm A',
	        LLLL : 'dddd, MMMM D, YYYY h:mm A'
	    };
	
	    function longDateFormat (key) {
	        var format = this._longDateFormat[key],
	            formatUpper = this._longDateFormat[key.toUpperCase()];
	
	        if (format || !formatUpper) {
	            return format;
	        }
	
	        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
	            return val.slice(1);
	        });
	
	        return this._longDateFormat[key];
	    }
	
	    var defaultInvalidDate = 'Invalid date';
	
	    function invalidDate () {
	        return this._invalidDate;
	    }
	
	    var defaultOrdinal = '%d';
	    var defaultOrdinalParse = /\d{1,2}/;
	
	    function ordinal (number) {
	        return this._ordinal.replace('%d', number);
	    }
	
	    function preParsePostFormat (string) {
	        return string;
	    }
	
	    var defaultRelativeTime = {
	        future : 'in %s',
	        past   : '%s ago',
	        s  : 'a few seconds',
	        m  : 'a minute',
	        mm : '%d minutes',
	        h  : 'an hour',
	        hh : '%d hours',
	        d  : 'a day',
	        dd : '%d days',
	        M  : 'a month',
	        MM : '%d months',
	        y  : 'a year',
	        yy : '%d years'
	    };
	
	    function relative__relativeTime (number, withoutSuffix, string, isFuture) {
	        var output = this._relativeTime[string];
	        return (isFunction(output)) ?
	            output(number, withoutSuffix, string, isFuture) :
	            output.replace(/%d/i, number);
	    }
	
	    function pastFuture (diff, output) {
	        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
	        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
	    }
	
	    var prototype__proto = Locale.prototype;
	
	    prototype__proto._calendar       = defaultCalendar;
	    prototype__proto.calendar        = locale_calendar__calendar;
	    prototype__proto._longDateFormat = defaultLongDateFormat;
	    prototype__proto.longDateFormat  = longDateFormat;
	    prototype__proto._invalidDate    = defaultInvalidDate;
	    prototype__proto.invalidDate     = invalidDate;
	    prototype__proto._ordinal        = defaultOrdinal;
	    prototype__proto.ordinal         = ordinal;
	    prototype__proto._ordinalParse   = defaultOrdinalParse;
	    prototype__proto.preparse        = preParsePostFormat;
	    prototype__proto.postformat      = preParsePostFormat;
	    prototype__proto._relativeTime   = defaultRelativeTime;
	    prototype__proto.relativeTime    = relative__relativeTime;
	    prototype__proto.pastFuture      = pastFuture;
	    prototype__proto.set             = locale_set__set;
	
	    // Month
	    prototype__proto.months            =        localeMonths;
	    prototype__proto._months           = defaultLocaleMonths;
	    prototype__proto.monthsShort       =        localeMonthsShort;
	    prototype__proto._monthsShort      = defaultLocaleMonthsShort;
	    prototype__proto.monthsParse       =        localeMonthsParse;
	    prototype__proto._monthsRegex      = defaultMonthsRegex;
	    prototype__proto.monthsRegex       = monthsRegex;
	    prototype__proto._monthsShortRegex = defaultMonthsShortRegex;
	    prototype__proto.monthsShortRegex  = monthsShortRegex;
	
	    // Week
	    prototype__proto.week = localeWeek;
	    prototype__proto._week = defaultLocaleWeek;
	    prototype__proto.firstDayOfYear = localeFirstDayOfYear;
	    prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;
	
	    // Day of Week
	    prototype__proto.weekdays       =        localeWeekdays;
	    prototype__proto._weekdays      = defaultLocaleWeekdays;
	    prototype__proto.weekdaysMin    =        localeWeekdaysMin;
	    prototype__proto._weekdaysMin   = defaultLocaleWeekdaysMin;
	    prototype__proto.weekdaysShort  =        localeWeekdaysShort;
	    prototype__proto._weekdaysShort = defaultLocaleWeekdaysShort;
	    prototype__proto.weekdaysParse  =        localeWeekdaysParse;
	
	    // Hours
	    prototype__proto.isPM = localeIsPM;
	    prototype__proto._meridiemParse = defaultLocaleMeridiemParse;
	    prototype__proto.meridiem = localeMeridiem;
	
	    function lists__get (format, index, field, setter) {
	        var locale = locale_locales__getLocale();
	        var utc = create_utc__createUTC().set(setter, index);
	        return locale[field](utc, format);
	    }
	
	    function list (format, index, field, count, setter) {
	        if (typeof format === 'number') {
	            index = format;
	            format = undefined;
	        }
	
	        format = format || '';
	
	        if (index != null) {
	            return lists__get(format, index, field, setter);
	        }
	
	        var i;
	        var out = [];
	        for (i = 0; i < count; i++) {
	            out[i] = lists__get(format, i, field, setter);
	        }
	        return out;
	    }
	
	    function lists__listMonths (format, index) {
	        return list(format, index, 'months', 12, 'month');
	    }
	
	    function lists__listMonthsShort (format, index) {
	        return list(format, index, 'monthsShort', 12, 'month');
	    }
	
	    function lists__listWeekdays (format, index) {
	        return list(format, index, 'weekdays', 7, 'day');
	    }
	
	    function lists__listWeekdaysShort (format, index) {
	        return list(format, index, 'weekdaysShort', 7, 'day');
	    }
	
	    function lists__listWeekdaysMin (format, index) {
	        return list(format, index, 'weekdaysMin', 7, 'day');
	    }
	
	    locale_locales__getSetGlobalLocale('en', {
	        ordinalParse: /\d{1,2}(th|st|nd|rd)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (toInt(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        }
	    });
	
	    // Side effect imports
	    utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);
	    utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);
	
	    var mathAbs = Math.abs;
	
	    function duration_abs__abs () {
	        var data           = this._data;
	
	        this._milliseconds = mathAbs(this._milliseconds);
	        this._days         = mathAbs(this._days);
	        this._months       = mathAbs(this._months);
	
	        data.milliseconds  = mathAbs(data.milliseconds);
	        data.seconds       = mathAbs(data.seconds);
	        data.minutes       = mathAbs(data.minutes);
	        data.hours         = mathAbs(data.hours);
	        data.months        = mathAbs(data.months);
	        data.years         = mathAbs(data.years);
	
	        return this;
	    }
	
	    function duration_add_subtract__addSubtract (duration, input, value, direction) {
	        var other = create__createDuration(input, value);
	
	        duration._milliseconds += direction * other._milliseconds;
	        duration._days         += direction * other._days;
	        duration._months       += direction * other._months;
	
	        return duration._bubble();
	    }
	
	    // supports only 2.0-style add(1, 's') or add(duration)
	    function duration_add_subtract__add (input, value) {
	        return duration_add_subtract__addSubtract(this, input, value, 1);
	    }
	
	    // supports only 2.0-style subtract(1, 's') or subtract(duration)
	    function duration_add_subtract__subtract (input, value) {
	        return duration_add_subtract__addSubtract(this, input, value, -1);
	    }
	
	    function absCeil (number) {
	        if (number < 0) {
	            return Math.floor(number);
	        } else {
	            return Math.ceil(number);
	        }
	    }
	
	    function bubble () {
	        var milliseconds = this._milliseconds;
	        var days         = this._days;
	        var months       = this._months;
	        var data         = this._data;
	        var seconds, minutes, hours, years, monthsFromDays;
	
	        // if we have a mix of positive and negative values, bubble down first
	        // check: https://github.com/moment/moment/issues/2166
	        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
	                (milliseconds <= 0 && days <= 0 && months <= 0))) {
	            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
	            days = 0;
	            months = 0;
	        }
	
	        // The following code bubbles up values, see the tests for
	        // examples of what that means.
	        data.milliseconds = milliseconds % 1000;
	
	        seconds           = absFloor(milliseconds / 1000);
	        data.seconds      = seconds % 60;
	
	        minutes           = absFloor(seconds / 60);
	        data.minutes      = minutes % 60;
	
	        hours             = absFloor(minutes / 60);
	        data.hours        = hours % 24;
	
	        days += absFloor(hours / 24);
	
	        // convert days to months
	        monthsFromDays = absFloor(daysToMonths(days));
	        months += monthsFromDays;
	        days -= absCeil(monthsToDays(monthsFromDays));
	
	        // 12 months -> 1 year
	        years = absFloor(months / 12);
	        months %= 12;
	
	        data.days   = days;
	        data.months = months;
	        data.years  = years;
	
	        return this;
	    }
	
	    function daysToMonths (days) {
	        // 400 years have 146097 days (taking into account leap year rules)
	        // 400 years have 12 months === 4800
	        return days * 4800 / 146097;
	    }
	
	    function monthsToDays (months) {
	        // the reverse of daysToMonths
	        return months * 146097 / 4800;
	    }
	
	    function as (units) {
	        var days;
	        var months;
	        var milliseconds = this._milliseconds;
	
	        units = normalizeUnits(units);
	
	        if (units === 'month' || units === 'year') {
	            days   = this._days   + milliseconds / 864e5;
	            months = this._months + daysToMonths(days);
	            return units === 'month' ? months : months / 12;
	        } else {
	            // handle milliseconds separately because of floating point math errors (issue #1867)
	            days = this._days + Math.round(monthsToDays(this._months));
	            switch (units) {
	                case 'week'   : return days / 7     + milliseconds / 6048e5;
	                case 'day'    : return days         + milliseconds / 864e5;
	                case 'hour'   : return days * 24    + milliseconds / 36e5;
	                case 'minute' : return days * 1440  + milliseconds / 6e4;
	                case 'second' : return days * 86400 + milliseconds / 1000;
	                // Math.floor prevents floating point math errors here
	                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
	                default: throw new Error('Unknown unit ' + units);
	            }
	        }
	    }
	
	    // TODO: Use this.as('ms')?
	    function duration_as__valueOf () {
	        return (
	            this._milliseconds +
	            this._days * 864e5 +
	            (this._months % 12) * 2592e6 +
	            toInt(this._months / 12) * 31536e6
	        );
	    }
	
	    function makeAs (alias) {
	        return function () {
	            return this.as(alias);
	        };
	    }
	
	    var asMilliseconds = makeAs('ms');
	    var asSeconds      = makeAs('s');
	    var asMinutes      = makeAs('m');
	    var asHours        = makeAs('h');
	    var asDays         = makeAs('d');
	    var asWeeks        = makeAs('w');
	    var asMonths       = makeAs('M');
	    var asYears        = makeAs('y');
	
	    function duration_get__get (units) {
	        units = normalizeUnits(units);
	        return this[units + 's']();
	    }
	
	    function makeGetter(name) {
	        return function () {
	            return this._data[name];
	        };
	    }
	
	    var milliseconds = makeGetter('milliseconds');
	    var seconds      = makeGetter('seconds');
	    var minutes      = makeGetter('minutes');
	    var hours        = makeGetter('hours');
	    var days         = makeGetter('days');
	    var months       = makeGetter('months');
	    var years        = makeGetter('years');
	
	    function weeks () {
	        return absFloor(this.days() / 7);
	    }
	
	    var round = Math.round;
	    var thresholds = {
	        s: 45,  // seconds to minute
	        m: 45,  // minutes to hour
	        h: 22,  // hours to day
	        d: 26,  // days to month
	        M: 11   // months to year
	    };
	
	    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
	    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
	        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
	    }
	
	    function duration_humanize__relativeTime (posNegDuration, withoutSuffix, locale) {
	        var duration = create__createDuration(posNegDuration).abs();
	        var seconds  = round(duration.as('s'));
	        var minutes  = round(duration.as('m'));
	        var hours    = round(duration.as('h'));
	        var days     = round(duration.as('d'));
	        var months   = round(duration.as('M'));
	        var years    = round(duration.as('y'));
	
	        var a = seconds < thresholds.s && ['s', seconds]  ||
	                minutes <= 1           && ['m']           ||
	                minutes < thresholds.m && ['mm', minutes] ||
	                hours   <= 1           && ['h']           ||
	                hours   < thresholds.h && ['hh', hours]   ||
	                days    <= 1           && ['d']           ||
	                days    < thresholds.d && ['dd', days]    ||
	                months  <= 1           && ['M']           ||
	                months  < thresholds.M && ['MM', months]  ||
	                years   <= 1           && ['y']           || ['yy', years];
	
	        a[2] = withoutSuffix;
	        a[3] = +posNegDuration > 0;
	        a[4] = locale;
	        return substituteTimeAgo.apply(null, a);
	    }
	
	    // This function allows you to set a threshold for relative time strings
	    function duration_humanize__getSetRelativeTimeThreshold (threshold, limit) {
	        if (thresholds[threshold] === undefined) {
	            return false;
	        }
	        if (limit === undefined) {
	            return thresholds[threshold];
	        }
	        thresholds[threshold] = limit;
	        return true;
	    }
	
	    function humanize (withSuffix) {
	        var locale = this.localeData();
	        var output = duration_humanize__relativeTime(this, !withSuffix, locale);
	
	        if (withSuffix) {
	            output = locale.pastFuture(+this, output);
	        }
	
	        return locale.postformat(output);
	    }
	
	    var iso_string__abs = Math.abs;
	
	    function iso_string__toISOString() {
	        // for ISO strings we do not use the normal bubbling rules:
	        //  * milliseconds bubble up until they become hours
	        //  * days do not bubble at all
	        //  * months bubble up until they become years
	        // This is because there is no context-free conversion between hours and days
	        // (think of clock changes)
	        // and also not between days and months (28-31 days per month)
	        var seconds = iso_string__abs(this._milliseconds) / 1000;
	        var days         = iso_string__abs(this._days);
	        var months       = iso_string__abs(this._months);
	        var minutes, hours, years;
	
	        // 3600 seconds -> 60 minutes -> 1 hour
	        minutes           = absFloor(seconds / 60);
	        hours             = absFloor(minutes / 60);
	        seconds %= 60;
	        minutes %= 60;
	
	        // 12 months -> 1 year
	        years  = absFloor(months / 12);
	        months %= 12;
	
	
	        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
	        var Y = years;
	        var M = months;
	        var D = days;
	        var h = hours;
	        var m = minutes;
	        var s = seconds;
	        var total = this.asSeconds();
	
	        if (!total) {
	            // this is the same as C#'s (Noda) and python (isodate)...
	            // but not other JS (goog.date)
	            return 'P0D';
	        }
	
	        return (total < 0 ? '-' : '') +
	            'P' +
	            (Y ? Y + 'Y' : '') +
	            (M ? M + 'M' : '') +
	            (D ? D + 'D' : '') +
	            ((h || m || s) ? 'T' : '') +
	            (h ? h + 'H' : '') +
	            (m ? m + 'M' : '') +
	            (s ? s + 'S' : '');
	    }
	
	    var duration_prototype__proto = Duration.prototype;
	
	    duration_prototype__proto.abs            = duration_abs__abs;
	    duration_prototype__proto.add            = duration_add_subtract__add;
	    duration_prototype__proto.subtract       = duration_add_subtract__subtract;
	    duration_prototype__proto.as             = as;
	    duration_prototype__proto.asMilliseconds = asMilliseconds;
	    duration_prototype__proto.asSeconds      = asSeconds;
	    duration_prototype__proto.asMinutes      = asMinutes;
	    duration_prototype__proto.asHours        = asHours;
	    duration_prototype__proto.asDays         = asDays;
	    duration_prototype__proto.asWeeks        = asWeeks;
	    duration_prototype__proto.asMonths       = asMonths;
	    duration_prototype__proto.asYears        = asYears;
	    duration_prototype__proto.valueOf        = duration_as__valueOf;
	    duration_prototype__proto._bubble        = bubble;
	    duration_prototype__proto.get            = duration_get__get;
	    duration_prototype__proto.milliseconds   = milliseconds;
	    duration_prototype__proto.seconds        = seconds;
	    duration_prototype__proto.minutes        = minutes;
	    duration_prototype__proto.hours          = hours;
	    duration_prototype__proto.days           = days;
	    duration_prototype__proto.weeks          = weeks;
	    duration_prototype__proto.months         = months;
	    duration_prototype__proto.years          = years;
	    duration_prototype__proto.humanize       = humanize;
	    duration_prototype__proto.toISOString    = iso_string__toISOString;
	    duration_prototype__proto.toString       = iso_string__toISOString;
	    duration_prototype__proto.toJSON         = iso_string__toISOString;
	    duration_prototype__proto.locale         = locale;
	    duration_prototype__proto.localeData     = localeData;
	
	    // Deprecations
	    duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);
	    duration_prototype__proto.lang = lang;
	
	    // Side effect imports
	
	    // FORMATTING
	
	    addFormatToken('X', 0, 0, 'unix');
	    addFormatToken('x', 0, 0, 'valueOf');
	
	    // PARSING
	
	    addRegexToken('x', matchSigned);
	    addRegexToken('X', matchTimestamp);
	    addParseToken('X', function (input, array, config) {
	        config._d = new Date(parseFloat(input, 10) * 1000);
	    });
	    addParseToken('x', function (input, array, config) {
	        config._d = new Date(toInt(input));
	    });
	
	    // Side effect imports
	
	
	    utils_hooks__hooks.version = '2.12.0';
	
	    setHookCallback(local__createLocal);
	
	    utils_hooks__hooks.fn                    = momentPrototype;
	    utils_hooks__hooks.min                   = min;
	    utils_hooks__hooks.max                   = max;
	    utils_hooks__hooks.now                   = now;
	    utils_hooks__hooks.utc                   = create_utc__createUTC;
	    utils_hooks__hooks.unix                  = moment__createUnix;
	    utils_hooks__hooks.months                = lists__listMonths;
	    utils_hooks__hooks.isDate                = isDate;
	    utils_hooks__hooks.locale                = locale_locales__getSetGlobalLocale;
	    utils_hooks__hooks.invalid               = valid__createInvalid;
	    utils_hooks__hooks.duration              = create__createDuration;
	    utils_hooks__hooks.isMoment              = isMoment;
	    utils_hooks__hooks.weekdays              = lists__listWeekdays;
	    utils_hooks__hooks.parseZone             = moment__createInZone;
	    utils_hooks__hooks.localeData            = locale_locales__getLocale;
	    utils_hooks__hooks.isDuration            = isDuration;
	    utils_hooks__hooks.monthsShort           = lists__listMonthsShort;
	    utils_hooks__hooks.weekdaysMin           = lists__listWeekdaysMin;
	    utils_hooks__hooks.defineLocale          = defineLocale;
	    utils_hooks__hooks.updateLocale          = updateLocale;
	    utils_hooks__hooks.locales               = locale_locales__listLocales;
	    utils_hooks__hooks.weekdaysShort         = lists__listWeekdaysShort;
	    utils_hooks__hooks.normalizeUnits        = normalizeUnits;
	    utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;
	    utils_hooks__hooks.prototype             = momentPrototype;
	
	    var _moment = utils_hooks__hooks;
	
	    return _moment;
	
	}));
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(418)(module)))

/***/ },
/* 418 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 419 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./af": 420,
		"./af.js": 420,
		"./ar": 421,
		"./ar-ma": 422,
		"./ar-ma.js": 422,
		"./ar-sa": 423,
		"./ar-sa.js": 423,
		"./ar-tn": 424,
		"./ar-tn.js": 424,
		"./ar.js": 421,
		"./az": 425,
		"./az.js": 425,
		"./be": 426,
		"./be.js": 426,
		"./bg": 427,
		"./bg.js": 427,
		"./bn": 428,
		"./bn.js": 428,
		"./bo": 429,
		"./bo.js": 429,
		"./br": 430,
		"./br.js": 430,
		"./bs": 431,
		"./bs.js": 431,
		"./ca": 432,
		"./ca.js": 432,
		"./cs": 433,
		"./cs.js": 433,
		"./cv": 434,
		"./cv.js": 434,
		"./cy": 435,
		"./cy.js": 435,
		"./da": 436,
		"./da.js": 436,
		"./de": 437,
		"./de-at": 438,
		"./de-at.js": 438,
		"./de.js": 437,
		"./dv": 439,
		"./dv.js": 439,
		"./el": 440,
		"./el.js": 440,
		"./en-au": 441,
		"./en-au.js": 441,
		"./en-ca": 442,
		"./en-ca.js": 442,
		"./en-gb": 443,
		"./en-gb.js": 443,
		"./en-ie": 444,
		"./en-ie.js": 444,
		"./en-nz": 445,
		"./en-nz.js": 445,
		"./eo": 446,
		"./eo.js": 446,
		"./es": 447,
		"./es.js": 447,
		"./et": 448,
		"./et.js": 448,
		"./eu": 449,
		"./eu.js": 449,
		"./fa": 450,
		"./fa.js": 450,
		"./fi": 451,
		"./fi.js": 451,
		"./fo": 452,
		"./fo.js": 452,
		"./fr": 453,
		"./fr-ca": 454,
		"./fr-ca.js": 454,
		"./fr-ch": 455,
		"./fr-ch.js": 455,
		"./fr.js": 453,
		"./fy": 456,
		"./fy.js": 456,
		"./gd": 457,
		"./gd.js": 457,
		"./gl": 458,
		"./gl.js": 458,
		"./he": 459,
		"./he.js": 459,
		"./hi": 460,
		"./hi.js": 460,
		"./hr": 461,
		"./hr.js": 461,
		"./hu": 462,
		"./hu.js": 462,
		"./hy-am": 463,
		"./hy-am.js": 463,
		"./id": 464,
		"./id.js": 464,
		"./is": 465,
		"./is.js": 465,
		"./it": 466,
		"./it.js": 466,
		"./ja": 467,
		"./ja.js": 467,
		"./jv": 468,
		"./jv.js": 468,
		"./ka": 469,
		"./ka.js": 469,
		"./kk": 470,
		"./kk.js": 470,
		"./km": 471,
		"./km.js": 471,
		"./ko": 472,
		"./ko.js": 472,
		"./lb": 473,
		"./lb.js": 473,
		"./lo": 474,
		"./lo.js": 474,
		"./lt": 475,
		"./lt.js": 475,
		"./lv": 476,
		"./lv.js": 476,
		"./me": 477,
		"./me.js": 477,
		"./mk": 478,
		"./mk.js": 478,
		"./ml": 479,
		"./ml.js": 479,
		"./mr": 480,
		"./mr.js": 480,
		"./ms": 481,
		"./ms-my": 482,
		"./ms-my.js": 482,
		"./ms.js": 481,
		"./my": 483,
		"./my.js": 483,
		"./nb": 484,
		"./nb.js": 484,
		"./ne": 485,
		"./ne.js": 485,
		"./nl": 486,
		"./nl.js": 486,
		"./nn": 487,
		"./nn.js": 487,
		"./pa-in": 488,
		"./pa-in.js": 488,
		"./pl": 489,
		"./pl.js": 489,
		"./pt": 490,
		"./pt-br": 491,
		"./pt-br.js": 491,
		"./pt.js": 490,
		"./ro": 492,
		"./ro.js": 492,
		"./ru": 493,
		"./ru.js": 493,
		"./se": 494,
		"./se.js": 494,
		"./si": 495,
		"./si.js": 495,
		"./sk": 496,
		"./sk.js": 496,
		"./sl": 497,
		"./sl.js": 497,
		"./sq": 498,
		"./sq.js": 498,
		"./sr": 499,
		"./sr-cyrl": 500,
		"./sr-cyrl.js": 500,
		"./sr.js": 499,
		"./sv": 501,
		"./sv.js": 501,
		"./sw": 502,
		"./sw.js": 502,
		"./ta": 503,
		"./ta.js": 503,
		"./te": 504,
		"./te.js": 504,
		"./th": 505,
		"./th.js": 505,
		"./tl-ph": 506,
		"./tl-ph.js": 506,
		"./tlh": 507,
		"./tlh.js": 507,
		"./tr": 508,
		"./tr.js": 508,
		"./tzl": 509,
		"./tzl.js": 509,
		"./tzm": 510,
		"./tzm-latn": 511,
		"./tzm-latn.js": 511,
		"./tzm.js": 510,
		"./uk": 512,
		"./uk.js": 512,
		"./uz": 513,
		"./uz.js": 513,
		"./vi": 514,
		"./vi.js": 514,
		"./zh-cn": 515,
		"./zh-cn.js": 515,
		"./zh-tw": 516,
		"./zh-tw.js": 516
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 419;


/***/ },
/* 420 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : afrikaans (af)
	//! author : Werner Mollentze : https://github.com/wernerm
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var af = moment.defineLocale('af', {
	        months : 'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split('_'),
	        weekdays : 'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split('_'),
	        weekdaysShort : 'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),
	        weekdaysMin : 'So_Ma_Di_Wo_Do_Vr_Sa'.split('_'),
	        meridiemParse: /vm|nm/i,
	        isPM : function (input) {
	            return /^nm$/i.test(input);
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 12) {
	                return isLower ? 'vm' : 'VM';
	            } else {
	                return isLower ? 'nm' : 'NM';
	            }
	        },
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Vandag om] LT',
	            nextDay : '[Môre om] LT',
	            nextWeek : 'dddd [om] LT',
	            lastDay : '[Gister om] LT',
	            lastWeek : '[Laas] dddd [om] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'oor %s',
	            past : '%s gelede',
	            s : '\'n paar sekondes',
	            m : '\'n minuut',
	            mm : '%d minute',
	            h : '\'n uur',
	            hh : '%d ure',
	            d : '\'n dag',
	            dd : '%d dae',
	            M : '\'n maand',
	            MM : '%d maande',
	            y : '\'n jaar',
	            yy : '%d jaar'
	        },
	        ordinalParse: /\d{1,2}(ste|de)/,
	        ordinal : function (number) {
	            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de'); // Thanks to Joris Röling : https://github.com/jjupiter
	        },
	        week : {
	            dow : 1, // Maandag is die eerste dag van die week.
	            doy : 4  // Die week wat die 4de Januarie bevat is die eerste week van die jaar.
	        }
	    });
	
	    return af;
	
	}));

/***/ },
/* 421 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! Locale: Arabic (ar)
	//! Author: Abdel Said: https://github.com/abdelsaid
	//! Changes in months, weekdays: Ahmed Elkhatib
	//! Native plural forms: forabi https://github.com/forabi
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var symbolMap = {
	        '1': '١',
	        '2': '٢',
	        '3': '٣',
	        '4': '٤',
	        '5': '٥',
	        '6': '٦',
	        '7': '٧',
	        '8': '٨',
	        '9': '٩',
	        '0': '٠'
	    }, numberMap = {
	        '١': '1',
	        '٢': '2',
	        '٣': '3',
	        '٤': '4',
	        '٥': '5',
	        '٦': '6',
	        '٧': '7',
	        '٨': '8',
	        '٩': '9',
	        '٠': '0'
	    }, pluralForm = function (n) {
	        return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
	    }, plurals = {
	        s : ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
	        m : ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
	        h : ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
	        d : ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
	        M : ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
	        y : ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
	    }, pluralize = function (u) {
	        return function (number, withoutSuffix, string, isFuture) {
	            var f = pluralForm(number),
	                str = plurals[u][pluralForm(number)];
	            if (f === 2) {
	                str = str[withoutSuffix ? 0 : 1];
	            }
	            return str.replace(/%d/i, number);
	        };
	    }, months = [
	        'كانون الثاني يناير',
	        'شباط فبراير',
	        'آذار مارس',
	        'نيسان أبريل',
	        'أيار مايو',
	        'حزيران يونيو',
	        'تموز يوليو',
	        'آب أغسطس',
	        'أيلول سبتمبر',
	        'تشرين الأول أكتوبر',
	        'تشرين الثاني نوفمبر',
	        'كانون الأول ديسمبر'
	    ];
	
	    var ar = moment.defineLocale('ar', {
	        months : months,
	        monthsShort : months,
	        weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'D/\u200FM/\u200FYYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /ص|م/,
	        isPM : function (input) {
	            return 'م' === input;
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ص';
	            } else {
	                return 'م';
	            }
	        },
	        calendar : {
	            sameDay: '[اليوم عند الساعة] LT',
	            nextDay: '[غدًا عند الساعة] LT',
	            nextWeek: 'dddd [عند الساعة] LT',
	            lastDay: '[أمس عند الساعة] LT',
	            lastWeek: 'dddd [عند الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'بعد %s',
	            past : 'منذ %s',
	            s : pluralize('s'),
	            m : pluralize('m'),
	            mm : pluralize('m'),
	            h : pluralize('h'),
	            hh : pluralize('h'),
	            d : pluralize('d'),
	            dd : pluralize('d'),
	            M : pluralize('M'),
	            MM : pluralize('M'),
	            y : pluralize('y'),
	            yy : pluralize('y')
	        },
	        preparse: function (string) {
	            return string.replace(/\u200f/g, '').replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
	                return numberMap[match];
	            }).replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            }).replace(/,/g, '،');
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return ar;
	
	}));

/***/ },
/* 422 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Moroccan Arabic (ar-ma)
	//! author : ElFadili Yassine : https://github.com/ElFadiliY
	//! author : Abdel Said : https://github.com/abdelsaid
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var ar_ma = moment.defineLocale('ar-ma', {
	        months : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
	        monthsShort : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
	        weekdays : 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort : 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[اليوم على الساعة] LT',
	            nextDay: '[غدا على الساعة] LT',
	            nextWeek: 'dddd [على الساعة] LT',
	            lastDay: '[أمس على الساعة] LT',
	            lastWeek: 'dddd [على الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'في %s',
	            past : 'منذ %s',
	            s : 'ثوان',
	            m : 'دقيقة',
	            mm : '%d دقائق',
	            h : 'ساعة',
	            hh : '%d ساعات',
	            d : 'يوم',
	            dd : '%d أيام',
	            M : 'شهر',
	            MM : '%d أشهر',
	            y : 'سنة',
	            yy : '%d سنوات'
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return ar_ma;
	
	}));

/***/ },
/* 423 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic Saudi Arabia (ar-sa)
	//! author : Suhail Alkowaileet : https://github.com/xsoh
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var symbolMap = {
	        '1': '١',
	        '2': '٢',
	        '3': '٣',
	        '4': '٤',
	        '5': '٥',
	        '6': '٦',
	        '7': '٧',
	        '8': '٨',
	        '9': '٩',
	        '0': '٠'
	    }, numberMap = {
	        '١': '1',
	        '٢': '2',
	        '٣': '3',
	        '٤': '4',
	        '٥': '5',
	        '٦': '6',
	        '٧': '7',
	        '٨': '8',
	        '٩': '9',
	        '٠': '0'
	    };
	
	    var ar_sa = moment.defineLocale('ar-sa', {
	        months : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	        monthsShort : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	        weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /ص|م/,
	        isPM : function (input) {
	            return 'م' === input;
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ص';
	            } else {
	                return 'م';
	            }
	        },
	        calendar : {
	            sameDay: '[اليوم على الساعة] LT',
	            nextDay: '[غدا على الساعة] LT',
	            nextWeek: 'dddd [على الساعة] LT',
	            lastDay: '[أمس على الساعة] LT',
	            lastWeek: 'dddd [على الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'في %s',
	            past : 'منذ %s',
	            s : 'ثوان',
	            m : 'دقيقة',
	            mm : '%d دقائق',
	            h : 'ساعة',
	            hh : '%d ساعات',
	            d : 'يوم',
	            dd : '%d أيام',
	            M : 'شهر',
	            MM : '%d أشهر',
	            y : 'سنة',
	            yy : '%d سنوات'
	        },
	        preparse: function (string) {
	            return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
	                return numberMap[match];
	            }).replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            }).replace(/,/g, '،');
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return ar_sa;
	
	}));

/***/ },
/* 424 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale  : Tunisian Arabic (ar-tn)
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var ar_tn = moment.defineLocale('ar-tn', {
	        months: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	        monthsShort: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[اليوم على الساعة] LT',
	            nextDay: '[غدا على الساعة] LT',
	            nextWeek: 'dddd [على الساعة] LT',
	            lastDay: '[أمس على الساعة] LT',
	            lastWeek: 'dddd [على الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'في %s',
	            past: 'منذ %s',
	            s: 'ثوان',
	            m: 'دقيقة',
	            mm: '%d دقائق',
	            h: 'ساعة',
	            hh: '%d ساعات',
	            d: 'يوم',
	            dd: '%d أيام',
	            M: 'شهر',
	            MM: '%d أشهر',
	            y: 'سنة',
	            yy: '%d سنوات'
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return ar_tn;
	
	}));

/***/ },
/* 425 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : azerbaijani (az)
	//! author : topchiyev : https://github.com/topchiyev
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var suffixes = {
	        1: '-inci',
	        5: '-inci',
	        8: '-inci',
	        70: '-inci',
	        80: '-inci',
	        2: '-nci',
	        7: '-nci',
	        20: '-nci',
	        50: '-nci',
	        3: '-üncü',
	        4: '-üncü',
	        100: '-üncü',
	        6: '-ncı',
	        9: '-uncu',
	        10: '-uncu',
	        30: '-uncu',
	        60: '-ıncı',
	        90: '-ıncı'
	    };
	
	    var az = moment.defineLocale('az', {
	        months : 'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split('_'),
	        monthsShort : 'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split('_'),
	        weekdays : 'Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə'.split('_'),
	        weekdaysShort : 'Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən'.split('_'),
	        weekdaysMin : 'Bz_BE_ÇA_Çə_CA_Cü_Şə'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[bugün saat] LT',
	            nextDay : '[sabah saat] LT',
	            nextWeek : '[gələn həftə] dddd [saat] LT',
	            lastDay : '[dünən] LT',
	            lastWeek : '[keçən həftə] dddd [saat] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s sonra',
	            past : '%s əvvəl',
	            s : 'birneçə saniyyə',
	            m : 'bir dəqiqə',
	            mm : '%d dəqiqə',
	            h : 'bir saat',
	            hh : '%d saat',
	            d : 'bir gün',
	            dd : '%d gün',
	            M : 'bir ay',
	            MM : '%d ay',
	            y : 'bir il',
	            yy : '%d il'
	        },
	        meridiemParse: /gecə|səhər|gündüz|axşam/,
	        isPM : function (input) {
	            return /^(gündüz|axşam)$/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'gecə';
	            } else if (hour < 12) {
	                return 'səhər';
	            } else if (hour < 17) {
	                return 'gündüz';
	            } else {
	                return 'axşam';
	            }
	        },
	        ordinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,
	        ordinal : function (number) {
	            if (number === 0) {  // special case for zero
	                return number + '-ıncı';
	            }
	            var a = number % 10,
	                b = number % 100 - a,
	                c = number >= 100 ? 100 : null;
	            return number + (suffixes[a] || suffixes[b] || suffixes[c]);
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return az;
	
	}));

/***/ },
/* 426 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : belarusian (be)
	//! author : Dmitry Demidov : https://github.com/demidov91
	//! author: Praleska: http://praleska.pro/
	//! Author : Menelion Elensúle : https://github.com/Oire
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    function plural(word, num) {
	        var forms = word.split('_');
	        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
	    }
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	            'mm': withoutSuffix ? 'хвіліна_хвіліны_хвілін' : 'хвіліну_хвіліны_хвілін',
	            'hh': withoutSuffix ? 'гадзіна_гадзіны_гадзін' : 'гадзіну_гадзіны_гадзін',
	            'dd': 'дзень_дні_дзён',
	            'MM': 'месяц_месяцы_месяцаў',
	            'yy': 'год_гады_гадоў'
	        };
	        if (key === 'm') {
	            return withoutSuffix ? 'хвіліна' : 'хвіліну';
	        }
	        else if (key === 'h') {
	            return withoutSuffix ? 'гадзіна' : 'гадзіну';
	        }
	        else {
	            return number + ' ' + plural(format[key], +number);
	        }
	    }
	
	    var be = moment.defineLocale('be', {
	        months : {
	            format: 'студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня'.split('_'),
	            standalone: 'студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань'.split('_')
	        },
	        monthsShort : 'студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж'.split('_'),
	        weekdays : {
	            format: 'нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу'.split('_'),
	            standalone: 'нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота'.split('_'),
	            isFormat: /\[ ?[Вв] ?(?:мінулую|наступную)? ?\] ?dddd/
	        },
	        weekdaysShort : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
	        weekdaysMin : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY г.',
	            LLL : 'D MMMM YYYY г., HH:mm',
	            LLLL : 'dddd, D MMMM YYYY г., HH:mm'
	        },
	        calendar : {
	            sameDay: '[Сёння ў] LT',
	            nextDay: '[Заўтра ў] LT',
	            lastDay: '[Учора ў] LT',
	            nextWeek: function () {
	                return '[У] dddd [ў] LT';
	            },
	            lastWeek: function () {
	                switch (this.day()) {
	                case 0:
	                case 3:
	                case 5:
	                case 6:
	                    return '[У мінулую] dddd [ў] LT';
	                case 1:
	                case 2:
	                case 4:
	                    return '[У мінулы] dddd [ў] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'праз %s',
	            past : '%s таму',
	            s : 'некалькі секунд',
	            m : relativeTimeWithPlural,
	            mm : relativeTimeWithPlural,
	            h : relativeTimeWithPlural,
	            hh : relativeTimeWithPlural,
	            d : 'дзень',
	            dd : relativeTimeWithPlural,
	            M : 'месяц',
	            MM : relativeTimeWithPlural,
	            y : 'год',
	            yy : relativeTimeWithPlural
	        },
	        meridiemParse: /ночы|раніцы|дня|вечара/,
	        isPM : function (input) {
	            return /^(дня|вечара)$/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ночы';
	            } else if (hour < 12) {
	                return 'раніцы';
	            } else if (hour < 17) {
	                return 'дня';
	            } else {
	                return 'вечара';
	            }
	        },
	        ordinalParse: /\d{1,2}-(і|ы|га)/,
	        ordinal: function (number, period) {
	            switch (period) {
	            case 'M':
	            case 'd':
	            case 'DDD':
	            case 'w':
	            case 'W':
	                return (number % 10 === 2 || number % 10 === 3) && (number % 100 !== 12 && number % 100 !== 13) ? number + '-і' : number + '-ы';
	            case 'D':
	                return number + '-га';
	            default:
	                return number;
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return be;
	
	}));

/***/ },
/* 427 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : bulgarian (bg)
	//! author : Krasen Borisov : https://github.com/kraz
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var bg = moment.defineLocale('bg', {
	        months : 'януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември'.split('_'),
	        monthsShort : 'янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек'.split('_'),
	        weekdays : 'неделя_понеделник_вторник_сряда_четвъртък_петък_събота'.split('_'),
	        weekdaysShort : 'нед_пон_вто_сря_чет_пет_съб'.split('_'),
	        weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'D.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY H:mm',
	            LLLL : 'dddd, D MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay : '[Днес в] LT',
	            nextDay : '[Утре в] LT',
	            nextWeek : 'dddd [в] LT',
	            lastDay : '[Вчера в] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                case 0:
	                case 3:
	                case 6:
	                    return '[В изминалата] dddd [в] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[В изминалия] dddd [в] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'след %s',
	            past : 'преди %s',
	            s : 'няколко секунди',
	            m : 'минута',
	            mm : '%d минути',
	            h : 'час',
	            hh : '%d часа',
	            d : 'ден',
	            dd : '%d дни',
	            M : 'месец',
	            MM : '%d месеца',
	            y : 'година',
	            yy : '%d години'
	        },
	        ordinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
	        ordinal : function (number) {
	            var lastDigit = number % 10,
	                last2Digits = number % 100;
	            if (number === 0) {
	                return number + '-ев';
	            } else if (last2Digits === 0) {
	                return number + '-ен';
	            } else if (last2Digits > 10 && last2Digits < 20) {
	                return number + '-ти';
	            } else if (lastDigit === 1) {
	                return number + '-ви';
	            } else if (lastDigit === 2) {
	                return number + '-ри';
	            } else if (lastDigit === 7 || lastDigit === 8) {
	                return number + '-ми';
	            } else {
	                return number + '-ти';
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return bg;
	
	}));

/***/ },
/* 428 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bengali (bn)
	//! author : Kaushik Gandhi : https://github.com/kaushikgandhi
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var symbolMap = {
	        '1': '১',
	        '2': '২',
	        '3': '৩',
	        '4': '৪',
	        '5': '৫',
	        '6': '৬',
	        '7': '৭',
	        '8': '৮',
	        '9': '৯',
	        '0': '০'
	    },
	    numberMap = {
	        '১': '1',
	        '২': '2',
	        '৩': '3',
	        '৪': '4',
	        '৫': '5',
	        '৬': '6',
	        '৭': '7',
	        '৮': '8',
	        '৯': '9',
	        '০': '0'
	    };
	
	    var bn = moment.defineLocale('bn', {
	        months : 'জানুয়ারী_ফেবুয়ারী_মার্চ_এপ্রিল_মে_জুন_জুলাই_অগাস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split('_'),
	        monthsShort : 'জানু_ফেব_মার্চ_এপর_মে_জুন_জুল_অগ_সেপ্ট_অক্টো_নভ_ডিসেম্'.split('_'),
	        weekdays : 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পত্তিবার_শুক্রবার_শনিবার'.split('_'),
	        weekdaysShort : 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পত্তি_শুক্র_শনি'.split('_'),
	        weekdaysMin : 'রব_সম_মঙ্গ_বু_ব্রিহ_শু_শনি'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm সময়',
	            LTS : 'A h:mm:ss সময়',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, A h:mm সময়',
	            LLLL : 'dddd, D MMMM YYYY, A h:mm সময়'
	        },
	        calendar : {
	            sameDay : '[আজ] LT',
	            nextDay : '[আগামীকাল] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[গতকাল] LT',
	            lastWeek : '[গত] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s পরে',
	            past : '%s আগে',
	            s : 'কয়েক সেকেন্ড',
	            m : 'এক মিনিট',
	            mm : '%d মিনিট',
	            h : 'এক ঘন্টা',
	            hh : '%d ঘন্টা',
	            d : 'এক দিন',
	            dd : '%d দিন',
	            M : 'এক মাস',
	            MM : '%d মাস',
	            y : 'এক বছর',
	            yy : '%d বছর'
	        },
	        preparse: function (string) {
	            return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /রাত|সকাল|দুপুর|বিকাল|রাত/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if ((meridiem === 'রাত' && hour >= 4) ||
	                    (meridiem === 'দুপুর' && hour < 5) ||
	                    meridiem === 'বিকাল') {
	                return hour + 12;
	            } else {
	                return hour;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'রাত';
	            } else if (hour < 10) {
	                return 'সকাল';
	            } else if (hour < 17) {
	                return 'দুপুর';
	            } else if (hour < 20) {
	                return 'বিকাল';
	            } else {
	                return 'রাত';
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return bn;
	
	}));

/***/ },
/* 429 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : tibetan (bo)
	//! author : Thupten N. Chakrishar : https://github.com/vajradog
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var symbolMap = {
	        '1': '༡',
	        '2': '༢',
	        '3': '༣',
	        '4': '༤',
	        '5': '༥',
	        '6': '༦',
	        '7': '༧',
	        '8': '༨',
	        '9': '༩',
	        '0': '༠'
	    },
	    numberMap = {
	        '༡': '1',
	        '༢': '2',
	        '༣': '3',
	        '༤': '4',
	        '༥': '5',
	        '༦': '6',
	        '༧': '7',
	        '༨': '8',
	        '༩': '9',
	        '༠': '0'
	    };
	
	    var bo = moment.defineLocale('bo', {
	        months : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
	        monthsShort : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
	        weekdays : 'གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་'.split('_'),
	        weekdaysShort : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
	        weekdaysMin : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm',
	            LTS : 'A h:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, A h:mm',
	            LLLL : 'dddd, D MMMM YYYY, A h:mm'
	        },
	        calendar : {
	            sameDay : '[དི་རིང] LT',
	            nextDay : '[སང་ཉིན] LT',
	            nextWeek : '[བདུན་ཕྲག་རྗེས་མ], LT',
	            lastDay : '[ཁ་སང] LT',
	            lastWeek : '[བདུན་ཕྲག་མཐའ་མ] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s ལ་',
	            past : '%s སྔན་ལ',
	            s : 'ལམ་སང',
	            m : 'སྐར་མ་གཅིག',
	            mm : '%d སྐར་མ',
	            h : 'ཆུ་ཚོད་གཅིག',
	            hh : '%d ཆུ་ཚོད',
	            d : 'ཉིན་གཅིག',
	            dd : '%d ཉིན་',
	            M : 'ཟླ་བ་གཅིག',
	            MM : '%d ཟླ་བ',
	            y : 'ལོ་གཅིག',
	            yy : '%d ལོ'
	        },
	        preparse: function (string) {
	            return string.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if ((meridiem === 'མཚན་མོ' && hour >= 4) ||
	                    (meridiem === 'ཉིན་གུང' && hour < 5) ||
	                    meridiem === 'དགོང་དག') {
	                return hour + 12;
	            } else {
	                return hour;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'མཚན་མོ';
	            } else if (hour < 10) {
	                return 'ཞོགས་ཀས';
	            } else if (hour < 17) {
	                return 'ཉིན་གུང';
	            } else if (hour < 20) {
	                return 'དགོང་དག';
	            } else {
	                return 'མཚན་མོ';
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return bo;
	
	}));

/***/ },
/* 430 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : breton (br)
	//! author : Jean-Baptiste Le Duigou : https://github.com/jbleduigou
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    function relativeTimeWithMutation(number, withoutSuffix, key) {
	        var format = {
	            'mm': 'munutenn',
	            'MM': 'miz',
	            'dd': 'devezh'
	        };
	        return number + ' ' + mutation(format[key], number);
	    }
	    function specialMutationForYears(number) {
	        switch (lastNumber(number)) {
	        case 1:
	        case 3:
	        case 4:
	        case 5:
	        case 9:
	            return number + ' bloaz';
	        default:
	            return number + ' vloaz';
	        }
	    }
	    function lastNumber(number) {
	        if (number > 9) {
	            return lastNumber(number % 10);
	        }
	        return number;
	    }
	    function mutation(text, number) {
	        if (number === 2) {
	            return softMutation(text);
	        }
	        return text;
	    }
	    function softMutation(text) {
	        var mutationTable = {
	            'm': 'v',
	            'b': 'v',
	            'd': 'z'
	        };
	        if (mutationTable[text.charAt(0)] === undefined) {
	            return text;
	        }
	        return mutationTable[text.charAt(0)] + text.substring(1);
	    }
	
	    var br = moment.defineLocale('br', {
	        months : 'Genver_C\'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split('_'),
	        monthsShort : 'Gen_C\'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),
	        weekdays : 'Sul_Lun_Meurzh_Merc\'her_Yaou_Gwener_Sadorn'.split('_'),
	        weekdaysShort : 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),
	        weekdaysMin : 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'h[e]mm A',
	            LTS : 'h[e]mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D [a viz] MMMM YYYY',
	            LLL : 'D [a viz] MMMM YYYY h[e]mm A',
	            LLLL : 'dddd, D [a viz] MMMM YYYY h[e]mm A'
	        },
	        calendar : {
	            sameDay : '[Hiziv da] LT',
	            nextDay : '[Warc\'hoazh da] LT',
	            nextWeek : 'dddd [da] LT',
	            lastDay : '[Dec\'h da] LT',
	            lastWeek : 'dddd [paset da] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'a-benn %s',
	            past : '%s \'zo',
	            s : 'un nebeud segondennoù',
	            m : 'ur vunutenn',
	            mm : relativeTimeWithMutation,
	            h : 'un eur',
	            hh : '%d eur',
	            d : 'un devezh',
	            dd : relativeTimeWithMutation,
	            M : 'ur miz',
	            MM : relativeTimeWithMutation,
	            y : 'ur bloaz',
	            yy : specialMutationForYears
	        },
	        ordinalParse: /\d{1,2}(añ|vet)/,
	        ordinal : function (number) {
	            var output = (number === 1) ? 'añ' : 'vet';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return br;
	
	}));

/***/ },
/* 431 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : bosnian (bs)
	//! author : Nedim Cholich : https://github.com/frontyard
	//! based on (hr) translation by Bojan Marković
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    function translate(number, withoutSuffix, key) {
	        var result = number + ' ';
	        switch (key) {
	        case 'm':
	            return withoutSuffix ? 'jedna minuta' : 'jedne minute';
	        case 'mm':
	            if (number === 1) {
	                result += 'minuta';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'minute';
	            } else {
	                result += 'minuta';
	            }
	            return result;
	        case 'h':
	            return withoutSuffix ? 'jedan sat' : 'jednog sata';
	        case 'hh':
	            if (number === 1) {
	                result += 'sat';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'sata';
	            } else {
	                result += 'sati';
	            }
	            return result;
	        case 'dd':
	            if (number === 1) {
	                result += 'dan';
	            } else {
	                result += 'dana';
	            }
	            return result;
	        case 'MM':
	            if (number === 1) {
	                result += 'mjesec';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'mjeseca';
	            } else {
	                result += 'mjeseci';
	            }
	            return result;
	        case 'yy':
	            if (number === 1) {
	                result += 'godina';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'godine';
	            } else {
	                result += 'godina';
	            }
	            return result;
	        }
	    }
	
	    var bs = moment.defineLocale('bs', {
	        months : 'januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar'.split('_'),
	        monthsShort : 'jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.'.split('_'),
	        weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
	        weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	        weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD. MM. YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY H:mm',
	            LLLL : 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay  : '[danas u] LT',
	            nextDay  : '[sutra u] LT',
	            nextWeek : function () {
	                switch (this.day()) {
	                case 0:
	                    return '[u] [nedjelju] [u] LT';
	                case 3:
	                    return '[u] [srijedu] [u] LT';
	                case 6:
	                    return '[u] [subotu] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[u] dddd [u] LT';
	                }
	            },
	            lastDay  : '[jučer u] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                case 0:
	                case 3:
	                    return '[prošlu] dddd [u] LT';
	                case 6:
	                    return '[prošle] [subote] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[prošli] dddd [u] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past   : 'prije %s',
	            s      : 'par sekundi',
	            m      : translate,
	            mm     : translate,
	            h      : translate,
	            hh     : translate,
	            d      : 'dan',
	            dd     : translate,
	            M      : 'mjesec',
	            MM     : translate,
	            y      : 'godinu',
	            yy     : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return bs;
	
	}));

/***/ },
/* 432 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : catalan (ca)
	//! author : Juan G. Hurtado : https://github.com/juanghurtado
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var ca = moment.defineLocale('ca', {
	        months : 'gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split('_'),
	        monthsShort : 'gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.'.split('_'),
	        weekdays : 'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split('_'),
	        weekdaysShort : 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),
	        weekdaysMin : 'Dg_Dl_Dt_Dc_Dj_Dv_Ds'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY H:mm',
	            LLLL : 'dddd D MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay : function () {
	                return '[avui a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	            },
	            nextDay : function () {
	                return '[demà a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	            },
	            nextWeek : function () {
	                return 'dddd [a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	            },
	            lastDay : function () {
	                return '[ahir a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	            },
	            lastWeek : function () {
	                return '[el] dddd [passat a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'en %s',
	            past : 'fa %s',
	            s : 'uns segons',
	            m : 'un minut',
	            mm : '%d minuts',
	            h : 'una hora',
	            hh : '%d hores',
	            d : 'un dia',
	            dd : '%d dies',
	            M : 'un mes',
	            MM : '%d mesos',
	            y : 'un any',
	            yy : '%d anys'
	        },
	        ordinalParse: /\d{1,2}(r|n|t|è|a)/,
	        ordinal : function (number, period) {
	            var output = (number === 1) ? 'r' :
	                (number === 2) ? 'n' :
	                (number === 3) ? 'r' :
	                (number === 4) ? 't' : 'è';
	            if (period === 'w' || period === 'W') {
	                output = 'a';
	            }
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return ca;
	
	}));

/***/ },
/* 433 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : czech (cs)
	//! author : petrbela : https://github.com/petrbela
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var months = 'leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec'.split('_'),
	        monthsShort = 'led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro'.split('_');
	    function plural(n) {
	        return (n > 1) && (n < 5) && (~~(n / 10) !== 1);
	    }
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        switch (key) {
	        case 's':  // a few seconds / in a few seconds / a few seconds ago
	            return (withoutSuffix || isFuture) ? 'pár sekund' : 'pár sekundami';
	        case 'm':  // a minute / in a minute / a minute ago
	            return withoutSuffix ? 'minuta' : (isFuture ? 'minutu' : 'minutou');
	        case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'minuty' : 'minut');
	            } else {
	                return result + 'minutami';
	            }
	            break;
	        case 'h':  // an hour / in an hour / an hour ago
	            return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
	        case 'hh': // 9 hours / in 9 hours / 9 hours ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'hodiny' : 'hodin');
	            } else {
	                return result + 'hodinami';
	            }
	            break;
	        case 'd':  // a day / in a day / a day ago
	            return (withoutSuffix || isFuture) ? 'den' : 'dnem';
	        case 'dd': // 9 days / in 9 days / 9 days ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'dny' : 'dní');
	            } else {
	                return result + 'dny';
	            }
	            break;
	        case 'M':  // a month / in a month / a month ago
	            return (withoutSuffix || isFuture) ? 'měsíc' : 'měsícem';
	        case 'MM': // 9 months / in 9 months / 9 months ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'měsíce' : 'měsíců');
	            } else {
	                return result + 'měsíci';
	            }
	            break;
	        case 'y':  // a year / in a year / a year ago
	            return (withoutSuffix || isFuture) ? 'rok' : 'rokem';
	        case 'yy': // 9 years / in 9 years / 9 years ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'roky' : 'let');
	            } else {
	                return result + 'lety';
	            }
	            break;
	        }
	    }
	
	    var cs = moment.defineLocale('cs', {
	        months : months,
	        monthsShort : monthsShort,
	        monthsParse : (function (months, monthsShort) {
	            var i, _monthsParse = [];
	            for (i = 0; i < 12; i++) {
	                // use custom parser to solve problem with July (červenec)
	                _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
	            }
	            return _monthsParse;
	        }(months, monthsShort)),
	        shortMonthsParse : (function (monthsShort) {
	            var i, _shortMonthsParse = [];
	            for (i = 0; i < 12; i++) {
	                _shortMonthsParse[i] = new RegExp('^' + monthsShort[i] + '$', 'i');
	            }
	            return _shortMonthsParse;
	        }(monthsShort)),
	        longMonthsParse : (function (months) {
	            var i, _longMonthsParse = [];
	            for (i = 0; i < 12; i++) {
	                _longMonthsParse[i] = new RegExp('^' + months[i] + '$', 'i');
	            }
	            return _longMonthsParse;
	        }(months)),
	        weekdays : 'neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota'.split('_'),
	        weekdaysShort : 'ne_po_út_st_čt_pá_so'.split('_'),
	        weekdaysMin : 'ne_po_út_st_čt_pá_so'.split('_'),
	        longDateFormat : {
	            LT: 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY H:mm',
	            LLLL : 'dddd D. MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay: '[dnes v] LT',
	            nextDay: '[zítra v] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                case 0:
	                    return '[v neděli v] LT';
	                case 1:
	                case 2:
	                    return '[v] dddd [v] LT';
	                case 3:
	                    return '[ve středu v] LT';
	                case 4:
	                    return '[ve čtvrtek v] LT';
	                case 5:
	                    return '[v pátek v] LT';
	                case 6:
	                    return '[v sobotu v] LT';
	                }
	            },
	            lastDay: '[včera v] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                case 0:
	                    return '[minulou neděli v] LT';
	                case 1:
	                case 2:
	                    return '[minulé] dddd [v] LT';
	                case 3:
	                    return '[minulou středu v] LT';
	                case 4:
	                case 5:
	                    return '[minulý] dddd [v] LT';
	                case 6:
	                    return '[minulou sobotu v] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past : 'před %s',
	            s : translate,
	            m : translate,
	            mm : translate,
	            h : translate,
	            hh : translate,
	            d : translate,
	            dd : translate,
	            M : translate,
	            MM : translate,
	            y : translate,
	            yy : translate
	        },
	        ordinalParse : /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return cs;
	
	}));

/***/ },
/* 434 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : chuvash (cv)
	//! author : Anatoly Mironov : https://github.com/mirontoli
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var cv = moment.defineLocale('cv', {
	        months : 'кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав'.split('_'),
	        monthsShort : 'кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш'.split('_'),
	        weekdays : 'вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун'.split('_'),
	        weekdaysShort : 'выр_тун_ытл_юн_кӗҫ_эрн_шӑм'.split('_'),
	        weekdaysMin : 'вр_тн_ыт_юн_кҫ_эр_шм'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD-MM-YYYY',
	            LL : 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]',
	            LLL : 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm',
	            LLLL : 'dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm'
	        },
	        calendar : {
	            sameDay: '[Паян] LT [сехетре]',
	            nextDay: '[Ыран] LT [сехетре]',
	            lastDay: '[Ӗнер] LT [сехетре]',
	            nextWeek: '[Ҫитес] dddd LT [сехетре]',
	            lastWeek: '[Иртнӗ] dddd LT [сехетре]',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : function (output) {
	                var affix = /сехет$/i.exec(output) ? 'рен' : /ҫул$/i.exec(output) ? 'тан' : 'ран';
	                return output + affix;
	            },
	            past : '%s каялла',
	            s : 'пӗр-ик ҫеккунт',
	            m : 'пӗр минут',
	            mm : '%d минут',
	            h : 'пӗр сехет',
	            hh : '%d сехет',
	            d : 'пӗр кун',
	            dd : '%d кун',
	            M : 'пӗр уйӑх',
	            MM : '%d уйӑх',
	            y : 'пӗр ҫул',
	            yy : '%d ҫул'
	        },
	        ordinalParse: /\d{1,2}-мӗш/,
	        ordinal : '%d-мӗш',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return cv;
	
	}));

/***/ },
/* 435 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Welsh (cy)
	//! author : Robert Allen
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var cy = moment.defineLocale('cy', {
	        months: 'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split('_'),
	        monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split('_'),
	        weekdays: 'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split('_'),
	        weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),
	        weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),
	        // time formats are the same as en-gb
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[Heddiw am] LT',
	            nextDay: '[Yfory am] LT',
	            nextWeek: 'dddd [am] LT',
	            lastDay: '[Ddoe am] LT',
	            lastWeek: 'dddd [diwethaf am] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'mewn %s',
	            past: '%s yn ôl',
	            s: 'ychydig eiliadau',
	            m: 'munud',
	            mm: '%d munud',
	            h: 'awr',
	            hh: '%d awr',
	            d: 'diwrnod',
	            dd: '%d diwrnod',
	            M: 'mis',
	            MM: '%d mis',
	            y: 'blwyddyn',
	            yy: '%d flynedd'
	        },
	        ordinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
	        // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh
	        ordinal: function (number) {
	            var b = number,
	                output = '',
	                lookup = [
	                    '', 'af', 'il', 'ydd', 'ydd', 'ed', 'ed', 'ed', 'fed', 'fed', 'fed', // 1af to 10fed
	                    'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'fed' // 11eg to 20fed
	                ];
	            if (b > 20) {
	                if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
	                    output = 'fed'; // not 30ain, 70ain or 90ain
	                } else {
	                    output = 'ain';
	                }
	            } else if (b > 0) {
	                output = lookup[b];
	            }
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return cy;
	
	}));

/***/ },
/* 436 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : danish (da)
	//! author : Ulrik Nielsen : https://github.com/mrbase
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var da = moment.defineLocale('da', {
	        months : 'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
	        weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
	        weekdaysShort : 'søn_man_tir_ons_tor_fre_lør'.split('_'),
	        weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY HH:mm',
	            LLLL : 'dddd [d.] D. MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[I dag kl.] LT',
	            nextDay : '[I morgen kl.] LT',
	            nextWeek : 'dddd [kl.] LT',
	            lastDay : '[I går kl.] LT',
	            lastWeek : '[sidste] dddd [kl] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'om %s',
	            past : '%s siden',
	            s : 'få sekunder',
	            m : 'et minut',
	            mm : '%d minutter',
	            h : 'en time',
	            hh : '%d timer',
	            d : 'en dag',
	            dd : '%d dage',
	            M : 'en måned',
	            MM : '%d måneder',
	            y : 'et år',
	            yy : '%d år'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return da;
	
	}));

/***/ },
/* 437 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : german (de)
	//! author : lluchs : https://github.com/lluchs
	//! author: Menelion Elensúle: https://github.com/Oire
	//! author : Mikolaj Dadela : https://github.com/mik01aj
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            'm': ['eine Minute', 'einer Minute'],
	            'h': ['eine Stunde', 'einer Stunde'],
	            'd': ['ein Tag', 'einem Tag'],
	            'dd': [number + ' Tage', number + ' Tagen'],
	            'M': ['ein Monat', 'einem Monat'],
	            'MM': [number + ' Monate', number + ' Monaten'],
	            'y': ['ein Jahr', 'einem Jahr'],
	            'yy': [number + ' Jahre', number + ' Jahren']
	        };
	        return withoutSuffix ? format[key][0] : format[key][1];
	    }
	
	    var de = moment.defineLocale('de', {
	        months : 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	        monthsShort : 'Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
	        weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
	        weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
	        weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY HH:mm',
	            LLLL : 'dddd, D. MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[heute um] LT [Uhr]',
	            sameElse: 'L',
	            nextDay: '[morgen um] LT [Uhr]',
	            nextWeek: 'dddd [um] LT [Uhr]',
	            lastDay: '[gestern um] LT [Uhr]',
	            lastWeek: '[letzten] dddd [um] LT [Uhr]'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : 'vor %s',
	            s : 'ein paar Sekunden',
	            m : processRelativeTime,
	            mm : '%d Minuten',
	            h : processRelativeTime,
	            hh : '%d Stunden',
	            d : processRelativeTime,
	            dd : processRelativeTime,
	            M : processRelativeTime,
	            MM : processRelativeTime,
	            y : processRelativeTime,
	            yy : processRelativeTime
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return de;
	
	}));

/***/ },
/* 438 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : austrian german (de-at)
	//! author : lluchs : https://github.com/lluchs
	//! author: Menelion Elensúle: https://github.com/Oire
	//! author : Martin Groller : https://github.com/MadMG
	//! author : Mikolaj Dadela : https://github.com/mik01aj
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            'm': ['eine Minute', 'einer Minute'],
	            'h': ['eine Stunde', 'einer Stunde'],
	            'd': ['ein Tag', 'einem Tag'],
	            'dd': [number + ' Tage', number + ' Tagen'],
	            'M': ['ein Monat', 'einem Monat'],
	            'MM': [number + ' Monate', number + ' Monaten'],
	            'y': ['ein Jahr', 'einem Jahr'],
	            'yy': [number + ' Jahre', number + ' Jahren']
	        };
	        return withoutSuffix ? format[key][0] : format[key][1];
	    }
	
	    var de_at = moment.defineLocale('de-at', {
	        months : 'Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	        monthsShort : 'Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
	        weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
	        weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
	        weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY HH:mm',
	            LLLL : 'dddd, D. MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[heute um] LT [Uhr]',
	            sameElse: 'L',
	            nextDay: '[morgen um] LT [Uhr]',
	            nextWeek: 'dddd [um] LT [Uhr]',
	            lastDay: '[gestern um] LT [Uhr]',
	            lastWeek: '[letzten] dddd [um] LT [Uhr]'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : 'vor %s',
	            s : 'ein paar Sekunden',
	            m : processRelativeTime,
	            mm : '%d Minuten',
	            h : processRelativeTime,
	            hh : '%d Stunden',
	            d : processRelativeTime,
	            dd : processRelativeTime,
	            M : processRelativeTime,
	            MM : processRelativeTime,
	            y : processRelativeTime,
	            yy : processRelativeTime
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return de_at;
	
	}));

/***/ },
/* 439 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : dhivehi (dv)
	//! author : Jawish Hameed : https://github.com/jawish
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var months = [
	        'ޖެނުއަރީ',
	        'ފެބްރުއަރީ',
	        'މާރިޗު',
	        'އޭޕްރީލު',
	        'މޭ',
	        'ޖޫން',
	        'ޖުލައި',
	        'އޯގަސްޓު',
	        'ސެޕްޓެމްބަރު',
	        'އޮކްޓޯބަރު',
	        'ނޮވެމްބަރު',
	        'ޑިސެމްބަރު'
	    ], weekdays = [
	        'އާދިއްތަ',
	        'ހޯމަ',
	        'އަންގާރަ',
	        'ބުދަ',
	        'ބުރާސްފަތި',
	        'ހުކުރު',
	        'ހޮނިހިރު'
	    ];
	
	    var dv = moment.defineLocale('dv', {
	        months : months,
	        monthsShort : months,
	        weekdays : weekdays,
	        weekdaysShort : weekdays,
	        weekdaysMin : 'އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި'.split('_'),
	        longDateFormat : {
	
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'D/M/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /މކ|މފ/,
	        isPM : function (input) {
	            return 'މފ' === input;
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'މކ';
	            } else {
	                return 'މފ';
	            }
	        },
	        calendar : {
	            sameDay : '[މިއަދު] LT',
	            nextDay : '[މާދަމާ] LT',
	            nextWeek : 'dddd LT',
	            lastDay : '[އިއްޔެ] LT',
	            lastWeek : '[ފާއިތުވި] dddd LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'ތެރޭގައި %s',
	            past : 'ކުރިން %s',
	            s : 'ސިކުންތުކޮޅެއް',
	            m : 'މިނިޓެއް',
	            mm : 'މިނިޓު %d',
	            h : 'ގަޑިއިރެއް',
	            hh : 'ގަޑިއިރު %d',
	            d : 'ދުވަހެއް',
	            dd : 'ދުވަސް %d',
	            M : 'މަހެއް',
	            MM : 'މަސް %d',
	            y : 'އަހަރެއް',
	            yy : 'އަހަރު %d'
	        },
	        preparse: function (string) {
	            return string.replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/,/g, '،');
	        },
	        week : {
	            dow : 7,  // Sunday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return dv;
	
	}));

/***/ },
/* 440 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : modern greek (el)
	//! author : Aggelos Karalias : https://github.com/mehiel
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	    function isFunction(input) {
	        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
	    }
	
	
	    var el = moment.defineLocale('el', {
	        monthsNominativeEl : 'Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος'.split('_'),
	        monthsGenitiveEl : 'Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου'.split('_'),
	        months : function (momentToFormat, format) {
	            if (/D/.test(format.substring(0, format.indexOf('MMMM')))) { // if there is a day number before 'MMMM'
	                return this._monthsGenitiveEl[momentToFormat.month()];
	            } else {
	                return this._monthsNominativeEl[momentToFormat.month()];
	            }
	        },
	        monthsShort : 'Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ'.split('_'),
	        weekdays : 'Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο'.split('_'),
	        weekdaysShort : 'Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ'.split('_'),
	        weekdaysMin : 'Κυ_Δε_Τρ_Τε_Πε_Πα_Σα'.split('_'),
	        meridiem : function (hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? 'μμ' : 'ΜΜ';
	            } else {
	                return isLower ? 'πμ' : 'ΠΜ';
	            }
	        },
	        isPM : function (input) {
	            return ((input + '').toLowerCase()[0] === 'μ');
	        },
	        meridiemParse : /[ΠΜ]\.?Μ?\.?/i,
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY h:mm A',
	            LLLL : 'dddd, D MMMM YYYY h:mm A'
	        },
	        calendarEl : {
	            sameDay : '[Σήμερα {}] LT',
	            nextDay : '[Αύριο {}] LT',
	            nextWeek : 'dddd [{}] LT',
	            lastDay : '[Χθες {}] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                    case 6:
	                        return '[το προηγούμενο] dddd [{}] LT';
	                    default:
	                        return '[την προηγούμενη] dddd [{}] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        calendar : function (key, mom) {
	            var output = this._calendarEl[key],
	                hours = mom && mom.hours();
	            if (isFunction(output)) {
	                output = output.apply(mom);
	            }
	            return output.replace('{}', (hours % 12 === 1 ? 'στη' : 'στις'));
	        },
	        relativeTime : {
	            future : 'σε %s',
	            past : '%s πριν',
	            s : 'λίγα δευτερόλεπτα',
	            m : 'ένα λεπτό',
	            mm : '%d λεπτά',
	            h : 'μία ώρα',
	            hh : '%d ώρες',
	            d : 'μία μέρα',
	            dd : '%d μέρες',
	            M : 'ένας μήνας',
	            MM : '%d μήνες',
	            y : 'ένας χρόνος',
	            yy : '%d χρόνια'
	        },
	        ordinalParse: /\d{1,2}η/,
	        ordinal: '%dη',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4st is the first week of the year.
	        }
	    });
	
	    return el;
	
	}));

/***/ },
/* 441 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : australian english (en-au)
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var en_au = moment.defineLocale('en-au', {
	        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY h:mm A',
	            LLLL : 'dddd, D MMMM YYYY h:mm A'
	        },
	        calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : '%s ago',
	            s : 'a few seconds',
	            m : 'a minute',
	            mm : '%d minutes',
	            h : 'an hour',
	            hh : '%d hours',
	            d : 'a day',
	            dd : '%d days',
	            M : 'a month',
	            MM : '%d months',
	            y : 'a year',
	            yy : '%d years'
	        },
	        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return en_au;
	
	}));

/***/ },
/* 442 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : canadian english (en-ca)
	//! author : Jonathan Abourbih : https://github.com/jonbca
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var en_ca = moment.defineLocale('en-ca', {
	        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'YYYY-MM-DD',
	            LL : 'MMMM D, YYYY',
	            LLL : 'MMMM D, YYYY h:mm A',
	            LLLL : 'dddd, MMMM D, YYYY h:mm A'
	        },
	        calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : '%s ago',
	            s : 'a few seconds',
	            m : 'a minute',
	            mm : '%d minutes',
	            h : 'an hour',
	            hh : '%d hours',
	            d : 'a day',
	            dd : '%d days',
	            M : 'a month',
	            MM : '%d months',
	            y : 'a year',
	            yy : '%d years'
	        },
	        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        }
	    });
	
	    return en_ca;
	
	}));

/***/ },
/* 443 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : great britain english (en-gb)
	//! author : Chris Gedrim : https://github.com/chrisgedrim
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var en_gb = moment.defineLocale('en-gb', {
	        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : '%s ago',
	            s : 'a few seconds',
	            m : 'a minute',
	            mm : '%d minutes',
	            h : 'an hour',
	            hh : '%d hours',
	            d : 'a day',
	            dd : '%d days',
	            M : 'a month',
	            MM : '%d months',
	            y : 'a year',
	            yy : '%d years'
	        },
	        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return en_gb;
	
	}));

/***/ },
/* 444 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Irish english (en-ie)
	//! author : Chris Cartlidge : https://github.com/chriscartlidge
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var en_ie = moment.defineLocale('en-ie', {
	        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD-MM-YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : '%s ago',
	            s : 'a few seconds',
	            m : 'a minute',
	            mm : '%d minutes',
	            h : 'an hour',
	            hh : '%d hours',
	            d : 'a day',
	            dd : '%d days',
	            M : 'a month',
	            MM : '%d months',
	            y : 'a year',
	            yy : '%d years'
	        },
	        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return en_ie;
	
	}));

/***/ },
/* 445 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : New Zealand english (en-nz)
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var en_nz = moment.defineLocale('en-nz', {
	        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY h:mm A',
	            LLLL : 'dddd, D MMMM YYYY h:mm A'
	        },
	        calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : '%s ago',
	            s : 'a few seconds',
	            m : 'a minute',
	            mm : '%d minutes',
	            h : 'an hour',
	            hh : '%d hours',
	            d : 'a day',
	            dd : '%d days',
	            M : 'a month',
	            MM : '%d months',
	            y : 'a year',
	            yy : '%d years'
	        },
	        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return en_nz;
	
	}));

/***/ },
/* 446 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : esperanto (eo)
	//! author : Colin Dean : https://github.com/colindean
	//! komento: Mi estas malcerta se mi korekte traktis akuzativojn en tiu traduko.
	//!          Se ne, bonvolu korekti kaj avizi min por ke mi povas lerni!
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var eo = moment.defineLocale('eo', {
	        months : 'januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec'.split('_'),
	        weekdays : 'Dimanĉo_Lundo_Mardo_Merkredo_Ĵaŭdo_Vendredo_Sabato'.split('_'),
	        weekdaysShort : 'Dim_Lun_Mard_Merk_Ĵaŭ_Ven_Sab'.split('_'),
	        weekdaysMin : 'Di_Lu_Ma_Me_Ĵa_Ve_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'YYYY-MM-DD',
	            LL : 'D[-an de] MMMM, YYYY',
	            LLL : 'D[-an de] MMMM, YYYY HH:mm',
	            LLLL : 'dddd, [la] D[-an de] MMMM, YYYY HH:mm'
	        },
	        meridiemParse: /[ap]\.t\.m/i,
	        isPM: function (input) {
	            return input.charAt(0).toLowerCase() === 'p';
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? 'p.t.m.' : 'P.T.M.';
	            } else {
	                return isLower ? 'a.t.m.' : 'A.T.M.';
	            }
	        },
	        calendar : {
	            sameDay : '[Hodiaŭ je] LT',
	            nextDay : '[Morgaŭ je] LT',
	            nextWeek : 'dddd [je] LT',
	            lastDay : '[Hieraŭ je] LT',
	            lastWeek : '[pasinta] dddd [je] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'je %s',
	            past : 'antaŭ %s',
	            s : 'sekundoj',
	            m : 'minuto',
	            mm : '%d minutoj',
	            h : 'horo',
	            hh : '%d horoj',
	            d : 'tago',//ne 'diurno', ĉar estas uzita por proksimumo
	            dd : '%d tagoj',
	            M : 'monato',
	            MM : '%d monatoj',
	            y : 'jaro',
	            yy : '%d jaroj'
	        },
	        ordinalParse: /\d{1,2}a/,
	        ordinal : '%da',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return eo;
	
	}));

/***/ },
/* 447 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : spanish (es)
	//! author : Julio Napurí : https://github.com/julionc
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_'),
	        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');
	
	    var es = moment.defineLocale('es', {
	        months : 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
	        monthsShort : function (m, format) {
	            if (/-MMM-/.test(format)) {
	                return monthsShort[m.month()];
	            } else {
	                return monthsShortDot[m.month()];
	            }
	        },
	        weekdays : 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
	        weekdaysShort : 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
	        weekdaysMin : 'do_lu_ma_mi_ju_vi_sá'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D [de] MMMM [de] YYYY',
	            LLL : 'D [de] MMMM [de] YYYY H:mm',
	            LLLL : 'dddd, D [de] MMMM [de] YYYY H:mm'
	        },
	        calendar : {
	            sameDay : function () {
	                return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            nextDay : function () {
	                return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            nextWeek : function () {
	                return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            lastDay : function () {
	                return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            lastWeek : function () {
	                return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'en %s',
	            past : 'hace %s',
	            s : 'unos segundos',
	            m : 'un minuto',
	            mm : '%d minutos',
	            h : 'una hora',
	            hh : '%d horas',
	            d : 'un día',
	            dd : '%d días',
	            M : 'un mes',
	            MM : '%d meses',
	            y : 'un año',
	            yy : '%d años'
	        },
	        ordinalParse : /\d{1,2}º/,
	        ordinal : '%dº',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return es;
	
	}));

/***/ },
/* 448 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : estonian (et)
	//! author : Henry Kehlmann : https://github.com/madhenry
	//! improvements : Illimar Tambek : https://github.com/ragulka
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            's' : ['mõne sekundi', 'mõni sekund', 'paar sekundit'],
	            'm' : ['ühe minuti', 'üks minut'],
	            'mm': [number + ' minuti', number + ' minutit'],
	            'h' : ['ühe tunni', 'tund aega', 'üks tund'],
	            'hh': [number + ' tunni', number + ' tundi'],
	            'd' : ['ühe päeva', 'üks päev'],
	            'M' : ['kuu aja', 'kuu aega', 'üks kuu'],
	            'MM': [number + ' kuu', number + ' kuud'],
	            'y' : ['ühe aasta', 'aasta', 'üks aasta'],
	            'yy': [number + ' aasta', number + ' aastat']
	        };
	        if (withoutSuffix) {
	            return format[key][2] ? format[key][2] : format[key][1];
	        }
	        return isFuture ? format[key][0] : format[key][1];
	    }
	
	    var et = moment.defineLocale('et', {
	        months        : 'jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split('_'),
	        monthsShort   : 'jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split('_'),
	        weekdays      : 'pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev'.split('_'),
	        weekdaysShort : 'P_E_T_K_N_R_L'.split('_'),
	        weekdaysMin   : 'P_E_T_K_N_R_L'.split('_'),
	        longDateFormat : {
	            LT   : 'H:mm',
	            LTS : 'H:mm:ss',
	            L    : 'DD.MM.YYYY',
	            LL   : 'D. MMMM YYYY',
	            LLL  : 'D. MMMM YYYY H:mm',
	            LLLL : 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay  : '[Täna,] LT',
	            nextDay  : '[Homme,] LT',
	            nextWeek : '[Järgmine] dddd LT',
	            lastDay  : '[Eile,] LT',
	            lastWeek : '[Eelmine] dddd LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s pärast',
	            past   : '%s tagasi',
	            s      : processRelativeTime,
	            m      : processRelativeTime,
	            mm     : processRelativeTime,
	            h      : processRelativeTime,
	            hh     : processRelativeTime,
	            d      : processRelativeTime,
	            dd     : '%d päeva',
	            M      : processRelativeTime,
	            MM     : processRelativeTime,
	            y      : processRelativeTime,
	            yy     : processRelativeTime
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return et;
	
	}));

/***/ },
/* 449 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : euskara (eu)
	//! author : Eneko Illarramendi : https://github.com/eillarra
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var eu = moment.defineLocale('eu', {
	        months : 'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split('_'),
	        monthsShort : 'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split('_'),
	        weekdays : 'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split('_'),
	        weekdaysShort : 'ig._al._ar._az._og._ol._lr.'.split('_'),
	        weekdaysMin : 'ig_al_ar_az_og_ol_lr'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'YYYY-MM-DD',
	            LL : 'YYYY[ko] MMMM[ren] D[a]',
	            LLL : 'YYYY[ko] MMMM[ren] D[a] HH:mm',
	            LLLL : 'dddd, YYYY[ko] MMMM[ren] D[a] HH:mm',
	            l : 'YYYY-M-D',
	            ll : 'YYYY[ko] MMM D[a]',
	            lll : 'YYYY[ko] MMM D[a] HH:mm',
	            llll : 'ddd, YYYY[ko] MMM D[a] HH:mm'
	        },
	        calendar : {
	            sameDay : '[gaur] LT[etan]',
	            nextDay : '[bihar] LT[etan]',
	            nextWeek : 'dddd LT[etan]',
	            lastDay : '[atzo] LT[etan]',
	            lastWeek : '[aurreko] dddd LT[etan]',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s barru',
	            past : 'duela %s',
	            s : 'segundo batzuk',
	            m : 'minutu bat',
	            mm : '%d minutu',
	            h : 'ordu bat',
	            hh : '%d ordu',
	            d : 'egun bat',
	            dd : '%d egun',
	            M : 'hilabete bat',
	            MM : '%d hilabete',
	            y : 'urte bat',
	            yy : '%d urte'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return eu;
	
	}));

/***/ },
/* 450 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Persian (fa)
	//! author : Ebrahim Byagowi : https://github.com/ebraminio
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var symbolMap = {
	        '1': '۱',
	        '2': '۲',
	        '3': '۳',
	        '4': '۴',
	        '5': '۵',
	        '6': '۶',
	        '7': '۷',
	        '8': '۸',
	        '9': '۹',
	        '0': '۰'
	    }, numberMap = {
	        '۱': '1',
	        '۲': '2',
	        '۳': '3',
	        '۴': '4',
	        '۵': '5',
	        '۶': '6',
	        '۷': '7',
	        '۸': '8',
	        '۹': '9',
	        '۰': '0'
	    };
	
	    var fa = moment.defineLocale('fa', {
	        months : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
	        monthsShort : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
	        weekdays : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
	        weekdaysShort : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
	        weekdaysMin : 'ی_د_س_چ_پ_ج_ش'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /قبل از ظهر|بعد از ظهر/,
	        isPM: function (input) {
	            return /بعد از ظهر/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'قبل از ظهر';
	            } else {
	                return 'بعد از ظهر';
	            }
	        },
	        calendar : {
	            sameDay : '[امروز ساعت] LT',
	            nextDay : '[فردا ساعت] LT',
	            nextWeek : 'dddd [ساعت] LT',
	            lastDay : '[دیروز ساعت] LT',
	            lastWeek : 'dddd [پیش] [ساعت] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'در %s',
	            past : '%s پیش',
	            s : 'چندین ثانیه',
	            m : 'یک دقیقه',
	            mm : '%d دقیقه',
	            h : 'یک ساعت',
	            hh : '%d ساعت',
	            d : 'یک روز',
	            dd : '%d روز',
	            M : 'یک ماه',
	            MM : '%d ماه',
	            y : 'یک سال',
	            yy : '%d سال'
	        },
	        preparse: function (string) {
	            return string.replace(/[۰-۹]/g, function (match) {
	                return numberMap[match];
	            }).replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            }).replace(/,/g, '،');
	        },
	        ordinalParse: /\d{1,2}م/,
	        ordinal : '%dم',
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return fa;
	
	}));

/***/ },
/* 451 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : finnish (fi)
	//! author : Tarmo Aidantausta : https://github.com/bleadof
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var numbersPast = 'nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(' '),
	        numbersFuture = [
	            'nolla', 'yhden', 'kahden', 'kolmen', 'neljän', 'viiden', 'kuuden',
	            numbersPast[7], numbersPast[8], numbersPast[9]
	        ];
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = '';
	        switch (key) {
	        case 's':
	            return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';
	        case 'm':
	            return isFuture ? 'minuutin' : 'minuutti';
	        case 'mm':
	            result = isFuture ? 'minuutin' : 'minuuttia';
	            break;
	        case 'h':
	            return isFuture ? 'tunnin' : 'tunti';
	        case 'hh':
	            result = isFuture ? 'tunnin' : 'tuntia';
	            break;
	        case 'd':
	            return isFuture ? 'päivän' : 'päivä';
	        case 'dd':
	            result = isFuture ? 'päivän' : 'päivää';
	            break;
	        case 'M':
	            return isFuture ? 'kuukauden' : 'kuukausi';
	        case 'MM':
	            result = isFuture ? 'kuukauden' : 'kuukautta';
	            break;
	        case 'y':
	            return isFuture ? 'vuoden' : 'vuosi';
	        case 'yy':
	            result = isFuture ? 'vuoden' : 'vuotta';
	            break;
	        }
	        result = verbalNumber(number, isFuture) + ' ' + result;
	        return result;
	    }
	    function verbalNumber(number, isFuture) {
	        return number < 10 ? (isFuture ? numbersFuture[number] : numbersPast[number]) : number;
	    }
	
	    var fi = moment.defineLocale('fi', {
	        months : 'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split('_'),
	        monthsShort : 'tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu'.split('_'),
	        weekdays : 'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split('_'),
	        weekdaysShort : 'su_ma_ti_ke_to_pe_la'.split('_'),
	        weekdaysMin : 'su_ma_ti_ke_to_pe_la'.split('_'),
	        longDateFormat : {
	            LT : 'HH.mm',
	            LTS : 'HH.mm.ss',
	            L : 'DD.MM.YYYY',
	            LL : 'Do MMMM[ta] YYYY',
	            LLL : 'Do MMMM[ta] YYYY, [klo] HH.mm',
	            LLLL : 'dddd, Do MMMM[ta] YYYY, [klo] HH.mm',
	            l : 'D.M.YYYY',
	            ll : 'Do MMM YYYY',
	            lll : 'Do MMM YYYY, [klo] HH.mm',
	            llll : 'ddd, Do MMM YYYY, [klo] HH.mm'
	        },
	        calendar : {
	            sameDay : '[tänään] [klo] LT',
	            nextDay : '[huomenna] [klo] LT',
	            nextWeek : 'dddd [klo] LT',
	            lastDay : '[eilen] [klo] LT',
	            lastWeek : '[viime] dddd[na] [klo] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s päästä',
	            past : '%s sitten',
	            s : translate,
	            m : translate,
	            mm : translate,
	            h : translate,
	            hh : translate,
	            d : translate,
	            dd : translate,
	            M : translate,
	            MM : translate,
	            y : translate,
	            yy : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return fi;
	
	}));

/***/ },
/* 452 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : faroese (fo)
	//! author : Ragnar Johannesen : https://github.com/ragnar123
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var fo = moment.defineLocale('fo', {
	        months : 'januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
	        weekdays : 'sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur'.split('_'),
	        weekdaysShort : 'sun_mán_týs_mik_hós_frí_ley'.split('_'),
	        weekdaysMin : 'su_má_tý_mi_hó_fr_le'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D. MMMM, YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Í dag kl.] LT',
	            nextDay : '[Í morgin kl.] LT',
	            nextWeek : 'dddd [kl.] LT',
	            lastDay : '[Í gjár kl.] LT',
	            lastWeek : '[síðstu] dddd [kl] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'um %s',
	            past : '%s síðani',
	            s : 'fá sekund',
	            m : 'ein minutt',
	            mm : '%d minuttir',
	            h : 'ein tími',
	            hh : '%d tímar',
	            d : 'ein dagur',
	            dd : '%d dagar',
	            M : 'ein mánaði',
	            MM : '%d mánaðir',
	            y : 'eitt ár',
	            yy : '%d ár'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return fo;
	
	}));

/***/ },
/* 453 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : french (fr)
	//! author : John Fischer : https://github.com/jfroffice
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var fr = moment.defineLocale('fr', {
	        months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
	        monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
	        weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	        weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	        weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Aujourd\'hui à] LT',
	            nextDay: '[Demain à] LT',
	            nextWeek: 'dddd [à] LT',
	            lastDay: '[Hier à] LT',
	            lastWeek: 'dddd [dernier à] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'dans %s',
	            past : 'il y a %s',
	            s : 'quelques secondes',
	            m : 'une minute',
	            mm : '%d minutes',
	            h : 'une heure',
	            hh : '%d heures',
	            d : 'un jour',
	            dd : '%d jours',
	            M : 'un mois',
	            MM : '%d mois',
	            y : 'un an',
	            yy : '%d ans'
	        },
	        ordinalParse: /\d{1,2}(er|)/,
	        ordinal : function (number) {
	            return number + (number === 1 ? 'er' : '');
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return fr;
	
	}));

/***/ },
/* 454 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : canadian french (fr-ca)
	//! author : Jonathan Abourbih : https://github.com/jonbca
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var fr_ca = moment.defineLocale('fr-ca', {
	        months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
	        monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
	        weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	        weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	        weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'YYYY-MM-DD',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Aujourd\'hui à] LT',
	            nextDay: '[Demain à] LT',
	            nextWeek: 'dddd [à] LT',
	            lastDay: '[Hier à] LT',
	            lastWeek: 'dddd [dernier à] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'dans %s',
	            past : 'il y a %s',
	            s : 'quelques secondes',
	            m : 'une minute',
	            mm : '%d minutes',
	            h : 'une heure',
	            hh : '%d heures',
	            d : 'un jour',
	            dd : '%d jours',
	            M : 'un mois',
	            MM : '%d mois',
	            y : 'un an',
	            yy : '%d ans'
	        },
	        ordinalParse: /\d{1,2}(er|e)/,
	        ordinal : function (number) {
	            return number + (number === 1 ? 'er' : 'e');
	        }
	    });
	
	    return fr_ca;
	
	}));

/***/ },
/* 455 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : swiss french (fr)
	//! author : Gaspard Bucher : https://github.com/gaspard
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var fr_ch = moment.defineLocale('fr-ch', {
	        months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
	        monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
	        weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	        weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	        weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Aujourd\'hui à] LT',
	            nextDay: '[Demain à] LT',
	            nextWeek: 'dddd [à] LT',
	            lastDay: '[Hier à] LT',
	            lastWeek: 'dddd [dernier à] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'dans %s',
	            past : 'il y a %s',
	            s : 'quelques secondes',
	            m : 'une minute',
	            mm : '%d minutes',
	            h : 'une heure',
	            hh : '%d heures',
	            d : 'un jour',
	            dd : '%d jours',
	            M : 'un mois',
	            MM : '%d mois',
	            y : 'un an',
	            yy : '%d ans'
	        },
	        ordinalParse: /\d{1,2}(er|e)/,
	        ordinal : function (number) {
	            return number + (number === 1 ? 'er' : 'e');
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return fr_ch;
	
	}));

/***/ },
/* 456 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : frisian (fy)
	//! author : Robin van der Vliet : https://github.com/robin0van0der0v
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var monthsShortWithDots = 'jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.'.split('_'),
	        monthsShortWithoutDots = 'jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_');
	
	    var fy = moment.defineLocale('fy', {
	        months : 'jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber'.split('_'),
	        monthsShort : function (m, format) {
	            if (/-MMM-/.test(format)) {
	                return monthsShortWithoutDots[m.month()];
	            } else {
	                return monthsShortWithDots[m.month()];
	            }
	        },
	        weekdays : 'snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon'.split('_'),
	        weekdaysShort : 'si._mo._ti._wo._to._fr._so.'.split('_'),
	        weekdaysMin : 'Si_Mo_Ti_Wo_To_Fr_So'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD-MM-YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[hjoed om] LT',
	            nextDay: '[moarn om] LT',
	            nextWeek: 'dddd [om] LT',
	            lastDay: '[juster om] LT',
	            lastWeek: '[ôfrûne] dddd [om] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'oer %s',
	            past : '%s lyn',
	            s : 'in pear sekonden',
	            m : 'ien minút',
	            mm : '%d minuten',
	            h : 'ien oere',
	            hh : '%d oeren',
	            d : 'ien dei',
	            dd : '%d dagen',
	            M : 'ien moanne',
	            MM : '%d moannen',
	            y : 'ien jier',
	            yy : '%d jierren'
	        },
	        ordinalParse: /\d{1,2}(ste|de)/,
	        ordinal : function (number) {
	            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return fy;
	
	}));

/***/ },
/* 457 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : great britain scottish gealic (gd)
	//! author : Jon Ashdown : https://github.com/jonashdown
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var months = [
	        'Am Faoilleach', 'An Gearran', 'Am Màrt', 'An Giblean', 'An Cèitean', 'An t-Ògmhios', 'An t-Iuchar', 'An Lùnastal', 'An t-Sultain', 'An Dàmhair', 'An t-Samhain', 'An Dùbhlachd'
	    ];
	
	    var monthsShort = ['Faoi', 'Gear', 'Màrt', 'Gibl', 'Cèit', 'Ògmh', 'Iuch', 'Lùn', 'Sult', 'Dàmh', 'Samh', 'Dùbh'];
	
	    var weekdays = ['Didòmhnaich', 'Diluain', 'Dimàirt', 'Diciadain', 'Diardaoin', 'Dihaoine', 'Disathairne'];
	
	    var weekdaysShort = ['Did', 'Dil', 'Dim', 'Dic', 'Dia', 'Dih', 'Dis'];
	
	    var weekdaysMin = ['Dò', 'Lu', 'Mà', 'Ci', 'Ar', 'Ha', 'Sa'];
	
	    var gd = moment.defineLocale('gd', {
	        months : months,
	        monthsShort : monthsShort,
	        monthsParseExact : true,
	        weekdays : weekdays,
	        weekdaysShort : weekdaysShort,
	        weekdaysMin : weekdaysMin,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[An-diugh aig] LT',
	            nextDay : '[A-màireach aig] LT',
	            nextWeek : 'dddd [aig] LT',
	            lastDay : '[An-dè aig] LT',
	            lastWeek : 'dddd [seo chaidh] [aig] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'ann an %s',
	            past : 'bho chionn %s',
	            s : 'beagan diogan',
	            m : 'mionaid',
	            mm : '%d mionaidean',
	            h : 'uair',
	            hh : '%d uairean',
	            d : 'latha',
	            dd : '%d latha',
	            M : 'mìos',
	            MM : '%d mìosan',
	            y : 'bliadhna',
	            yy : '%d bliadhna'
	        },
	        ordinalParse : /\d{1,2}(d|na|mh)/,
	        ordinal : function (number) {
	            var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return gd;
	
	}));

/***/ },
/* 458 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : galician (gl)
	//! author : Juan G. Hurtado : https://github.com/juanghurtado
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var gl = moment.defineLocale('gl', {
	        months : 'Xaneiro_Febreiro_Marzo_Abril_Maio_Xuño_Xullo_Agosto_Setembro_Outubro_Novembro_Decembro'.split('_'),
	        monthsShort : 'Xan._Feb._Mar._Abr._Mai._Xuñ._Xul._Ago._Set._Out._Nov._Dec.'.split('_'),
	        weekdays : 'Domingo_Luns_Martes_Mércores_Xoves_Venres_Sábado'.split('_'),
	        weekdaysShort : 'Dom._Lun._Mar._Mér._Xov._Ven._Sáb.'.split('_'),
	        weekdaysMin : 'Do_Lu_Ma_Mé_Xo_Ve_Sá'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY H:mm',
	            LLLL : 'dddd D MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay : function () {
	                return '[hoxe ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
	            },
	            nextDay : function () {
	                return '[mañá ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
	            },
	            nextWeek : function () {
	                return 'dddd [' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
	            },
	            lastDay : function () {
	                return '[onte ' + ((this.hours() !== 1) ? 'á' : 'a') + '] LT';
	            },
	            lastWeek : function () {
	                return '[o] dddd [pasado ' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : function (str) {
	                if (str === 'uns segundos') {
	                    return 'nuns segundos';
	                }
	                return 'en ' + str;
	            },
	            past : 'hai %s',
	            s : 'uns segundos',
	            m : 'un minuto',
	            mm : '%d minutos',
	            h : 'unha hora',
	            hh : '%d horas',
	            d : 'un día',
	            dd : '%d días',
	            M : 'un mes',
	            MM : '%d meses',
	            y : 'un ano',
	            yy : '%d anos'
	        },
	        ordinalParse : /\d{1,2}º/,
	        ordinal : '%dº',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return gl;
	
	}));

/***/ },
/* 459 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Hebrew (he)
	//! author : Tomer Cohen : https://github.com/tomer
	//! author : Moshe Simantov : https://github.com/DevelopmentIL
	//! author : Tal Ater : https://github.com/TalAter
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var he = moment.defineLocale('he', {
	        months : 'ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר'.split('_'),
	        monthsShort : 'ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳'.split('_'),
	        weekdays : 'ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת'.split('_'),
	        weekdaysShort : 'א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳'.split('_'),
	        weekdaysMin : 'א_ב_ג_ד_ה_ו_ש'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D [ב]MMMM YYYY',
	            LLL : 'D [ב]MMMM YYYY HH:mm',
	            LLLL : 'dddd, D [ב]MMMM YYYY HH:mm',
	            l : 'D/M/YYYY',
	            ll : 'D MMM YYYY',
	            lll : 'D MMM YYYY HH:mm',
	            llll : 'ddd, D MMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[היום ב־]LT',
	            nextDay : '[מחר ב־]LT',
	            nextWeek : 'dddd [בשעה] LT',
	            lastDay : '[אתמול ב־]LT',
	            lastWeek : '[ביום] dddd [האחרון בשעה] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'בעוד %s',
	            past : 'לפני %s',
	            s : 'מספר שניות',
	            m : 'דקה',
	            mm : '%d דקות',
	            h : 'שעה',
	            hh : function (number) {
	                if (number === 2) {
	                    return 'שעתיים';
	                }
	                return number + ' שעות';
	            },
	            d : 'יום',
	            dd : function (number) {
	                if (number === 2) {
	                    return 'יומיים';
	                }
	                return number + ' ימים';
	            },
	            M : 'חודש',
	            MM : function (number) {
	                if (number === 2) {
	                    return 'חודשיים';
	                }
	                return number + ' חודשים';
	            },
	            y : 'שנה',
	            yy : function (number) {
	                if (number === 2) {
	                    return 'שנתיים';
	                } else if (number % 10 === 0 && number !== 10) {
	                    return number + ' שנה';
	                }
	                return number + ' שנים';
	            }
	        },
	        meridiemParse: /אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,
	        isPM : function (input) {
	            return /^(אחה"צ|אחרי הצהריים|בערב)$/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 5) {
	                return 'לפנות בוקר';
	            } else if (hour < 10) {
	                return 'בבוקר';
	            } else if (hour < 12) {
	                return isLower ? 'לפנה"צ' : 'לפני הצהריים';
	            } else if (hour < 18) {
	                return isLower ? 'אחה"צ' : 'אחרי הצהריים';
	            } else {
	                return 'בערב';
	            }
	        }
	    });
	
	    return he;
	
	}));

/***/ },
/* 460 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : hindi (hi)
	//! author : Mayank Singhal : https://github.com/mayanksinghal
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var symbolMap = {
	        '1': '१',
	        '2': '२',
	        '3': '३',
	        '4': '४',
	        '5': '५',
	        '6': '६',
	        '7': '७',
	        '8': '८',
	        '9': '९',
	        '0': '०'
	    },
	    numberMap = {
	        '१': '1',
	        '२': '2',
	        '३': '3',
	        '४': '4',
	        '५': '5',
	        '६': '6',
	        '७': '7',
	        '८': '8',
	        '९': '9',
	        '०': '0'
	    };
	
	    var hi = moment.defineLocale('hi', {
	        months : 'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split('_'),
	        monthsShort : 'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split('_'),
	        weekdays : 'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
	        weekdaysShort : 'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split('_'),
	        weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm बजे',
	            LTS : 'A h:mm:ss बजे',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, A h:mm बजे',
	            LLLL : 'dddd, D MMMM YYYY, A h:mm बजे'
	        },
	        calendar : {
	            sameDay : '[आज] LT',
	            nextDay : '[कल] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[कल] LT',
	            lastWeek : '[पिछले] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s में',
	            past : '%s पहले',
	            s : 'कुछ ही क्षण',
	            m : 'एक मिनट',
	            mm : '%d मिनट',
	            h : 'एक घंटा',
	            hh : '%d घंटे',
	            d : 'एक दिन',
	            dd : '%d दिन',
	            M : 'एक महीने',
	            MM : '%d महीने',
	            y : 'एक वर्ष',
	            yy : '%d वर्ष'
	        },
	        preparse: function (string) {
	            return string.replace(/[१२३४५६७८९०]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        // Hindi notation for meridiems are quite fuzzy in practice. While there exists
	        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
	        meridiemParse: /रात|सुबह|दोपहर|शाम/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'रात') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'सुबह') {
	                return hour;
	            } else if (meridiem === 'दोपहर') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'शाम') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'रात';
	            } else if (hour < 10) {
	                return 'सुबह';
	            } else if (hour < 17) {
	                return 'दोपहर';
	            } else if (hour < 20) {
	                return 'शाम';
	            } else {
	                return 'रात';
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return hi;
	
	}));

/***/ },
/* 461 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : hrvatski (hr)
	//! author : Bojan Marković : https://github.com/bmarkovic
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    function translate(number, withoutSuffix, key) {
	        var result = number + ' ';
	        switch (key) {
	        case 'm':
	            return withoutSuffix ? 'jedna minuta' : 'jedne minute';
	        case 'mm':
	            if (number === 1) {
	                result += 'minuta';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'minute';
	            } else {
	                result += 'minuta';
	            }
	            return result;
	        case 'h':
	            return withoutSuffix ? 'jedan sat' : 'jednog sata';
	        case 'hh':
	            if (number === 1) {
	                result += 'sat';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'sata';
	            } else {
	                result += 'sati';
	            }
	            return result;
	        case 'dd':
	            if (number === 1) {
	                result += 'dan';
	            } else {
	                result += 'dana';
	            }
	            return result;
	        case 'MM':
	            if (number === 1) {
	                result += 'mjesec';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'mjeseca';
	            } else {
	                result += 'mjeseci';
	            }
	            return result;
	        case 'yy':
	            if (number === 1) {
	                result += 'godina';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'godine';
	            } else {
	                result += 'godina';
	            }
	            return result;
	        }
	    }
	
	    var hr = moment.defineLocale('hr', {
	        months : {
	            format: 'siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca'.split('_'),
	            standalone: 'siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split('_')
	        },
	        monthsShort : 'sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split('_'),
	        weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
	        weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	        weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD. MM. YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY H:mm',
	            LLLL : 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay  : '[danas u] LT',
	            nextDay  : '[sutra u] LT',
	            nextWeek : function () {
	                switch (this.day()) {
	                case 0:
	                    return '[u] [nedjelju] [u] LT';
	                case 3:
	                    return '[u] [srijedu] [u] LT';
	                case 6:
	                    return '[u] [subotu] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[u] dddd [u] LT';
	                }
	            },
	            lastDay  : '[jučer u] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                case 0:
	                case 3:
	                    return '[prošlu] dddd [u] LT';
	                case 6:
	                    return '[prošle] [subote] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[prošli] dddd [u] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past   : 'prije %s',
	            s      : 'par sekundi',
	            m      : translate,
	            mm     : translate,
	            h      : translate,
	            hh     : translate,
	            d      : 'dan',
	            dd     : translate,
	            M      : 'mjesec',
	            MM     : translate,
	            y      : 'godinu',
	            yy     : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return hr;
	
	}));

/***/ },
/* 462 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : hungarian (hu)
	//! author : Adam Brunner : https://github.com/adambrunner
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var weekEndings = 'vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(' ');
	    function translate(number, withoutSuffix, key, isFuture) {
	        var num = number,
	            suffix;
	        switch (key) {
	        case 's':
	            return (isFuture || withoutSuffix) ? 'néhány másodperc' : 'néhány másodperce';
	        case 'm':
	            return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');
	        case 'mm':
	            return num + (isFuture || withoutSuffix ? ' perc' : ' perce');
	        case 'h':
	            return 'egy' + (isFuture || withoutSuffix ? ' óra' : ' órája');
	        case 'hh':
	            return num + (isFuture || withoutSuffix ? ' óra' : ' órája');
	        case 'd':
	            return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');
	        case 'dd':
	            return num + (isFuture || withoutSuffix ? ' nap' : ' napja');
	        case 'M':
	            return 'egy' + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
	        case 'MM':
	            return num + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
	        case 'y':
	            return 'egy' + (isFuture || withoutSuffix ? ' év' : ' éve');
	        case 'yy':
	            return num + (isFuture || withoutSuffix ? ' év' : ' éve');
	        }
	        return '';
	    }
	    function week(isFuture) {
	        return (isFuture ? '' : '[múlt] ') + '[' + weekEndings[this.day()] + '] LT[-kor]';
	    }
	
	    var hu = moment.defineLocale('hu', {
	        months : 'január_február_március_április_május_június_július_augusztus_szeptember_október_november_december'.split('_'),
	        monthsShort : 'jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec'.split('_'),
	        weekdays : 'vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat'.split('_'),
	        weekdaysShort : 'vas_hét_kedd_sze_csüt_pén_szo'.split('_'),
	        weekdaysMin : 'v_h_k_sze_cs_p_szo'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'YYYY.MM.DD.',
	            LL : 'YYYY. MMMM D.',
	            LLL : 'YYYY. MMMM D. H:mm',
	            LLLL : 'YYYY. MMMM D., dddd H:mm'
	        },
	        meridiemParse: /de|du/i,
	        isPM: function (input) {
	            return input.charAt(1).toLowerCase() === 'u';
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 12) {
	                return isLower === true ? 'de' : 'DE';
	            } else {
	                return isLower === true ? 'du' : 'DU';
	            }
	        },
	        calendar : {
	            sameDay : '[ma] LT[-kor]',
	            nextDay : '[holnap] LT[-kor]',
	            nextWeek : function () {
	                return week.call(this, true);
	            },
	            lastDay : '[tegnap] LT[-kor]',
	            lastWeek : function () {
	                return week.call(this, false);
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s múlva',
	            past : '%s',
	            s : translate,
	            m : translate,
	            mm : translate,
	            h : translate,
	            hh : translate,
	            d : translate,
	            dd : translate,
	            M : translate,
	            MM : translate,
	            y : translate,
	            yy : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return hu;
	
	}));

/***/ },
/* 463 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Armenian (hy-am)
	//! author : Armendarabyan : https://github.com/armendarabyan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var hy_am = moment.defineLocale('hy-am', {
	        months : {
	            format: 'հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի'.split('_'),
	            standalone: 'հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր'.split('_')
	        },
	        monthsShort : 'հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ'.split('_'),
	        weekdays : 'կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ'.split('_'),
	        weekdaysShort : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
	        weekdaysMin : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY թ.',
	            LLL : 'D MMMM YYYY թ., HH:mm',
	            LLLL : 'dddd, D MMMM YYYY թ., HH:mm'
	        },
	        calendar : {
	            sameDay: '[այսօր] LT',
	            nextDay: '[վաղը] LT',
	            lastDay: '[երեկ] LT',
	            nextWeek: function () {
	                return 'dddd [օրը ժամը] LT';
	            },
	            lastWeek: function () {
	                return '[անցած] dddd [օրը ժամը] LT';
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : '%s հետո',
	            past : '%s առաջ',
	            s : 'մի քանի վայրկյան',
	            m : 'րոպե',
	            mm : '%d րոպե',
	            h : 'ժամ',
	            hh : '%d ժամ',
	            d : 'օր',
	            dd : '%d օր',
	            M : 'ամիս',
	            MM : '%d ամիս',
	            y : 'տարի',
	            yy : '%d տարի'
	        },
	        meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,
	        isPM: function (input) {
	            return /^(ցերեկվա|երեկոյան)$/.test(input);
	        },
	        meridiem : function (hour) {
	            if (hour < 4) {
	                return 'գիշերվա';
	            } else if (hour < 12) {
	                return 'առավոտվա';
	            } else if (hour < 17) {
	                return 'ցերեկվա';
	            } else {
	                return 'երեկոյան';
	            }
	        },
	        ordinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/,
	        ordinal: function (number, period) {
	            switch (period) {
	            case 'DDD':
	            case 'w':
	            case 'W':
	            case 'DDDo':
	                if (number === 1) {
	                    return number + '-ին';
	                }
	                return number + '-րդ';
	            default:
	                return number;
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return hy_am;
	
	}));

/***/ },
/* 464 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bahasa Indonesia (id)
	//! author : Mohammad Satrio Utomo : https://github.com/tyok
	//! reference: http://id.wikisource.org/wiki/Pedoman_Umum_Ejaan_Bahasa_Indonesia_yang_Disempurnakan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var id = moment.defineLocale('id', {
	        months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des'.split('_'),
	        weekdays : 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),
	        weekdaysShort : 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),
	        weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),
	        longDateFormat : {
	            LT : 'HH.mm',
	            LTS : 'HH.mm.ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY [pukul] HH.mm',
	            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	        },
	        meridiemParse: /pagi|siang|sore|malam/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'pagi') {
	                return hour;
	            } else if (meridiem === 'siang') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'sore' || meridiem === 'malam') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'pagi';
	            } else if (hours < 15) {
	                return 'siang';
	            } else if (hours < 19) {
	                return 'sore';
	            } else {
	                return 'malam';
	            }
	        },
	        calendar : {
	            sameDay : '[Hari ini pukul] LT',
	            nextDay : '[Besok pukul] LT',
	            nextWeek : 'dddd [pukul] LT',
	            lastDay : '[Kemarin pukul] LT',
	            lastWeek : 'dddd [lalu pukul] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'dalam %s',
	            past : '%s yang lalu',
	            s : 'beberapa detik',
	            m : 'semenit',
	            mm : '%d menit',
	            h : 'sejam',
	            hh : '%d jam',
	            d : 'sehari',
	            dd : '%d hari',
	            M : 'sebulan',
	            MM : '%d bulan',
	            y : 'setahun',
	            yy : '%d tahun'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return id;
	
	}));

/***/ },
/* 465 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : icelandic (is)
	//! author : Hinrik Örn Sigurðsson : https://github.com/hinrik
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    function plural(n) {
	        if (n % 100 === 11) {
	            return true;
	        } else if (n % 10 === 1) {
	            return false;
	        }
	        return true;
	    }
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        switch (key) {
	        case 's':
	            return withoutSuffix || isFuture ? 'nokkrar sekúndur' : 'nokkrum sekúndum';
	        case 'm':
	            return withoutSuffix ? 'mínúta' : 'mínútu';
	        case 'mm':
	            if (plural(number)) {
	                return result + (withoutSuffix || isFuture ? 'mínútur' : 'mínútum');
	            } else if (withoutSuffix) {
	                return result + 'mínúta';
	            }
	            return result + 'mínútu';
	        case 'hh':
	            if (plural(number)) {
	                return result + (withoutSuffix || isFuture ? 'klukkustundir' : 'klukkustundum');
	            }
	            return result + 'klukkustund';
	        case 'd':
	            if (withoutSuffix) {
	                return 'dagur';
	            }
	            return isFuture ? 'dag' : 'degi';
	        case 'dd':
	            if (plural(number)) {
	                if (withoutSuffix) {
	                    return result + 'dagar';
	                }
	                return result + (isFuture ? 'daga' : 'dögum');
	            } else if (withoutSuffix) {
	                return result + 'dagur';
	            }
	            return result + (isFuture ? 'dag' : 'degi');
	        case 'M':
	            if (withoutSuffix) {
	                return 'mánuður';
	            }
	            return isFuture ? 'mánuð' : 'mánuði';
	        case 'MM':
	            if (plural(number)) {
	                if (withoutSuffix) {
	                    return result + 'mánuðir';
	                }
	                return result + (isFuture ? 'mánuði' : 'mánuðum');
	            } else if (withoutSuffix) {
	                return result + 'mánuður';
	            }
	            return result + (isFuture ? 'mánuð' : 'mánuði');
	        case 'y':
	            return withoutSuffix || isFuture ? 'ár' : 'ári';
	        case 'yy':
	            if (plural(number)) {
	                return result + (withoutSuffix || isFuture ? 'ár' : 'árum');
	            }
	            return result + (withoutSuffix || isFuture ? 'ár' : 'ári');
	        }
	    }
	
	    var is = moment.defineLocale('is', {
	        months : 'janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des'.split('_'),
	        weekdays : 'sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur'.split('_'),
	        weekdaysShort : 'sun_mán_þri_mið_fim_fös_lau'.split('_'),
	        weekdaysMin : 'Su_Má_Þr_Mi_Fi_Fö_La'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY [kl.] H:mm',
	            LLLL : 'dddd, D. MMMM YYYY [kl.] H:mm'
	        },
	        calendar : {
	            sameDay : '[í dag kl.] LT',
	            nextDay : '[á morgun kl.] LT',
	            nextWeek : 'dddd [kl.] LT',
	            lastDay : '[í gær kl.] LT',
	            lastWeek : '[síðasta] dddd [kl.] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'eftir %s',
	            past : 'fyrir %s síðan',
	            s : translate,
	            m : translate,
	            mm : translate,
	            h : 'klukkustund',
	            hh : translate,
	            d : translate,
	            dd : translate,
	            M : translate,
	            MM : translate,
	            y : translate,
	            yy : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return is;
	
	}));

/***/ },
/* 466 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : italian (it)
	//! author : Lorenzo : https://github.com/aliem
	//! author: Mattia Larentis: https://github.com/nostalgiaz
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var it = moment.defineLocale('it', {
	        months : 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split('_'),
	        monthsShort : 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
	        weekdays : 'Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato'.split('_'),
	        weekdaysShort : 'Dom_Lun_Mar_Mer_Gio_Ven_Sab'.split('_'),
	        weekdaysMin : 'Do_Lu_Ma_Me_Gi_Ve_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Oggi alle] LT',
	            nextDay: '[Domani alle] LT',
	            nextWeek: 'dddd [alle] LT',
	            lastDay: '[Ieri alle] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[la scorsa] dddd [alle] LT';
	                    default:
	                        return '[lo scorso] dddd [alle] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : function (s) {
	                return ((/^[0-9].+$/).test(s) ? 'tra' : 'in') + ' ' + s;
	            },
	            past : '%s fa',
	            s : 'alcuni secondi',
	            m : 'un minuto',
	            mm : '%d minuti',
	            h : 'un\'ora',
	            hh : '%d ore',
	            d : 'un giorno',
	            dd : '%d giorni',
	            M : 'un mese',
	            MM : '%d mesi',
	            y : 'un anno',
	            yy : '%d anni'
	        },
	        ordinalParse : /\d{1,2}º/,
	        ordinal: '%dº',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return it;
	
	}));

/***/ },
/* 467 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : japanese (ja)
	//! author : LI Long : https://github.com/baryon
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var ja = moment.defineLocale('ja', {
	        months : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	        weekdays : '日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日'.split('_'),
	        weekdaysShort : '日_月_火_水_木_金_土'.split('_'),
	        weekdaysMin : '日_月_火_水_木_金_土'.split('_'),
	        longDateFormat : {
	            LT : 'Ah時m分',
	            LTS : 'Ah時m分s秒',
	            L : 'YYYY/MM/DD',
	            LL : 'YYYY年M月D日',
	            LLL : 'YYYY年M月D日Ah時m分',
	            LLLL : 'YYYY年M月D日Ah時m分 dddd'
	        },
	        meridiemParse: /午前|午後/i,
	        isPM : function (input) {
	            return input === '午後';
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return '午前';
	            } else {
	                return '午後';
	            }
	        },
	        calendar : {
	            sameDay : '[今日] LT',
	            nextDay : '[明日] LT',
	            nextWeek : '[来週]dddd LT',
	            lastDay : '[昨日] LT',
	            lastWeek : '[前週]dddd LT',
	            sameElse : 'L'
	        },
	        ordinalParse : /\d{1,2}日/,
	        ordinal : function (number, period) {
	            switch (period) {
	            case 'd':
	            case 'D':
	            case 'DDD':
	                return number + '日';
	            default:
	                return number;
	            }
	        },
	        relativeTime : {
	            future : '%s後',
	            past : '%s前',
	            s : '数秒',
	            m : '1分',
	            mm : '%d分',
	            h : '1時間',
	            hh : '%d時間',
	            d : '1日',
	            dd : '%d日',
	            M : '1ヶ月',
	            MM : '%dヶ月',
	            y : '1年',
	            yy : '%d年'
	        }
	    });
	
	    return ja;
	
	}));

/***/ },
/* 468 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Boso Jowo (jv)
	//! author : Rony Lantip : https://github.com/lantip
	//! reference: http://jv.wikipedia.org/wiki/Basa_Jawa
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var jv = moment.defineLocale('jv', {
	        months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des'.split('_'),
	        weekdays : 'Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu'.split('_'),
	        weekdaysShort : 'Min_Sen_Sel_Reb_Kem_Jem_Sep'.split('_'),
	        weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sp'.split('_'),
	        longDateFormat : {
	            LT : 'HH.mm',
	            LTS : 'HH.mm.ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY [pukul] HH.mm',
	            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	        },
	        meridiemParse: /enjing|siyang|sonten|ndalu/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'enjing') {
	                return hour;
	            } else if (meridiem === 'siyang') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'sonten' || meridiem === 'ndalu') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'enjing';
	            } else if (hours < 15) {
	                return 'siyang';
	            } else if (hours < 19) {
	                return 'sonten';
	            } else {
	                return 'ndalu';
	            }
	        },
	        calendar : {
	            sameDay : '[Dinten puniko pukul] LT',
	            nextDay : '[Mbenjang pukul] LT',
	            nextWeek : 'dddd [pukul] LT',
	            lastDay : '[Kala wingi pukul] LT',
	            lastWeek : 'dddd [kepengker pukul] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'wonten ing %s',
	            past : '%s ingkang kepengker',
	            s : 'sawetawis detik',
	            m : 'setunggal menit',
	            mm : '%d menit',
	            h : 'setunggal jam',
	            hh : '%d jam',
	            d : 'sedinten',
	            dd : '%d dinten',
	            M : 'sewulan',
	            MM : '%d wulan',
	            y : 'setaun',
	            yy : '%d taun'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return jv;
	
	}));

/***/ },
/* 469 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Georgian (ka)
	//! author : Irakli Janiashvili : https://github.com/irakli-janiashvili
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var ka = moment.defineLocale('ka', {
	        months : {
	            standalone: 'იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი'.split('_'),
	            format: 'იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს'.split('_')
	        },
	        monthsShort : 'იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ'.split('_'),
	        weekdays : {
	            standalone: 'კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი'.split('_'),
	            format: 'კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს'.split('_'),
	            isFormat: /(წინა|შემდეგ)/
	        },
	        weekdaysShort : 'კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ'.split('_'),
	        weekdaysMin : 'კვ_ორ_სა_ოთ_ხუ_პა_შა'.split('_'),
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY h:mm A',
	            LLLL : 'dddd, D MMMM YYYY h:mm A'
	        },
	        calendar : {
	            sameDay : '[დღეს] LT[-ზე]',
	            nextDay : '[ხვალ] LT[-ზე]',
	            lastDay : '[გუშინ] LT[-ზე]',
	            nextWeek : '[შემდეგ] dddd LT[-ზე]',
	            lastWeek : '[წინა] dddd LT-ზე',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : function (s) {
	                return (/(წამი|წუთი|საათი|წელი)/).test(s) ?
	                    s.replace(/ი$/, 'ში') :
	                    s + 'ში';
	            },
	            past : function (s) {
	                if ((/(წამი|წუთი|საათი|დღე|თვე)/).test(s)) {
	                    return s.replace(/(ი|ე)$/, 'ის წინ');
	                }
	                if ((/წელი/).test(s)) {
	                    return s.replace(/წელი$/, 'წლის წინ');
	                }
	            },
	            s : 'რამდენიმე წამი',
	            m : 'წუთი',
	            mm : '%d წუთი',
	            h : 'საათი',
	            hh : '%d საათი',
	            d : 'დღე',
	            dd : '%d დღე',
	            M : 'თვე',
	            MM : '%d თვე',
	            y : 'წელი',
	            yy : '%d წელი'
	        },
	        ordinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,
	        ordinal : function (number) {
	            if (number === 0) {
	                return number;
	            }
	            if (number === 1) {
	                return number + '-ლი';
	            }
	            if ((number < 20) || (number <= 100 && (number % 20 === 0)) || (number % 100 === 0)) {
	                return 'მე-' + number;
	            }
	            return number + '-ე';
	        },
	        week : {
	            dow : 1,
	            doy : 7
	        }
	    });
	
	    return ka;
	
	}));

/***/ },
/* 470 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : kazakh (kk)
	//! authors : Nurlan Rakhimzhanov : https://github.com/nurlan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var suffixes = {
	        0: '-ші',
	        1: '-ші',
	        2: '-ші',
	        3: '-ші',
	        4: '-ші',
	        5: '-ші',
	        6: '-шы',
	        7: '-ші',
	        8: '-ші',
	        9: '-шы',
	        10: '-шы',
	        20: '-шы',
	        30: '-шы',
	        40: '-шы',
	        50: '-ші',
	        60: '-шы',
	        70: '-ші',
	        80: '-ші',
	        90: '-шы',
	        100: '-ші'
	    };
	
	    var kk = moment.defineLocale('kk', {
	        months : 'Қаңтар_Ақпан_Наурыз_Сәуір_Мамыр_Маусым_Шілде_Тамыз_Қыркүйек_Қазан_Қараша_Желтоқсан'.split('_'),
	        monthsShort : 'Қаң_Ақп_Нау_Сәу_Мам_Мау_Шіл_Там_Қыр_Қаз_Қар_Жел'.split('_'),
	        weekdays : 'Жексенбі_Дүйсенбі_Сейсенбі_Сәрсенбі_Бейсенбі_Жұма_Сенбі'.split('_'),
	        weekdaysShort : 'Жек_Дүй_Сей_Сәр_Бей_Жұм_Сен'.split('_'),
	        weekdaysMin : 'Жк_Дй_Сй_Ср_Бй_Жм_Сн'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Бүгін сағат] LT',
	            nextDay : '[Ертең сағат] LT',
	            nextWeek : 'dddd [сағат] LT',
	            lastDay : '[Кеше сағат] LT',
	            lastWeek : '[Өткен аптаның] dddd [сағат] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s ішінде',
	            past : '%s бұрын',
	            s : 'бірнеше секунд',
	            m : 'бір минут',
	            mm : '%d минут',
	            h : 'бір сағат',
	            hh : '%d сағат',
	            d : 'бір күн',
	            dd : '%d күн',
	            M : 'бір ай',
	            MM : '%d ай',
	            y : 'бір жыл',
	            yy : '%d жыл'
	        },
	        ordinalParse: /\d{1,2}-(ші|шы)/,
	        ordinal : function (number) {
	            var a = number % 10,
	                b = number >= 100 ? 100 : null;
	            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return kk;
	
	}));

/***/ },
/* 471 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : khmer (km)
	//! author : Kruy Vanna : https://github.com/kruyvanna
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var km = moment.defineLocale('km', {
	        months: 'មករា_កុម្ភៈ_មិនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
	        monthsShort: 'មករា_កុម្ភៈ_មិនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
	        weekdays: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
	        weekdaysShort: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
	        weekdaysMin: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[ថ្ងៃនេះ ម៉ោង] LT',
	            nextDay: '[ស្អែក ម៉ោង] LT',
	            nextWeek: 'dddd [ម៉ោង] LT',
	            lastDay: '[ម្សិលមិញ ម៉ោង] LT',
	            lastWeek: 'dddd [សប្តាហ៍មុន] [ម៉ោង] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: '%sទៀត',
	            past: '%sមុន',
	            s: 'ប៉ុន្មានវិនាទី',
	            m: 'មួយនាទី',
	            mm: '%d នាទី',
	            h: 'មួយម៉ោង',
	            hh: '%d ម៉ោង',
	            d: 'មួយថ្ងៃ',
	            dd: '%d ថ្ងៃ',
	            M: 'មួយខែ',
	            MM: '%d ខែ',
	            y: 'មួយឆ្នាំ',
	            yy: '%d ឆ្នាំ'
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return km;
	
	}));

/***/ },
/* 472 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : korean (ko)
	//!
	//! authors
	//!
	//! - Kyungwook, Park : https://github.com/kyungw00k
	//! - Jeeeyul Lee <jeeeyul@gmail.com>
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var ko = moment.defineLocale('ko', {
	        months : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
	        monthsShort : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
	        weekdays : '일요일_월요일_화요일_수요일_목요일_금요일_토요일'.split('_'),
	        weekdaysShort : '일_월_화_수_목_금_토'.split('_'),
	        weekdaysMin : '일_월_화_수_목_금_토'.split('_'),
	        longDateFormat : {
	            LT : 'A h시 m분',
	            LTS : 'A h시 m분 s초',
	            L : 'YYYY.MM.DD',
	            LL : 'YYYY년 MMMM D일',
	            LLL : 'YYYY년 MMMM D일 A h시 m분',
	            LLLL : 'YYYY년 MMMM D일 dddd A h시 m분'
	        },
	        calendar : {
	            sameDay : '오늘 LT',
	            nextDay : '내일 LT',
	            nextWeek : 'dddd LT',
	            lastDay : '어제 LT',
	            lastWeek : '지난주 dddd LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s 후',
	            past : '%s 전',
	            s : '몇초',
	            ss : '%d초',
	            m : '일분',
	            mm : '%d분',
	            h : '한시간',
	            hh : '%d시간',
	            d : '하루',
	            dd : '%d일',
	            M : '한달',
	            MM : '%d달',
	            y : '일년',
	            yy : '%d년'
	        },
	        ordinalParse : /\d{1,2}일/,
	        ordinal : '%d일',
	        meridiemParse : /오전|오후/,
	        isPM : function (token) {
	            return token === '오후';
	        },
	        meridiem : function (hour, minute, isUpper) {
	            return hour < 12 ? '오전' : '오후';
	        }
	    });
	
	    return ko;
	
	}));

/***/ },
/* 473 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Luxembourgish (lb)
	//! author : mweimerskirch : https://github.com/mweimerskirch, David Raison : https://github.com/kwisatz
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            'm': ['eng Minutt', 'enger Minutt'],
	            'h': ['eng Stonn', 'enger Stonn'],
	            'd': ['een Dag', 'engem Dag'],
	            'M': ['ee Mount', 'engem Mount'],
	            'y': ['ee Joer', 'engem Joer']
	        };
	        return withoutSuffix ? format[key][0] : format[key][1];
	    }
	    function processFutureTime(string) {
	        var number = string.substr(0, string.indexOf(' '));
	        if (eifelerRegelAppliesToNumber(number)) {
	            return 'a ' + string;
	        }
	        return 'an ' + string;
	    }
	    function processPastTime(string) {
	        var number = string.substr(0, string.indexOf(' '));
	        if (eifelerRegelAppliesToNumber(number)) {
	            return 'viru ' + string;
	        }
	        return 'virun ' + string;
	    }
	    /**
	     * Returns true if the word before the given number loses the '-n' ending.
	     * e.g. 'an 10 Deeg' but 'a 5 Deeg'
	     *
	     * @param number {integer}
	     * @returns {boolean}
	     */
	    function eifelerRegelAppliesToNumber(number) {
	        number = parseInt(number, 10);
	        if (isNaN(number)) {
	            return false;
	        }
	        if (number < 0) {
	            // Negative Number --> always true
	            return true;
	        } else if (number < 10) {
	            // Only 1 digit
	            if (4 <= number && number <= 7) {
	                return true;
	            }
	            return false;
	        } else if (number < 100) {
	            // 2 digits
	            var lastDigit = number % 10, firstDigit = number / 10;
	            if (lastDigit === 0) {
	                return eifelerRegelAppliesToNumber(firstDigit);
	            }
	            return eifelerRegelAppliesToNumber(lastDigit);
	        } else if (number < 10000) {
	            // 3 or 4 digits --> recursively check first digit
	            while (number >= 10) {
	                number = number / 10;
	            }
	            return eifelerRegelAppliesToNumber(number);
	        } else {
	            // Anything larger than 4 digits: recursively check first n-3 digits
	            number = number / 1000;
	            return eifelerRegelAppliesToNumber(number);
	        }
	    }
	
	    var lb = moment.defineLocale('lb', {
	        months: 'Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	        monthsShort: 'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
	        weekdays: 'Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg'.split('_'),
	        weekdaysShort: 'So._Mé._Dë._Më._Do._Fr._Sa.'.split('_'),
	        weekdaysMin: 'So_Mé_Dë_Më_Do_Fr_Sa'.split('_'),
	        longDateFormat: {
	            LT: 'H:mm [Auer]',
	            LTS: 'H:mm:ss [Auer]',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm [Auer]',
	            LLLL: 'dddd, D. MMMM YYYY H:mm [Auer]'
	        },
	        calendar: {
	            sameDay: '[Haut um] LT',
	            sameElse: 'L',
	            nextDay: '[Muer um] LT',
	            nextWeek: 'dddd [um] LT',
	            lastDay: '[Gëschter um] LT',
	            lastWeek: function () {
	                // Different date string for 'Dënschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule
	                switch (this.day()) {
	                    case 2:
	                    case 4:
	                        return '[Leschten] dddd [um] LT';
	                    default:
	                        return '[Leschte] dddd [um] LT';
	                }
	            }
	        },
	        relativeTime : {
	            future : processFutureTime,
	            past : processPastTime,
	            s : 'e puer Sekonnen',
	            m : processRelativeTime,
	            mm : '%d Minutten',
	            h : processRelativeTime,
	            hh : '%d Stonnen',
	            d : processRelativeTime,
	            dd : '%d Deeg',
	            M : processRelativeTime,
	            MM : '%d Méint',
	            y : processRelativeTime,
	            yy : '%d Joer'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return lb;
	
	}));

/***/ },
/* 474 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : lao (lo)
	//! author : Ryan Hart : https://github.com/ryanhart2
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var lo = moment.defineLocale('lo', {
	        months : 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
	        monthsShort : 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
	        weekdays : 'ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
	        weekdaysShort : 'ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
	        weekdaysMin : 'ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'ວັນdddd D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /ຕອນເຊົ້າ|ຕອນແລງ/,
	        isPM: function (input) {
	            return input === 'ຕອນແລງ';
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ຕອນເຊົ້າ';
	            } else {
	                return 'ຕອນແລງ';
	            }
	        },
	        calendar : {
	            sameDay : '[ມື້ນີ້ເວລາ] LT',
	            nextDay : '[ມື້ອື່ນເວລາ] LT',
	            nextWeek : '[ວັນ]dddd[ໜ້າເວລາ] LT',
	            lastDay : '[ມື້ວານນີ້ເວລາ] LT',
	            lastWeek : '[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'ອີກ %s',
	            past : '%sຜ່ານມາ',
	            s : 'ບໍ່ເທົ່າໃດວິນາທີ',
	            m : '1 ນາທີ',
	            mm : '%d ນາທີ',
	            h : '1 ຊົ່ວໂມງ',
	            hh : '%d ຊົ່ວໂມງ',
	            d : '1 ມື້',
	            dd : '%d ມື້',
	            M : '1 ເດືອນ',
	            MM : '%d ເດືອນ',
	            y : '1 ປີ',
	            yy : '%d ປີ'
	        },
	        ordinalParse: /(ທີ່)\d{1,2}/,
	        ordinal : function (number) {
	            return 'ທີ່' + number;
	        }
	    });
	
	    return lo;
	
	}));

/***/ },
/* 475 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Lithuanian (lt)
	//! author : Mindaugas Mozūras : https://github.com/mmozuras
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var units = {
	        'm' : 'minutė_minutės_minutę',
	        'mm': 'minutės_minučių_minutes',
	        'h' : 'valanda_valandos_valandą',
	        'hh': 'valandos_valandų_valandas',
	        'd' : 'diena_dienos_dieną',
	        'dd': 'dienos_dienų_dienas',
	        'M' : 'mėnuo_mėnesio_mėnesį',
	        'MM': 'mėnesiai_mėnesių_mėnesius',
	        'y' : 'metai_metų_metus',
	        'yy': 'metai_metų_metus'
	    };
	    function translateSeconds(number, withoutSuffix, key, isFuture) {
	        if (withoutSuffix) {
	            return 'kelios sekundės';
	        } else {
	            return isFuture ? 'kelių sekundžių' : 'kelias sekundes';
	        }
	    }
	    function translateSingular(number, withoutSuffix, key, isFuture) {
	        return withoutSuffix ? forms(key)[0] : (isFuture ? forms(key)[1] : forms(key)[2]);
	    }
	    function special(number) {
	        return number % 10 === 0 || (number > 10 && number < 20);
	    }
	    function forms(key) {
	        return units[key].split('_');
	    }
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        if (number === 1) {
	            return result + translateSingular(number, withoutSuffix, key[0], isFuture);
	        } else if (withoutSuffix) {
	            return result + (special(number) ? forms(key)[1] : forms(key)[0]);
	        } else {
	            if (isFuture) {
	                return result + forms(key)[1];
	            } else {
	                return result + (special(number) ? forms(key)[1] : forms(key)[2]);
	            }
	        }
	    }
	    var lt = moment.defineLocale('lt', {
	        months : {
	            format: 'sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio'.split('_'),
	            standalone: 'sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis'.split('_')
	        },
	        monthsShort : 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),
	        weekdays : {
	            format: 'sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį'.split('_'),
	            standalone: 'sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis'.split('_'),
	            isFormat: /dddd HH:mm/
	        },
	        weekdaysShort : 'Sek_Pir_Ant_Tre_Ket_Pen_Šeš'.split('_'),
	        weekdaysMin : 'S_P_A_T_K_Pn_Š'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'YYYY-MM-DD',
	            LL : 'YYYY [m.] MMMM D [d.]',
	            LLL : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
	            LLLL : 'YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]',
	            l : 'YYYY-MM-DD',
	            ll : 'YYYY [m.] MMMM D [d.]',
	            lll : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
	            llll : 'YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]'
	        },
	        calendar : {
	            sameDay : '[Šiandien] LT',
	            nextDay : '[Rytoj] LT',
	            nextWeek : 'dddd LT',
	            lastDay : '[Vakar] LT',
	            lastWeek : '[Praėjusį] dddd LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'po %s',
	            past : 'prieš %s',
	            s : translateSeconds,
	            m : translateSingular,
	            mm : translate,
	            h : translateSingular,
	            hh : translate,
	            d : translateSingular,
	            dd : translate,
	            M : translateSingular,
	            MM : translate,
	            y : translateSingular,
	            yy : translate
	        },
	        ordinalParse: /\d{1,2}-oji/,
	        ordinal : function (number) {
	            return number + '-oji';
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return lt;
	
	}));

/***/ },
/* 476 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : latvian (lv)
	//! author : Kristaps Karlsons : https://github.com/skakri
	//! author : Jānis Elmeris : https://github.com/JanisE
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var units = {
	        'm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
	        'mm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
	        'h': 'stundas_stundām_stunda_stundas'.split('_'),
	        'hh': 'stundas_stundām_stunda_stundas'.split('_'),
	        'd': 'dienas_dienām_diena_dienas'.split('_'),
	        'dd': 'dienas_dienām_diena_dienas'.split('_'),
	        'M': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
	        'MM': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
	        'y': 'gada_gadiem_gads_gadi'.split('_'),
	        'yy': 'gada_gadiem_gads_gadi'.split('_')
	    };
	    /**
	     * @param withoutSuffix boolean true = a length of time; false = before/after a period of time.
	     */
	    function format(forms, number, withoutSuffix) {
	        if (withoutSuffix) {
	            // E.g. "21 minūte", "3 minūtes".
	            return number % 10 === 1 && number !== 11 ? forms[2] : forms[3];
	        } else {
	            // E.g. "21 minūtes" as in "pēc 21 minūtes".
	            // E.g. "3 minūtēm" as in "pēc 3 minūtēm".
	            return number % 10 === 1 && number !== 11 ? forms[0] : forms[1];
	        }
	    }
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        return number + ' ' + format(units[key], number, withoutSuffix);
	    }
	    function relativeTimeWithSingular(number, withoutSuffix, key) {
	        return format(units[key], number, withoutSuffix);
	    }
	    function relativeSeconds(number, withoutSuffix) {
	        return withoutSuffix ? 'dažas sekundes' : 'dažām sekundēm';
	    }
	
	    var lv = moment.defineLocale('lv', {
	        months : 'janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec'.split('_'),
	        weekdays : 'svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena'.split('_'),
	        weekdaysShort : 'Sv_P_O_T_C_Pk_S'.split('_'),
	        weekdaysMin : 'Sv_P_O_T_C_Pk_S'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY.',
	            LL : 'YYYY. [gada] D. MMMM',
	            LLL : 'YYYY. [gada] D. MMMM, HH:mm',
	            LLLL : 'YYYY. [gada] D. MMMM, dddd, HH:mm'
	        },
	        calendar : {
	            sameDay : '[Šodien pulksten] LT',
	            nextDay : '[Rīt pulksten] LT',
	            nextWeek : 'dddd [pulksten] LT',
	            lastDay : '[Vakar pulksten] LT',
	            lastWeek : '[Pagājušā] dddd [pulksten] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'pēc %s',
	            past : 'pirms %s',
	            s : relativeSeconds,
	            m : relativeTimeWithSingular,
	            mm : relativeTimeWithPlural,
	            h : relativeTimeWithSingular,
	            hh : relativeTimeWithPlural,
	            d : relativeTimeWithSingular,
	            dd : relativeTimeWithPlural,
	            M : relativeTimeWithSingular,
	            MM : relativeTimeWithPlural,
	            y : relativeTimeWithSingular,
	            yy : relativeTimeWithPlural
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return lv;
	
	}));

/***/ },
/* 477 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Montenegrin (me)
	//! author : Miodrag Nikač <miodrag@restartit.me> : https://github.com/miodragnikac
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var translator = {
	        words: { //Different grammatical cases
	            m: ['jedan minut', 'jednog minuta'],
	            mm: ['minut', 'minuta', 'minuta'],
	            h: ['jedan sat', 'jednog sata'],
	            hh: ['sat', 'sata', 'sati'],
	            dd: ['dan', 'dana', 'dana'],
	            MM: ['mjesec', 'mjeseca', 'mjeseci'],
	            yy: ['godina', 'godine', 'godina']
	        },
	        correctGrammaticalCase: function (number, wordKey) {
	            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
	        },
	        translate: function (number, withoutSuffix, key) {
	            var wordKey = translator.words[key];
	            if (key.length === 1) {
	                return withoutSuffix ? wordKey[0] : wordKey[1];
	            } else {
	                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
	            }
	        }
	    };
	
	    var me = moment.defineLocale('me', {
	        months: ['januar', 'februar', 'mart', 'april', 'maj', 'jun', 'jul', 'avgust', 'septembar', 'oktobar', 'novembar', 'decembar'],
	        monthsShort: ['jan.', 'feb.', 'mar.', 'apr.', 'maj', 'jun', 'jul', 'avg.', 'sep.', 'okt.', 'nov.', 'dec.'],
	        weekdays: ['nedjelja', 'ponedjeljak', 'utorak', 'srijeda', 'četvrtak', 'petak', 'subota'],
	        weekdaysShort: ['ned.', 'pon.', 'uto.', 'sri.', 'čet.', 'pet.', 'sub.'],
	        weekdaysMin: ['ne', 'po', 'ut', 'sr', 'če', 'pe', 'su'],
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS : 'H:mm:ss',
	            L: 'DD. MM. YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm',
	            LLLL: 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar: {
	            sameDay: '[danas u] LT',
	            nextDay: '[sjutra u] LT',
	
	            nextWeek: function () {
	                switch (this.day()) {
	                case 0:
	                    return '[u] [nedjelju] [u] LT';
	                case 3:
	                    return '[u] [srijedu] [u] LT';
	                case 6:
	                    return '[u] [subotu] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[u] dddd [u] LT';
	                }
	            },
	            lastDay  : '[juče u] LT',
	            lastWeek : function () {
	                var lastWeekDays = [
	                    '[prošle] [nedjelje] [u] LT',
	                    '[prošlog] [ponedjeljka] [u] LT',
	                    '[prošlog] [utorka] [u] LT',
	                    '[prošle] [srijede] [u] LT',
	                    '[prošlog] [četvrtka] [u] LT',
	                    '[prošlog] [petka] [u] LT',
	                    '[prošle] [subote] [u] LT'
	                ];
	                return lastWeekDays[this.day()];
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past   : 'prije %s',
	            s      : 'nekoliko sekundi',
	            m      : translator.translate,
	            mm     : translator.translate,
	            h      : translator.translate,
	            hh     : translator.translate,
	            d      : 'dan',
	            dd     : translator.translate,
	            M      : 'mjesec',
	            MM     : translator.translate,
	            y      : 'godinu',
	            yy     : translator.translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return me;
	
	}));

/***/ },
/* 478 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : macedonian (mk)
	//! author : Borislav Mickov : https://github.com/B0k0
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var mk = moment.defineLocale('mk', {
	        months : 'јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември'.split('_'),
	        monthsShort : 'јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек'.split('_'),
	        weekdays : 'недела_понеделник_вторник_среда_четврток_петок_сабота'.split('_'),
	        weekdaysShort : 'нед_пон_вто_сре_чет_пет_саб'.split('_'),
	        weekdaysMin : 'нe_пo_вт_ср_че_пе_сa'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'D.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY H:mm',
	            LLLL : 'dddd, D MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay : '[Денес во] LT',
	            nextDay : '[Утре во] LT',
	            nextWeek : '[Во] dddd [во] LT',
	            lastDay : '[Вчера во] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                case 0:
	                case 3:
	                case 6:
	                    return '[Изминатата] dddd [во] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[Изминатиот] dddd [во] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'после %s',
	            past : 'пред %s',
	            s : 'неколку секунди',
	            m : 'минута',
	            mm : '%d минути',
	            h : 'час',
	            hh : '%d часа',
	            d : 'ден',
	            dd : '%d дена',
	            M : 'месец',
	            MM : '%d месеци',
	            y : 'година',
	            yy : '%d години'
	        },
	        ordinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
	        ordinal : function (number) {
	            var lastDigit = number % 10,
	                last2Digits = number % 100;
	            if (number === 0) {
	                return number + '-ев';
	            } else if (last2Digits === 0) {
	                return number + '-ен';
	            } else if (last2Digits > 10 && last2Digits < 20) {
	                return number + '-ти';
	            } else if (lastDigit === 1) {
	                return number + '-ви';
	            } else if (lastDigit === 2) {
	                return number + '-ри';
	            } else if (lastDigit === 7 || lastDigit === 8) {
	                return number + '-ми';
	            } else {
	                return number + '-ти';
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return mk;
	
	}));

/***/ },
/* 479 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : malayalam (ml)
	//! author : Floyd Pink : https://github.com/floydpink
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var ml = moment.defineLocale('ml', {
	        months : 'ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ'.split('_'),
	        monthsShort : 'ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.'.split('_'),
	        weekdays : 'ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച'.split('_'),
	        weekdaysShort : 'ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി'.split('_'),
	        weekdaysMin : 'ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm -നു',
	            LTS : 'A h:mm:ss -നു',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, A h:mm -നു',
	            LLLL : 'dddd, D MMMM YYYY, A h:mm -നു'
	        },
	        calendar : {
	            sameDay : '[ഇന്ന്] LT',
	            nextDay : '[നാളെ] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[ഇന്നലെ] LT',
	            lastWeek : '[കഴിഞ്ഞ] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s കഴിഞ്ഞ്',
	            past : '%s മുൻപ്',
	            s : 'അൽപ നിമിഷങ്ങൾ',
	            m : 'ഒരു മിനിറ്റ്',
	            mm : '%d മിനിറ്റ്',
	            h : 'ഒരു മണിക്കൂർ',
	            hh : '%d മണിക്കൂർ',
	            d : 'ഒരു ദിവസം',
	            dd : '%d ദിവസം',
	            M : 'ഒരു മാസം',
	            MM : '%d മാസം',
	            y : 'ഒരു വർഷം',
	            yy : '%d വർഷം'
	        },
	        meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if ((meridiem === 'രാത്രി' && hour >= 4) ||
	                    meridiem === 'ഉച്ച കഴിഞ്ഞ്' ||
	                    meridiem === 'വൈകുന്നേരം') {
	                return hour + 12;
	            } else {
	                return hour;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'രാത്രി';
	            } else if (hour < 12) {
	                return 'രാവിലെ';
	            } else if (hour < 17) {
	                return 'ഉച്ച കഴിഞ്ഞ്';
	            } else if (hour < 20) {
	                return 'വൈകുന്നേരം';
	            } else {
	                return 'രാത്രി';
	            }
	        }
	    });
	
	    return ml;
	
	}));

/***/ },
/* 480 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Marathi (mr)
	//! author : Harshad Kale : https://github.com/kalehv
	//! author : Vivek Athalye : https://github.com/vnathalye
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var symbolMap = {
	        '1': '१',
	        '2': '२',
	        '3': '३',
	        '4': '४',
	        '5': '५',
	        '6': '६',
	        '7': '७',
	        '8': '८',
	        '9': '९',
	        '0': '०'
	    },
	    numberMap = {
	        '१': '1',
	        '२': '2',
	        '३': '3',
	        '४': '4',
	        '५': '5',
	        '६': '6',
	        '७': '7',
	        '८': '8',
	        '९': '9',
	        '०': '0'
	    };
	
	    function relativeTimeMr(number, withoutSuffix, string, isFuture)
	    {
	        var output = '';
	        if (withoutSuffix) {
	            switch (string) {
	                case 's': output = 'काही सेकंद'; break;
	                case 'm': output = 'एक मिनिट'; break;
	                case 'mm': output = '%d मिनिटे'; break;
	                case 'h': output = 'एक तास'; break;
	                case 'hh': output = '%d तास'; break;
	                case 'd': output = 'एक दिवस'; break;
	                case 'dd': output = '%d दिवस'; break;
	                case 'M': output = 'एक महिना'; break;
	                case 'MM': output = '%d महिने'; break;
	                case 'y': output = 'एक वर्ष'; break;
	                case 'yy': output = '%d वर्षे'; break;
	            }
	        }
	        else {
	            switch (string) {
	                case 's': output = 'काही सेकंदां'; break;
	                case 'm': output = 'एका मिनिटा'; break;
	                case 'mm': output = '%d मिनिटां'; break;
	                case 'h': output = 'एका तासा'; break;
	                case 'hh': output = '%d तासां'; break;
	                case 'd': output = 'एका दिवसा'; break;
	                case 'dd': output = '%d दिवसां'; break;
	                case 'M': output = 'एका महिन्या'; break;
	                case 'MM': output = '%d महिन्यां'; break;
	                case 'y': output = 'एका वर्षा'; break;
	                case 'yy': output = '%d वर्षां'; break;
	            }
	        }
	        return output.replace(/%d/i, number);
	    }
	
	    var mr = moment.defineLocale('mr', {
	        months : 'जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split('_'),
	        monthsShort: 'जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split('_'),
	        weekdays : 'रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
	        weekdaysShort : 'रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि'.split('_'),
	        weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm वाजता',
	            LTS : 'A h:mm:ss वाजता',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, A h:mm वाजता',
	            LLLL : 'dddd, D MMMM YYYY, A h:mm वाजता'
	        },
	        calendar : {
	            sameDay : '[आज] LT',
	            nextDay : '[उद्या] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[काल] LT',
	            lastWeek: '[मागील] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future: '%sमध्ये',
	            past: '%sपूर्वी',
	            s: relativeTimeMr,
	            m: relativeTimeMr,
	            mm: relativeTimeMr,
	            h: relativeTimeMr,
	            hh: relativeTimeMr,
	            d: relativeTimeMr,
	            dd: relativeTimeMr,
	            M: relativeTimeMr,
	            MM: relativeTimeMr,
	            y: relativeTimeMr,
	            yy: relativeTimeMr
	        },
	        preparse: function (string) {
	            return string.replace(/[१२३४५६७८९०]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /रात्री|सकाळी|दुपारी|सायंकाळी/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'रात्री') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'सकाळी') {
	                return hour;
	            } else if (meridiem === 'दुपारी') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'सायंकाळी') {
	                return hour + 12;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'रात्री';
	            } else if (hour < 10) {
	                return 'सकाळी';
	            } else if (hour < 17) {
	                return 'दुपारी';
	            } else if (hour < 20) {
	                return 'सायंकाळी';
	            } else {
	                return 'रात्री';
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return mr;
	
	}));

/***/ },
/* 481 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bahasa Malaysia (ms-MY)
	//! author : Weldan Jamili : https://github.com/weldan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var ms = moment.defineLocale('ms', {
	        months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
	        monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
	        weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
	        weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
	        weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
	        longDateFormat : {
	            LT : 'HH.mm',
	            LTS : 'HH.mm.ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY [pukul] HH.mm',
	            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	        },
	        meridiemParse: /pagi|tengahari|petang|malam/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'pagi') {
	                return hour;
	            } else if (meridiem === 'tengahari') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'petang' || meridiem === 'malam') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'pagi';
	            } else if (hours < 15) {
	                return 'tengahari';
	            } else if (hours < 19) {
	                return 'petang';
	            } else {
	                return 'malam';
	            }
	        },
	        calendar : {
	            sameDay : '[Hari ini pukul] LT',
	            nextDay : '[Esok pukul] LT',
	            nextWeek : 'dddd [pukul] LT',
	            lastDay : '[Kelmarin pukul] LT',
	            lastWeek : 'dddd [lepas pukul] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'dalam %s',
	            past : '%s yang lepas',
	            s : 'beberapa saat',
	            m : 'seminit',
	            mm : '%d minit',
	            h : 'sejam',
	            hh : '%d jam',
	            d : 'sehari',
	            dd : '%d hari',
	            M : 'sebulan',
	            MM : '%d bulan',
	            y : 'setahun',
	            yy : '%d tahun'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return ms;
	
	}));

/***/ },
/* 482 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bahasa Malaysia (ms-MY)
	//! author : Weldan Jamili : https://github.com/weldan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var ms_my = moment.defineLocale('ms-my', {
	        months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
	        monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
	        weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
	        weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
	        weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
	        longDateFormat : {
	            LT : 'HH.mm',
	            LTS : 'HH.mm.ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY [pukul] HH.mm',
	            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	        },
	        meridiemParse: /pagi|tengahari|petang|malam/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'pagi') {
	                return hour;
	            } else if (meridiem === 'tengahari') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'petang' || meridiem === 'malam') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'pagi';
	            } else if (hours < 15) {
	                return 'tengahari';
	            } else if (hours < 19) {
	                return 'petang';
	            } else {
	                return 'malam';
	            }
	        },
	        calendar : {
	            sameDay : '[Hari ini pukul] LT',
	            nextDay : '[Esok pukul] LT',
	            nextWeek : 'dddd [pukul] LT',
	            lastDay : '[Kelmarin pukul] LT',
	            lastWeek : 'dddd [lepas pukul] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'dalam %s',
	            past : '%s yang lepas',
	            s : 'beberapa saat',
	            m : 'seminit',
	            mm : '%d minit',
	            h : 'sejam',
	            hh : '%d jam',
	            d : 'sehari',
	            dd : '%d hari',
	            M : 'sebulan',
	            MM : '%d bulan',
	            y : 'setahun',
	            yy : '%d tahun'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return ms_my;
	
	}));

/***/ },
/* 483 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Burmese (my)
	//! author : Squar team, mysquar.com
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var symbolMap = {
	        '1': '၁',
	        '2': '၂',
	        '3': '၃',
	        '4': '၄',
	        '5': '၅',
	        '6': '၆',
	        '7': '၇',
	        '8': '၈',
	        '9': '၉',
	        '0': '၀'
	    }, numberMap = {
	        '၁': '1',
	        '၂': '2',
	        '၃': '3',
	        '၄': '4',
	        '၅': '5',
	        '၆': '6',
	        '၇': '7',
	        '၈': '8',
	        '၉': '9',
	        '၀': '0'
	    };
	
	    var my = moment.defineLocale('my', {
	        months: 'ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ'.split('_'),
	        monthsShort: 'ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ'.split('_'),
	        weekdays: 'တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ'.split('_'),
	        weekdaysShort: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
	        weekdaysMin: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
	
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[ယနေ.] LT [မှာ]',
	            nextDay: '[မနက်ဖြန်] LT [မှာ]',
	            nextWeek: 'dddd LT [မှာ]',
	            lastDay: '[မနေ.က] LT [မှာ]',
	            lastWeek: '[ပြီးခဲ့သော] dddd LT [မှာ]',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'လာမည့် %s မှာ',
	            past: 'လွန်ခဲ့သော %s က',
	            s: 'စက္ကန်.အနည်းငယ်',
	            m: 'တစ်မိနစ်',
	            mm: '%d မိနစ်',
	            h: 'တစ်နာရီ',
	            hh: '%d နာရီ',
	            d: 'တစ်ရက်',
	            dd: '%d ရက်',
	            M: 'တစ်လ',
	            MM: '%d လ',
	            y: 'တစ်နှစ်',
	            yy: '%d နှစ်'
	        },
	        preparse: function (string) {
	            return string.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return my;
	
	}));

/***/ },
/* 484 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : norwegian bokmål (nb)
	//! authors : Espen Hovlandsdal : https://github.com/rexxars
	//!           Sigurd Gartmann : https://github.com/sigurdga
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var nb = moment.defineLocale('nb', {
	        months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
	        monthsShort : 'jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),
	        weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
	        weekdaysShort : 'sø._ma._ti._on._to._fr._lø.'.split('_'),
	        weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY [kl.] HH:mm',
	            LLLL : 'dddd D. MMMM YYYY [kl.] HH:mm'
	        },
	        calendar : {
	            sameDay: '[i dag kl.] LT',
	            nextDay: '[i morgen kl.] LT',
	            nextWeek: 'dddd [kl.] LT',
	            lastDay: '[i går kl.] LT',
	            lastWeek: '[forrige] dddd [kl.] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'om %s',
	            past : 'for %s siden',
	            s : 'noen sekunder',
	            m : 'ett minutt',
	            mm : '%d minutter',
	            h : 'en time',
	            hh : '%d timer',
	            d : 'en dag',
	            dd : '%d dager',
	            M : 'en måned',
	            MM : '%d måneder',
	            y : 'ett år',
	            yy : '%d år'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return nb;
	
	}));

/***/ },
/* 485 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : nepali/nepalese
	//! author : suvash : https://github.com/suvash
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var symbolMap = {
	        '1': '१',
	        '2': '२',
	        '3': '३',
	        '4': '४',
	        '5': '५',
	        '6': '६',
	        '7': '७',
	        '8': '८',
	        '9': '९',
	        '0': '०'
	    },
	    numberMap = {
	        '१': '1',
	        '२': '2',
	        '३': '3',
	        '४': '4',
	        '५': '5',
	        '६': '6',
	        '७': '7',
	        '८': '8',
	        '९': '9',
	        '०': '0'
	    };
	
	    var ne = moment.defineLocale('ne', {
	        months : 'जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर'.split('_'),
	        monthsShort : 'जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.'.split('_'),
	        weekdays : 'आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार'.split('_'),
	        weekdaysShort : 'आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.'.split('_'),
	        weekdaysMin : 'आ._सो._मं._बु._बि._शु._श.'.split('_'),
	        longDateFormat : {
	            LT : 'Aको h:mm बजे',
	            LTS : 'Aको h:mm:ss बजे',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, Aको h:mm बजे',
	            LLLL : 'dddd, D MMMM YYYY, Aको h:mm बजे'
	        },
	        preparse: function (string) {
	            return string.replace(/[१२३४५६७८९०]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /राति|बिहान|दिउँसो|साँझ/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'राति') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'बिहान') {
	                return hour;
	            } else if (meridiem === 'दिउँसो') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'साँझ') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 3) {
	                return 'राति';
	            } else if (hour < 12) {
	                return 'बिहान';
	            } else if (hour < 16) {
	                return 'दिउँसो';
	            } else if (hour < 20) {
	                return 'साँझ';
	            } else {
	                return 'राति';
	            }
	        },
	        calendar : {
	            sameDay : '[आज] LT',
	            nextDay : '[भोलि] LT',
	            nextWeek : '[आउँदो] dddd[,] LT',
	            lastDay : '[हिजो] LT',
	            lastWeek : '[गएको] dddd[,] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%sमा',
	            past : '%s अगाडि',
	            s : 'केही क्षण',
	            m : 'एक मिनेट',
	            mm : '%d मिनेट',
	            h : 'एक घण्टा',
	            hh : '%d घण्टा',
	            d : 'एक दिन',
	            dd : '%d दिन',
	            M : 'एक महिना',
	            MM : '%d महिना',
	            y : 'एक बर्ष',
	            yy : '%d बर्ष'
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return ne;
	
	}));

/***/ },
/* 486 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : dutch (nl)
	//! author : Joris Röling : https://github.com/jjupiter
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'),
	        monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');
	
	    var nl = moment.defineLocale('nl', {
	        months : 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
	        monthsShort : function (m, format) {
	            if (/-MMM-/.test(format)) {
	                return monthsShortWithoutDots[m.month()];
	            } else {
	                return monthsShortWithDots[m.month()];
	            }
	        },
	        weekdays : 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
	        weekdaysShort : 'zo._ma._di._wo._do._vr._za.'.split('_'),
	        weekdaysMin : 'Zo_Ma_Di_Wo_Do_Vr_Za'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD-MM-YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[vandaag om] LT',
	            nextDay: '[morgen om] LT',
	            nextWeek: 'dddd [om] LT',
	            lastDay: '[gisteren om] LT',
	            lastWeek: '[afgelopen] dddd [om] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'over %s',
	            past : '%s geleden',
	            s : 'een paar seconden',
	            m : 'één minuut',
	            mm : '%d minuten',
	            h : 'één uur',
	            hh : '%d uur',
	            d : 'één dag',
	            dd : '%d dagen',
	            M : 'één maand',
	            MM : '%d maanden',
	            y : 'één jaar',
	            yy : '%d jaar'
	        },
	        ordinalParse: /\d{1,2}(ste|de)/,
	        ordinal : function (number) {
	            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return nl;
	
	}));

/***/ },
/* 487 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : norwegian nynorsk (nn)
	//! author : https://github.com/mechuwind
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var nn = moment.defineLocale('nn', {
	        months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
	        weekdays : 'sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag'.split('_'),
	        weekdaysShort : 'sun_mån_tys_ons_tor_fre_lau'.split('_'),
	        weekdaysMin : 'su_må_ty_on_to_fr_lø'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY [kl.] H:mm',
	            LLLL : 'dddd D. MMMM YYYY [kl.] HH:mm'
	        },
	        calendar : {
	            sameDay: '[I dag klokka] LT',
	            nextDay: '[I morgon klokka] LT',
	            nextWeek: 'dddd [klokka] LT',
	            lastDay: '[I går klokka] LT',
	            lastWeek: '[Føregåande] dddd [klokka] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'om %s',
	            past : 'for %s sidan',
	            s : 'nokre sekund',
	            m : 'eit minutt',
	            mm : '%d minutt',
	            h : 'ein time',
	            hh : '%d timar',
	            d : 'ein dag',
	            dd : '%d dagar',
	            M : 'ein månad',
	            MM : '%d månader',
	            y : 'eit år',
	            yy : '%d år'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return nn;
	
	}));

/***/ },
/* 488 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : punjabi india (pa-in)
	//! author : Harpreet Singh : https://github.com/harpreetkhalsagtbit
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var symbolMap = {
	        '1': '੧',
	        '2': '੨',
	        '3': '੩',
	        '4': '੪',
	        '5': '੫',
	        '6': '੬',
	        '7': '੭',
	        '8': '੮',
	        '9': '੯',
	        '0': '੦'
	    },
	    numberMap = {
	        '੧': '1',
	        '੨': '2',
	        '੩': '3',
	        '੪': '4',
	        '੫': '5',
	        '੬': '6',
	        '੭': '7',
	        '੮': '8',
	        '੯': '9',
	        '੦': '0'
	    };
	
	    var pa_in = moment.defineLocale('pa-in', {
	        // There are months name as per Nanakshahi Calender but they are not used as rigidly in modern Punjabi.
	        months : 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
	        monthsShort : 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
	        weekdays : 'ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ'.split('_'),
	        weekdaysShort : 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
	        weekdaysMin : 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm ਵਜੇ',
	            LTS : 'A h:mm:ss ਵਜੇ',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, A h:mm ਵਜੇ',
	            LLLL : 'dddd, D MMMM YYYY, A h:mm ਵਜੇ'
	        },
	        calendar : {
	            sameDay : '[ਅਜ] LT',
	            nextDay : '[ਕਲ] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[ਕਲ] LT',
	            lastWeek : '[ਪਿਛਲੇ] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s ਵਿੱਚ',
	            past : '%s ਪਿਛਲੇ',
	            s : 'ਕੁਝ ਸਕਿੰਟ',
	            m : 'ਇਕ ਮਿੰਟ',
	            mm : '%d ਮਿੰਟ',
	            h : 'ਇੱਕ ਘੰਟਾ',
	            hh : '%d ਘੰਟੇ',
	            d : 'ਇੱਕ ਦਿਨ',
	            dd : '%d ਦਿਨ',
	            M : 'ਇੱਕ ਮਹੀਨਾ',
	            MM : '%d ਮਹੀਨੇ',
	            y : 'ਇੱਕ ਸਾਲ',
	            yy : '%d ਸਾਲ'
	        },
	        preparse: function (string) {
	            return string.replace(/[੧੨੩੪੫੬੭੮੯੦]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        // Punjabi notation for meridiems are quite fuzzy in practice. While there exists
	        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Punjabi.
	        meridiemParse: /ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'ਰਾਤ') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'ਸਵੇਰ') {
	                return hour;
	            } else if (meridiem === 'ਦੁਪਹਿਰ') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'ਸ਼ਾਮ') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ਰਾਤ';
	            } else if (hour < 10) {
	                return 'ਸਵੇਰ';
	            } else if (hour < 17) {
	                return 'ਦੁਪਹਿਰ';
	            } else if (hour < 20) {
	                return 'ਸ਼ਾਮ';
	            } else {
	                return 'ਰਾਤ';
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return pa_in;
	
	}));

/***/ },
/* 489 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : polish (pl)
	//! author : Rafal Hirsz : https://github.com/evoL
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var monthsNominative = 'styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień'.split('_'),
	        monthsSubjective = 'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia'.split('_');
	    function plural(n) {
	        return (n % 10 < 5) && (n % 10 > 1) && ((~~(n / 10) % 10) !== 1);
	    }
	    function translate(number, withoutSuffix, key) {
	        var result = number + ' ';
	        switch (key) {
	        case 'm':
	            return withoutSuffix ? 'minuta' : 'minutę';
	        case 'mm':
	            return result + (plural(number) ? 'minuty' : 'minut');
	        case 'h':
	            return withoutSuffix  ? 'godzina'  : 'godzinę';
	        case 'hh':
	            return result + (plural(number) ? 'godziny' : 'godzin');
	        case 'MM':
	            return result + (plural(number) ? 'miesiące' : 'miesięcy');
	        case 'yy':
	            return result + (plural(number) ? 'lata' : 'lat');
	        }
	    }
	
	    var pl = moment.defineLocale('pl', {
	        months : function (momentToFormat, format) {
	            if (format === '') {
	                // Hack: if format empty we know this is used to generate
	                // RegExp by moment. Give then back both valid forms of months
	                // in RegExp ready format.
	                return '(' + monthsSubjective[momentToFormat.month()] + '|' + monthsNominative[momentToFormat.month()] + ')';
	            } else if (/D MMMM/.test(format)) {
	                return monthsSubjective[momentToFormat.month()];
	            } else {
	                return monthsNominative[momentToFormat.month()];
	            }
	        },
	        monthsShort : 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru'.split('_'),
	        weekdays : 'niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota'.split('_'),
	        weekdaysShort : 'nie_pon_wt_śr_czw_pt_sb'.split('_'),
	        weekdaysMin : 'Nd_Pn_Wt_Śr_Cz_Pt_So'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Dziś o] LT',
	            nextDay: '[Jutro o] LT',
	            nextWeek: '[W] dddd [o] LT',
	            lastDay: '[Wczoraj o] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                case 0:
	                    return '[W zeszłą niedzielę o] LT';
	                case 3:
	                    return '[W zeszłą środę o] LT';
	                case 6:
	                    return '[W zeszłą sobotę o] LT';
	                default:
	                    return '[W zeszły] dddd [o] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past : '%s temu',
	            s : 'kilka sekund',
	            m : translate,
	            mm : translate,
	            h : translate,
	            hh : translate,
	            d : '1 dzień',
	            dd : '%d dni',
	            M : 'miesiąc',
	            MM : translate,
	            y : 'rok',
	            yy : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return pl;
	
	}));

/***/ },
/* 490 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : portuguese (pt)
	//! author : Jefferson : https://github.com/jalex79
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var pt = moment.defineLocale('pt', {
	        months : 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),
	        monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
	        weekdays : 'Domingo_Segunda-Feira_Terça-Feira_Quarta-Feira_Quinta-Feira_Sexta-Feira_Sábado'.split('_'),
	        weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
	        weekdaysMin : 'Dom_2ª_3ª_4ª_5ª_6ª_Sáb'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D [de] MMMM [de] YYYY',
	            LLL : 'D [de] MMMM [de] YYYY HH:mm',
	            LLLL : 'dddd, D [de] MMMM [de] YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Hoje às] LT',
	            nextDay: '[Amanhã às] LT',
	            nextWeek: 'dddd [às] LT',
	            lastDay: '[Ontem às] LT',
	            lastWeek: function () {
	                return (this.day() === 0 || this.day() === 6) ?
	                    '[Último] dddd [às] LT' : // Saturday + Sunday
	                    '[Última] dddd [às] LT'; // Monday - Friday
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'em %s',
	            past : 'há %s',
	            s : 'segundos',
	            m : 'um minuto',
	            mm : '%d minutos',
	            h : 'uma hora',
	            hh : '%d horas',
	            d : 'um dia',
	            dd : '%d dias',
	            M : 'um mês',
	            MM : '%d meses',
	            y : 'um ano',
	            yy : '%d anos'
	        },
	        ordinalParse: /\d{1,2}º/,
	        ordinal : '%dº',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return pt;
	
	}));

/***/ },
/* 491 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : brazilian portuguese (pt-br)
	//! author : Caio Ribeiro Pereira : https://github.com/caio-ribeiro-pereira
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var pt_br = moment.defineLocale('pt-br', {
	        months : 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),
	        monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
	        weekdays : 'Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado'.split('_'),
	        weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
	        weekdaysMin : 'Dom_2ª_3ª_4ª_5ª_6ª_Sáb'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D [de] MMMM [de] YYYY',
	            LLL : 'D [de] MMMM [de] YYYY [às] HH:mm',
	            LLLL : 'dddd, D [de] MMMM [de] YYYY [às] HH:mm'
	        },
	        calendar : {
	            sameDay: '[Hoje às] LT',
	            nextDay: '[Amanhã às] LT',
	            nextWeek: 'dddd [às] LT',
	            lastDay: '[Ontem às] LT',
	            lastWeek: function () {
	                return (this.day() === 0 || this.day() === 6) ?
	                    '[Último] dddd [às] LT' : // Saturday + Sunday
	                    '[Última] dddd [às] LT'; // Monday - Friday
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'em %s',
	            past : '%s atrás',
	            s : 'poucos segundos',
	            m : 'um minuto',
	            mm : '%d minutos',
	            h : 'uma hora',
	            hh : '%d horas',
	            d : 'um dia',
	            dd : '%d dias',
	            M : 'um mês',
	            MM : '%d meses',
	            y : 'um ano',
	            yy : '%d anos'
	        },
	        ordinalParse: /\d{1,2}º/,
	        ordinal : '%dº'
	    });
	
	    return pt_br;
	
	}));

/***/ },
/* 492 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : romanian (ro)
	//! author : Vlad Gurdiga : https://github.com/gurdiga
	//! author : Valentin Agachi : https://github.com/avaly
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	                'mm': 'minute',
	                'hh': 'ore',
	                'dd': 'zile',
	                'MM': 'luni',
	                'yy': 'ani'
	            },
	            separator = ' ';
	        if (number % 100 >= 20 || (number >= 100 && number % 100 === 0)) {
	            separator = ' de ';
	        }
	        return number + separator + format[key];
	    }
	
	    var ro = moment.defineLocale('ro', {
	        months : 'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split('_'),
	        monthsShort : 'ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split('_'),
	        weekdays : 'duminică_luni_marți_miercuri_joi_vineri_sâmbătă'.split('_'),
	        weekdaysShort : 'Dum_Lun_Mar_Mie_Joi_Vin_Sâm'.split('_'),
	        weekdaysMin : 'Du_Lu_Ma_Mi_Jo_Vi_Sâ'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY H:mm',
	            LLLL : 'dddd, D MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay: '[azi la] LT',
	            nextDay: '[mâine la] LT',
	            nextWeek: 'dddd [la] LT',
	            lastDay: '[ieri la] LT',
	            lastWeek: '[fosta] dddd [la] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'peste %s',
	            past : '%s în urmă',
	            s : 'câteva secunde',
	            m : 'un minut',
	            mm : relativeTimeWithPlural,
	            h : 'o oră',
	            hh : relativeTimeWithPlural,
	            d : 'o zi',
	            dd : relativeTimeWithPlural,
	            M : 'o lună',
	            MM : relativeTimeWithPlural,
	            y : 'un an',
	            yy : relativeTimeWithPlural
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return ro;
	
	}));

/***/ },
/* 493 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : russian (ru)
	//! author : Viktorminator : https://github.com/Viktorminator
	//! Author : Menelion Elensúle : https://github.com/Oire
	//! author : Коренберг Марк : https://github.com/socketpair
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    function plural(word, num) {
	        var forms = word.split('_');
	        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
	    }
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	            'mm': withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',
	            'hh': 'час_часа_часов',
	            'dd': 'день_дня_дней',
	            'MM': 'месяц_месяца_месяцев',
	            'yy': 'год_года_лет'
	        };
	        if (key === 'm') {
	            return withoutSuffix ? 'минута' : 'минуту';
	        }
	        else {
	            return number + ' ' + plural(format[key], +number);
	        }
	    }
	    var monthsParse = [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[й|я]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i];
	
	    // http://new.gramota.ru/spravka/rules/139-prop : § 103
	    var ru = moment.defineLocale('ru', {
	        months : {
	            format: 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split('_'),
	            standalone: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_')
	        },
	        monthsShort : {
	            format: 'янв_фев_мар_апр_мая_июня_июля_авг_сен_окт_ноя_дек'.split('_'),
	            standalone: 'янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split('_')
	        },
	        weekdays : {
	            standalone: 'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split('_'),
	            format: 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split('_'),
	            isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/
	        },
	        weekdaysShort : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
	        weekdaysMin : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
	        monthsParse : monthsParse,
	        longMonthsParse : monthsParse,
	        shortMonthsParse : monthsParse,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY г.',
	            LLL : 'D MMMM YYYY г., HH:mm',
	            LLLL : 'dddd, D MMMM YYYY г., HH:mm'
	        },
	        calendar : {
	            sameDay: '[Сегодня в] LT',
	            nextDay: '[Завтра в] LT',
	            lastDay: '[Вчера в] LT',
	            nextWeek: function (now) {
	                if (now.week() !== this.week()) {
	                    switch (this.day()) {
	                    case 0:
	                        return '[В следующее] dddd [в] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                        return '[В следующий] dddd [в] LT';
	                    case 3:
	                    case 5:
	                    case 6:
	                        return '[В следующую] dddd [в] LT';
	                    }
	                } else {
	                    if (this.day() === 2) {
	                        return '[Во] dddd [в] LT';
	                    } else {
	                        return '[В] dddd [в] LT';
	                    }
	                }
	            },
	            lastWeek: function (now) {
	                if (now.week() !== this.week()) {
	                    switch (this.day()) {
	                    case 0:
	                        return '[В прошлое] dddd [в] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                        return '[В прошлый] dddd [в] LT';
	                    case 3:
	                    case 5:
	                    case 6:
	                        return '[В прошлую] dddd [в] LT';
	                    }
	                } else {
	                    if (this.day() === 2) {
	                        return '[Во] dddd [в] LT';
	                    } else {
	                        return '[В] dddd [в] LT';
	                    }
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'через %s',
	            past : '%s назад',
	            s : 'несколько секунд',
	            m : relativeTimeWithPlural,
	            mm : relativeTimeWithPlural,
	            h : 'час',
	            hh : relativeTimeWithPlural,
	            d : 'день',
	            dd : relativeTimeWithPlural,
	            M : 'месяц',
	            MM : relativeTimeWithPlural,
	            y : 'год',
	            yy : relativeTimeWithPlural
	        },
	        meridiemParse: /ночи|утра|дня|вечера/i,
	        isPM : function (input) {
	            return /^(дня|вечера)$/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ночи';
	            } else if (hour < 12) {
	                return 'утра';
	            } else if (hour < 17) {
	                return 'дня';
	            } else {
	                return 'вечера';
	            }
	        },
	        ordinalParse: /\d{1,2}-(й|го|я)/,
	        ordinal: function (number, period) {
	            switch (period) {
	            case 'M':
	            case 'd':
	            case 'DDD':
	                return number + '-й';
	            case 'D':
	                return number + '-го';
	            case 'w':
	            case 'W':
	                return number + '-я';
	            default:
	                return number;
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return ru;
	
	}));

/***/ },
/* 494 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Northern Sami (se)
	//! authors : Bård Rolstad Henriksen : https://github.com/karamell
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	
	    var se = moment.defineLocale('se', {
	        months : 'ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu'.split('_'),
	        monthsShort : 'ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov'.split('_'),
	        weekdays : 'sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat'.split('_'),
	        weekdaysShort : 'sotn_vuos_maŋ_gask_duor_bear_láv'.split('_'),
	        weekdaysMin : 's_v_m_g_d_b_L'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'MMMM D. [b.] YYYY',
	            LLL : 'MMMM D. [b.] YYYY [ti.] HH:mm',
	            LLLL : 'dddd, MMMM D. [b.] YYYY [ti.] HH:mm'
	        },
	        calendar : {
	            sameDay: '[otne ti] LT',
	            nextDay: '[ihttin ti] LT',
	            nextWeek: 'dddd [ti] LT',
	            lastDay: '[ikte ti] LT',
	            lastWeek: '[ovddit] dddd [ti] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : '%s geažes',
	            past : 'maŋit %s',
	            s : 'moadde sekunddat',
	            m : 'okta minuhta',
	            mm : '%d minuhtat',
	            h : 'okta diimmu',
	            hh : '%d diimmut',
	            d : 'okta beaivi',
	            dd : '%d beaivvit',
	            M : 'okta mánnu',
	            MM : '%d mánut',
	            y : 'okta jahki',
	            yy : '%d jagit'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return se;
	
	}));

/***/ },
/* 495 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Sinhalese (si)
	//! author : Sampath Sitinamaluwa : https://github.com/sampathsris
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    /*jshint -W100*/
	    var si = moment.defineLocale('si', {
	        months : 'ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්'.split('_'),
	        monthsShort : 'ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ'.split('_'),
	        weekdays : 'ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා'.split('_'),
	        weekdaysShort : 'ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන'.split('_'),
	        weekdaysMin : 'ඉ_ස_අ_බ_බ්‍ර_සි_සෙ'.split('_'),
	        longDateFormat : {
	            LT : 'a h:mm',
	            LTS : 'a h:mm:ss',
	            L : 'YYYY/MM/DD',
	            LL : 'YYYY MMMM D',
	            LLL : 'YYYY MMMM D, a h:mm',
	            LLLL : 'YYYY MMMM D [වැනි] dddd, a h:mm:ss'
	        },
	        calendar : {
	            sameDay : '[අද] LT[ට]',
	            nextDay : '[හෙට] LT[ට]',
	            nextWeek : 'dddd LT[ට]',
	            lastDay : '[ඊයේ] LT[ට]',
	            lastWeek : '[පසුගිය] dddd LT[ට]',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%sකින්',
	            past : '%sකට පෙර',
	            s : 'තත්පර කිහිපය',
	            m : 'මිනිත්තුව',
	            mm : 'මිනිත්තු %d',
	            h : 'පැය',
	            hh : 'පැය %d',
	            d : 'දිනය',
	            dd : 'දින %d',
	            M : 'මාසය',
	            MM : 'මාස %d',
	            y : 'වසර',
	            yy : 'වසර %d'
	        },
	        ordinalParse: /\d{1,2} වැනි/,
	        ordinal : function (number) {
	            return number + ' වැනි';
	        },
	        meridiemParse : /පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,
	        isPM : function (input) {
	            return input === 'ප.ව.' || input === 'පස් වරු';
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? 'ප.ව.' : 'පස් වරු';
	            } else {
	                return isLower ? 'පෙ.ව.' : 'පෙර වරු';
	            }
	        }
	    });
	
	    return si;
	
	}));

/***/ },
/* 496 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : slovak (sk)
	//! author : Martin Minka : https://github.com/k2s
	//! based on work of petrbela : https://github.com/petrbela
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var months = 'január_február_marec_apríl_máj_jún_júl_august_september_október_november_december'.split('_'),
	        monthsShort = 'jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec'.split('_');
	    function plural(n) {
	        return (n > 1) && (n < 5);
	    }
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        switch (key) {
	        case 's':  // a few seconds / in a few seconds / a few seconds ago
	            return (withoutSuffix || isFuture) ? 'pár sekúnd' : 'pár sekundami';
	        case 'm':  // a minute / in a minute / a minute ago
	            return withoutSuffix ? 'minúta' : (isFuture ? 'minútu' : 'minútou');
	        case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'minúty' : 'minút');
	            } else {
	                return result + 'minútami';
	            }
	            break;
	        case 'h':  // an hour / in an hour / an hour ago
	            return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
	        case 'hh': // 9 hours / in 9 hours / 9 hours ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'hodiny' : 'hodín');
	            } else {
	                return result + 'hodinami';
	            }
	            break;
	        case 'd':  // a day / in a day / a day ago
	            return (withoutSuffix || isFuture) ? 'deň' : 'dňom';
	        case 'dd': // 9 days / in 9 days / 9 days ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'dni' : 'dní');
	            } else {
	                return result + 'dňami';
	            }
	            break;
	        case 'M':  // a month / in a month / a month ago
	            return (withoutSuffix || isFuture) ? 'mesiac' : 'mesiacom';
	        case 'MM': // 9 months / in 9 months / 9 months ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'mesiace' : 'mesiacov');
	            } else {
	                return result + 'mesiacmi';
	            }
	            break;
	        case 'y':  // a year / in a year / a year ago
	            return (withoutSuffix || isFuture) ? 'rok' : 'rokom';
	        case 'yy': // 9 years / in 9 years / 9 years ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'roky' : 'rokov');
	            } else {
	                return result + 'rokmi';
	            }
	            break;
	        }
	    }
	
	    var sk = moment.defineLocale('sk', {
	        months : months,
	        monthsShort : monthsShort,
	        weekdays : 'nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota'.split('_'),
	        weekdaysShort : 'ne_po_ut_st_št_pi_so'.split('_'),
	        weekdaysMin : 'ne_po_ut_st_št_pi_so'.split('_'),
	        longDateFormat : {
	            LT: 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY H:mm',
	            LLLL : 'dddd D. MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay: '[dnes o] LT',
	            nextDay: '[zajtra o] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                case 0:
	                    return '[v nedeľu o] LT';
	                case 1:
	                case 2:
	                    return '[v] dddd [o] LT';
	                case 3:
	                    return '[v stredu o] LT';
	                case 4:
	                    return '[vo štvrtok o] LT';
	                case 5:
	                    return '[v piatok o] LT';
	                case 6:
	                    return '[v sobotu o] LT';
	                }
	            },
	            lastDay: '[včera o] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                case 0:
	                    return '[minulú nedeľu o] LT';
	                case 1:
	                case 2:
	                    return '[minulý] dddd [o] LT';
	                case 3:
	                    return '[minulú stredu o] LT';
	                case 4:
	                case 5:
	                    return '[minulý] dddd [o] LT';
	                case 6:
	                    return '[minulú sobotu o] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past : 'pred %s',
	            s : translate,
	            m : translate,
	            mm : translate,
	            h : translate,
	            hh : translate,
	            d : translate,
	            dd : translate,
	            M : translate,
	            MM : translate,
	            y : translate,
	            yy : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return sk;
	
	}));

/***/ },
/* 497 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : slovenian (sl)
	//! author : Robert Sedovšek : https://github.com/sedovsek
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        switch (key) {
	        case 's':
	            return withoutSuffix || isFuture ? 'nekaj sekund' : 'nekaj sekundami';
	        case 'm':
	            return withoutSuffix ? 'ena minuta' : 'eno minuto';
	        case 'mm':
	            if (number === 1) {
	                result += withoutSuffix ? 'minuta' : 'minuto';
	            } else if (number === 2) {
	                result += withoutSuffix || isFuture ? 'minuti' : 'minutama';
	            } else if (number < 5) {
	                result += withoutSuffix || isFuture ? 'minute' : 'minutami';
	            } else {
	                result += withoutSuffix || isFuture ? 'minut' : 'minutami';
	            }
	            return result;
	        case 'h':
	            return withoutSuffix ? 'ena ura' : 'eno uro';
	        case 'hh':
	            if (number === 1) {
	                result += withoutSuffix ? 'ura' : 'uro';
	            } else if (number === 2) {
	                result += withoutSuffix || isFuture ? 'uri' : 'urama';
	            } else if (number < 5) {
	                result += withoutSuffix || isFuture ? 'ure' : 'urami';
	            } else {
	                result += withoutSuffix || isFuture ? 'ur' : 'urami';
	            }
	            return result;
	        case 'd':
	            return withoutSuffix || isFuture ? 'en dan' : 'enim dnem';
	        case 'dd':
	            if (number === 1) {
	                result += withoutSuffix || isFuture ? 'dan' : 'dnem';
	            } else if (number === 2) {
	                result += withoutSuffix || isFuture ? 'dni' : 'dnevoma';
	            } else {
	                result += withoutSuffix || isFuture ? 'dni' : 'dnevi';
	            }
	            return result;
	        case 'M':
	            return withoutSuffix || isFuture ? 'en mesec' : 'enim mesecem';
	        case 'MM':
	            if (number === 1) {
	                result += withoutSuffix || isFuture ? 'mesec' : 'mesecem';
	            } else if (number === 2) {
	                result += withoutSuffix || isFuture ? 'meseca' : 'mesecema';
	            } else if (number < 5) {
	                result += withoutSuffix || isFuture ? 'mesece' : 'meseci';
	            } else {
	                result += withoutSuffix || isFuture ? 'mesecev' : 'meseci';
	            }
	            return result;
	        case 'y':
	            return withoutSuffix || isFuture ? 'eno leto' : 'enim letom';
	        case 'yy':
	            if (number === 1) {
	                result += withoutSuffix || isFuture ? 'leto' : 'letom';
	            } else if (number === 2) {
	                result += withoutSuffix || isFuture ? 'leti' : 'letoma';
	            } else if (number < 5) {
	                result += withoutSuffix || isFuture ? 'leta' : 'leti';
	            } else {
	                result += withoutSuffix || isFuture ? 'let' : 'leti';
	            }
	            return result;
	        }
	    }
	
	    var sl = moment.defineLocale('sl', {
	        months : 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split('_'),
	        monthsShort : 'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split('_'),
	        weekdays : 'nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota'.split('_'),
	        weekdaysShort : 'ned._pon._tor._sre._čet._pet._sob.'.split('_'),
	        weekdaysMin : 'ne_po_to_sr_če_pe_so'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD. MM. YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY H:mm',
	            LLLL : 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay  : '[danes ob] LT',
	            nextDay  : '[jutri ob] LT',
	
	            nextWeek : function () {
	                switch (this.day()) {
	                case 0:
	                    return '[v] [nedeljo] [ob] LT';
	                case 3:
	                    return '[v] [sredo] [ob] LT';
	                case 6:
	                    return '[v] [soboto] [ob] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[v] dddd [ob] LT';
	                }
	            },
	            lastDay  : '[včeraj ob] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                case 0:
	                    return '[prejšnjo] [nedeljo] [ob] LT';
	                case 3:
	                    return '[prejšnjo] [sredo] [ob] LT';
	                case 6:
	                    return '[prejšnjo] [soboto] [ob] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[prejšnji] dddd [ob] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'čez %s',
	            past   : 'pred %s',
	            s      : processRelativeTime,
	            m      : processRelativeTime,
	            mm     : processRelativeTime,
	            h      : processRelativeTime,
	            hh     : processRelativeTime,
	            d      : processRelativeTime,
	            dd     : processRelativeTime,
	            M      : processRelativeTime,
	            MM     : processRelativeTime,
	            y      : processRelativeTime,
	            yy     : processRelativeTime
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return sl;
	
	}));

/***/ },
/* 498 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Albanian (sq)
	//! author : Flakërim Ismani : https://github.com/flakerimi
	//! author: Menelion Elensúle: https://github.com/Oire (tests)
	//! author : Oerd Cukalla : https://github.com/oerd (fixes)
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var sq = moment.defineLocale('sq', {
	        months : 'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor'.split('_'),
	        monthsShort : 'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj'.split('_'),
	        weekdays : 'E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë'.split('_'),
	        weekdaysShort : 'Die_Hën_Mar_Mër_Enj_Pre_Sht'.split('_'),
	        weekdaysMin : 'D_H_Ma_Më_E_P_Sh'.split('_'),
	        meridiemParse: /PD|MD/,
	        isPM: function (input) {
	            return input.charAt(0) === 'M';
	        },
	        meridiem : function (hours, minutes, isLower) {
	            return hours < 12 ? 'PD' : 'MD';
	        },
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Sot në] LT',
	            nextDay : '[Nesër në] LT',
	            nextWeek : 'dddd [në] LT',
	            lastDay : '[Dje në] LT',
	            lastWeek : 'dddd [e kaluar në] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'në %s',
	            past : '%s më parë',
	            s : 'disa sekonda',
	            m : 'një minutë',
	            mm : '%d minuta',
	            h : 'një orë',
	            hh : '%d orë',
	            d : 'një ditë',
	            dd : '%d ditë',
	            M : 'një muaj',
	            MM : '%d muaj',
	            y : 'një vit',
	            yy : '%d vite'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return sq;
	
	}));

/***/ },
/* 499 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Serbian-latin (sr)
	//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var translator = {
	        words: { //Different grammatical cases
	            m: ['jedan minut', 'jedne minute'],
	            mm: ['minut', 'minute', 'minuta'],
	            h: ['jedan sat', 'jednog sata'],
	            hh: ['sat', 'sata', 'sati'],
	            dd: ['dan', 'dana', 'dana'],
	            MM: ['mesec', 'meseca', 'meseci'],
	            yy: ['godina', 'godine', 'godina']
	        },
	        correctGrammaticalCase: function (number, wordKey) {
	            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
	        },
	        translate: function (number, withoutSuffix, key) {
	            var wordKey = translator.words[key];
	            if (key.length === 1) {
	                return withoutSuffix ? wordKey[0] : wordKey[1];
	            } else {
	                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
	            }
	        }
	    };
	
	    var sr = moment.defineLocale('sr', {
	        months: ['januar', 'februar', 'mart', 'april', 'maj', 'jun', 'jul', 'avgust', 'septembar', 'oktobar', 'novembar', 'decembar'],
	        monthsShort: ['jan.', 'feb.', 'mar.', 'apr.', 'maj', 'jun', 'jul', 'avg.', 'sep.', 'okt.', 'nov.', 'dec.'],
	        weekdays: ['nedelja', 'ponedeljak', 'utorak', 'sreda', 'četvrtak', 'petak', 'subota'],
	        weekdaysShort: ['ned.', 'pon.', 'uto.', 'sre.', 'čet.', 'pet.', 'sub.'],
	        weekdaysMin: ['ne', 'po', 'ut', 'sr', 'če', 'pe', 'su'],
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS : 'H:mm:ss',
	            L: 'DD. MM. YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm',
	            LLLL: 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar: {
	            sameDay: '[danas u] LT',
	            nextDay: '[sutra u] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                case 0:
	                    return '[u] [nedelju] [u] LT';
	                case 3:
	                    return '[u] [sredu] [u] LT';
	                case 6:
	                    return '[u] [subotu] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[u] dddd [u] LT';
	                }
	            },
	            lastDay  : '[juče u] LT',
	            lastWeek : function () {
	                var lastWeekDays = [
	                    '[prošle] [nedelje] [u] LT',
	                    '[prošlog] [ponedeljka] [u] LT',
	                    '[prošlog] [utorka] [u] LT',
	                    '[prošle] [srede] [u] LT',
	                    '[prošlog] [četvrtka] [u] LT',
	                    '[prošlog] [petka] [u] LT',
	                    '[prošle] [subote] [u] LT'
	                ];
	                return lastWeekDays[this.day()];
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past   : 'pre %s',
	            s      : 'nekoliko sekundi',
	            m      : translator.translate,
	            mm     : translator.translate,
	            h      : translator.translate,
	            hh     : translator.translate,
	            d      : 'dan',
	            dd     : translator.translate,
	            M      : 'mesec',
	            MM     : translator.translate,
	            y      : 'godinu',
	            yy     : translator.translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return sr;
	
	}));

/***/ },
/* 500 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Serbian-cyrillic (sr-cyrl)
	//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var translator = {
	        words: { //Different grammatical cases
	            m: ['један минут', 'једне минуте'],
	            mm: ['минут', 'минуте', 'минута'],
	            h: ['један сат', 'једног сата'],
	            hh: ['сат', 'сата', 'сати'],
	            dd: ['дан', 'дана', 'дана'],
	            MM: ['месец', 'месеца', 'месеци'],
	            yy: ['година', 'године', 'година']
	        },
	        correctGrammaticalCase: function (number, wordKey) {
	            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
	        },
	        translate: function (number, withoutSuffix, key) {
	            var wordKey = translator.words[key];
	            if (key.length === 1) {
	                return withoutSuffix ? wordKey[0] : wordKey[1];
	            } else {
	                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
	            }
	        }
	    };
	
	    var sr_cyrl = moment.defineLocale('sr-cyrl', {
	        months: ['јануар', 'фебруар', 'март', 'април', 'мај', 'јун', 'јул', 'август', 'септембар', 'октобар', 'новембар', 'децембар'],
	        monthsShort: ['јан.', 'феб.', 'мар.', 'апр.', 'мај', 'јун', 'јул', 'авг.', 'сеп.', 'окт.', 'нов.', 'дец.'],
	        weekdays: ['недеља', 'понедељак', 'уторак', 'среда', 'четвртак', 'петак', 'субота'],
	        weekdaysShort: ['нед.', 'пон.', 'уто.', 'сре.', 'чет.', 'пет.', 'суб.'],
	        weekdaysMin: ['не', 'по', 'ут', 'ср', 'че', 'пе', 'су'],
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS : 'H:mm:ss',
	            L: 'DD. MM. YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm',
	            LLLL: 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar: {
	            sameDay: '[данас у] LT',
	            nextDay: '[сутра у] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                case 0:
	                    return '[у] [недељу] [у] LT';
	                case 3:
	                    return '[у] [среду] [у] LT';
	                case 6:
	                    return '[у] [суботу] [у] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[у] dddd [у] LT';
	                }
	            },
	            lastDay  : '[јуче у] LT',
	            lastWeek : function () {
	                var lastWeekDays = [
	                    '[прошле] [недеље] [у] LT',
	                    '[прошлог] [понедељка] [у] LT',
	                    '[прошлог] [уторка] [у] LT',
	                    '[прошле] [среде] [у] LT',
	                    '[прошлог] [четвртка] [у] LT',
	                    '[прошлог] [петка] [у] LT',
	                    '[прошле] [суботе] [у] LT'
	                ];
	                return lastWeekDays[this.day()];
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'за %s',
	            past   : 'пре %s',
	            s      : 'неколико секунди',
	            m      : translator.translate,
	            mm     : translator.translate,
	            h      : translator.translate,
	            hh     : translator.translate,
	            d      : 'дан',
	            dd     : translator.translate,
	            M      : 'месец',
	            MM     : translator.translate,
	            y      : 'годину',
	            yy     : translator.translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return sr_cyrl;
	
	}));

/***/ },
/* 501 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : swedish (sv)
	//! author : Jens Alm : https://github.com/ulmus
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var sv = moment.defineLocale('sv', {
	        months : 'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
	        weekdays : 'söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag'.split('_'),
	        weekdaysShort : 'sön_mån_tis_ons_tor_fre_lör'.split('_'),
	        weekdaysMin : 'sö_må_ti_on_to_fr_lö'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'YYYY-MM-DD',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Idag] LT',
	            nextDay: '[Imorgon] LT',
	            lastDay: '[Igår] LT',
	            nextWeek: '[På] dddd LT',
	            lastWeek: '[I] dddd[s] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'om %s',
	            past : 'för %s sedan',
	            s : 'några sekunder',
	            m : 'en minut',
	            mm : '%d minuter',
	            h : 'en timme',
	            hh : '%d timmar',
	            d : 'en dag',
	            dd : '%d dagar',
	            M : 'en månad',
	            MM : '%d månader',
	            y : 'ett år',
	            yy : '%d år'
	        },
	        ordinalParse: /\d{1,2}(e|a)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'e' :
	                (b === 1) ? 'a' :
	                (b === 2) ? 'a' :
	                (b === 3) ? 'e' : 'e';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return sv;
	
	}));

/***/ },
/* 502 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : swahili (sw)
	//! author : Fahad Kassim : https://github.com/fadsel
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var sw = moment.defineLocale('sw', {
	        months : 'Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba'.split('_'),
	        monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des'.split('_'),
	        weekdays : 'Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi'.split('_'),
	        weekdaysShort : 'Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos'.split('_'),
	        weekdaysMin : 'J2_J3_J4_J5_Al_Ij_J1'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[leo saa] LT',
	            nextDay : '[kesho saa] LT',
	            nextWeek : '[wiki ijayo] dddd [saat] LT',
	            lastDay : '[jana] LT',
	            lastWeek : '[wiki iliyopita] dddd [saat] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s baadaye',
	            past : 'tokea %s',
	            s : 'hivi punde',
	            m : 'dakika moja',
	            mm : 'dakika %d',
	            h : 'saa limoja',
	            hh : 'masaa %d',
	            d : 'siku moja',
	            dd : 'masiku %d',
	            M : 'mwezi mmoja',
	            MM : 'miezi %d',
	            y : 'mwaka mmoja',
	            yy : 'miaka %d'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return sw;
	
	}));

/***/ },
/* 503 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : tamil (ta)
	//! author : Arjunkumar Krishnamoorthy : https://github.com/tk120404
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var symbolMap = {
	        '1': '௧',
	        '2': '௨',
	        '3': '௩',
	        '4': '௪',
	        '5': '௫',
	        '6': '௬',
	        '7': '௭',
	        '8': '௮',
	        '9': '௯',
	        '0': '௦'
	    }, numberMap = {
	        '௧': '1',
	        '௨': '2',
	        '௩': '3',
	        '௪': '4',
	        '௫': '5',
	        '௬': '6',
	        '௭': '7',
	        '௮': '8',
	        '௯': '9',
	        '௦': '0'
	    };
	
	    var ta = moment.defineLocale('ta', {
	        months : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
	        monthsShort : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
	        weekdays : 'ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை'.split('_'),
	        weekdaysShort : 'ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி'.split('_'),
	        weekdaysMin : 'ஞா_தி_செ_பு_வி_வெ_ச'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, HH:mm',
	            LLLL : 'dddd, D MMMM YYYY, HH:mm'
	        },
	        calendar : {
	            sameDay : '[இன்று] LT',
	            nextDay : '[நாளை] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[நேற்று] LT',
	            lastWeek : '[கடந்த வாரம்] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s இல்',
	            past : '%s முன்',
	            s : 'ஒரு சில விநாடிகள்',
	            m : 'ஒரு நிமிடம்',
	            mm : '%d நிமிடங்கள்',
	            h : 'ஒரு மணி நேரம்',
	            hh : '%d மணி நேரம்',
	            d : 'ஒரு நாள்',
	            dd : '%d நாட்கள்',
	            M : 'ஒரு மாதம்',
	            MM : '%d மாதங்கள்',
	            y : 'ஒரு வருடம்',
	            yy : '%d ஆண்டுகள்'
	        },
	        ordinalParse: /\d{1,2}வது/,
	        ordinal : function (number) {
	            return number + 'வது';
	        },
	        preparse: function (string) {
	            return string.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        // refer http://ta.wikipedia.org/s/1er1
	        meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 2) {
	                return ' யாமம்';
	            } else if (hour < 6) {
	                return ' வைகறை';  // வைகறை
	            } else if (hour < 10) {
	                return ' காலை'; // காலை
	            } else if (hour < 14) {
	                return ' நண்பகல்'; // நண்பகல்
	            } else if (hour < 18) {
	                return ' எற்பாடு'; // எற்பாடு
	            } else if (hour < 22) {
	                return ' மாலை'; // மாலை
	            } else {
	                return ' யாமம்';
	            }
	        },
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'யாமம்') {
	                return hour < 2 ? hour : hour + 12;
	            } else if (meridiem === 'வைகறை' || meridiem === 'காலை') {
	                return hour;
	            } else if (meridiem === 'நண்பகல்') {
	                return hour >= 10 ? hour : hour + 12;
	            } else {
	                return hour + 12;
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return ta;
	
	}));

/***/ },
/* 504 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : telugu (te)
	//! author : Krishna Chaitanya Thota : https://github.com/kcthota
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var te = moment.defineLocale('te', {
	        months : 'జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జూలై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్'.split('_'),
	        monthsShort : 'జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జూలై_ఆగ._సెప్._అక్టో._నవ._డిసె.'.split('_'),
	        weekdays : 'ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం'.split('_'),
	        weekdaysShort : 'ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని'.split('_'),
	        weekdaysMin : 'ఆ_సో_మం_బు_గు_శు_శ'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm',
	            LTS : 'A h:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, A h:mm',
	            LLLL : 'dddd, D MMMM YYYY, A h:mm'
	        },
	        calendar : {
	            sameDay : '[నేడు] LT',
	            nextDay : '[రేపు] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[నిన్న] LT',
	            lastWeek : '[గత] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s లో',
	            past : '%s క్రితం',
	            s : 'కొన్ని క్షణాలు',
	            m : 'ఒక నిమిషం',
	            mm : '%d నిమిషాలు',
	            h : 'ఒక గంట',
	            hh : '%d గంటలు',
	            d : 'ఒక రోజు',
	            dd : '%d రోజులు',
	            M : 'ఒక నెల',
	            MM : '%d నెలలు',
	            y : 'ఒక సంవత్సరం',
	            yy : '%d సంవత్సరాలు'
	        },
	        ordinalParse : /\d{1,2}వ/,
	        ordinal : '%dవ',
	        meridiemParse: /రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'రాత్రి') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'ఉదయం') {
	                return hour;
	            } else if (meridiem === 'మధ్యాహ్నం') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'సాయంత్రం') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'రాత్రి';
	            } else if (hour < 10) {
	                return 'ఉదయం';
	            } else if (hour < 17) {
	                return 'మధ్యాహ్నం';
	            } else if (hour < 20) {
	                return 'సాయంత్రం';
	            } else {
	                return 'రాత్రి';
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return te;
	
	}));

/***/ },
/* 505 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : thai (th)
	//! author : Kridsada Thanabulpong : https://github.com/sirn
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var th = moment.defineLocale('th', {
	        months : 'มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม'.split('_'),
	        monthsShort : 'มกรา_กุมภา_มีนา_เมษา_พฤษภา_มิถุนา_กรกฎา_สิงหา_กันยา_ตุลา_พฤศจิกา_ธันวา'.split('_'),
	        weekdays : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์'.split('_'),
	        weekdaysShort : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์'.split('_'), // yes, three characters difference
	        weekdaysMin : 'อา._จ._อ._พ._พฤ._ศ._ส.'.split('_'),
	        longDateFormat : {
	            LT : 'H นาฬิกา m นาที',
	            LTS : 'H นาฬิกา m นาที s วินาที',
	            L : 'YYYY/MM/DD',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY เวลา H นาฬิกา m นาที',
	            LLLL : 'วันddddที่ D MMMM YYYY เวลา H นาฬิกา m นาที'
	        },
	        meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,
	        isPM: function (input) {
	            return input === 'หลังเที่ยง';
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ก่อนเที่ยง';
	            } else {
	                return 'หลังเที่ยง';
	            }
	        },
	        calendar : {
	            sameDay : '[วันนี้ เวลา] LT',
	            nextDay : '[พรุ่งนี้ เวลา] LT',
	            nextWeek : 'dddd[หน้า เวลา] LT',
	            lastDay : '[เมื่อวานนี้ เวลา] LT',
	            lastWeek : '[วัน]dddd[ที่แล้ว เวลา] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'อีก %s',
	            past : '%sที่แล้ว',
	            s : 'ไม่กี่วินาที',
	            m : '1 นาที',
	            mm : '%d นาที',
	            h : '1 ชั่วโมง',
	            hh : '%d ชั่วโมง',
	            d : '1 วัน',
	            dd : '%d วัน',
	            M : '1 เดือน',
	            MM : '%d เดือน',
	            y : '1 ปี',
	            yy : '%d ปี'
	        }
	    });
	
	    return th;
	
	}));

/***/ },
/* 506 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Tagalog/Filipino (tl-ph)
	//! author : Dan Hagman
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var tl_ph = moment.defineLocale('tl-ph', {
	        months : 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split('_'),
	        monthsShort : 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
	        weekdays : 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split('_'),
	        weekdaysShort : 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
	        weekdaysMin : 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'MM/D/YYYY',
	            LL : 'MMMM D, YYYY',
	            LLL : 'MMMM D, YYYY HH:mm',
	            LLLL : 'dddd, MMMM DD, YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Ngayon sa] LT',
	            nextDay: '[Bukas sa] LT',
	            nextWeek: 'dddd [sa] LT',
	            lastDay: '[Kahapon sa] LT',
	            lastWeek: 'dddd [huling linggo] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'sa loob ng %s',
	            past : '%s ang nakalipas',
	            s : 'ilang segundo',
	            m : 'isang minuto',
	            mm : '%d minuto',
	            h : 'isang oras',
	            hh : '%d oras',
	            d : 'isang araw',
	            dd : '%d araw',
	            M : 'isang buwan',
	            MM : '%d buwan',
	            y : 'isang taon',
	            yy : '%d taon'
	        },
	        ordinalParse: /\d{1,2}/,
	        ordinal : function (number) {
	            return number;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return tl_ph;
	
	}));

/***/ },
/* 507 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Klingon (tlh)
	//! author : Dominika Kruk : https://github.com/amaranthrose
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var numbersNouns = 'pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut'.split('_');
	
	    function translateFuture(output) {
	        var time = output;
	        time = (output.indexOf('jaj') !== -1) ?
	    	time.slice(0, -3) + 'leS' :
	    	(output.indexOf('jar') !== -1) ?
	    	time.slice(0, -3) + 'waQ' :
	    	(output.indexOf('DIS') !== -1) ?
	    	time.slice(0, -3) + 'nem' :
	    	time + ' pIq';
	        return time;
	    }
	
	    function translatePast(output) {
	        var time = output;
	        time = (output.indexOf('jaj') !== -1) ?
	    	time.slice(0, -3) + 'Hu’' :
	    	(output.indexOf('jar') !== -1) ?
	    	time.slice(0, -3) + 'wen' :
	    	(output.indexOf('DIS') !== -1) ?
	    	time.slice(0, -3) + 'ben' :
	    	time + ' ret';
	        return time;
	    }
	
	    function translate(number, withoutSuffix, string, isFuture) {
	        var numberNoun = numberAsNoun(number);
	        switch (string) {
	            case 'mm':
	                return numberNoun + ' tup';
	            case 'hh':
	                return numberNoun + ' rep';
	            case 'dd':
	                return numberNoun + ' jaj';
	            case 'MM':
	                return numberNoun + ' jar';
	            case 'yy':
	                return numberNoun + ' DIS';
	        }
	    }
	
	    function numberAsNoun(number) {
	        var hundred = Math.floor((number % 1000) / 100),
	    	ten = Math.floor((number % 100) / 10),
	    	one = number % 10,
	    	word = '';
	        if (hundred > 0) {
	            word += numbersNouns[hundred] + 'vatlh';
	        }
	        if (ten > 0) {
	            word += ((word !== '') ? ' ' : '') + numbersNouns[ten] + 'maH';
	        }
	        if (one > 0) {
	            word += ((word !== '') ? ' ' : '') + numbersNouns[one];
	        }
	        return (word === '') ? 'pagh' : word;
	    }
	
	    var tlh = moment.defineLocale('tlh', {
	        months : 'tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’'.split('_'),
	        monthsShort : 'jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’'.split('_'),
	        weekdays : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
	        weekdaysShort : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
	        weekdaysMin : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[DaHjaj] LT',
	            nextDay: '[wa’leS] LT',
	            nextWeek: 'LLL',
	            lastDay: '[wa’Hu’] LT',
	            lastWeek: 'LLL',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : translateFuture,
	            past : translatePast,
	            s : 'puS lup',
	            m : 'wa’ tup',
	            mm : translate,
	            h : 'wa’ rep',
	            hh : translate,
	            d : 'wa’ jaj',
	            dd : translate,
	            M : 'wa’ jar',
	            MM : translate,
	            y : 'wa’ DIS',
	            yy : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return tlh;
	
	}));

/***/ },
/* 508 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : turkish (tr)
	//! authors : Erhan Gundogan : https://github.com/erhangundogan,
	//!           Burak Yiğit Kaya: https://github.com/BYK
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var suffixes = {
	        1: '\'inci',
	        5: '\'inci',
	        8: '\'inci',
	        70: '\'inci',
	        80: '\'inci',
	        2: '\'nci',
	        7: '\'nci',
	        20: '\'nci',
	        50: '\'nci',
	        3: '\'üncü',
	        4: '\'üncü',
	        100: '\'üncü',
	        6: '\'ncı',
	        9: '\'uncu',
	        10: '\'uncu',
	        30: '\'uncu',
	        60: '\'ıncı',
	        90: '\'ıncı'
	    };
	
	    var tr = moment.defineLocale('tr', {
	        months : 'Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık'.split('_'),
	        monthsShort : 'Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara'.split('_'),
	        weekdays : 'Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi'.split('_'),
	        weekdaysShort : 'Paz_Pts_Sal_Çar_Per_Cum_Cts'.split('_'),
	        weekdaysMin : 'Pz_Pt_Sa_Ça_Pe_Cu_Ct'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[bugün saat] LT',
	            nextDay : '[yarın saat] LT',
	            nextWeek : '[haftaya] dddd [saat] LT',
	            lastDay : '[dün] LT',
	            lastWeek : '[geçen hafta] dddd [saat] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s sonra',
	            past : '%s önce',
	            s : 'birkaç saniye',
	            m : 'bir dakika',
	            mm : '%d dakika',
	            h : 'bir saat',
	            hh : '%d saat',
	            d : 'bir gün',
	            dd : '%d gün',
	            M : 'bir ay',
	            MM : '%d ay',
	            y : 'bir yıl',
	            yy : '%d yıl'
	        },
	        ordinalParse: /\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,
	        ordinal : function (number) {
	            if (number === 0) {  // special case for zero
	                return number + '\'ıncı';
	            }
	            var a = number % 10,
	                b = number % 100 - a,
	                c = number >= 100 ? 100 : null;
	            return number + (suffixes[a] || suffixes[b] || suffixes[c]);
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return tr;
	
	}));

/***/ },
/* 509 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : talossan (tzl)
	//! author : Robin van der Vliet : https://github.com/robin0van0der0v with the help of Iustì Canun
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	
	    // After the year there should be a slash and the amount of years since December 26, 1979 in Roman numerals.
	    // This is currently too difficult (maybe even impossible) to add.
	    var tzl = moment.defineLocale('tzl', {
	        months : 'Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar'.split('_'),
	        monthsShort : 'Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec'.split('_'),
	        weekdays : 'Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi'.split('_'),
	        weekdaysShort : 'Súl_Lún_Mai_Már_Xhú_Vié_Sát'.split('_'),
	        weekdaysMin : 'Sú_Lú_Ma_Má_Xh_Vi_Sá'.split('_'),
	        longDateFormat : {
	            LT : 'HH.mm',
	            LTS : 'HH.mm.ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM [dallas] YYYY',
	            LLL : 'D. MMMM [dallas] YYYY HH.mm',
	            LLLL : 'dddd, [li] D. MMMM [dallas] YYYY HH.mm'
	        },
	        meridiemParse: /d\'o|d\'a/i,
	        isPM : function (input) {
	            return 'd\'o' === input.toLowerCase();
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? 'd\'o' : 'D\'O';
	            } else {
	                return isLower ? 'd\'a' : 'D\'A';
	            }
	        },
	        calendar : {
	            sameDay : '[oxhi à] LT',
	            nextDay : '[demà à] LT',
	            nextWeek : 'dddd [à] LT',
	            lastDay : '[ieiri à] LT',
	            lastWeek : '[sür el] dddd [lasteu à] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'osprei %s',
	            past : 'ja%s',
	            s : processRelativeTime,
	            m : processRelativeTime,
	            mm : processRelativeTime,
	            h : processRelativeTime,
	            hh : processRelativeTime,
	            d : processRelativeTime,
	            dd : processRelativeTime,
	            M : processRelativeTime,
	            MM : processRelativeTime,
	            y : processRelativeTime,
	            yy : processRelativeTime
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            's': ['viensas secunds', '\'iensas secunds'],
	            'm': ['\'n míut', '\'iens míut'],
	            'mm': [number + ' míuts', '' + number + ' míuts'],
	            'h': ['\'n þora', '\'iensa þora'],
	            'hh': [number + ' þoras', '' + number + ' þoras'],
	            'd': ['\'n ziua', '\'iensa ziua'],
	            'dd': [number + ' ziuas', '' + number + ' ziuas'],
	            'M': ['\'n mes', '\'iens mes'],
	            'MM': [number + ' mesen', '' + number + ' mesen'],
	            'y': ['\'n ar', '\'iens ar'],
	            'yy': [number + ' ars', '' + number + ' ars']
	        };
	        return isFuture ? format[key][0] : (withoutSuffix ? format[key][0] : format[key][1]);
	    }
	
	    return tzl;
	
	}));

/***/ },
/* 510 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Morocco Central Atlas Tamaziɣt (tzm)
	//! author : Abdel Said : https://github.com/abdelsaid
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var tzm = moment.defineLocale('tzm', {
	        months : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
	        monthsShort : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
	        weekdays : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	        weekdaysShort : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	        weekdaysMin : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[ⴰⵙⴷⵅ ⴴ] LT',
	            nextDay: '[ⴰⵙⴽⴰ ⴴ] LT',
	            nextWeek: 'dddd [ⴴ] LT',
	            lastDay: '[ⴰⵚⴰⵏⵜ ⴴ] LT',
	            lastWeek: 'dddd [ⴴ] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s',
	            past : 'ⵢⴰⵏ %s',
	            s : 'ⵉⵎⵉⴽ',
	            m : 'ⵎⵉⵏⵓⴺ',
	            mm : '%d ⵎⵉⵏⵓⴺ',
	            h : 'ⵙⴰⵄⴰ',
	            hh : '%d ⵜⴰⵙⵙⴰⵄⵉⵏ',
	            d : 'ⴰⵙⵙ',
	            dd : '%d oⵙⵙⴰⵏ',
	            M : 'ⴰⵢoⵓⵔ',
	            MM : '%d ⵉⵢⵢⵉⵔⵏ',
	            y : 'ⴰⵙⴳⴰⵙ',
	            yy : '%d ⵉⵙⴳⴰⵙⵏ'
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return tzm;
	
	}));

/***/ },
/* 511 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Morocco Central Atlas Tamaziɣt in Latin (tzm-latn)
	//! author : Abdel Said : https://github.com/abdelsaid
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var tzm_latn = moment.defineLocale('tzm-latn', {
	        months : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
	        monthsShort : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
	        weekdays : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	        weekdaysShort : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	        weekdaysMin : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[asdkh g] LT',
	            nextDay: '[aska g] LT',
	            nextWeek: 'dddd [g] LT',
	            lastDay: '[assant g] LT',
	            lastWeek: 'dddd [g] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'dadkh s yan %s',
	            past : 'yan %s',
	            s : 'imik',
	            m : 'minuḍ',
	            mm : '%d minuḍ',
	            h : 'saɛa',
	            hh : '%d tassaɛin',
	            d : 'ass',
	            dd : '%d ossan',
	            M : 'ayowr',
	            MM : '%d iyyirn',
	            y : 'asgas',
	            yy : '%d isgasn'
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return tzm_latn;
	
	}));

/***/ },
/* 512 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : ukrainian (uk)
	//! author : zemlanin : https://github.com/zemlanin
	//! Author : Menelion Elensúle : https://github.com/Oire
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    function plural(word, num) {
	        var forms = word.split('_');
	        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
	    }
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	            'mm': withoutSuffix ? 'хвилина_хвилини_хвилин' : 'хвилину_хвилини_хвилин',
	            'hh': withoutSuffix ? 'година_години_годин' : 'годину_години_годин',
	            'dd': 'день_дні_днів',
	            'MM': 'місяць_місяці_місяців',
	            'yy': 'рік_роки_років'
	        };
	        if (key === 'm') {
	            return withoutSuffix ? 'хвилина' : 'хвилину';
	        }
	        else if (key === 'h') {
	            return withoutSuffix ? 'година' : 'годину';
	        }
	        else {
	            return number + ' ' + plural(format[key], +number);
	        }
	    }
	    function weekdaysCaseReplace(m, format) {
	        var weekdays = {
	            'nominative': 'неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота'.split('_'),
	            'accusative': 'неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу'.split('_'),
	            'genitive': 'неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи'.split('_')
	        },
	        nounCase = (/(\[[ВвУу]\]) ?dddd/).test(format) ?
	            'accusative' :
	            ((/\[?(?:минулої|наступної)? ?\] ?dddd/).test(format) ?
	                'genitive' :
	                'nominative');
	        return weekdays[nounCase][m.day()];
	    }
	    function processHoursFunction(str) {
	        return function () {
	            return str + 'о' + (this.hours() === 11 ? 'б' : '') + '] LT';
	        };
	    }
	
	    var uk = moment.defineLocale('uk', {
	        months : {
	            'format': 'січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня'.split('_'),
	            'standalone': 'січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень'.split('_')
	        },
	        monthsShort : 'січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд'.split('_'),
	        weekdays : weekdaysCaseReplace,
	        weekdaysShort : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	        weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY р.',
	            LLL : 'D MMMM YYYY р., HH:mm',
	            LLLL : 'dddd, D MMMM YYYY р., HH:mm'
	        },
	        calendar : {
	            sameDay: processHoursFunction('[Сьогодні '),
	            nextDay: processHoursFunction('[Завтра '),
	            lastDay: processHoursFunction('[Вчора '),
	            nextWeek: processHoursFunction('[У] dddd ['),
	            lastWeek: function () {
	                switch (this.day()) {
	                case 0:
	                case 3:
	                case 5:
	                case 6:
	                    return processHoursFunction('[Минулої] dddd [').call(this);
	                case 1:
	                case 2:
	                case 4:
	                    return processHoursFunction('[Минулого] dddd [').call(this);
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'за %s',
	            past : '%s тому',
	            s : 'декілька секунд',
	            m : relativeTimeWithPlural,
	            mm : relativeTimeWithPlural,
	            h : 'годину',
	            hh : relativeTimeWithPlural,
	            d : 'день',
	            dd : relativeTimeWithPlural,
	            M : 'місяць',
	            MM : relativeTimeWithPlural,
	            y : 'рік',
	            yy : relativeTimeWithPlural
	        },
	        // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason
	        meridiemParse: /ночі|ранку|дня|вечора/,
	        isPM: function (input) {
	            return /^(дня|вечора)$/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ночі';
	            } else if (hour < 12) {
	                return 'ранку';
	            } else if (hour < 17) {
	                return 'дня';
	            } else {
	                return 'вечора';
	            }
	        },
	        ordinalParse: /\d{1,2}-(й|го)/,
	        ordinal: function (number, period) {
	            switch (period) {
	            case 'M':
	            case 'd':
	            case 'DDD':
	            case 'w':
	            case 'W':
	                return number + '-й';
	            case 'D':
	                return number + '-го';
	            default:
	                return number;
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return uk;
	
	}));

/***/ },
/* 513 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : uzbek (uz)
	//! author : Sardor Muminov : https://github.com/muminoff
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var uz = moment.defineLocale('uz', {
	        months : 'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split('_'),
	        monthsShort : 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
	        weekdays : 'Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба'.split('_'),
	        weekdaysShort : 'Якш_Душ_Сеш_Чор_Пай_Жум_Шан'.split('_'),
	        weekdaysMin : 'Як_Ду_Се_Чо_Па_Жу_Ша'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'D MMMM YYYY, dddd HH:mm'
	        },
	        calendar : {
	            sameDay : '[Бугун соат] LT [да]',
	            nextDay : '[Эртага] LT [да]',
	            nextWeek : 'dddd [куни соат] LT [да]',
	            lastDay : '[Кеча соат] LT [да]',
	            lastWeek : '[Утган] dddd [куни соат] LT [да]',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'Якин %s ичида',
	            past : 'Бир неча %s олдин',
	            s : 'фурсат',
	            m : 'бир дакика',
	            mm : '%d дакика',
	            h : 'бир соат',
	            hh : '%d соат',
	            d : 'бир кун',
	            dd : '%d кун',
	            M : 'бир ой',
	            MM : '%d ой',
	            y : 'бир йил',
	            yy : '%d йил'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return uz;
	
	}));

/***/ },
/* 514 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : vietnamese (vi)
	//! author : Bang Nguyen : https://github.com/bangnk
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var vi = moment.defineLocale('vi', {
	        months : 'tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12'.split('_'),
	        monthsShort : 'Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12'.split('_'),
	        weekdays : 'chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy'.split('_'),
	        weekdaysShort : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
	        weekdaysMin : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
	        meridiemParse: /sa|ch/i,
	        isPM : function (input) {
	            return /^ch$/i.test(input);
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 12) {
	                return isLower ? 'sa' : 'SA';
	            } else {
	                return isLower ? 'ch' : 'CH';
	            }
	        },
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM [năm] YYYY',
	            LLL : 'D MMMM [năm] YYYY HH:mm',
	            LLLL : 'dddd, D MMMM [năm] YYYY HH:mm',
	            l : 'DD/M/YYYY',
	            ll : 'D MMM YYYY',
	            lll : 'D MMM YYYY HH:mm',
	            llll : 'ddd, D MMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Hôm nay lúc] LT',
	            nextDay: '[Ngày mai lúc] LT',
	            nextWeek: 'dddd [tuần tới lúc] LT',
	            lastDay: '[Hôm qua lúc] LT',
	            lastWeek: 'dddd [tuần rồi lúc] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : '%s tới',
	            past : '%s trước',
	            s : 'vài giây',
	            m : 'một phút',
	            mm : '%d phút',
	            h : 'một giờ',
	            hh : '%d giờ',
	            d : 'một ngày',
	            dd : '%d ngày',
	            M : 'một tháng',
	            MM : '%d tháng',
	            y : 'một năm',
	            yy : '%d năm'
	        },
	        ordinalParse: /\d{1,2}/,
	        ordinal : function (number) {
	            return number;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return vi;
	
	}));

/***/ },
/* 515 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : chinese (zh-cn)
	//! author : suupic : https://github.com/suupic
	//! author : Zeno Zeng : https://github.com/zenozeng
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var zh_cn = moment.defineLocale('zh-cn', {
	        months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
	        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	        weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	        weekdaysShort : '周日_周一_周二_周三_周四_周五_周六'.split('_'),
	        weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
	        longDateFormat : {
	            LT : 'Ah点mm分',
	            LTS : 'Ah点m分s秒',
	            L : 'YYYY-MM-DD',
	            LL : 'YYYY年MMMD日',
	            LLL : 'YYYY年MMMD日Ah点mm分',
	            LLLL : 'YYYY年MMMD日ddddAh点mm分',
	            l : 'YYYY-MM-DD',
	            ll : 'YYYY年MMMD日',
	            lll : 'YYYY年MMMD日Ah点mm分',
	            llll : 'YYYY年MMMD日ddddAh点mm分'
	        },
	        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === '凌晨' || meridiem === '早上' ||
	                    meridiem === '上午') {
	                return hour;
	            } else if (meridiem === '下午' || meridiem === '晚上') {
	                return hour + 12;
	            } else {
	                // '中午'
	                return hour >= 11 ? hour : hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            var hm = hour * 100 + minute;
	            if (hm < 600) {
	                return '凌晨';
	            } else if (hm < 900) {
	                return '早上';
	            } else if (hm < 1130) {
	                return '上午';
	            } else if (hm < 1230) {
	                return '中午';
	            } else if (hm < 1800) {
	                return '下午';
	            } else {
	                return '晚上';
	            }
	        },
	        calendar : {
	            sameDay : function () {
	                return this.minutes() === 0 ? '[今天]Ah[点整]' : '[今天]LT';
	            },
	            nextDay : function () {
	                return this.minutes() === 0 ? '[明天]Ah[点整]' : '[明天]LT';
	            },
	            lastDay : function () {
	                return this.minutes() === 0 ? '[昨天]Ah[点整]' : '[昨天]LT';
	            },
	            nextWeek : function () {
	                var startOfWeek, prefix;
	                startOfWeek = moment().startOf('week');
	                prefix = this.unix() - startOfWeek.unix() >= 7 * 24 * 3600 ? '[下]' : '[本]';
	                return this.minutes() === 0 ? prefix + 'dddAh点整' : prefix + 'dddAh点mm';
	            },
	            lastWeek : function () {
	                var startOfWeek, prefix;
	                startOfWeek = moment().startOf('week');
	                prefix = this.unix() < startOfWeek.unix()  ? '[上]' : '[本]';
	                return this.minutes() === 0 ? prefix + 'dddAh点整' : prefix + 'dddAh点mm';
	            },
	            sameElse : 'LL'
	        },
	        ordinalParse: /\d{1,2}(日|月|周)/,
	        ordinal : function (number, period) {
	            switch (period) {
	            case 'd':
	            case 'D':
	            case 'DDD':
	                return number + '日';
	            case 'M':
	                return number + '月';
	            case 'w':
	            case 'W':
	                return number + '周';
	            default:
	                return number;
	            }
	        },
	        relativeTime : {
	            future : '%s内',
	            past : '%s前',
	            s : '几秒',
	            m : '1 分钟',
	            mm : '%d 分钟',
	            h : '1 小时',
	            hh : '%d 小时',
	            d : '1 天',
	            dd : '%d 天',
	            M : '1 个月',
	            MM : '%d 个月',
	            y : '1 年',
	            yy : '%d 年'
	        },
	        week : {
	            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return zh_cn;
	
	}));

/***/ },
/* 516 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : traditional chinese (zh-tw)
	//! author : Ben : https://github.com/ben-lin
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(417)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var zh_tw = moment.defineLocale('zh-tw', {
	        months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
	        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	        weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	        weekdaysShort : '週日_週一_週二_週三_週四_週五_週六'.split('_'),
	        weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
	        longDateFormat : {
	            LT : 'Ah點mm分',
	            LTS : 'Ah點m分s秒',
	            L : 'YYYY年MMMD日',
	            LL : 'YYYY年MMMD日',
	            LLL : 'YYYY年MMMD日Ah點mm分',
	            LLLL : 'YYYY年MMMD日ddddAh點mm分',
	            l : 'YYYY年MMMD日',
	            ll : 'YYYY年MMMD日',
	            lll : 'YYYY年MMMD日Ah點mm分',
	            llll : 'YYYY年MMMD日ddddAh點mm分'
	        },
	        meridiemParse: /早上|上午|中午|下午|晚上/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === '早上' || meridiem === '上午') {
	                return hour;
	            } else if (meridiem === '中午') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === '下午' || meridiem === '晚上') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            var hm = hour * 100 + minute;
	            if (hm < 900) {
	                return '早上';
	            } else if (hm < 1130) {
	                return '上午';
	            } else if (hm < 1230) {
	                return '中午';
	            } else if (hm < 1800) {
	                return '下午';
	            } else {
	                return '晚上';
	            }
	        },
	        calendar : {
	            sameDay : '[今天]LT',
	            nextDay : '[明天]LT',
	            nextWeek : '[下]ddddLT',
	            lastDay : '[昨天]LT',
	            lastWeek : '[上]ddddLT',
	            sameElse : 'L'
	        },
	        ordinalParse: /\d{1,2}(日|月|週)/,
	        ordinal : function (number, period) {
	            switch (period) {
	            case 'd' :
	            case 'D' :
	            case 'DDD' :
	                return number + '日';
	            case 'M' :
	                return number + '月';
	            case 'w' :
	            case 'W' :
	                return number + '週';
	            default :
	                return number;
	            }
	        },
	        relativeTime : {
	            future : '%s內',
	            past : '%s前',
	            s : '幾秒',
	            m : '一分鐘',
	            mm : '%d分鐘',
	            h : '一小時',
	            hh : '%d小時',
	            d : '一天',
	            dd : '%d天',
	            M : '一個月',
	            MM : '%d個月',
	            y : '一年',
	            yy : '%d年'
	        }
	    });
	
	    return zh_tw;
	
	}));

/***/ },
/* 517 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 518 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(519)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, Model) {
	  /**
	   * Wrapper around the more generic {@link src/framework/Model} that
	   * contains Okta-specific logic.
	   * @class module:Okta.Model
	   * @extends src/framework/Model
	   */
	  return Model.extend( /** @lends module:Okta.Model.prototype */{
	
	    /**
	     * Is the end point using the legacy "secureJSON" format
	     * @type {Function|Boolean}
	     */
	    secureJSON: false,
	
	    _builtInLocalProps: {
	      '__edit__': 'boolean',
	      '__pending__': 'boolean'
	    },
	
	    constructor: function constructor() {
	      this.local = _.defaults({}, _.result(this, 'local'), this._builtInLocalProps);
	
	      if (_.result(this, 'secureJSON')) {
	        this.sync = _.wrap(this.sync, function (sync, method, model, options) {
	          return sync.call(this, method, model, _.extend({ dataType: 'secureJSON' }, options));
	        });
	      }
	
	      Model.apply(this, arguments);
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 519 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof2 = __webpack_require__(334);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	(function (root, factory) {
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(401), __webpack_require__(520)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	  /* global module, exports */
	  else if (typeof require === 'function' && (typeof exports === 'undefined' ? 'undefined' : (0, _typeof3.default)(exports)) === 'object') {
	      module.exports = factory(require('okta/underscore'), require('backbone'), require('shared/util/Logger'));
	    } else {
	      root.Archer || (root.Archer = {});
	      root.Archer.Model = factory(root._, root.Backbone, root.Logger);
	    }
	})(undefined, function (_, Backbone, Logger) {
	  /**
	   * Archer.Model is a standard [Backbone.Model](http://backbonejs.org/#Model) with a few additions:
	   *
	   * - {@link src/framework/Model#derived Derived properties}
	   * - {@link src/framework/Model#props Built in schema validation}
	   * - {@link src/framework/Model#local Private properties (with schema validation)}
	   * - {@link src/framework/Model#flat Flattening of nested objects}
	   *
	   * Both derived and private properties are filtered out when sending the data to the server.
	   *
	   * See [Backbone.Model](http://backbonejs.org/#Model-constructor).
	   *
	   * @class src/framework/Model
	   * @extends external:Backbone.Model
	   * @param {Object} [attributes] - Initial model attributes (data)
	   * @param {Object} [options] - Options hash
	   * @example
	   * var Person = Archer.Model.extend({
	   *   props: {
	   *     'fname': 'string',
	   *     'lname': 'string'
	   *   },
	   *   local: {
	   *     isLoggedIn: 'boolean'
	   *   },
	   *   derived: {
	   *     name: {
	   *       deps: ['fname', 'lname'],
	   *       fn: function (fname, lname) {
	   *         return fname + ' ' + lname;
	   *       }
	   *     }
	   *   }
	   * });
	   * var model = new Person({fname: 'Joe', lname: 'Doe'});
	   * model.get('name'); //=> "Joe Doe"
	   * model.toJSON(); //=> {fname: 'Joe', lname: 'Doe'}
	   *
	   * model.set('isLoggedIn', true);
	   * model.get('isLoggedIn'); //=> true
	   * model.toJSON(); //=> {fname: 'Joe', lname: 'Doe'}
	   */
	  var Model;
	
	  function flatten(value, objectTypeFields, key, target) {
	    var filter = _.contains(objectTypeFields, key);
	    target || (target = {});
	    if (!filter && _.isObject(value) && !_.isArray(value) && !_.isFunction(value)) {
	      _.each(value, function (val, i) {
	        flatten(val, objectTypeFields, key ? key + '.' + i : i, target);
	      });
	    }
	    // Case where target is an empty object. Guard against returning {undefined: undefined}.
	    else if (key !== undefined) {
	        target[key] = value;
	      }
	    return target;
	  }
	
	  function unflatten(data) {
	    _.each(data, function (value, key, data) {
	      if (key.indexOf('.') == -1) {
	        return;
	      }
	      var part,
	          ref = data,
	          parts = key.split('.');
	      while ((part = parts.shift()) !== undefined) {
	        if (!ref[part]) {
	          ref[part] = parts.length ? {} : value;
	        }
	        ref = ref[part];
	      }
	      delete data[key];
	    });
	    return data;
	  }
	
	  function createMessage(field, msg) {
	    var obj = {};
	    obj[field.name] = msg;
	    return obj;
	  }
	
	  function normalizeSchemaDef(field, name) {
	    var target;
	    if (_.isString(field)) {
	      target = {
	        type: field
	      };
	    } else if (_.isArray(field)) {
	      target = {
	        type: field[0],
	        required: field[1],
	        value: field[2]
	      };
	    } else {
	      target = _.clone(field);
	    }
	    _.defaults(target, { required: false, name: name });
	    return target;
	  }
	
	  function capitalize(string) {
	    return string.toLowerCase().replace(/\b[a-z]/g, function (letter) {
	      return letter.toUpperCase();
	    });
	  }
	
	  function _validateRegex(value, pattern, error) {
	    if (!pattern.test(value)) {
	      return error;
	    }
	  }
	
	  var StringFormatValidators = {
	    /*eslint max-len: 0 */
	    email: function email(value) {
	      // Taken from  http://emailregex.com/ on 2017-03-06.
	      var pattern = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
	      return _validateRegex(value, pattern, Model.ERROR_INVALID_FORMAT_EMAIL);
	    },
	    uri: function uri(value) {
	      // source: https://mathiasbynens.be/demo/url-regex
	      var pattern = /^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,}))\.?)(?::\d{2,5})?(?:[/?#]\S*)?$/i;
	      return _validateRegex(value, pattern, Model.ERROR_INVALID_FORMAT_URI);
	    },
	    ipv4: function ipv4(value) {
	      // source: https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html
	      var pattern = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
	      return _validateRegex(value, pattern, Model.ERROR_INVALID_FORMAT_IPV4);
	    },
	    hostname: function hostname(value) {
	      // source: http://www.regextester.com/23
	      var pattern = /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$/;
	      return _validateRegex(value, pattern, Model.ERROR_INVALID_FORMAT_HOSTNAME);
	    }
	  };
	
	  function validateStringFormat(field, value) {
	    var validator = StringFormatValidators[field.format];
	    if (field.format && !validator) {
	      throw new TypeError(field.format + ' is not a supported string format');
	    }
	    return validator && validator(value);
	  }
	
	  function validateString(field, value) {
	    var createMessageWith = _.partial(createMessage, field),
	        invalidFormat = validateStringFormat(field, value);
	    if (invalidFormat) {
	      return createMessageWith(invalidFormat);
	    }
	    if (value && field.minLength && value.length < field.minLength) {
	      return createMessageWith(Model.ERROR_STRING_STRING_MIN_LENGTH, value.length);
	    }
	    if (value && field.maxLength && value.length > field.maxLength) {
	      return createMessageWith(Model.ERROR_STRING_STRING_MAX_LENGTH, value.length);
	    }
	  }
	
	  function _validateField(field, value) {
	    /* eslint complexity: [2, 13], max-statements: [2, 19]*/
	    var createMessageWith = _.partial(createMessage, field),
	        isDefined = !_.isUndefined(value) && !_.isNull(value),
	        checkType,
	        errorMessage;
	
	    // check required fields
	    if (field.required && (!isDefined || _.isNull(value) || value === '')) {
	      return createMessageWith(Model.ERROR_BLANK);
	    }
	    // check type
	    checkType = _['is' + capitalize(field.type)];
	    if (isDefined && field.type != 'any' && (!_.isFunction(checkType) || !checkType(value))) {
	      return createMessageWith(Model.ERROR_WRONG_TYPE);
	    }
	    // validate string format
	    if (value && field.type == 'string') {
	      var error = validateString(field, value);
	      if (error) {
	        return error;
	      }
	    }
	    // check pre set values (enum)
	    if (isDefined && field.values && !_.contains(field.values, value)) {
	      return createMessageWith(Model.ERROR_NOT_ALLOWED);
	    }
	    // check validate method
	    if (_.isFunction(field.validate)) {
	      var result = field.validate(value);
	      if (_.isString(result) && result) {
	        return createMessageWith(result);
	      } else if (result === false) {
	        return createMessageWith(Model.ERROR_INVALID);
	      }
	    }
	    // check array items
	    if (isDefined && field.type == 'array' && (errorMessage = validateArrayField(field, value))) {
	      return createMessageWith(errorMessage);
	    }
	  }
	
	  function validateArrayField(field, arr) {
	    if (field.minItems && arr.length < field.minItems) {
	      return 'model.validation.field.array.minItems';
	    } else if (field.maxItems && arr.length > field.maxItems) {
	      return 'model.validation.field.array.maxItems';
	    } else if (field.uniqueItems && arr.length > _.uniq(arr).length) {
	      return Model.ERROR_IARRAY_UNIQUE;
	    } else if (field.items) {
	      /* eslint max-depth: [2, 3] */
	      var arrayField = normalizeSchemaDef(field.items, 'placeholder');
	      for (var i = 0; i < arr.length; i++) {
	        var value = arr[i];
	        var error = _validateField(arrayField, value);
	        if (error) {
	          return error['placeholder'];
	        }
	      }
	    }
	  }
	
	  Model = Backbone.Model.extend( /** @lends src/framework/Model.prototype */{
	
	    /**
	     * Pass props as an object to extend, describing the observable properties of your model. The props
	     * properties should not be set on an instance, as this won't define new properties, they should only be passed to
	     * extend.
	     * Properties can be defined in three different ways:
	     *
	     * - As a string with the expected dataType. One of string, number, boolean, array, object, date, or any.
	     * Eg: `name: 'string'`.
	     * - An array of `[dataType, required, default]`
	     * - An object `{type: 'string', format: '', required: true, value: '', values: [], validate: function() {}`
	     *   - `value` will be the value that the property will be set to if it is undefined, either by not being set during
	     *   initialization, or by being explicitly set to undefined.
	     *   - `format` is a json-schame derived string format. Supported formats are: `email`, `uri`, `hostname` and `ipv4`.
	     *   - If `required` is true, one of two things will happen. If a default is set for the property, the property will
	     *   start with that value. If a default is not set for the property, validation will fail
	     *   - If `values` array is passed, then you'll be able to change a property to one of those values only.
	     *   - If `validate` is defined, it should return false or a custom message string when the validation fails.
	     *   - If the type is defined as `array`, the array elements could be defined by `minItems` (Number),
	     *   `uniqueItems` (Boolean) and `items` (a field definition such as this one that will validate each array member)
	     *   To the `validate` method
	     *   - Trying to set a property to an invalid type will raise an exception.
	     *
	     * @type {Mixed}
	     * @example
	     * var Person = Model.extend({
	     *   props: {
	     *     name: 'string',
	     *     age: 'number',
	     *     paying: ['boolean', true, false], //required attribute, defaulted to false
	     *     type: {
	     *       type: 'string',
	     *       values: ['regular-hero', 'super-hero', 'mega-hero']
	     *     },
	     *     likes: {
	     *       type: 'string',
	     *       validate: function (value) {
	     *         return /^[\w]+ing$/.test(value)
	     *       }
	     *     }
	     *   }
	     * });
	     */
	    props: {},
	
	    /**
	     * Derived properties (also known as computed properties) are properties of the model that depend on the
	     * other (props, local or even derived properties to determine their value. Best demonstrated with an example:
	     *
	     * Each derived property, is defined as an object with the current properties:
	     *
	     * - `deps` {Array} - An array of property names which the derived property depends on.
	     * - `fn` {Function} - A function which returns the value of the computed property. It is called in the context of
	     * the current object, so that this is set correctly.
	     * - `cache` {Boolean} -  - Whether to cache the property. Uncached properties are computed every time they are
	     * accessed. Useful if it depends on the current time for example. Defaults to `true`.
	     *
	     * Derived properties are retrieved and fire change events just like any other property. They cannot be set
	     * directly.
	     * @type {Object}
	     * @example
	     * var Person = Model.extend({
	     *   props: {
	     *     firstName: 'string',
	     *     lastName: 'string'
	     *   },
	     *   derived: {
	     *     fullName: {
	     *       deps: ['firstName', 'lastName'],
	     *       fn: function (firstName, lastName) {
	     *         return firstName + ' ' + lastName;
	     *       }
	     *     }
	     *   }
	     * });
	     *
	     * var person = new Person({ firstName: 'Phil', lastName: 'Roberts' })
	     * console.log(person.get('fullName')) //=> "Phil Roberts"
	     *
	     * person.set('firstName', 'Bob');
	     * console.log(person.get('fullName')) //=> "Bob Roberts"
	     */
	    derived: {},
	
	    /**
	     * local properties are defined and work in exactly the same way as {@link src/framework/Model#props|props}, but generally only exist for
	     * the lifetime of the page.
	     * They would not typically be persisted to the server, and are not returned by calls to {@link src/framework/Model#toJSON|toJSON}.
	     *
	     * @type {Object}
	     * @example
	     * var Person = Model.extend({
	     *   props: {
	     *     name: 'string',
	     *   },
	     *   local: {
	     *     isLoggedIn: 'boolean'
	     *   }
	     * );
	     */
	    local: {},
	
	    /**
	     * Flatten the payload into dot notation string keys:
	     *
	     * @type {Boolean}
	     * @example
	     * var Person = Model.extend({
	     *   props: {
	     *     'profile.fname': 'string',
	     *     'profile.lname': 'string',
	     *     'profile.languages': 'object'
	     *   },
	     *   flat: true
	     * });
	     * var person = new Person({'profile': {
	     *                            'fname': 'John',
	     *                            'lname': 'Doe',
	     *                            'languages': {name: "English", value: "EN"}
	     *                         }}, {parse: true});
	     * person.get('profile'); //=> undefined
	     * person.get('profile.fname'); //=> 'John'
	     * person.get('profile.lname'); //=> 'Doe'
	     * person.get('profile.languages'); //=> {name: "English", value: "EN"}
	     * person.get('profile.languages.name'); //=> undefined
	     * person.toJSON(); //=> {'profile': {'fname': 'John'} }
	     */
	    flat: true,
	
	    /**
	     * @deprecated
	     * @alias Backbone.Model#defaults
	     */
	    defaults: {},
	
	    constructor: function constructor(options) {
	      this.options = options || {};
	
	      var schema = this['__schema__'] = {},
	          objectTypeFields = [];
	
	      schema.computedProperties = {};
	
	      schema.props = _.clone(_.result(this, 'props') || {});
	      schema.derived = _.clone(_.result(this, 'derived') || {});
	      schema.local = _.clone(_.result(this, 'local') || {});
	
	      var defaults = {};
	      _.each(_.extend({}, schema.props, schema.local), function (options, name) {
	        var schemaDef = normalizeSchemaDef(options, name);
	        if (!_.isUndefined(schemaDef.value)) {
	          defaults[name] = schemaDef.value;
	        }
	        if (schemaDef.type === 'object') {
	          objectTypeFields.push(name);
	        }
	      }, this);
	      if (_.size(defaults)) {
	        var localDefaults = _.result(this, 'defaults');
	        this.defaults = function () {
	          return _.defaults({}, defaults, localDefaults);
	        };
	      }
	
	      // override `validate`
	      this.validate = _.wrap(this.validate, function (validate) {
	        var args = _.rest(arguments),
	            res = _.extend(this._validateSchema.apply(this, args), validate.apply(this, args));
	        return _.size(res) && res || undefined;
	      });
	
	      // override `parse`
	      this.parse = _.wrap(this.parse, function (parse) {
	        var target = parse.apply(this, _.rest(arguments));
	        if (this.flat) {
	          target = flatten(target, objectTypeFields);
	        }
	        return target;
	      });
	
	      Backbone.Model.apply(this, arguments);
	
	      _.each(schema.derived, function (options, name) {
	        schema.computedProperties[name] = this.__getDerivedValue(name); // set initial value;
	        var deps = options.deps || [];
	        if (deps.length) {
	          this.on('cache:clear change:' + deps.join(' change:'), function () {
	            var value = this.__getDerivedValue(name);
	            if (value !== schema.computedProperties[name]) {
	              schema.computedProperties[name] = value;
	              this.trigger('change:' + name, this, value);
	            }
	          }, this);
	        }
	      }, this);
	
	      this.on('sync', function () {
	        this.__syncedData = this.toJSON();
	      }, this);
	    },
	
	    validate: function validate() {},
	
	    /**
	     * Check if the schema settings allow this field to exist in the model
	     * @param  {String} key
	     * @return {Boolean}
	     */
	    allows: function allows(key) {
	      var schema = this['__schema__'],
	          all = _.extend({}, schema.props, schema.local);
	      if (!_.has(all, key)) {
	        Logger.warn('Field not defined in schema', key);
	      }
	      return true;
	    },
	
	    /**
	     * Returns the schema for the specific property
	     *
	     * @param propName - The name of the property
	     * @returns {*} | null
	     */
	    getPropertySchema: function getPropertySchema(propName) {
	      var schema = this['__schema__'];
	      return _.reduce([schema.props, schema.local], function (result, options) {
	        return result || normalizeSchemaDef(options[propName], propName);
	      }, null);
	    },
	
	    set: function set(key, val) {
	      var attrs;
	      if ((typeof key === 'undefined' ? 'undefined' : (0, _typeof3.default)(key)) === 'object') {
	        attrs = key;
	      } else {
	        (attrs = {})[key] = val;
	      }
	
	      // Don't override a computed properties
	      _.each(attrs, function (value, key) {
	        if (_.has(this['__schema__'].derived, key)) {
	          throw 'overriding derived properties is not supported: ' + key;
	        }
	      }, this);
	
	      // Schema validation
	      var errorFields = [];
	      _.each(attrs, function (value, key) {
	        this.allows(key) || errorFields.push(key);
	      }, this);
	      if (errorFields.length) {
	        throw 'field not allowed: ' + errorFields.join(', ');
	      }
	
	      return Backbone.Model.prototype.set.apply(this, arguments);
	    },
	
	    get: function get(attr) {
	      var schema = this['__schema__'];
	      if (_.has(schema.derived, attr)) {
	        if (schema.derived[attr].cache !== false) {
	          return schema.computedProperties[attr];
	        } else {
	          return this.__getDerivedValue(attr);
	        }
	      }
	      return Backbone.Model.prototype.get.apply(this, arguments);
	    },
	
	    /**
	     * Return a shallow copy of the model's attributes for JSON stringification.
	     * This can be used for persistence, serialization, or for augmentation before being sent to the server.
	     * The name of this method is a bit confusing, as it doesn't actually return a JSON string —
	     * but I'm afraid that it's the way that the JavaScript API for JSON.stringify works.
	     *
	     * See [Backbone.Model.toJSON](http://backbonejs.org/#Model-toJSON)
	     *
	     * @param  {Object} options
	     * @return {Object}
	     * @example
	     * var artist = new Model({
	     *   firstName: 'Wassily',
	     *   lastName: 'Kandinsky'
	     * });
	     *
	     * artist.set({birthday: 'December 16, 1866'});
	     * JSON.stringify(artist); //=> {'firstName':'Wassily','lastName':'Kandinsky','birthday':'December 16, 1866'}
	     */
	    toJSON: function toJSON(options) {
	      options || (options = {});
	      var res = _.clone(Backbone.Model.prototype.toJSON.apply(this, arguments)),
	          schema = this['__schema__'];
	
	      // cleanup local properties
	      if (!options.verbose) {
	        res = _.omit(res, _.keys(schema.local));
	      } else {
	        // add derived properties
	        _.each(schema.derived, function (options, name) {
	          res[name] = this.get(name);
	        }, this);
	      }
	
	      if (this.flat) {
	        res = unflatten(res);
	      }
	
	      return res;
	    },
	
	    /**
	     * Removes all attributes from the model, including the id attribute.
	     * Fires a `"change"` event unless `silent` is passed as an option.
	     * Sets the default values to the model
	     * @param {Object} [options]
	     */
	    reset: function reset(options) {
	      this.clear(options);
	      this.set(_.result(this, 'defaults'), options);
	    },
	
	    /**
	     * Is the data on the model has local modifications since the last sync event?
	     * @return {Boolean} is the model in sync with the server
	     */
	    isSynced: function isSynced() {
	      return _.isEqual(this.__syncedData, this.toJSON());
	    },
	
	    /**
	     * validate a specific field in the model.
	     * @param  {String} key
	     * @return {Object} returns `{fieldName: errorMessage}` if invalid, otherwise undefined.
	     * @readonly
	     */
	    validateField: function validateField(key) {
	      var schema = key && this.getPropertySchema(key);
	      return schema && _validateField(schema, this.get(key));
	    },
	
	    /**
	     * Runs local schema validation. Invoked internally by {@link src/framework/Model#validate|validate}.
	     * @return {Object}
	     * @protected
	     */
	    _validateSchema: function _validateSchema() {
	      var schema = this['__schema__'];
	      return _.reduce(_.extend({}, schema.props, schema.local), function (memo, options, name) {
	        return _.extend(memo, this.validateField(name) || {});
	      }, {}, this);
	    },
	
	    __getDerivedValue: function __getDerivedValue(name) {
	      var options = this['__schema__'].derived[name];
	      if (_.isString(options)) {
	        var key = options;
	        options = {
	          deps: [key],
	          fn: function fn() {
	            return this.get(key);
	          }
	        };
	      }
	      var deps = options.deps || [];
	      return options.fn.apply(this, _.map(deps, this.get, this));
	    }
	
	  }, {
	    ERROR_BLANK: 'model.validation.field.blank',
	    ERROR_WRONG_TYPE: 'model.validation.field.wrong.type',
	    ERROR_NOT_ALLOWED: 'model.validation.field.value.not.allowed',
	    ERROR_INVALID: 'model.validation.field.invalid',
	    ERROR_IARRAY_UNIQUE: 'model.validation.field.array.unique',
	    ERROR_INVALID_FORMAT_EMAIL: 'model.validation.field.invalid.format.email',
	    ERROR_INVALID_FORMAT_URI: 'model.validation.field.invalid.format.uri',
	    ERROR_INVALID_FORMAT_IPV4: 'model.validation.field.invalid.format.ipv4',
	    ERROR_INVALID_FORMAT_HOSTNAME: 'model.validation.field.invalid.format.hostname',
	    ERROR_STRING_STRING_MIN_LENGTH: 'model.validation.field.string.minLength',
	    ERROR_STRING_STRING_MAX_LENGTH: 'model.validation.field.string.maxLength'
	  });
	
	  return Model;
	});

/***/ },
/* 520 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	
	  function _log(level, args) {
	    if (window.console && window.okta && window.okta.debug) {
	      window.console[level].apply(window.console, args);
	    }
	  }
	
	  /**
	   * Utility library of logging functions.
	   * @class module:Okta.Logger
	   */
	  return (/** @lends module:Okta.Logger */{
	
	      /**
	       * See [console.trace](https://developer.mozilla.org/en-US/docs/Web/API/Console.trace)
	       * @static
	       */
	      trace: function trace() {
	        return _log('trace', arguments);
	      },
	      /**
	       * See [console.dir](https://developer.mozilla.org/en-US/docs/Web/API/Console.dir)
	       * @static
	       */
	      dir: function dir() {
	        return _log('dir', arguments);
	      },
	      /**
	       * See [console.time](https://developer.mozilla.org/en-US/docs/Web/API/Console.time)
	       * @static
	       */
	      time: function time() {
	        return _log('time', arguments);
	      },
	      /**
	       * See [console.timeEnd](https://developer.mozilla.org/en-US/docs/Web/API/Console.timeEnd)
	       * @static
	       */
	      timeEnd: function timeEnd() {
	        return _log('timeEnd', arguments);
	      },
	      /**
	       * See [console.group](https://developer.mozilla.org/en-US/docs/Web/API/Console.group)
	       * @static
	       */
	      group: function group() {
	        return _log('group', arguments);
	      },
	      /**
	       * See [console.groupEnd](https://developer.mozilla.org/en-US/docs/Web/API/Console.groupEnd)
	       * @static
	       */
	      groupEnd: function groupEnd() {
	        return _log('groupEnd', arguments);
	      },
	      /**
	       * See [console.assert](https://developer.mozilla.org/en-US/docs/Web/API/Console.assert)
	       * @static
	       */
	      assert: function assert() {
	        return _log('assert', arguments);
	      },
	      /**
	       * See [console.log](https://developer.mozilla.org/en-US/docs/Web/API/Console.log)
	       * @static
	       */
	      log: function log() {
	        return _log('log', arguments);
	      },
	      /**
	       * See [console.info](https://developer.mozilla.org/en-US/docs/Web/API/Console.info)
	       * @static
	       */
	      info: function info() {
	        return _log('info', arguments);
	      },
	      /**
	       * See [console.warn](https://developer.mozilla.org/en-US/docs/Web/API/Console.warn)
	       * @static
	       */
	      warn: function warn() {
	        return _log('warn', arguments);
	      },
	      /**
	       * See [console.error](https://developer.mozilla.org/en-US/docs/Web/API/Console.error)
	       * @static
	       */
	      error: function error() {
	        return _log('error', arguments);
	      }
	    }
	  );
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 521 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof2 = __webpack_require__(334);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(518)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, Model) {
	
	  /**
	   * @class module:Okta.BaseModel
	   * @extends module:Okta.Model
	   * @deprecated Use {@link module:Okta.Model|Okta.Model} instead
	   * @example
	   * var Model = BaseModel.extend({
	   *   defaults: {
	   *     name: BaseModel.ComputedProperty(['fname', 'lname'], function (fname, lname) {
	   *       return fname + ' ' + lname;
	   *     })
	   *   }
	   * });
	   * var model = new Model({fname: 'Joe', lname: 'Doe'});
	   * model.get('name'); //=> "Joe Doe"
	   * model.toJSON(); //=> {fname: 'Joe', lname: 'Doe'}
	   *
	   * model.set('__private__', 'private property');
	   * model.get('__private__'); //=> "private property"
	   * model.toJSON(); //=> {fname: 'Joe', lname: 'Doe'}
	   */
	
	  var hasProps = function hasProps(model) {
	    var local = _.omit(model.local, _.keys(model._builtInLocalProps));
	    return _.size(model.props) + _.size(local) > 0;
	  };
	
	  var BaseModel = Model.extend( /** @lends module:Okta.BaseModel.prototype */{
	    /**
	     * @type {Boolean}
	     */
	    flat: false,
	
	    constructor: function constructor() {
	      Model.apply(this, arguments);
	      this.on('sync', this._setSynced);
	    },
	
	    allows: function allows() {
	      if (hasProps(this)) {
	        return Model.prototype.allows.apply(this, arguments);
	      } else {
	        return true;
	      }
	    },
	
	    // bw compatibility support for old computed properties
	    set: function set(key, val) {
	      var attrs;
	      if ((typeof key === 'undefined' ? 'undefined' : (0, _typeof3.default)(key)) === 'object') {
	        attrs = key;
	      } else {
	        (attrs = {})[key] = val;
	      }
	
	      // computed properties
	      _(attrs).each(function (fn, attr) {
	        if (!fn || !_.isArray(fn.__attributes)) {
	          return;
	        }
	        this.on('change:' + fn.__attributes.join(' change:'), function () {
	          var val = this.get(attr);
	          if (val !== this['__schema__'].computedProperties[attr]) {
	            this['__schema__'].computedProperties[attr] = val;
	            this.trigger('change:' + attr, val);
	          }
	        }, this);
	      }, this);
	
	      return Model.prototype.set.apply(this, arguments);
	    },
	
	    /**
	     * Get the current value of an attribute from the model. For example: `note.get("title")`
	     *
	     * See [Model.get](http://backbonejs.org/#Model-get)
	     * @param {String} attribute
	     * @return {Mixed} The value of the model attribute
	     */
	    get: function get() {
	      var value = Model.prototype.get.apply(this, arguments);
	      if (_.isFunction(value)) {
	        return value.apply(this, _.map(value.__attributes || [], this.get, this));
	      }
	      return value;
	    },
	
	    /**
	     * Return a shallow copy of the model's attributes for JSON stringification.
	     * This can be used for persistence, serialization, or for augmentation before being sent to the server.
	     * The name of this method is a bit confusing, as it doesn't actually return a JSON string —
	     *  but I'm afraid that it's the way that the JavaScript API for JSON.stringify works.
	     *
	     * ```javascript
	     * var artist = new Model({
	     *   firstName: "Wassily",
	     *   lastName: "Kandinsky"
	     * });
	     *
	     * artist.set({birthday: "December 16, 1866"});
	     * alert(JSON.stringify(artist)); // {"firstName":"Wassily","lastName":"Kandinsky","birthday":"December 16, 1866"}
	     * ```
	     * See [Model.toJSON](http://backbonejs.org/#Model-toJSON)
	     * @param  {Object} options
	     * @return {Object}
	     */
	    toJSON: function toJSON(options) {
	      options || (options = {});
	      var res = Model.prototype.toJSON.apply(this, arguments);
	
	      // cleanup computed properties
	      _(res).each(function (value, key) {
	        if (typeof value == 'function') {
	          if (options.verbose) {
	            res[key] = this.get(key);
	          } else {
	            delete res[key];
	          }
	        }
	      }, this);
	
	      // cleanup private properties
	      if (!options.verbose) {
	        _(res).each(function (value, key) {
	          if (/^__\w+__$/.test(key)) {
	            delete res[key];
	          }
	        });
	      }
	
	      return res;
	    },
	
	    sanitizeAttributes: function sanitizeAttributes(attributes) {
	      var attrs = {};
	      _.each(attributes, function (value, key) {
	        if (!_.isFunction(value)) {
	          attrs[key] = value;
	        }
	      });
	      return attrs;
	    },
	
	    reset: function reset(options) {
	      this.clear(options);
	      this.set(this.sanitizeAttributes(this.defaults), options);
	    },
	
	    clear: function clear(options) {
	      var attrs = {};
	      _.each(this.sanitizeAttributes(this.attributes), function (value, key) {
	        attrs[key] = void 0;
	      });
	      return this.set(attrs, _.extend({}, options, { unset: true }));
	    },
	
	    /**
	     * @private
	     */
	    _setSynced: function _setSynced(newModel) {
	      this._syncedData = newModel && _.isFunction(newModel.toJSON) ? newModel.toJSON() : {};
	    },
	
	    /**
	     * @private
	     */
	    _getSynced: function _getSynced() {
	      return this._syncedData;
	    },
	
	    isSynced: function isSynced() {
	      return _.isEqual(this._getSynced(), this.toJSON());
	    }
	  }, /** @lends module:Okta.BaseModel.prototype */{
	    /**
	     * @static
	     *
	     * Example:
	     *
	     * ```javascript
	     * var Model = BaseModel.extend({
	     *   defaults: {
	     *     name: BaseModel.ComputedProperty(['fname', 'lname'], function (fname, lname) {
	     *       return fname + ' ' + lname;
	     *     })
	     *   }
	     * });
	     * var model = new Model({fname: 'Joe', lname: 'Doe'});
	     * model.get('name'); // Joe Doe
	     * model.toJSON(); // {fname: 'Joe', lname: 'Doe'}
	     * ```
	     *
	     * @param {Array} attributes - an array of the attribute names this method depends on
	     * @param {Function} callback the function that computes the value of the property
	     *
	     * @deprecated Use {@link #derived} instead
	     */
	    ComputedProperty: function ComputedProperty() {
	      var args = _.toArray(arguments);
	      var fn = args.pop();
	      fn.__attributes = args.pop();
	      return fn;
	    }
	  });
	
	  return BaseModel;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 522 */
/***/ function(module, exports) {

	// empty (null-loader)

/***/ },
/* 523 */
/***/ function(module, exports) {

	// empty (null-loader)

/***/ },
/* 524 */
/***/ function(module, exports) {

	// empty (null-loader)

/***/ },
/* 525 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/* eslint max-params: [2, 27] */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(527), __webpack_require__(533), __webpack_require__(536), __webpack_require__(537), __webpack_require__(540), __webpack_require__(541), __webpack_require__(550), __webpack_require__(552), __webpack_require__(553), __webpack_require__(554), __webpack_require__(555), __webpack_require__(556), __webpack_require__(557), __webpack_require__(520), __webpack_require__(526), __webpack_require__(558), __webpack_require__(559), __webpack_require__(532), __webpack_require__(531), __webpack_require__(405), __webpack_require__(560), __webpack_require__(529), __webpack_require__(561), __webpack_require__(562), __webpack_require__(563), __webpack_require__(564), __webpack_require__(539)], __WEBPACK_AMD_DEFINE_RESULT__ = function (BaseController, BaseRouter, BatchAjaxUtil, ButtonFactory, Class, Clipboard, Cookie, DataListController, ErrorParser, Events, formatXml, Fx, Keys, Logger, Metrics, NumberUtil, SchemaUtil, SettingsModel, StateMachine, StringUtil, TabbedRouter, TemplateUtil, Time, TimeUtil, TimezoneUtil, Util, ViewUtil) {
	
	  return {
	
	    BaseController: BaseController,
	
	    BaseRouter: BaseRouter,
	
	    BatchAjaxUtil: BatchAjaxUtil,
	
	    ButtonFactory: ButtonFactory,
	
	    Class: Class,
	
	    Clipboard: Clipboard,
	
	    Cookie: Cookie,
	
	    DataListController: DataListController,
	
	    ErrorParser: ErrorParser,
	
	    Events: Events,
	
	    formatXml: formatXml,
	
	    Fx: Fx,
	
	    Keys: Keys,
	
	    Logger: Logger,
	
	    Metrics: Metrics,
	
	    NumberUtil: NumberUtil,
	
	    SchemaUtil: SchemaUtil,
	
	    SettingsModel: SettingsModel,
	
	    StateMachine: StateMachine,
	
	    StringUtil: StringUtil,
	
	    TabbedRouter: TabbedRouter,
	
	    TemplateUtil: TemplateUtil,
	
	    Time: Time,
	
	    TimeUtil: TimeUtil,
	
	    TimezoneUtil: TimezoneUtil,
	
	    Util: Util,
	
	    ViewUtil: ViewUtil
	
	  };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 526 */
/***/ function(module, exports) {

	// empty (null-loader)

/***/ },
/* 527 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/* eslint max-params: [2, 6], max-len: [2, 150] */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(404), __webpack_require__(330), __webpack_require__(528), __webpack_require__(531), __webpack_require__(532), __webpack_require__(533)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, BaseView, StateMachine, SettingsModel, BaseRouter) {
	
	  function clean(obj) {
	    var res = {};
	    _.each(obj, function (value, key) {
	      if (!_.isNull(value)) {
	        res[key] = value;
	      }
	    });
	    return res;
	  }
	
	  /**
	   * A Controller is our application control flow component.
	   *
	   * Typically it will:
	   * - Initialize the models, controller and main views
	   * - Listen to events
	   * - Create, read, update and delete models
	   * - Create modal dialogs, confirmation dialogs and alert dialogs
	   * - Control the application flow
	   *
	   * The constructor is responsible for:
	   * - Create the application state object
	   * - Assign or creates the application settings object
	   * - Create an instance of the main view with the relevant parameters
	   *
	   * See:
	   * [Hello World Tutorial](https://github.com/okta/courage/wiki/Hello-World),
	   * [Jasmine Spec](https://github.com/okta/okta-core/blob/master/WebContent/js/test/unit/spec/shared/util/BaseController_spec.js)
	   *
	   * @class module:Okta.Controller
	   * @param {Object} options Options Hash
	   * @param {SettingsModel} [options.settings] Application Settings Model
	   * @param {String} options.el a jQuery selector string stating where to attach the controller in the DOM
	   */
	  return BaseView.extend( /** @lends module:Okta.Controller.prototype */{
	
	    constructor: function constructor(options) {
	      /* eslint max-statements: [2, 13], complexity: [2, 7]*/
	      options || (options = {});
	
	      var stateData = _.defaults(clean(options.state), this.state || {});
	      this.state = new StateMachine(stateData);
	      delete options.state;
	
	      if (options.settings) {
	        this.settings = options.settings;
	      } else {
	        // allow the controller to live without a router
	        this.settings = options.settings = new SettingsModel(_.omit(options || {}, 'el'));
	        this.listen('notification', BaseRouter.prototype._notify);
	        this.listen('confirmation', BaseRouter.prototype._confirm);
	      }
	
	      BaseView.call(this, options);
	
	      this.listenTo(this.state, '__invoke__', function () {
	        var args = _.toArray(arguments),
	            method = args.shift();
	        if (_.isFunction(this[method])) {
	          this[method].apply(this, args);
	        }
	      });
	
	      if (this.View) {
	        this.add(new this.View(this.toJSON()));
	      }
	    },
	
	    /**
	     * The default values of our application state
	     * @type {Object}
	     * @default {}
	     */
	    state: {},
	
	    /**
	     * The main view this controller operate on
	     * @type {module:Okta.View}
	     * @default null
	     */
	    View: null,
	
	    /**
	     * Renders the {@link module:Okta.Controller#View|main view} after the DOM is ready
	     * in case the controller is the root component of the page (e.g there's no router)
	     */
	    render: function render() {
	      var args = arguments,
	          self = this;
	      $(function () {
	        BaseView.prototype.render.apply(self, args);
	      });
	      return this;
	    },
	
	    /**
	     * Creates the view constructor options
	     * @param {Object} [options] Extra options
	     * @return {Object} The view constructor options
	     */
	    toJSON: function toJSON(options) {
	      return _.extend(_.pick(this, 'state', 'settings', 'collection', 'model'), options || {});
	    },
	
	    /**
	     * Removes the child views, empty the DOM element and stop listening to events
	     */
	    remove: function remove() {
	      this.removeChildren();
	      this.stopListening();
	      this.$el.empty();
	      return this;
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 528 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof2 = __webpack_require__(334);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(401), __webpack_require__(529), __webpack_require__(530)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, Backbone, TemplateUtil, View) {
	
	  // add `broadcast` and `listen` functionality to all views
	  // We use one event emitter per all views
	  // This means we need to be very careful with event names
	
	  var eventBus = _.clone(Backbone.Events);
	
	  /**
	   * See {@link src/framework/View} for more detail and examples from the base class.
	   * @class module:Okta.View
	   * @extends src/framework/View
	   */
	
	  /** @lends module:Okta.View.prototype */
	  var proto = {
	
	    constructor: function constructor() {
	      View.apply(this, arguments);
	      this.module && this.$el.attr('data-view', this.module.id);
	    },
	
	    /**
	     * @deprecated Use {@link #removeChildren}
	     */
	    empty: function empty() {
	      return this.removeChildren();
	    },
	
	    compileTemplate: TemplateUtil.tpl,
	
	    /**
	     *
	     * Broadcasts a global event that all views and controllers can subscribe to
	     * for framework use only - prefer using a shared model
	     *
	     * @param {String} eventName A unique identifier for the event
	     * @param {...String} param Parameter to pass with the event (can pass more than one parameter)
	     * @deprecated For internal use only
	     * @private
	     */
	    broadcast: function broadcast() {
	      eventBus.trigger.apply(eventBus, arguments);
	      return this;
	    },
	
	    /**
	     * Subscribe to broadcast events
	     * for framework use only - prefer using a shared model
	     *
	     * @param {String} eventName The event identifier to subscribe
	     * @param {Function} fn The callback function to invoke
	     * @deprecated For internal use only
	     * @private
	     */
	    listen: function listen(name, fn) {
	      eventBus.off(name, fn);
	      this.listenTo(eventBus, name, fn);
	      return this;
	    },
	
	    /**
	     * Shows a notification box
	     * @param {String} level success / warning / error
	     * @param {String} message The message to display
	     * @param {Object} [options]
	     * @param {Number} [options.width] Set a custom width
	     * @param {String} [options.title] Set a custom title
	     * @param {Boolean} [options.hide=true] Do we want to auto-hide this notification?
	     * @param {Boolean} [options.dismissable] Show a dismiss button
	     * @example
	     * view.notify('success', 'Group created successfully');
	     */
	    notify: function notify(level, message, options) {
	      this.broadcast('notification', _.defaults({ message: message, level: level }, options));
	      return this;
	    },
	
	    /**
	     * Shows a confirmation dialog
	     *
	     * The main difference between this and the native javascript `confirm` method
	     * Is this method is non blocking (note the callback pattern).
	     *
	     * The callback function will run in the context (`this`) of the invoking view.
	     *
	     * @param {String} [title] The title of the confirmation dialog
	     * @param {String} [message] The message of the confirmation dialog
	     * @param {Function} [okfn] The callback to run when the user hits "OK" (runs in the context of the invoking view)
	     * @param {Function} [cancelfn] The callback to run when the user hits "Cancel"
	     *        (runs in the context of the invoking view)
	     * @example
	     * view.confirm('Delete Group', 'Are you sure you want to delete the selected group?', function () {
	     *   model.destroy();
	     * });
	     *
	     * // title will be auto-set to "Okta"
	     * view.confirm('Are you sure you want to delete the selected group?', function () {
	     *   model.destroy();
	     * });
	     *
	     * view.confirm({
	     *   title: 'Delete Group', //=> Modal title
	     *   subtitle: 'Are you sure you want to delete the selected group?', //=> Modal subtitle
	     *   content: '<h3 color="red">THIS WILL DELETE THE GROUP!</h3>', //=> A template or a view to add to the modal
	     *   save: 'Delete Group', //=> Button label
	     *   ok: _.bind(model.save, model) // Callback function on hitting "ok" button
	     *   cancel: 'Cancel', //=> Button label
	     *   cancelFn: _.bind(model.destroy, model) // Callback function on hitting "cancel" button
	     * });
	     */
	    confirm: function confirm(title, message, okfn, cancelfn) {
	      /* eslint max-statements: [2, 12] */
	
	      var options;
	      if ((typeof title === 'undefined' ? 'undefined' : (0, _typeof3.default)(title)) == 'object') {
	        options = title;
	      } else {
	        if (arguments.length == 2 && _.isFunction(message)) {
	          options = {
	            title: 'Okta',
	            subtitle: title,
	            ok: message
	          };
	        } else {
	          options = {
	            title: title,
	            subtitle: message,
	            ok: okfn,
	            cancelFn: cancelfn
	          };
	        }
	      }
	      if (_.isFunction(options.ok)) {
	        options.ok = _.bind(options.ok, this);
	      }
	      if (_.isFunction(options.cancelFn)) {
	        options.cancelFn = _.bind(options.cancelFn, this);
	      }
	      this.broadcast('confirmation', options);
	      return this;
	    },
	
	    /**
	     * Shows an alert box
	     *
	     * The main difference between this and the native javascript `alert` method
	     * Is this method is non blocking.
	     *
	     * @param {String} message The message
	     * @example
	     * view.alert('Mission complete');
	     */
	    alert: function alert(params) {
	      if (_.isString(params)) {
	        params = {
	          subtitle: params
	        };
	      }
	      this.confirm(_.extend({}, params, {
	        noCancelButton: true
	      }));
	      return this;
	    }
	  };
	
	  return View.extend(proto, /** @lends View.prototype */{
	    /** @method */
	    decorate: function decorate(TargetView) {
	      var View = TargetView.extend({});
	      _.defaults(View.prototype, proto);
	      return View;
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 529 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(403)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, Handlebars) {
	
	  /**
	   * @class module:Okta.internal.util.TemplateUtil
	   * @hideconstructor
	   */
	  return (/** @lends module:Okta.internal.util.TemplateUtil */{
	
	      /**
	       * Compiles a Handlebars template
	       * @static
	       * @method
	       */
	      tpl: _.memoize(function (tpl) {
	        /* eslint okta/no-specific-methods: 0 */
	        return Handlebars.compile(tpl);
	      })
	
	    }
	  );
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 530 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof2 = __webpack_require__(334);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	(function (root, factory) {
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(401)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	  /* global module, exports */
	  else if (typeof require === 'function' && (typeof exports === 'undefined' ? 'undefined' : (0, _typeof3.default)(exports)) === 'object') {
	      module.exports = factory(require('okta/underscore'), require('backbone'));
	    } else {
	      root.Archer || (root.Archer = {});
	      root.Archer.View = factory(root._, root.Backbone);
	    }
	})(undefined, function (_, Backbone) {
	
	  var CHILDREN = '__children__',
	      RENDERED = '__rendered__',
	      PARENT = '__parent__',
	      CHILD_DEFINITIONS = '__children_definitions__',
	      ADD_TO_CONTAINER = '__add_to_container__';
	
	  function getIndex(container, view) {
	    for (var i = 0; i < container[CHILDREN].length; i++) {
	      if (view.cid === container[CHILDREN][i].cid) {
	        return i;
	      }
	    }
	  }
	
	  function noop() {}
	
	  function doRender(view) {
	    view[RENDERED] = true;
	
	    var html = view.renderTemplate(view.template);
	    if (html) {
	      view.$el.html(html);
	    } else if (view.length) {
	      view.$el.empty();
	    }
	
	    view.each(function (view) {
	      view[ADD_TO_CONTAINER]();
	    });
	  }
	
	  function subscribeEvents(view) {
	    var isEventPropertyRe = /^(?!(?:delegate|undelegate|_))([a-zA-Z0-9]+)(?:Events)$/;
	    _.each(_.allKeys(view), function (key) {
	      var matchKeys = key.match(isEventPropertyRe);
	      if (!matchKeys) {
	        return;
	      }
	      var bindings = _.result(view, key),
	          entity = view.options[matchKeys[1]] || view[matchKeys[1]];
	      if (!entity || !_.isObject(bindings) || !_.isFunction(entity.trigger)) {
	        return;
	      }
	      _.each(bindings, function (callback, event) {
	        var callbacks = _.isFunction(callback) ? [callback] : _.reduce(callback.split(/\s+/), function (arr, name) {
	          if (_.isFunction(view[name])) {
	            arr.push(view[name]);
	          }
	          return arr;
	        }, []);
	        _.each(callbacks, function (cb) {
	          view.listenTo(entity, event, cb);
	        });
	      });
	    });
	  }
	
	  /**
	   * A View operates on a string template, an token based template, or a model based template, with a few added hooks.
	   * It provides a collection of child views, when a child view could be a View or another View.
	   * Conceptually, if we were in a file system, the View is a folder, when the concrete child views are files,
	   * and the child Views are sub folders.
	   *
	   * *Technically, when using a View as a container, it could have its own concrete logic,
	   * but conceptually we like to keep it separated so a view is either a concrete view or a collection of child views.*
	   *
	   * In addition to the standard backbone options, we added `settings` and `state` as first class options.
	   * it will automatically assign `options` to `this.options` as an instance member.
	   *
	   * See [Backbone.View](http://backbonejs.org/#View).
	   *
	   * @class src/framework/View
	   * @extends external:Backbone.View
	   * @param {Object} [options] options hash
	   * @example
	   * var DocumentView = Archer.View.extend({
	   *   template: [
	   *     '<header></header>',
	   *     '<article></article>',
	   *     '<footer></footer>'
	   *   ].join(''),
	   *   children: [[HeaderView, 'header'], [ContentView, 'article'], [FooterView, 'footer']]
	   * });
	   */
	  var View = Backbone.View.extend( /** @lends src/framework/View.prototype */{
	
	    /**
	     * An object listing events and callback bind to this.{entity}
	     * @name *Events
	     * @memberof src/framework/View
	     * @type {(Object|Function)}
	     * @instance
	     * @example
	     * var FooView = View.extend({
	     *   modelEvents: {
	     *     'change:name': 'render'
	     *   }
	     * })
	     * //equivalent to ==>
	     * var FooView = View.extend({
	     *   initialize: function() {
	     *     this.listenTo(this.model, 'change:name', this.render);
	     *   }
	     * });
	     *
	     *
	     * //Multiple callbacks:
	     * var FooView = View.extend({
	     *   modelEvents: {
	     *     'change:name': 'render foo'
	     *   },
	     *   foo: function() {}
	     * });
	     *
	     * //Callbacks As Function:
	     * var FooView = View.extend({
	     *   stateEvents: {
	     *     'change': function() {
	     *   }
	     * });
	     *
	     * //Event Configuration As Function
	     * var FooView = View.extend({
	     *   collectionEvents: function() {
	     *     var events = { 'change:name deleteItem': 'render' };
	     *     events['changeItem'] = 'spin';
	     *     events['addItem'] = function() {};
	     *     return events;
	     *   }
	     * });
	     */
	
	    constructor: function constructor(options) {
	      /* eslint max-statements: [2, 17] */
	      this.options = options || {};
	      _.extend(this, _.pick(this.options, 'state', 'settings'));
	
	      // init per-instance children collection
	      this[CHILDREN] = [];
	      this[RENDERED] = false;
	      this[PARENT] = null;
	      this[CHILD_DEFINITIONS] = this.children;
	
	      // we want to make sure initialize is triggered *after* we append the views from the `this.views` array
	      var initialize = this.initialize;
	      this.initialize = noop;
	
	      Backbone.View.apply(this, arguments);
	
	      _.each(_.result(this, CHILD_DEFINITIONS), function (childDefinition) {
	        this.add.apply(this, _.isArray(childDefinition) ? childDefinition : [childDefinition]);
	      }, this);
	      delete this[CHILD_DEFINITIONS];
	
	      if (this.autoRender && this.model) {
	        var event = _.isArray(this.autoRender) ? _.map(this.autoRender, function (field) {
	          return 'change:' + field;
	        }).join(' ') : 'change';
	        this.listenTo(this.model, event, function () {
	          this.render();
	        });
	      }
	
	      this.initialize = initialize;
	      this.initialize.apply(this, arguments);
	      subscribeEvents(this);
	    },
	
	    /**
	     * Unregister view from container
	     * Note: this will not remove the view from the dom
	     * and will not call the `remove` method on the view
	     *
	     * @param {src/framework/View} view the view to unregister
	     * @private
	     */
	    unregister: function unregister(view) {
	
	      this.stopListening(view);
	      var viewIndex = getIndex(this, view);
	      // viewIndex is undefined when the view is not found (may have been removed)
	      // check if it is undefined to prevent unexpected thing to happen
	      // array.splice(undefined, x) removes the first x element(s) from the array
	      // this protects us against issues when calling `remove` on a child view multiple times
	      if (_.isNumber(viewIndex)) {
	        this[CHILDREN].splice(viewIndex, 1);
	      }
	    },
	
	    /**
	     * Should we auto render the view upon model change. Boolean or array of field names to listen to.
	     * @type {Boolean|Array}
	     * @deprecated Instead, please use modelEvents
	     * @example
	     * modelEvents: {
	     *   change:name: 'render'
	     * }
	     */
	    autoRender: false,
	
	    /**
	     *
	     * When the template is an underscore template, the render method will pass the options has to the template
	     * And the associated model, if exists, when it will prefer the model over the options in case of a conflict.
	     * {@link #render View.render}
	     * @type {(String|Function)}
	     * @example
	     * var View = View.extend({
	     *   template: '<p class="name">{{name}}</p>'
	     * };
	     */
	    template: null,
	
	    /**
	     * A list of child view definitions to be passed to {@link #add this.add()}.
	     * Note: these definitions will be added **before** the {@link #constructor initiliaze} method invokes.
	     * @type {(Array|Function)}
	     * @example
	     * var Container = View.extend({
	     *    template: '<p class="content"></p>',
	     *    children: [
	     *      [ContentView, '.content'],
	     *      [OtherContentView, '.content'],
	     *      OtherView
	     *    ]
	     *  })
	     *
	     * var Container = View.extend({
	     *    template: '<dov class="form-wrap"></div>',
	     *    children: function () {
	     *      return [
	     *        [FormView, '.form-wrap', {options: {model: this.optiosn.otherModel}}]
	     *      ]
	     *    }
	     *  })
	     */
	    children: [],
	
	    /**
	     * Add a child view to the container.
	     * If the container is already rendered, will also render the view  and append it to the DOM.
	     * Otherwise will render and append once the container is rendered.
	     *
	     * *We believe that for the sake of encapsulation, a view should control its own chilren, so we treat this method as
	     * protected and even though technically you can call `view.add` externally we strongly discourage it.*
	     *
	     * @param {(src/framework/View|String)} view A class (or an instance which is discouraged) of a View - or an HTML
	     * string/template
	     * @param {String} [selector] selector in the view's template on which the view will be added to
	     * @param {Object} [options]
	     * @param {Boolean} [options.bubble=false] Bubble (proxy) events from this view up the chain
	     * @param {Boolean} [options.prepend=false] Prepend the view instend of appending
	     * @param {String} [options.selector] Selector in the view's template on which the view will be added to
	     * @param {Object} [options.options] Extra options to pass to the child constructor
	     * @protected
	     * @returns {src/framework/View} - The instance of itself for the sake of chaining
	     * @example
	     * var Container = View.extend({
	     *
	     *   template: [
	     *     '<h1></h1>',
	     *     '<section></section>',
	     *   ].join(''),
	     *
	     *   initalize: function () {
	     *
	     *     this.add(TitleView, 'h1'); // will be added to <h1>
	     *
	     *     this.add(ContentView1, 'section'); // will be added to <section>
	     *
	     *     this.add(ContentView2, 'section', {prepend: true}); // will be add into <section> **before** ContentView1
	     *
	     *     this.add(OtherView, {
	     *       options: {
	     *         model: new Model()
	     *       }
	     *     }); // will be added **after** the <section> element
	     *
	     *     this.add('<p class="name">some html</p>'); //=> "<p class="name">some html</p>"
	     *     this.add('<p class="name">{{name}}</p>'); //=> "<p class="name">John Doe</p>"
	     *     this.add('{{name}}') //=> "<div>John Doe</div>"
	     *     this.add('<span>{{name}}</span> w00t') //=> "<div><span>John Doe</span> w00t</div>"
	     *   }
	     *
	     * });
	     *
	     * var container - new View({name: 'John Doe'});
	     */
	    add: function add(view, selector, bubble, prepend, extraOptions) {
	      /* eslint max-statements: [2, 28], complexity: [2, 8] */
	
	      var options = {},
	          args = _.toArray(arguments);
	
	      if (_.isObject(selector)) {
	        options = selector;
	        selector = options.selector;
	        bubble = options.bubble;
	        prepend = options.prepend;
	        extraOptions = options.options;
	      } else if (_.isObject(bubble)) {
	        options = bubble;
	        bubble = options.bubble;
	        prepend = options.prepend;
	        extraOptions = options.options;
	      }
	
	      if (_.isString(view)) {
	        view = function (template) {
	          return View.extend({
	            constructor: function constructor() {
	              try {
	                var $el = Backbone.$(template);
	
	                if ($el.length != 1) {
	                  throw 'invalid Element';
	                }
	
	                var unescapingRexExp = /&(\w+|#x\d+);/g;
	                var elementUnescapedOuterHTMLLength = $el.prop('outerHTML').replace(unescapingRexExp, ' ').length;
	                var templateUnescapedLength = template.replace(unescapingRexExp, ' ').length;
	
	                if (elementUnescapedOuterHTMLLength !== templateUnescapedLength) {
	                  throw 'invalid Element';
	                }
	
	                this.template = $el.html();
	                this.el = $el.empty()[0];
	              } catch (e) {
	                // not a valid html tag.
	                this.template = template;
	              }
	              View.apply(this, arguments);
	            }
	          });
	        }(view);
	      }
	
	      if (view.prototype && view.prototype instanceof View) {
	        /* eslint new-cap: 0 */
	        var viewOptions = _.omit(_.extend({}, this.options, extraOptions), 'el');
	        args[0] = new view(viewOptions);
	        return this.add.apply(this, args);
	      }
	
	      // prevent dups
	      if (_.isNumber(getIndex(this, view))) {
	        throw new Error('Duplicate child');
	      }
	
	      view[PARENT] = this;
	
	      // make the view responsible for adding itself to the parent:
	      // * register the selector in the closure
	      // * register a reference the parent in the closure
	      view[ADD_TO_CONTAINER] = function (selector) {
	        return function () {
	          if (selector && view[PARENT].$(selector).length != 1) {
	            throw new Error('Invalid selector: ' + selector);
	          }
	          var $el = selector ? this[PARENT].$(selector) : this[PARENT].$el;
	          this.render();
	          // we need to delegate events in case
	          // the view was added and removed before
	          this.delegateEvents();
	
	          // this[PARENT].at(index).$el.before(this.el);
	          prepend ? $el.prepend(this.el) : $el.append(this.el);
	        };
	      }.call(view, selector);
	
	      // if flag to bubble events is set
	      // proxy all child view events
	      if (bubble) {
	        this.listenTo(view, 'all', function () {
	          this.trigger.apply(this, arguments);
	        });
	      }
	
	      // add to the dom if `render` has been called
	      if (this.rendered()) {
	        view[ADD_TO_CONTAINER]();
	      }
	
	      // add view to child views collection
	      this[CHILDREN].push(view);
	
	      return this;
	    },
	
	    /**
	     * Remove all children from container
	     */
	    removeChildren: function removeChildren() {
	      this.each(function (view) {
	        view.remove();
	      });
	      return this;
	    },
	
	    /**
	     *  Removes a view from the DOM, and calls stopListening to remove any bound events that the view has listenTo'd.
	     *  Also removes all childern of the view if any, and removes itself from its parent view(s)
	     */
	    remove: function remove() {
	      this.removeChildren();
	      if (this[PARENT]) {
	        this[PARENT].unregister(this);
	      }
	      return Backbone.View.prototype.remove.apply(this, arguments);
	    },
	
	    /**
	     * Compile the template to function you can apply tokens on on render time.
	     * Uses the underscore tempalting engine by default
	     * @protected
	     * @param  {String} template
	     * @return {Function} a compiled template
	     */
	    compileTemplate: function compileTemplate(template) {
	      /* eslint  okta/no-specific-methods: 0*/
	      return _.template(template);
	    },
	
	    /**
	     * Render a template with `this.model` and `this.options` as parameters
	     * preferring the model over the options.
	     *
	     * @param  {(String|Function)} template The template to build
	     * @return {String} An HTML string
	     * @protected
	     */
	    renderTemplate: function renderTemplate(template) {
	      if (_.isString(template)) {
	        template = this.compileTemplate(template);
	      }
	      if (_.isFunction(template)) {
	        return template(this.getTemplateData());
	      }
	    },
	
	    /**
	     * The data hash passed to the compiled template
	     * @return {Object}
	     * @protected
	     */
	    getTemplateData: function getTemplateData() {
	      var modelData = this.model && this.model.toJSON({ verbose: true }) || {};
	      var options = _.omit(this.options, ['state', 'settings', 'model', 'collection']);
	      return _.defaults({}, modelData, options);
	    },
	
	    /**
	     * Renders the template to `$el` and append all children in order
	     * {@link #template View.template}
	     */
	    render: function render() {
	      this.preRender();
	      doRender(this);
	      this.postRender();
	      return this;
	    },
	
	    /**
	     * Pre render routine. Will be called right *before* the logic in {@link #render} is executed
	     * @method
	     */
	    preRender: noop,
	
	    /**
	     * Post render routine. Will be called right *after* the logic in {@link #render} is executed
	     * @method
	     */
	    postRender: noop,
	
	    /**
	     * Was this instance rendered
	     */
	    rendered: function rendered() {
	      return this[RENDERED];
	    },
	
	    /**
	     * Get all direct child views.
	     * @returns {src/framework/View[]}
	     * @example
	     * var container = View.extend({
	     *   children: [View1, View2]
	     * }).render();
	     * container.getChildren() //=> [view1, view2];
	     */
	    getChildren: function getChildren() {
	      return this.toArray();
	    },
	
	    /**
	     * Get a child by index
	     * @param {number} index
	     * @returns {src/framework/View} The child view
	     */
	    at: function at(index) {
	      return this.getChildren()[index];
	    },
	
	    /**
	     * Invokes a method on all children down the tree
	     *
	     * @param {String} method The method to invoke
	     */
	    invoke: function invoke(methodName) {
	      var args = _.toArray(arguments);
	      this.each(function (child) {
	        // if child has children, bubble down the tree
	        if (child.size()) {
	          child.invoke.apply(child, args);
	        }
	        // run the function on the child
	        if (_.isFunction(child[methodName])) {
	          child[methodName].apply(child, args.slice(1));
	        }
	      });
	      return this;
	    }
	  });
	
	  // Code borrowed from Backbone.js source
	  // Underscore methods that we want to implement on the Container.
	  var methods = ['each', 'map', 'reduce', 'reduceRight', 'find', 'filter', 'reject', 'every', 'some', 'contains', 'toArray', 'size', 'first', 'initial', 'rest', 'last', 'without', 'indexOf', 'shuffle', 'lastIndexOf', 'isEmpty', 'chain', 'where', 'findWhere'];
	
	  _.each(methods, function (method) {
	    View.prototype[method] = function () {
	      var args = _.toArray(arguments);
	      args.unshift(_.toArray(this[CHILDREN]));
	      return _[method].apply(_, args);
	    };
	  }, this);
	
	  /**
	   * See [_.each](http://underscorejs.org/#each)
	   * @name each
	   * @memberof src/framework/View
	   * @method
	   * @instance
	   * @param {Function} iterator
	   * @param {Object} [context]
	   */
	  /**
	   * See [_.map](http://underscorejs.org/#map)
	   * @name map
	   * @memberof src/framework/View
	   * @method
	   * @instance
	   * @param {Function} iterator
	   * @param {Object} [context]
	   */
	  /**
	   * See [_.reduce](http://underscorejs.org/#reduce)
	   * @name reduce
	   * @memberof src/framework/View
	   * @method
	   * @instance
	   * @param {Function} iterator
	   * @param {Mixed} memo
	   * @param {Object} [context]
	   */
	
	  /**
	   * See [_.reduceRight](http://underscorejs.org/#reduceRight)
	   * @name reduceRight
	   * @memberof src/framework/View
	   * @method
	   * @instance
	   * @param {Function} iterator
	   * @param {Mixed} memo
	   * @param {Object} [context]
	   */
	  /**
	   * See [_.find](http://underscorejs.org/#find)
	   * @name find
	   * @memberof src/framework/View
	   * @method
	   * @instance
	   * @param {Function} predicate
	   * @param {Object} [context]
	   */
	  /**
	   * See [_.filter](http://underscorejs.org/#filter)
	   * @name filter
	   * @memberof src/framework/View
	   * @method
	   * @instance
	   * @param {Function} predicate
	   * @param {Object} [context]
	   */
	  /**
	   * See [_.reject](http://underscorejs.org/#reject)
	   * @name reject
	   * @memberof src/framework/View
	   * @method
	   * @instance
	   * @param {Function} predicate
	   * @param {Object} [context]
	   */
	  /**
	   * See [_.every](http://underscorejs.org/#every)
	   * @name every
	   * @memberof src/framework/View
	   * @method
	   * @instance
	   * @param {Function} [predicate]
	   * @param {Object} [context]
	   */
	  /**
	   * See [_.some](http://underscorejs.org/#some)
	   * @name some
	   * @memberof src/framework/View
	   * @method
	   * @instance
	   * @param {Function} [predicate]
	   * @param {Object} [context]
	   */
	  /**
	   * See [_.contains](http://underscorejs.org/#contains)
	   * @name contains
	   * @memberof src/framework/View
	   * @method
	   * @instance
	   * @param {Mixed} value
	   */
	  /**
	   * See [_.toArray](http://underscorejs.org/#toArray)
	   * @name toArray
	   * @memberof src/framework/View
	   * @method
	   * @instance
	   */
	  /**
	   * See [_.size](http://underscorejs.org/#size)
	   * @name size
	   * @memberof src/framework/View
	   * @method
	   * @instance
	   */
	  /**
	   * See [_.first](http://underscorejs.org/#first)
	   * @name first
	   * @memberof src/framework/View
	   * @method
	   * @instance
	   * @param {Number} [n]
	   */
	  /**
	   * See [_.initial](http://underscorejs.org/#initial)
	   * @name initial
	   * @memberof src/framework/View
	   * @method
	   * @instance
	   * @param {Number} [n]
	   */
	  /**
	   * See [_.last](http://underscorejs.org/#last)
	   * @name last
	   * @memberof src/framework/View
	   * @method
	   * @instance
	   * @param {Number} [n]
	   */
	  /**
	   * See [_.rest](http://underscorejs.org/#rest)
	   * @name rest
	   * @memberof src/framework/View
	   * @method
	   * @instance
	   * @param {Number} [index]
	   */
	  /**
	   * See [_.without](http://underscorejs.org/#without)
	   * @name without
	   * @memberof src/framework/View
	   * @method
	   * @instance
	   */
	  /**
	   * See [_.indexOf](http://underscorejs.org/#indexOf)
	   * @name indexOf
	   * @memberof src/framework/View
	   * @method
	   * @instance
	   * @param {Mixed} value
	   * @param {Boolean} [isSorted]
	   */
	  /**
	   * See [_.shuffle](http://underscorejs.org/#shuffle)
	   * @name shuffle
	   * @memberof src/framework/View
	   * @method
	   * @instance
	   */
	  /**
	   * See [_.shuffle](http://underscorejs.org/#lastIndexOf)
	   * @name lastIndexOf
	   * @memberof src/framework/View
	   * @method
	   * @instance
	   * @param {Mixed} value
	   * @param {Number} [fromIndex]
	   */
	  /**
	   * See [_.isEmpty](http://underscorejs.org/#isEmpty)
	   * @name isEmpty
	   * @memberof src/framework/View
	   * @method
	   * @instance
	   */
	  /**
	   * See [_.chain](http://underscorejs.org/#chain)
	   * @name chain
	   * @memberof src/framework/View
	   * @method
	   * @instance
	   */
	  /**
	   * See [_.where](http://underscorejs.org/#where)
	   * @name where
	   * @memberof src/framework/View
	   * @method
	   * @instance
	   * @param {Object} properties
	   */
	  /**
	   * See [_.findWhere](http://underscorejs.org/#findWhere)
	   * @name findWhere
	   * @memberof src/framework/View
	   * @method
	   * @instance
	   * @param {Object} properties
	   */
	
	  return View;
	});

/***/ },
/* 531 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(518)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, Model) {
	
	  /**
	   * @class StateMachine
	   * @extends Okta.Model
	   * @private
	   *
	   * A state object that holds the applciation state
	   */
	
	  return Model.extend({
	    extraProperties: true,
	    /**
	     * Invokes a method on the applicable {@link Okta.Controller}
	     *
	     * ```javascript
	     * state.invoke('methodName', 'param1', 'param2')
	     * // Will call
	     * contoller.methodName('param1', 'param2')
	     * ```
	     * @param {String} methodName the name of the controller method to invoke on the controller
	     */
	    invoke: function invoke() {
	      var args = _.toArray(arguments);
	      args.unshift('__invoke__');
	      this.trigger.apply(this, args);
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 532 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(518)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, Model) {
	
	  /**
	   * @class SettingsModel
	   * @extends {Okta.Model}
	   * @private
	   */
	
	  return Model.extend({
	    local: function local() {
	      var settings = window.okta && window.okta.settings || {};
	      return {
	        orgId: ['string', false, settings.orgId],
	        orgName: ['string', false, settings.orgName],
	        serverStatus: ['string', false, settings.serverStatus],
	        persona: ['string', false, settings.persona],
	        isDeveloperConsole: ['boolean', false, settings.isDeveloperConsole],
	        isPreview: ['boolean', false, settings.isPreview],
	        permissions: ['array', true, settings.permissions || []]
	      };
	    },
	
	    extraProperties: true,
	
	    constructor: function constructor() {
	      this.features = window._features || [];
	      Model.apply(this, arguments);
	    },
	
	    /**
	     * Checks if the user have a feature flag enabled (Based of the org level feature flag)
	     * @param  {String}  feature Feature name
	     * @return {Boolean}
	     */
	    hasFeature: function hasFeature(feature) {
	      return _.contains(this.features, feature);
	    },
	
	    /**
	     * Checks if any of the given feature flags are enabled (Based of the org level feature flags)
	     * @param  {Array}  featureArray Features names
	     * @return {Boolean} true if any of the give features are enabled. False otherwise
	     */
	    hasAnyFeature: function hasAnyFeature(featureArray) {
	      return _.some(featureArray, this.hasFeature, this);
	    },
	
	    /**
	     * Checks if the user have a specific permission (based on data passed from JSP)
	     * @param  {String}  permission Permission name
	     * @return {Boolean}
	     */
	    hasPermission: function hasPermission(permission) {
	      return _.contains(this.get('permissions'), permission);
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 533 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/* eslint max-len: [2, 150], max-params: [2, 7] */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(404), __webpack_require__(330), __webpack_require__(401), __webpack_require__(532), __webpack_require__(520), __webpack_require__(534), __webpack_require__(535)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, Backbone, SettingsModel, Logger, Notification, ConfirmationDialog) {
	
	  function getRoute(router, route) {
	    var root = _.result(router, 'root') || '';
	    if (root && _.isString(route)) {
	      return [root, route].join('/').replace(/\/{2,}/g, '/');
	    }
	    return route;
	  }
	
	  /**
	   * BaseRouter is a standard [Backbone.Router](http://backbonejs.org/#Router)
	   * with a few additions:
	   * - Explicit mapping between routes and controllers
	   * - Support for rendering notification and confirmation dialogs
	   *
	   * Checkout the [Hello World Tutorial](https://github.com/okta/courage/wiki/Hello-World)
	   * for a step-by-step guide to using this.
	   *
	   * @class module:Okta.Router
	   * @extends external:Backbone.Router
	   * @param {Object} options options hash
	   * @param {String} options.el a jQuery selector string stating where to attach the controller in the DOM
	   */
	  return Backbone.Router.extend( /** @lends module:Okta.Router.prototype */{
	
	    /**
	     * The root URL for the router. When setting {@link http://backbonejs.org/#Router-routes|routes},
	     * it will be prepended to each route.
	     * @type {String|Function}
	     */
	    root: '',
	
	    listen: Notification.prototype.listen,
	
	    constructor: function constructor(options) {
	      options || (options = {});
	      this.el = options.el;
	      this.settings = new SettingsModel(_.omit(options, 'el'));
	      if (options.root) {
	        this.root = options.root;
	      }
	
	      Backbone.Router.apply(this, arguments);
	
	      this.listen('notification', this._notify);
	      this.listen('confirmation', this._confirm);
	    },
	
	    /**
	     * Fires up a confirmation dialog
	     *
	     * @param  {Object} options Options Hash
	     * @param  {String} options.title The title
	     * @param  {String} options.subtitle The explain text
	     * @param  {String} options.save The text for the save button
	     * @param  {Function} options.ok The callback function to run when hitting "OK"
	     * @param  {String} options.cancel The text for the cancel button
	     * @param  {Function} options.cancelFn The callback function to run when hitting "Cancel"
	     * @param  {Boolean} options.noCancelButton Don't render the cancel button (useful for alert dialogs)
	     *
	     * @private
	     *
	     * @return {Okta.View} the dialog view
	     */
	    _confirm: function _confirm(options) {
	      options || (options = {});
	      var Dialog = ConfirmationDialog.extend(_.pick(options, 'title', 'subtitle', 'save', 'ok', 'cancel', 'cancelFn', 'noCancelButton', 'content', 'danger'));
	      // The model is here because itsa part of the BaseForm paradigm.
	      // It will be ignored in the context of a confirmation dialog.
	      var dialog = new Dialog({ model: this.settings });
	      dialog.render();
	      return dialog; // test hook
	    },
	
	    /**
	     * Fires up a notification banner
	     *
	     * @param  {Object} options Options Hash
	     * @return {Okta.View} the notification view
	     * @private
	     */
	    _notify: function _notify(options) {
	      var notification = new Notification(options);
	      $('#content').prepend(notification.render().el);
	      return notification; // test hook
	    },
	
	    /**
	     * Renders a Controller
	     * This will initialize new instance of a controller and call render on it
	     *
	     * @param  {Okta.Controller} Controller The controller Class we which to render
	     * @param  {Object} [options] Extra options to the controller constructor
	     */
	    render: function render(Controller, options) {
	      this.unload();
	      options = _.extend(_.pick(this, 'settings', 'el'), options || {});
	      this.controller = new Controller(options);
	      this.controller.render();
	    },
	
	    /**
	    * Starts the backbone history object
	    *
	    * Waits for the dom to be ready before calling `Backbone.history.start()` (IE issue).
	    *
	    * See [Backbone History](http://backbonejs.org/#History) for more information.
	    */
	    start: function start() {
	      var args = arguments;
	      $(function () {
	        if (Backbone.History.started) {
	          Logger.error('History has already been started');
	          return;
	        }
	        Backbone.history.start.apply(Backbone.history, args);
	      });
	    },
	
	    /**
	     * Removes active controller and frees up event listeners
	     */
	    unload: function unload() {
	      if (this.controller) {
	        this.stopListening(this.controller);
	        this.stopListening(this.controller.state);
	        this.controller.remove();
	      }
	    },
	
	    route: function route(_route, name, callback) {
	      return Backbone.Router.prototype.route.call(this, getRoute(this, _route), name, callback);
	    },
	
	    navigate: function navigate(fragment, options) {
	      return Backbone.Router.prototype.navigate.call(this, getRoute(this, fragment), options);
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 534 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(404), __webpack_require__(330), __webpack_require__(528)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, BaseView) {
	
	  var defaults = {
	    level: 'success',
	    message: 'Great Success!',
	    hide: true,
	    fade: 400,
	    delay: 3000,
	    width: 0,
	    dismissable: false
	  };
	
	  return BaseView.extend({
	
	    className: 'infobox infobox-confirm infobox-confirm-fixed',
	
	    events: {
	      'click .infobox-dismiss-link': function clickInfoboxDismissLink(e) {
	        e.preventDefault();
	        this.fadeOut();
	      }
	    },
	
	    template: '\
	      {{#if dismissable}}\
	      <a class="infobox-dismiss-link" title="Dismiss" href="#">\
	        <span class="dismiss-icon"></span>\
	      </a>\
	      {{/if}}\
	      <span class="icon {{level}}-16"></span>\
	      {{#if title}}<h3>{{title}}</h3>{{/if}}\
	      <p>{{message}}</p>\
	    ',
	
	    initialize: function initialize() {
	      this.options = _.defaults({}, this.options, defaults);
	      this.$el.addClass('infobox-' + this.options.level);
	      if (this.options.width) {
	        this.$el.width(this.options.width).css({
	          'margin-left': '0px',
	          'left': Math.round(($(window).width() - this.options.width) / 2)
	        });
	      }
	    },
	
	    getTemplateData: function getTemplateData() {
	      return _.extend(_.pick(this.options, 'level', 'message', 'title'), {
	        dismissable: this.options.hide === false || this.options.dismissable === true
	      });
	    },
	
	    postRender: function postRender() {
	      if (this.options.hide) {
	        _.delay(_.bind(this.fadeOut, this), this.options.delay);
	      }
	    },
	
	    fadeOut: function fadeOut() {
	      this.$el.fadeOut(this.options.fade, _.bind(this.remove, this));
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 535 */
/***/ function(module, exports) {

	// empty (null-loader)

/***/ },
/* 536 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(404), __webpack_require__(330)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _) {
	
	  var DEFAULTS = {
	    queryBuildFn: _.noop,
	    batchSize: 20
	  };
	
	  return {
	
	    /**
	     * Concurrently fetch per batch size.
	     *
	     * @param {Object} [option]
	     * @param {String} [option.url] URL root
	     * @param {Function} [option.queryBuilderFn] create extra parameters.
	     * @param {Int} [option.batchSize] batch size
	     * @param {Array} ids an list of elements (usually IDs) to help build extra parameters.
	     * @return {Promise}
	     */
	    getByIds: function getByIds(option) {
	      /* eslint complexity: [2, 7] */
	      var opt = _.defaults({}, option, DEFAULTS),
	          ids = opt.ids;
	
	      if (!_.isString(opt.url)) {
	        throw new Error('Expecting an string URL but get: ' + opt.url);
	      }
	
	      if (!_.isArray(ids) || _.isEmpty(ids)) {
	        throw new Error('Expecting an list of IDs but get: ' + ids);
	      }
	
	      if (!_.isNumber(opt.batchSize) || opt.batchSize === 0 || ids.length <= opt.batchSize) {
	        return $.get(opt.url, opt.queryBuildFn(ids));
	      }
	
	      // 1. [ID] -> [[ID]] (groupBy and values)
	      // 2. [[ID]] -> [XHR] (map)
	      var idss = _.chain(ids).groupBy(function (id, index) {
	        return Math.floor(index / opt.batchSize);
	      }).values().map(function (xs) {
	        return $.get(opt.url, opt.queryBuildFn(xs));
	      }, this).value();
	
	      // 3. batch API call and merge response into single array.
	      return $.when.apply($, idss).then(function () {
	        // regarding structure of `arguments`, @see https://api.jquery.com/jquery.when/
	        return _.chain(arguments).map(_.first).flatten().value();
	      });
	    }
	  };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 537 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(538)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, BaseButtonLink) {
	
	  /**
	   * A factory method wrapper for {@link BaseButtonLink} creation
	   * @class module:Okta.internal.util.ButtonFactory
	   */
	
	  function normalizeEvents(options) {
	    var events = _.extend(options.click ? { click: options.click } : {}, options.events || {}),
	        target = {};
	    _.each(events, function (fn, eventName) {
	      target[eventName] = function (e) {
	        if (!options.href) {
	          e.preventDefault();
	          e.stopPropagation();
	        }
	        fn.apply(this, arguments);
	      };
	    });
	    return target;
	  }
	
	  return (/** @lends module:Okta.internal.util.ButtonFactory */{
	      /**
	       * Creates a {@link module:Okta.internal.views.components.BaseButtonLink|BaseButtonLink}.
	       * @param  {Object} options Options hash
	       * @param  {String} [options.title] The button text
	       * @param  {String} [options.icon]
	       * CSS class for the icon to display. See [Style guide](http://rain.okta1.com:1802/su/dev/style-guide#icons)
	       * @param {String} [options.href] The button link
	       * @param {Function} [options.click] On click callback
	       * @param {Object} [options.events] a [Backbone events](http://backbonejs.org/#View-delegateEvents) hash
	       * @returns {module:Okta.internal.views.components.BaseButtonLink} BaseButtonLink prototype ("class")
	       */
	      create: function create(options) {
	        options = _.clone(options);
	        return BaseButtonLink.extend(_.extend(options, {
	          events: normalizeEvents(options)
	        }));
	      }
	    }
	  );
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 538 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(528), __webpack_require__(539)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, BaseView, ViewUtil) {
	
	  var disabledEvents = {
	    click: function click(e) {
	      e.preventDefault();
	      e.stopPropagation();
	    }
	  };
	
	  /**
	   * A configurable button.
	   * @class module:Okta.internal.views.components.BaseButtonLink
	   * @extends module:Okta.View
	   * @example
	   * var View = BaseButtonLink.extend({
	   *   title: 'Click Me',
	   *   icon: 'help-text'
	   * })
	   */
	  return BaseView.extend( /** @lends module:Okta.internal.views.components.BaseButtonLink.prototype */{
	
	    /**
	     * The main text for the button
	     * @name title
	     * @memberof module:Okta.internal.views.components.BaseButtonLink
	     * @type {(String|Function)}
	     * @instance
	     */
	
	    /**
	     * The link for the button
	     * @name href
	     * @memberof module:Okta.internal.views.components.BaseButtonLink
	     * @type {(String|Function)}
	     * @instance
	     */
	
	    /**
	     * CSS class for the icon to display. See [Style guide](http://rain.okta1.com:1802/su/dev/style-guide#icons)
	     * @name icon
	     * @memberof module:Okta.internal.views.components.BaseButtonLink
	     * @type {(String|Function)}
	     * @instance
	     */
	
	    /**
	     * A [Backbone events](http://backbonejs.org/#View-delegateEvents) hash
	     * @name events
	     * @memberof module:Okta.internal.views.components.BaseButtonLink
	     * @type {Object}
	     * @instance
	     */
	
	    tagName: 'a',
	
	    template: '{{#if icon}}<span class="icon {{icon}}"></span>{{/if}}{{#if title}}{{title}}{{/if}}',
	
	    /**
	     * Make this button visible, default to true.
	     * @type {(Boolean|Function)}
	     * @default true
	     */
	    visible: true,
	
	    /**
	     * Make this button enabled, default to true.
	     * @type {(Boolean|Function)}
	     * @default true
	     */
	    enabled: true,
	
	    /**
	     * The setting to determine when the button is enabled, default to {} and
	     * enabled takes a higher priority.
	     * @type {(Object|Function)}
	     * @default {}
	     */
	    enableWhen: {},
	
	    /**
	     * The setting to determine when the button is visible, default to {} and
	     * visible takes a higher priority.
	     * @type {(Object|Function)}
	     * @default {}
	     */
	    showWhen: {},
	
	    constructor: function constructor(options) {
	      this.options = options || {};
	      var data = this.getTemplateData();
	
	      this.disabled = false;
	
	      BaseView.apply(this, arguments);
	
	      this.$el.addClass('link-button');
	      if (data.icon) {
	        this.$el.addClass('link-button-icon');
	        if (!data.title) {
	          this.$el.addClass('icon-only');
	        }
	      }
	    },
	
	    getTemplateData: function getTemplateData() {
	      return {
	        href: this.__getAttribute('href'),
	        title: this.__getAttribute('title'),
	        icon: this.__getAttribute('icon')
	      };
	    },
	
	    initialize: function initialize() {
	      ViewUtil.applyDoWhen(this, _.resultCtx(this, 'enableWhen', this), this.toggle);
	      ViewUtil.applyDoWhen(this, _.resultCtx(this, 'showWhen', this), this.toggleVisible);
	    },
	
	    render: function render() {
	
	      BaseView.prototype.render.apply(this, arguments);
	
	      if (!_.result(this, 'enabled')) {
	        this.toggle(false);
	      }
	
	      if (!_.result(this, 'visible')) {
	        this.toggleVisible(false);
	      }
	
	      var data = this.getTemplateData();
	      this.$el.attr('href', data.href || '#');
	
	      return this;
	    },
	
	    __getAttribute: function __getAttribute(name, defaultValue) {
	      var value = _.resultCtx(this.options, name, this);
	      if (_.isUndefined(value)) {
	        value = _.result(this, name);
	      }
	      return !_.isUndefined(value) ? value : defaultValue;
	    },
	
	    enable: function enable() {
	      this.toggle(true);
	    },
	
	    disable: function disable() {
	      this.toggle(false);
	    },
	
	    show: function show() {
	      this.toggleVisible(true);
	    },
	
	    hide: function hide() {
	      this.toggleVisible(false);
	    },
	
	    toggle: function toggle(enable) {
	      //this is to toggle the enability
	      var bool = !!enable && _.result(this, 'enabled');
	      this.disabled = !bool;
	      this.$el.toggleClass('link-button-disabled btn-disabled disabled', this.disabled);
	
	      // delegateEvents asynchronously in case the button is not yet added to the DOM
	      // in these cases the alternate events won't work
	      _.defer(_.bind(function () {
	        this.delegateEvents(this.disabled ? disabledEvents : null);
	      }, this));
	    },
	
	    toggleVisible: function toggleVisible(visible) {
	      var hidden = !visible || !_.result(this, 'visible');
	      this.$el.toggleClass('hide', hidden);
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 539 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_) {
	
	  function changeEventString(doWhen) {
	    return 'change:' + _.keys(doWhen).join(' change:');
	  }
	
	  function calcDoWhen(value, key) {
	    var modelValue = this.model.get(key);
	    if (_.isFunction(value)) {
	      return value.call(this, modelValue);
	    } else {
	      return value == modelValue;
	    }
	  }
	
	  function _doWhen(view, doWhen, fn) {
	    var toggle = _.bind(fn, view, view, doWhen);
	
	    view.render = _.wrap(view.render, function (render) {
	      var val = render.call(view);
	      toggle({ animate: false });
	      return val;
	    });
	
	    view.listenTo(view.model, changeEventString(doWhen), function () {
	      toggle({ animate: true });
	    });
	  }
	
	  return {
	    applyDoWhen: function applyDoWhen(view, doWhen, fn) {
	      if (!(view.model && _.isObject(doWhen) && _.size(doWhen) && _.isFunction(fn))) {
	        return;
	      }
	      _doWhen(view, doWhen, function (view, doWhen, options) {
	        var result = _.every(_.map(doWhen, calcDoWhen, view));
	        fn.call(view, result, options);
	      });
	    }
	  };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 540 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(401)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, Backbone) {
	
	  function Class(options) {
	    this.options = _.clone(options || {});
	    this.cid = _.uniqueId('class');
	    this.initialize.apply(this, arguments);
	  }
	
	  _.extend(Class.prototype, Backbone.Events, {
	    initialize: function initialize() {}
	  });
	
	  Class.extend = Backbone.Model.extend;
	
	  return Class;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 541 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/* eslint complexity:0, max-statements: [2, 22]*/
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(404), __webpack_require__(330), __webpack_require__(540), __webpack_require__(542), __webpack_require__(530)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, Class, clipboard, View) {
	
	  var Clipboard = clipboard;
	  var OPTIONS = ['success', 'error', 'target', 'text'];
	  var ClipboardWrapper = Class.extend({
	
	    initialize: function initialize(el, options) {
	      options = _.pick(options || {}, OPTIONS);
	      var trigger, target, text;
	      if (_.isString(el)) {
	        trigger = el;
	      }
	      if (_.isElement(el)) {
	        trigger = el;
	      }
	      if (el instanceof $) {
	        trigger = el.selector;
	      }
	      if (el instanceof View) {
	        trigger = el.el;
	      }
	      if (_.isFunction(options.target)) {
	        target = options.target;
	      }
	      if (_.isElement(options.target)) {
	        target = _.constant(options.target);
	      }
	      if (_.isString(options.text)) {
	        text = _.constant(options.text);
	      } else if (_.isFunction(options.text)) {
	        text = options.text;
	      }
	      this.__instance = new Clipboard(trigger, { target: target, text: text });
	      this.done = _.partial(this.__setCallback, 'success');
	      this.error = _.partial(this.__setCallback, 'error');
	      this.done(options.success);
	      this.error(options.error);
	    },
	
	    __setCallback: function __setCallback(event, callback) {
	      if (!_.isFunction(callback)) {
	        return;
	      }
	      this.__instance.on(event, callback);
	      return this.__instance;
	    }
	
	  });
	
	  /**
	   * @class Clipboard
	   * @abstract
	   *
	   * Abstract class that initializes a Clipboard
	   *   https://clipboardjs.com/
	   * 
	   * ### Example:
	   *
	   *  ```javascript
	   *  //attach a selector
	   *  Clipboard.attach('.copy-button');
	   *
	   *  //attach a node, and set a constant string
	   *  Clipboard.attach(buttonView.el, {
	   *    text: 'this is the content'
	   *  });
	   *
	   *  //attach a view, set text dynamically, and set callback
	   *  Clipboard.attach(buttonView, {
	   *    text: function (triggerNode) {
	   *      return $(triggerNode).attr('foo') + model.get('userName');
	   *    }
	   *  }).done(function (targetNode) {
	   *    var msg = ['"', targetNode.text, '" is copied'].join('');
	   *    view.notify('success', msg);
	   *  });
	   *
	   *  //attach a jquery object, set the target node, and set callback
	   *  Clipboard.attach($('.customizeTarget'), {
	   *    target: function (triggerNode) {
	   *      return triggerNode;
	   *    },
	   *    success: function (targetNode) {
	   *      view.notify('success', 'copied!');
	   *    }
	   *  });
	   *
	   * ```
	   */
	  return {
	    /**
	     * @param {String|Node|View|jQuery} [el] el could be a selector (recommended), 
	     *           a dom node, a view or a jquery object
	     * @param {Object} [options] Options hash
	     * @param  {Node|Function} [options.target] a static dom node 
	     *           or a function that takes trigger node and returns a target node
	     * @param {String|Function} [options.text] a static string or a function that returns a string dynamically
	     * @param {Function} [options.success] success callback
	     * @param {Function} [options.error] error callback
	     * @return {Object} The clipboard object
	     */
	    attach: function attach(el, options) {
	      return new ClipboardWrapper(el, options);
	    }
	
	  };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 542 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module, __webpack_require__(543), __webpack_require__(545), __webpack_require__(546)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(module, require('./clipboard-action'), require('tiny-emitter'), require('good-listener'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod, global.clipboardAction, global.tinyEmitter, global.goodListener);
	        global.clipboard = mod.exports;
	    }
	})(this, function (module, _clipboardAction, _tinyEmitter, _goodListener) {
	    'use strict';
	
	    var _clipboardAction2 = _interopRequireDefault(_clipboardAction);
	
	    var _tinyEmitter2 = _interopRequireDefault(_tinyEmitter);
	
	    var _goodListener2 = _interopRequireDefault(_goodListener);
	
	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }
	
	    function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	            throw new TypeError("Cannot call a class as a function");
	        }
	    }
	
	    var _createClass = function () {
	        function defineProperties(target, props) {
	            for (var i = 0; i < props.length; i++) {
	                var descriptor = props[i];
	                descriptor.enumerable = descriptor.enumerable || false;
	                descriptor.configurable = true;
	                if ("value" in descriptor) descriptor.writable = true;
	                Object.defineProperty(target, descriptor.key, descriptor);
	            }
	        }
	
	        return function (Constructor, protoProps, staticProps) {
	            if (protoProps) defineProperties(Constructor.prototype, protoProps);
	            if (staticProps) defineProperties(Constructor, staticProps);
	            return Constructor;
	        };
	    }();
	
	    function _possibleConstructorReturn(self, call) {
	        if (!self) {
	            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	        }
	
	        return call && (typeof call === "object" || typeof call === "function") ? call : self;
	    }
	
	    function _inherits(subClass, superClass) {
	        if (typeof superClass !== "function" && superClass !== null) {
	            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
	        }
	
	        subClass.prototype = Object.create(superClass && superClass.prototype, {
	            constructor: {
	                value: subClass,
	                enumerable: false,
	                writable: true,
	                configurable: true
	            }
	        });
	        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	    }
	
	    var Clipboard = function (_Emitter) {
	        _inherits(Clipboard, _Emitter);
	
	        /**
	         * @param {String|HTMLElement|HTMLCollection|NodeList} trigger
	         * @param {Object} options
	         */
	        function Clipboard(trigger, options) {
	            _classCallCheck(this, Clipboard);
	
	            var _this = _possibleConstructorReturn(this, (Clipboard.__proto__ || Object.getPrototypeOf(Clipboard)).call(this));
	
	            _this.resolveOptions(options);
	            _this.listenClick(trigger);
	            return _this;
	        }
	
	        /**
	         * Defines if attributes would be resolved using internal setter functions
	         * or custom functions that were passed in the constructor.
	         * @param {Object} options
	         */
	
	
	        _createClass(Clipboard, [{
	            key: 'resolveOptions',
	            value: function resolveOptions() {
	                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	                this.action = typeof options.action === 'function' ? options.action : this.defaultAction;
	                this.target = typeof options.target === 'function' ? options.target : this.defaultTarget;
	                this.text = typeof options.text === 'function' ? options.text : this.defaultText;
	            }
	        }, {
	            key: 'listenClick',
	            value: function listenClick(trigger) {
	                var _this2 = this;
	
	                this.listener = (0, _goodListener2.default)(trigger, 'click', function (e) {
	                    return _this2.onClick(e);
	                });
	            }
	        }, {
	            key: 'onClick',
	            value: function onClick(e) {
	                var trigger = e.delegateTarget || e.currentTarget;
	
	                if (this.clipboardAction) {
	                    this.clipboardAction = null;
	                }
	
	                this.clipboardAction = new _clipboardAction2.default({
	                    action: this.action(trigger),
	                    target: this.target(trigger),
	                    text: this.text(trigger),
	                    trigger: trigger,
	                    emitter: this
	                });
	            }
	        }, {
	            key: 'defaultAction',
	            value: function defaultAction(trigger) {
	                return getAttributeValue('action', trigger);
	            }
	        }, {
	            key: 'defaultTarget',
	            value: function defaultTarget(trigger) {
	                var selector = getAttributeValue('target', trigger);
	
	                if (selector) {
	                    return document.querySelector(selector);
	                }
	            }
	        }, {
	            key: 'defaultText',
	            value: function defaultText(trigger) {
	                return getAttributeValue('text', trigger);
	            }
	        }, {
	            key: 'destroy',
	            value: function destroy() {
	                this.listener.destroy();
	
	                if (this.clipboardAction) {
	                    this.clipboardAction.destroy();
	                    this.clipboardAction = null;
	                }
	            }
	        }], [{
	            key: 'isSupported',
	            value: function isSupported() {
	                var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['copy', 'cut'];
	
	                var actions = typeof action === 'string' ? [action] : action;
	                var support = !!document.queryCommandSupported;
	
	                actions.forEach(function (action) {
	                    support = support && !!document.queryCommandSupported(action);
	                });
	
	                return support;
	            }
	        }]);
	
	        return Clipboard;
	    }(_tinyEmitter2.default);
	
	    /**
	     * Helper function to retrieve attribute value.
	     * @param {String} suffix
	     * @param {Element} element
	     */
	    function getAttributeValue(suffix, element) {
	        var attribute = 'data-clipboard-' + suffix;
	
	        if (!element.hasAttribute(attribute)) {
	            return;
	        }
	
	        return element.getAttribute(attribute);
	    }
	
	    module.exports = Clipboard;
	});

/***/ },
/* 543 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module, __webpack_require__(544)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(module, require('select'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod, global.select);
	        global.clipboardAction = mod.exports;
	    }
	})(this, function (module, _select) {
	    'use strict';
	
	    var _select2 = _interopRequireDefault(_select);
	
	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }
	
	    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
	        return typeof obj;
	    } : function (obj) {
	        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	    };
	
	    function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	            throw new TypeError("Cannot call a class as a function");
	        }
	    }
	
	    var _createClass = function () {
	        function defineProperties(target, props) {
	            for (var i = 0; i < props.length; i++) {
	                var descriptor = props[i];
	                descriptor.enumerable = descriptor.enumerable || false;
	                descriptor.configurable = true;
	                if ("value" in descriptor) descriptor.writable = true;
	                Object.defineProperty(target, descriptor.key, descriptor);
	            }
	        }
	
	        return function (Constructor, protoProps, staticProps) {
	            if (protoProps) defineProperties(Constructor.prototype, protoProps);
	            if (staticProps) defineProperties(Constructor, staticProps);
	            return Constructor;
	        };
	    }();
	
	    var ClipboardAction = function () {
	        /**
	         * @param {Object} options
	         */
	        function ClipboardAction(options) {
	            _classCallCheck(this, ClipboardAction);
	
	            this.resolveOptions(options);
	            this.initSelection();
	        }
	
	        /**
	         * Defines base properties passed from constructor.
	         * @param {Object} options
	         */
	
	
	        _createClass(ClipboardAction, [{
	            key: 'resolveOptions',
	            value: function resolveOptions() {
	                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	                this.action = options.action;
	                this.emitter = options.emitter;
	                this.target = options.target;
	                this.text = options.text;
	                this.trigger = options.trigger;
	
	                this.selectedText = '';
	            }
	        }, {
	            key: 'initSelection',
	            value: function initSelection() {
	                if (this.text) {
	                    this.selectFake();
	                } else if (this.target) {
	                    this.selectTarget();
	                }
	            }
	        }, {
	            key: 'selectFake',
	            value: function selectFake() {
	                var _this = this;
	
	                var isRTL = document.documentElement.getAttribute('dir') == 'rtl';
	
	                this.removeFake();
	
	                this.fakeHandlerCallback = function () {
	                    return _this.removeFake();
	                };
	                this.fakeHandler = document.body.addEventListener('click', this.fakeHandlerCallback) || true;
	
	                this.fakeElem = document.createElement('textarea');
	                // Prevent zooming on iOS
	                this.fakeElem.style.fontSize = '12pt';
	                // Reset box model
	                this.fakeElem.style.border = '0';
	                this.fakeElem.style.padding = '0';
	                this.fakeElem.style.margin = '0';
	                // Move element out of screen horizontally
	                this.fakeElem.style.position = 'absolute';
	                this.fakeElem.style[isRTL ? 'right' : 'left'] = '-9999px';
	                // Move element to the same position vertically
	                var yPosition = window.pageYOffset || document.documentElement.scrollTop;
	                this.fakeElem.style.top = yPosition + 'px';
	
	                this.fakeElem.setAttribute('readonly', '');
	                this.fakeElem.value = this.text;
	
	                document.body.appendChild(this.fakeElem);
	
	                this.selectedText = (0, _select2.default)(this.fakeElem);
	                this.copyText();
	            }
	        }, {
	            key: 'removeFake',
	            value: function removeFake() {
	                if (this.fakeHandler) {
	                    document.body.removeEventListener('click', this.fakeHandlerCallback);
	                    this.fakeHandler = null;
	                    this.fakeHandlerCallback = null;
	                }
	
	                if (this.fakeElem) {
	                    document.body.removeChild(this.fakeElem);
	                    this.fakeElem = null;
	                }
	            }
	        }, {
	            key: 'selectTarget',
	            value: function selectTarget() {
	                this.selectedText = (0, _select2.default)(this.target);
	                this.copyText();
	            }
	        }, {
	            key: 'copyText',
	            value: function copyText() {
	                var succeeded = void 0;
	
	                try {
	                    succeeded = document.execCommand(this.action);
	                } catch (err) {
	                    succeeded = false;
	                }
	
	                this.handleResult(succeeded);
	            }
	        }, {
	            key: 'handleResult',
	            value: function handleResult(succeeded) {
	                this.emitter.emit(succeeded ? 'success' : 'error', {
	                    action: this.action,
	                    text: this.selectedText,
	                    trigger: this.trigger,
	                    clearSelection: this.clearSelection.bind(this)
	                });
	            }
	        }, {
	            key: 'clearSelection',
	            value: function clearSelection() {
	                if (this.target) {
	                    this.target.blur();
	                }
	
	                window.getSelection().removeAllRanges();
	            }
	        }, {
	            key: 'destroy',
	            value: function destroy() {
	                this.removeFake();
	            }
	        }, {
	            key: 'action',
	            set: function set() {
	                var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'copy';
	
	                this._action = action;
	
	                if (this._action !== 'copy' && this._action !== 'cut') {
	                    throw new Error('Invalid "action" value, use either "copy" or "cut"');
	                }
	            },
	            get: function get() {
	                return this._action;
	            }
	        }, {
	            key: 'target',
	            set: function set(target) {
	                if (target !== undefined) {
	                    if (target && (typeof target === 'undefined' ? 'undefined' : _typeof(target)) === 'object' && target.nodeType === 1) {
	                        if (this.action === 'copy' && target.hasAttribute('disabled')) {
	                            throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');
	                        }
	
	                        if (this.action === 'cut' && (target.hasAttribute('readonly') || target.hasAttribute('disabled'))) {
	                            throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');
	                        }
	
	                        this._target = target;
	                    } else {
	                        throw new Error('Invalid "target" value, use a valid Element');
	                    }
	                }
	            },
	            get: function get() {
	                return this._target;
	            }
	        }]);
	
	        return ClipboardAction;
	    }();
	
	    module.exports = ClipboardAction;
	});

/***/ },
/* 544 */
/***/ function(module, exports) {

	function select(element) {
	    var selectedText;
	
	    if (element.nodeName === 'SELECT') {
	        element.focus();
	
	        selectedText = element.value;
	    }
	    else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {
	        var isReadOnly = element.hasAttribute('readonly');
	
	        if (!isReadOnly) {
	            element.setAttribute('readonly', '');
	        }
	
	        element.select();
	        element.setSelectionRange(0, element.value.length);
	
	        if (!isReadOnly) {
	            element.removeAttribute('readonly');
	        }
	
	        selectedText = element.value;
	    }
	    else {
	        if (element.hasAttribute('contenteditable')) {
	            element.focus();
	        }
	
	        var selection = window.getSelection();
	        var range = document.createRange();
	
	        range.selectNodeContents(element);
	        selection.removeAllRanges();
	        selection.addRange(range);
	
	        selectedText = selection.toString();
	    }
	
	    return selectedText;
	}
	
	module.exports = select;


/***/ },
/* 545 */
/***/ function(module, exports) {

	function E () {
	  // Keep this empty so it's easier to inherit from
	  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
	}
	
	E.prototype = {
	  on: function (name, callback, ctx) {
	    var e = this.e || (this.e = {});
	
	    (e[name] || (e[name] = [])).push({
	      fn: callback,
	      ctx: ctx
	    });
	
	    return this;
	  },
	
	  once: function (name, callback, ctx) {
	    var self = this;
	    function listener () {
	      self.off(name, listener);
	      callback.apply(ctx, arguments);
	    };
	
	    listener._ = callback
	    return this.on(name, listener, ctx);
	  },
	
	  emit: function (name) {
	    var data = [].slice.call(arguments, 1);
	    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
	    var i = 0;
	    var len = evtArr.length;
	
	    for (i; i < len; i++) {
	      evtArr[i].fn.apply(evtArr[i].ctx, data);
	    }
	
	    return this;
	  },
	
	  off: function (name, callback) {
	    var e = this.e || (this.e = {});
	    var evts = e[name];
	    var liveEvents = [];
	
	    if (evts && callback) {
	      for (var i = 0, len = evts.length; i < len; i++) {
	        if (evts[i].fn !== callback && evts[i].fn._ !== callback)
	          liveEvents.push(evts[i]);
	      }
	    }
	
	    // Remove event from queue to prevent memory leak
	    // Suggested by https://github.com/lazd
	    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910
	
	    (liveEvents.length)
	      ? e[name] = liveEvents
	      : delete e[name];
	
	    return this;
	  }
	};
	
	module.exports = E;


/***/ },
/* 546 */
/***/ function(module, exports, __webpack_require__) {

	var is = __webpack_require__(547);
	var delegate = __webpack_require__(548);
	
	/**
	 * Validates all params and calls the right
	 * listener function based on its target type.
	 *
	 * @param {String|HTMLElement|HTMLCollection|NodeList} target
	 * @param {String} type
	 * @param {Function} callback
	 * @return {Object}
	 */
	function listen(target, type, callback) {
	    if (!target && !type && !callback) {
	        throw new Error('Missing required arguments');
	    }
	
	    if (!is.string(type)) {
	        throw new TypeError('Second argument must be a String');
	    }
	
	    if (!is.fn(callback)) {
	        throw new TypeError('Third argument must be a Function');
	    }
	
	    if (is.node(target)) {
	        return listenNode(target, type, callback);
	    }
	    else if (is.nodeList(target)) {
	        return listenNodeList(target, type, callback);
	    }
	    else if (is.string(target)) {
	        return listenSelector(target, type, callback);
	    }
	    else {
	        throw new TypeError('First argument must be a String, HTMLElement, HTMLCollection, or NodeList');
	    }
	}
	
	/**
	 * Adds an event listener to a HTML element
	 * and returns a remove listener function.
	 *
	 * @param {HTMLElement} node
	 * @param {String} type
	 * @param {Function} callback
	 * @return {Object}
	 */
	function listenNode(node, type, callback) {
	    node.addEventListener(type, callback);
	
	    return {
	        destroy: function() {
	            node.removeEventListener(type, callback);
	        }
	    }
	}
	
	/**
	 * Add an event listener to a list of HTML elements
	 * and returns a remove listener function.
	 *
	 * @param {NodeList|HTMLCollection} nodeList
	 * @param {String} type
	 * @param {Function} callback
	 * @return {Object}
	 */
	function listenNodeList(nodeList, type, callback) {
	    Array.prototype.forEach.call(nodeList, function(node) {
	        node.addEventListener(type, callback);
	    });
	
	    return {
	        destroy: function() {
	            Array.prototype.forEach.call(nodeList, function(node) {
	                node.removeEventListener(type, callback);
	            });
	        }
	    }
	}
	
	/**
	 * Add an event listener to a selector
	 * and returns a remove listener function.
	 *
	 * @param {String} selector
	 * @param {String} type
	 * @param {Function} callback
	 * @return {Object}
	 */
	function listenSelector(selector, type, callback) {
	    return delegate(document.body, selector, type, callback);
	}
	
	module.exports = listen;


/***/ },
/* 547 */
/***/ function(module, exports) {

	/**
	 * Check if argument is a HTML element.
	 *
	 * @param {Object} value
	 * @return {Boolean}
	 */
	exports.node = function(value) {
	    return value !== undefined
	        && value instanceof HTMLElement
	        && value.nodeType === 1;
	};
	
	/**
	 * Check if argument is a list of HTML elements.
	 *
	 * @param {Object} value
	 * @return {Boolean}
	 */
	exports.nodeList = function(value) {
	    var type = Object.prototype.toString.call(value);
	
	    return value !== undefined
	        && (type === '[object NodeList]' || type === '[object HTMLCollection]')
	        && ('length' in value)
	        && (value.length === 0 || exports.node(value[0]));
	};
	
	/**
	 * Check if argument is a string.
	 *
	 * @param {Object} value
	 * @return {Boolean}
	 */
	exports.string = function(value) {
	    return typeof value === 'string'
	        || value instanceof String;
	};
	
	/**
	 * Check if argument is a function.
	 *
	 * @param {Object} value
	 * @return {Boolean}
	 */
	exports.fn = function(value) {
	    var type = Object.prototype.toString.call(value);
	
	    return type === '[object Function]';
	};


/***/ },
/* 548 */
/***/ function(module, exports, __webpack_require__) {

	var closest = __webpack_require__(549);
	
	/**
	 * Delegates event to a selector.
	 *
	 * @param {Element} element
	 * @param {String} selector
	 * @param {String} type
	 * @param {Function} callback
	 * @param {Boolean} useCapture
	 * @return {Object}
	 */
	function _delegate(element, selector, type, callback, useCapture) {
	    var listenerFn = listener.apply(this, arguments);
	
	    element.addEventListener(type, listenerFn, useCapture);
	
	    return {
	        destroy: function() {
	            element.removeEventListener(type, listenerFn, useCapture);
	        }
	    }
	}
	
	/**
	 * Delegates event to a selector.
	 *
	 * @param {Element|String|Array} [elements]
	 * @param {String} selector
	 * @param {String} type
	 * @param {Function} callback
	 * @param {Boolean} useCapture
	 * @return {Object}
	 */
	function delegate(elements, selector, type, callback, useCapture) {
	    // Handle the regular Element usage
	    if (typeof elements.addEventListener === 'function') {
	        return _delegate.apply(null, arguments);
	    }
	
	    // Handle Element-less usage, it defaults to global delegation
	    if (typeof type === 'function') {
	        // Use `document` as the first parameter, then apply arguments
	        // This is a short way to .unshift `arguments` without running into deoptimizations
	        return _delegate.bind(null, document).apply(null, arguments);
	    }
	
	    // Handle Selector-based usage
	    if (typeof elements === 'string') {
	        elements = document.querySelectorAll(elements);
	    }
	
	    // Handle Array-like based usage
	    return Array.prototype.map.call(elements, function (element) {
	        return _delegate(element, selector, type, callback, useCapture);
	    });
	}
	
	/**
	 * Finds closest match and invokes callback.
	 *
	 * @param {Element} element
	 * @param {String} selector
	 * @param {String} type
	 * @param {Function} callback
	 * @return {Function}
	 */
	function listener(element, selector, type, callback) {
	    return function(e) {
	        e.delegateTarget = closest(e.target, selector);
	
	        if (e.delegateTarget) {
	            callback.call(element, e);
	        }
	    }
	}
	
	module.exports = delegate;


/***/ },
/* 549 */
/***/ function(module, exports) {

	var DOCUMENT_NODE_TYPE = 9;
	
	/**
	 * A polyfill for Element.matches()
	 */
	if (typeof Element !== 'undefined' && !Element.prototype.matches) {
	    var proto = Element.prototype;
	
	    proto.matches = proto.matchesSelector ||
	                    proto.mozMatchesSelector ||
	                    proto.msMatchesSelector ||
	                    proto.oMatchesSelector ||
	                    proto.webkitMatchesSelector;
	}
	
	/**
	 * Finds the closest parent that matches a selector.
	 *
	 * @param {Element} element
	 * @param {String} selector
	 * @return {Function}
	 */
	function closest (element, selector) {
	    while (element && element.nodeType !== DOCUMENT_NODE_TYPE) {
	        if (typeof element.matches === 'function' &&
	            element.matches(selector)) {
	          return element;
	        }
	        element = element.parentNode;
	    }
	}
	
	module.exports = closest;


/***/ },
/* 550 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(551)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, Cookie) {
	
	  var SECURED_COOKIE = /^https/.test(window.location.href);
	
	  return {
	    setCookie: function setCookie(name, value, options) {
	      Cookie.set(name, value, _.defaults(options || {}, {
	        secure: SECURED_COOKIE,
	        path: '/'
	      }));
	    },
	
	    getCookie: function getCookie() {
	      return Cookie.get.apply(Cookie, arguments);
	    },
	
	    removeCookie: function removeCookie() {
	      return Cookie.remove.apply(Cookie, arguments);
	    }
	  };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 551 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _stringify = __webpack_require__(406);
	
	var _stringify2 = _interopRequireDefault(_stringify);
	
	var _typeof2 = __webpack_require__(334);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*!
	 * JavaScript Cookie v2.1.0
	 * https://github.com/js-cookie/js-cookie
	 *
	 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
	 * Released under the MIT license
	 */
	(function (factory) {
		if (true) {
			!(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if ((typeof exports === 'undefined' ? 'undefined' : (0, _typeof3.default)(exports)) === 'object') {
			module.exports = factory();
		} else {
			var _OldCookies = window.Cookies;
			var api = window.Cookies = factory();
			api.noConflict = function () {
				window.Cookies = _OldCookies;
				return api;
			};
		}
	})(function () {
		function extend() {
			var i = 0;
			var result = {};
			for (; i < arguments.length; i++) {
				var attributes = arguments[i];
				for (var key in attributes) {
					result[key] = attributes[key];
				}
			}
			return result;
		}
	
		function init(converter) {
			function api(key, value, attributes) {
				var result;
	
				// Write
	
				if (arguments.length > 1) {
					attributes = extend({
						path: '/'
					}, api.defaults, attributes);
	
					if (typeof attributes.expires === 'number') {
						var expires = new Date();
						expires.setMilliseconds(expires.getMilliseconds() + attributes.expires * 864e+5);
						attributes.expires = expires;
					}
	
					try {
						result = (0, _stringify2.default)(value);
						if (/^[\{\[]/.test(result)) {
							value = result;
						}
					} catch (e) {}
	
					if (!converter.write) {
						value = encodeURIComponent(String(value)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
					} else {
						value = converter.write(value, key);
					}
	
					key = encodeURIComponent(String(key));
					key = key.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);
					key = key.replace(/[\(\)]/g, escape);
	
					return document.cookie = [key, '=', value, attributes.expires && '; expires=' + attributes.expires.toUTCString(), // use expires attribute, max-age is not supported by IE
					attributes.path && '; path=' + attributes.path, attributes.domain && '; domain=' + attributes.domain, attributes.secure ? '; secure' : ''].join('');
				}
	
				// Read
	
				if (!key) {
					result = {};
				}
	
				// To prevent the for loop in the first place assign an empty array
				// in case there are no cookies at all. Also prevents odd result when
				// calling "get()"
				var cookies = document.cookie ? document.cookie.split('; ') : [];
				var rdecode = /(%[0-9A-Z]{2})+/g;
				var i = 0;
	
				for (; i < cookies.length; i++) {
					var parts = cookies[i].split('=');
					var name = parts[0].replace(rdecode, decodeURIComponent);
					var cookie = parts.slice(1).join('=');
	
					if (cookie.charAt(0) === '"') {
						cookie = cookie.slice(1, -1);
					}
	
					try {
						cookie = converter.read ? converter.read(cookie, name) : converter(cookie, name) || cookie.replace(rdecode, decodeURIComponent);
	
						if (this.json) {
							try {
								cookie = JSON.parse(cookie);
							} catch (e) {}
						}
	
						if (key === name) {
							result = cookie;
							break;
						}
	
						if (!key) {
							result[name] = cookie;
						}
					} catch (e) {}
				}
	
				return result;
			}
	
			api.get = api.set = api;
			api.getJSON = function () {
				return api.apply({
					json: true
				}, [].slice.call(arguments));
			};
			api.defaults = {};
	
			api.remove = function (key, attributes) {
				api(key, '', extend(attributes, {
					expires: -1
				}));
			};
	
			api.withConverter = init;
	
			return api;
		}
	
		return init(function () {});
	});

/***/ },
/* 552 */
/***/ function(module, exports) {

	// empty (null-loader)

/***/ },
/* 553 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_) {
	  return {
	    /*
	     * Parses an error object or an error list
	     * If both are provided, error object will be used
	     *
	     * options.errors is an array of {errorSummary:field: some error message}
	     *   Note: this is also defined in com.saasure.core.framework.api.exception.error.ErrorCause
	     *   Note2: field: is optional.
	     *
	     * options.errorObj is an error object
	     *   { errorCode: string code that identifies the error,
	     *     errorSummary: brief description of the error,
	     *     errorLink: urlToAnErrorDoc(if any, if not it is the same as the errorCode),
	     *     errorId: unique object identifier,
	     *     errorCauses: [{errorSummary: cause1}, {errorSummary: cause2}]
	     *    }
	     *   Note: this is also defined in com.saasure.core.framework.api.exception.error.ApiErrorResponse
	     *
	     * options.inputMap is a map from field to actual name of the field.
	     * e.g. {label: 'Tab Name'}
	     */
	    create: function create(options) {
	      // Use error causes from the error object if they are provided
	      if (options && options.errorObj) {
	        if (_.isEmpty(options.errorObj.errorCauses)) {
	          // No error causes defined, just work with the errorSummary
	          options.errors = [{ errorSummary: options.errorObj.errorSummary }];
	        } else {
	          options.errors = options.errorObj.errorCauses;
	        }
	      }
	
	      return {
	        getFieldName: function getFieldName(errorSummary) {
	          return errorSummary.indexOf(':') > -1 ? errorSummary.split(':')[0] : null;
	        },
	
	        getMessages: function getMessages() {
	          var messages = [];
	          _.each(options.errors, function (errorMsg) {
	            var fieldName = this.getFieldName(errorMsg.errorSummary);
	            if (fieldName && options.inputMap[fieldName]) {
	              var reFieldName = new RegExp('^' + fieldName);
	              messages.push({
	                errorSummary: errorMsg.errorSummary.replace(reFieldName, options.inputMap[fieldName])
	              });
	            } else {
	              messages.push(errorMsg);
	            }
	          }, this);
	          return messages;
	        },
	
	        getInputs: function getInputs() {
	          var fieldNames = [];
	          _.each(options.errors, function (errorMsg) {
	            var fieldName = this.getFieldName(errorMsg.errorSummary);
	            if (options.inputMap.hasOwnProperty(fieldName)) {
	              fieldNames.push(fieldName);
	            }
	          }, this);
	          return fieldNames;
	        },
	
	        /**
	         * Reformat error messages if there is another error field after 'ErrorSummary'
	         *
	         * Error = [{errorSummary: 'errorType: replacingSignOnModes'}] is converted to
	         *         {errorType : 'replacingSignOnModes'}
	         *
	         * Error = [{errorSummary: 'Some Error msg'}] -> no change
	         */
	        getReformattedMessages: function getReformattedMessages() {
	          var messages = {};
	          _.each(options.errors, function (errorMsg) {
	            if (_.isUndefined(errorMsg.errorSummary)) {
	              messages['errorSummary'] = errorMsg;
	            } else {
	              var fields = errorMsg.errorSummary.indexOf(':') > -1 ? errorMsg.errorSummary.split(': ') : null;
	              if (fields) {
	                messages[fields[0]] = fields[1];
	              } else {
	                messages['errorSummary'] = errorMsg.errorSummary;
	              }
	            }
	          }, this);
	          return messages;
	        }
	      };
	    }
	  };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 554 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	!(module.exports = {
	  FETCH_MORE: 'FETCH_MORE',
	  SHOW_MORE: 'SHOW_MORE',
	  DELETE: 'DELETE',
	  ACTIVATE: 'ACTIVATE',
	  DEACTIVATE: 'DEACTIVATE',
	  CHECK_ALL: 'CHECK_ALL',
	  UPLOAD_DONE: 'UPLOAD_DONE',
	  UPLOAD_EMPTY_CONTENT: 'UPLOAD_EMPTY_CONTENT',
	  DOWNLOAD_DONE: 'DOWNLOAD_DONE',
	  CLOSE: 'CLOSE',
	  DONE: 'DONE',
	  SUBMIT: 'SUBMIT'
	});

/***/ },
/* 555 */
/***/ function(module, exports) {

	// empty (null-loader)

/***/ },
/* 556 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/**
	 * Animation manager class.
	 *
	 * @Singleton
	 */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_) {
	
	  var effects = {
	    NONE: 'none',
	    SLIDE: 'slide',
	    FADE: 'fade'
	  };
	
	  return {
	
	    DEFAULT_DURATION: 400, // jQuery's default duration
	
	    EFFECTS: effects,
	
	    /**
	     * Function to run an animation on an element.
	     *
	     * @param el - jquery element
	     * @param options - {Object} animation options - can be any of the options supported by jquery UI.
	     *                           For more documentation, visit - http://api.jqueryui.com/effect/
	     * (options.effect) - {String} Effect name supported in Fx.EFFECTS.
	     *
	     * Note - This class has just the 'slide' animation for now. But this is a good starting point
	     * for a transition/animation manager with a set of animations.
	     */
	    animate: function animate(el, options) {
	      options || (options = {});
	      if (_.isString(options)) {
	        options = {
	          effect: options
	        };
	      }
	
	      switch (options.effect) {
	        case effects.SLIDE:
	        case effects.FADE:
	          // Hide initially (For 'toggle' to work).
	          el.hide();
	          el.toggle(options);
	          break;
	
	        case effects.NONE:
	          break;
	
	        default:
	          break;
	      }
	    }
	  };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 557 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	!(module.exports = {
	  UP: 38,
	  DOWN: 40,
	  DEL: 46,
	  TAB: 9,
	  RETURN: 13,
	  ENTER: 13,
	  ESC: 27,
	  COMMA: 188,
	  PAGEUP: 33,
	  PAGEDOWN: 34,
	  SPACE: 32,
	  BACKSPACE: 8,
	  __isKey: function __isKey(e, key) {
	    return (e.which || e.keyCode) == this[key];
	  },
	  isEnter: function isEnter(e) {
	    return this.__isKey(e, 'ENTER');
	  },
	  isEsc: function isEsc(e) {
	    return this.__isKey(e, 'ESC');
	  },
	  isSpaceBar: function isSpaceBar(e) {
	    return this.__isKey(e, 'SPACE');
	  }
	});

/***/ },
/* 558 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_) {
	
	  var regNumberToLocaleString = new RegExp('(\\d)(?=(\\d{3})+(?!\\d))', 'g');
	
	  return {
	    /**
	     * Format number by inserting thousands separator.
	     *
	     * @param number {number}
	     * @param delimitersThousands {string} [Optional] default to ','
	     * @return an formatted string with thousands separator insereted.
	     *         '0' when input is not an number.
	     */
	    numberToString: function numberToString(number, delimitersThousands) {
	      var delimiter = delimitersThousands || ',';
	
	      return _.isNumber(number) ? String(number).replace(regNumberToLocaleString, '$1' + delimiter) : '0';
	    }
	  };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 559 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(405)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, StringUtil) {
	
	  var loc = StringUtil.localize;
	
	  var SchemaUtils = {
	    STRING: 'string',
	    NUMBER: 'number',
	    INTEGER: 'integer',
	    BOOLEAN: 'boolean',
	    OBJECT: 'object',
	    FORMATDISPLAYTYPE: {
	      'date-time': 'date',
	      'uri': 'uri',
	      'email': 'email',
	      'country-code': 'country-code',
	      'language-code': 'language-code',
	      'locale': 'locale',
	      'timezone': 'timezone',
	      'ref-id': 'reference'
	    },
	    ARRAYDISPLAYTYPE: {
	      'arrayofobject': 'arrayofobject',
	      'arrayofstring': 'arrayofstring',
	      'arrayofnumber': 'arrayofnumber',
	      'arrayofinteger': 'arrayofinteger',
	      'arrayofref-id': 'arrayofref-id'
	    },
	    DISPLAYTYPES: {
	      'date': { 'type': 'string', 'format': 'date-time' },
	      'uri': { 'type': 'string', 'format': 'uri' },
	      'email': { 'type': 'string', 'format': 'email' },
	      'country-code': { 'type': 'string', 'format': 'country-code' },
	      'language-code': { 'type': 'string', 'format': 'language-code' },
	      'locale': { 'type': 'string', 'format': 'locale' },
	      'timezone': { 'type': 'string', 'format': 'timezone' },
	      'string': { 'type': 'string' },
	      'number': { 'type': 'number' },
	      'boolean': { 'type': 'boolean' },
	      'integer': { 'type': 'integer' },
	      'reference': { 'type': 'string', 'format': 'ref-id' },
	      'arrayofobject': { 'type': 'array', 'items': { 'type': 'object' } },
	      'arrayofstring': { 'type': 'array', 'items': { 'type': 'string' } },
	      'arrayofnumber': { 'type': 'array', 'items': { 'type': 'number' } },
	      'arrayofinteger': { 'type': 'array', 'items': { 'type': 'integer' } },
	      'arrayofref-id': { 'type': 'array', 'items': { 'type': 'string', 'format': 'ref-id' } },
	      'image': { 'type': 'image' },
	      'password': { 'type': 'string' }
	    },
	    SUPPORTSMINMAX: ['string', 'number', 'integer', 'password'],
	    SUPPORTENUM: ['string', 'number', 'integer', 'object', 'arrayofstring', 'arrayofnumber', 'arrayofinteger', 'arrayofobject'],
	    DATATYPE: {
	      'string': 'string',
	      'number': 'number',
	      'boolean': 'boolean',
	      'integer': 'integer',
	      'date': 'datetime',
	      'object': 'object',
	      'arrayofobject': 'object array',
	      'arrayofstring': 'string array',
	      'arrayofnumber': 'number array',
	      'arrayofinteger': 'integer array',
	      'arrayofref-id': 'reference array',
	      'country-code': 'country code',
	      'language-code': 'language code',
	      'reference': 'reference',
	      'timezone': 'timezone',
	      'image': 'image'
	    },
	    MUTABILITY: {
	      READONLY: 'READ_ONLY',
	      WRITEONLY: 'WRITE_ONLY',
	      READWRITE: 'READ_WRITE',
	      IMMUTABLE: 'IMMUTABLE'
	    },
	    SCOPE: {
	      NONE: 'NONE',
	      SELF: 'SELF',
	      SYSTEM: 'SYSTEM'
	    },
	    DISPLAYSCOPE: {
	      SELF: 'User personal',
	      SYSTEM: 'System',
	      NA: 'None'
	    },
	    UNION: {
	      DISABLE: 'DISABLE',
	      ENABLE: 'ENABLE'
	    },
	    UNION_OPTIONS: {
	      'DISABLE': loc('universal-directory.profiles.attribute.form.union.enable.display', 'courage'),
	      'ENABLE': loc('universal-directory.profiles.attribute.form.union.disable.display', 'courage')
	    },
	    PERMISSION: {
	      HIDE: 'HIDE',
	      READ_ONLY: 'READ_ONLY',
	      WRITE_ONLY: 'WRITE_ONLY',
	      READ_WRITE: 'READ_WRITE'
	    },
	    ENDUSER_ATTRIBUTE_PERMISSION_OPTIONS: {
	      HIDE: loc('universal-directory.profiles.attribute.enduser.permission.hide', 'courage'),
	      READ_ONLY: loc('universal-directory.profiles.attribute.enduser.permission.readonly', 'courage'),
	      READ_WRITE: loc('universal-directory.profiles.attribute.enduser.permission.readwrite', 'courage')
	    },
	    ATTRIBUTE_LEVEL_MASTERING_OPTIONS: {
	      INHERIT: loc('universal-directory.profiles.attribute.master.inherit', 'courage'),
	      OKTA_MASTERED: loc('universal-directory.profiles.attribute.master.oktamastered', 'courage'),
	      OVERRIDE: loc('universal-directory.profiles.attribute.master.override', 'courage')
	    },
	    USERNAMETYPE: {
	      NONE: 'non-username',
	      OKTA_TO_APP: 'okta-to-app-username',
	      OKTA_TO_AD: 'okta-to-ad-username',
	      APP_TO_OKTA: 'app-to-okta-username',
	      IDP_TO_OKTA: 'idp-to-okta-username'
	    },
	    LOGINPATTERNFORMAT: {
	      EMAIL: 'EMAIL',
	      CUSTOM: 'CUSTOM',
	      NONE: 'NONE'
	    },
	
	    /*
	     * Get a display string for a schema attribute type.
	     * @param {String} type Type of an attribute
	     * @param {String} format Format of an attribute
	     * @param {String} itemType Item type of an attribute if an array
	     * @param {String} defaultValue The default value if an attribute type is undefined
	     * @return {String} the display value
	     */
	    getDisplayType: function getDisplayType(type, format, itemType, defaultValue) {
	      var displayType;
	      // type is undefined for
	      // - an un-mapped source attribute from mapping
	      // - an source attribute which is mapped to username target attribute
	      if (type) {
	        // format is only defined for complicated types (ex. reference, date time, array)
	        // not for simple types (ex. string, integer, boolean)
	        if (format) {
	          displayType = this.FORMATDISPLAYTYPE[format];
	        } else {
	          // itemType is only defined for array type
	          // to specify an array element type (ex. string, integer, number)
	          displayType = itemType ? this.ARRAYDISPLAYTYPE[type + 'of' + itemType] : type;
	        }
	      }
	      if (!displayType) {
	        displayType = typeof defaultValue == 'undefined' ? '' : defaultValue;
	      }
	      return displayType;
	    },
	
	    /*
	     * Get attribute mapping source attribute username type
	     * @param {String} mappingDirection
	     * @param {String} targetName The mapping target attribute name
	     * @param {String} appName The app name that's mapped to/from Okta
	     * @return {String} the source attribute username type value
	     */
	    getSourceUsernameType: function getSourceUsernameType(mappingDirection, targetName, appName) {
	      var sourceUsernameType = this.USERNAMETYPE.NONE;
	      if (mappingDirection === 'oktaToApp') {
	        if (targetName === 'userName') {
	          sourceUsernameType = this.USERNAMETYPE.OKTA_TO_APP;
	        } else if (targetName === 'cn') {
	          sourceUsernameType = this.USERNAMETYPE.OKTA_TO_AD;
	        }
	      } else if (mappingDirection === 'appToOkta' && targetName === 'login') {
	        if (appName === 'saml_idp') {
	          sourceUsernameType = this.USERNAMETYPE.IDP_TO_OKTA;
	        } else {
	          sourceUsernameType = this.USERNAMETYPE.APP_TO_OKTA;
	        }
	      }
	      return sourceUsernameType;
	    },
	
	    isArrayDataType: function isArrayDataType(type) {
	      return _.contains(_.values(this.ARRAYDISPLAYTYPE), type);
	    },
	
	    isObjectDataType: function isObjectDataType(type) {
	      return this.DATATYPE.object === type;
	    }
	  };
	
	  return SchemaUtils;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 560 */
/***/ function(module, exports) {

	// empty (null-loader)

/***/ },
/* 561 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	!(module.exports = {
	  DEBOUNCE_DELAY: 200,
	  LOADING_FADE: 400,
	  UNLOADING_FADE: 400,
	  ROW_EXPANDER_TRANSITION: 150,
	  HIDE_ADD_MAPPING_FORM: 300
	});

/***/ },
/* 562 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(417)], __WEBPACK_AMD_DEFINE_RESULT__ = function (moment) {
	
	  var MOMENT_UNIT = {
	    'MILLISECOND': 'milliseconds',
	    'SECOND': 'seconds',
	    'MINUTE': 'minutes',
	    'HOUR': 'hours',
	    'DAY': 'days'
	  };
	
	  return {
	    MINUTES_HOURS_DAYS: {
	      'MINUTE': 'Minutes',
	      'HOUR': 'Hours',
	      'DAY': 'Days'
	    },
	
	    MILLISECONDS_SECONDS_MINUTES: {
	      'MILLISECOND': 'Milliseconds',
	      'SECOND': 'Seconds',
	      'MINUTE': 'Minutes'
	    },
	
	    // TODO: OKTA-32410 proper fix for displaying PDT
	    convertToPDT: function convertToPDT(milliseconds, formatter, defaultText) {
	      // 'Apr 17, 2014 8:37:50 AM' or 'Never'
	      formatter || (formatter = 'MMM DD, YYYY h:mm:ss A');
	      defaultText || (defaultText = '');
	      return milliseconds ? moment(milliseconds).utc().utcOffset('-07:00').format(formatter) : defaultText;
	    },
	
	    /**
	     * @method getTimeInHighestRelevantUnit
	     * Will return a number in the units of the highest relevant time unit.
	     * Only checks milliseconds, seconds, minutes, hours, and days.
	     * E.g.
	     *   15 minutes -> 15 minutes
	     *   60 minutes ->  1 hours
	     *   90 minutes -> 90 minutes
	     *   24 hours   ->  1 days
	     *
	     * @param {Number} val  The amount of time
	     * @param {String} unit The units that val is in
	     * @return {Object} An object containing the amount of time and the units it's in
	     */
	    getTimeInHighestRelevantUnit: function getTimeInHighestRelevantUnit(val, unit) {
	      var duration = moment.duration(val, MOMENT_UNIT[unit] || unit);
	      var highestUnit;
	      if (duration.milliseconds() !== 0) {
	        highestUnit = 'milliseconds';
	      } else if (duration.seconds() !== 0) {
	        highestUnit = 'seconds';
	      } else if (duration.minutes() !== 0) {
	        highestUnit = 'minutes';
	      } else if (duration.hours() !== 0) {
	        highestUnit = 'hours';
	      } else {
	        highestUnit = 'days';
	      }
	      return {
	        time: duration.as(highestUnit),
	        unit: this.convertMomentUnits(highestUnit)
	      };
	    },
	
	    /**
	     * @method convertMomentUnits
	     * Does the conversion between moment's units and our units internally
	     *
	     * @param {String} momentUnit The units that val is in
	     * @return {String} The key in the MINUTES_HOURS_DAYS hash
	     */
	    convertMomentUnits: function convertMomentUnits(momentUnit) {
	      switch (momentUnit) {
	        case 'milliseconds':
	          return 'MILLISECOND';
	        case 'seconds':
	          return 'SECOND';
	        case 'minutes':
	          return 'MINUTE';
	        case 'hours':
	          return 'HOUR';
	        case 'days':
	          return 'DAY';
	        default:
	          throw new Error('Time unit not recognized: ' + momentUnit);
	      }
	    },
	
	    /**
	     * @method convertTimeUnit
	     * Converts a given value from one unit to another
	     *
	     * @param {Number} val The amount of time in fromUnits
	     * @param {String} fromUnit The units that val is in on input
	     * @param {String} toUnit The units to convert to
	     * @return {Number} The amount of time in toUnits
	     */
	    convertTimeUnit: function convertTimeUnit(val, fromUnit, toUnit) {
	      val = parseInt(val, 10);
	      fromUnit = MOMENT_UNIT[fromUnit] || fromUnit;
	      toUnit = MOMENT_UNIT[toUnit] || toUnit;
	      return moment.duration(val, fromUnit).as(toUnit);
	    },
	
	    /**
	     * @method convertTimeFormat
	     * Converts a given time string from one format to another in local time
	     *
	     * @param {String} timeString The time string to be parsed
	     * @param {String} fromFormatter The timeString's parser format
	     * @param {String} toFormatter The format that the timeString to convert to
	     * @return {String} The time string in the converted format in local time
	     */
	    convertTimeFormat: function convertTimeFormat(timeString, fromFormatter, toFormatter) {
	      toFormatter || (toFormatter = 'MMMM Do, YYYY');
	      return moment(timeString, fromFormatter).format(toFormatter);
	    }
	  };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 563 */
/***/ function(module, exports) {

	// empty (null-loader)

/***/ },
/* 564 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(528)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, BaseView) {
	
	  return {
	    redirect: function redirect(url) {
	      window.location = url;
	    },
	
	    reloadPage: function reloadPage() {
	      window.location.reload();
	    },
	
	    constantError: function constantError(errorMessage) {
	      return function () {
	        throw new Error(errorMessage);
	      };
	    },
	
	    /**
	     * Simply convert an URL query key value pair object into an URL query string.
	     * Remember NOT to escape the query string when using this util.
	     * example:
	     * input: {userId: 123, instanceId: undefined, expand: 'schema,app'}
	     * output: '?userId=123&expand=schema,app'
	     */
	    getUrlQueryString: function getUrlQueryString(queries) {
	      _.isObject(queries) || (queries = {});
	      var queriesString = _.without(_.map(queries, function (value, key) {
	        if (value !== undefined && value !== null) {
	          return key + '=' + encodeURIComponent(value);
	        }
	      }), undefined).join('&');
	      return _.isEmpty(queriesString) ? '' : '?' + queriesString;
	    },
	
	    isABaseView: function isABaseView(obj) {
	      return obj instanceof BaseView || obj.prototype instanceof BaseView || obj === BaseView;
	    }
	  };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 565 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/* eslint max-params: [2, 8] */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(528), __webpack_require__(566), __webpack_require__(568), __webpack_require__(569), __webpack_require__(579), __webpack_require__(580), __webpack_require__(603), __webpack_require__(604)], __WEBPACK_AMD_DEFINE_RESULT__ = function (BaseView, ListView, TableView, componentsBundle, datalistBundle, formsBundle, tabsBundle, uploaderBundle) {
	
	  return {
	
	    BaseView: BaseView,
	
	    ListView: ListView,
	
	    TableView: TableView,
	
	    components: componentsBundle,
	
	    datalist: datalistBundle,
	
	    forms: formsBundle,
	
	    tabs: tabsBundle,
	
	    uploader: uploaderBundle
	
	  };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 566 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(528), __webpack_require__(567)], __WEBPACK_AMD_DEFINE_RESULT__ = function (BaseView, ListView) {
	  /**
	   * See {@link src/framework/ListView} for more detail and examples from the base class.
	   * @class module:Okta.ListView
	   * @extends src/framework/ListView
	   * @mixes module:Okta.View
	   */
	  return BaseView.decorate(ListView);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 567 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof2 = __webpack_require__(334);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	(function (root, factory) {
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(530)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	  /* global module, exports */
	  else if (typeof require == 'function' && (typeof exports === 'undefined' ? 'undefined' : (0, _typeof3.default)(exports)) == 'object') {
	      module.exports = factory(require('okta/underscore'), require('./View'));
	    } else {
	      root.Archer || (root.Archer = {});
	      root.Archer.ListView = factory(root._, root.Archer.View);
	    }
	})(undefined, function (_, View) {
	  /**
	   * Archer.ListView is a {@link src/framework/View} that operates on a
	   * collection and builds a list of "things" of the same type.
	   *
	   * Automagically adds, removes and sorts upon standard collection events.
	   *
	   * Listen to collection events so the ListView will do the right thing when
	   * a model is added or the collection is reset or sorted.
	   *
	   * @class src/framework/ListView
	   * @extends src/framework/View
	   * @param {Object} options options hash
	   * @param {Object} options.collection The collection which this view operates on
	   * @example
	   * var UserList = Archer.ListView.extend({
	   *   tagName: 'ul',
	   *   item: '<li>{{fname}} {{lname}}</li>'
	   * });
	   *
	   * var users = new Archer.Collection([
	   *   {fname: 'John', lname: 'Doe'},
	   *   {fname: 'Jane', lname: 'Doe'}
	   * ]);
	   *
	   * var userList = new UserList({collection: users}).render();
	   * userList.el; //=> "<ul><li>John Doe</li><li>Jane Doe</li></ul>"
	   *
	   * users.push({fname: 'Jim', lname: 'Doe'});
	   * userList.el; //=> "<ul><li>John Doe</li><li>Jane Doe</li><li>Jim Doe</li></ul>"
	   *
	   * users.first().destroy();
	   * userList.el; //=> "<ul><li>Jane Doe</li><li>Jim Doe</li></ul>"
	   */
	  return View.extend( /** @lends src/framework/ListView.prototype */{
	
	    constructor: function constructor() {
	      View.apply(this, arguments);
	      if (!this.collection) {
	        throw new Error('Missing collection');
	      }
	      this.listenTo(this.collection, 'reset sort', this.reset);
	      this.listenTo(this.collection, 'add', this.addItem);
	      this.collection.each(this.addItem, this);
	    },
	
	    /**
	     * The view/template we will use to render each model in the collection.
	     * @type {String|module:Okta.View}
	     */
	    item: null,
	
	    /**
	     * A selector in the local template where to append each item
	     * @type {String}
	     */
	    itemSelector: null,
	
	    /**
	     * Empty the list and re-add everything from the collection.
	     * Usefull for handling `collection.reset()` or for handling the initial load
	     * @protected
	     */
	    reset: function reset() {
	      this.removeChildren();
	      this.collection.each(this.addItem, this);
	      return this;
	    },
	
	    /**
	     * Add an item view to the list that will represent one model from the collection
	     *
	     * Listen to the model so when it is destoyed or removed from the collection
	     * this item will remove itself from the list
	     *
	     * @param {Backbone.Model} model The model this row operates on
	     * @protected
	     */
	    addItem: function addItem(model) {
	      var view = this.add(this.item, this.itemSelector, { options: { model: model } }).last();
	      view.listenTo(model, 'destroy remove', view.remove);
	      return this;
	    }
	
	  });
	});

/***/ },
/* 568 */
/***/ function(module, exports) {

	// empty (null-loader)

/***/ },
/* 569 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/* eslint max-params: [2, 11] */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(538), __webpack_require__(576), __webpack_require__(571), __webpack_require__(572), __webpack_require__(573), __webpack_require__(574), __webpack_require__(570), __webpack_require__(535), __webpack_require__(577), __webpack_require__(578), __webpack_require__(534)], __WEBPACK_AMD_DEFINE_RESULT__ = function (BaseButtonLink, BaseDependentCallout, BaseDropDown, BaseFormDialog, BaseModalDialog, BaseSpinner, Callout, ConfirmationDialog, DropDown, MultiViewModalDialog, Notification) {
	
	  return {
	
	    BaseButtonLink: BaseButtonLink,
	
	    BaseDependentCallout: BaseDependentCallout,
	
	    BaseDropDown: BaseDropDown,
	
	    BaseFormDialog: BaseFormDialog,
	
	    BaseModalDialog: BaseModalDialog,
	
	    BaseSpinner: BaseSpinner,
	
	    Callout: Callout,
	
	    ConfirmationDialog: ConfirmationDialog,
	
	    DropDown: DropDown,
	
	    MultiViewModalDialog: MultiViewModalDialog,
	
	    Notification: Notification
	
	  };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 570 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(528), __webpack_require__(561)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, BaseView, Time) {
	
	  function getOption(callout, option) {
	    return _.resultCtx(callout.options, option, callout) || _.result(callout, option);
	  }
	
	  function getTopClass(callout) {
	    var klass = 'infobox clearfix infobox-' + getOption(callout, 'type');
	    switch (getOption(callout, 'size')) {
	      case 'standard':
	        klass += '';
	        break;
	      case 'slim':
	        klass += ' infobox-slim';
	        break;
	      case 'compact':
	        klass += ' infobox-compact';
	        break;
	      case 'large':
	        klass += ' infobox-md';
	        break;
	
	    }
	    if (getOption(callout, 'dismissible')) {
	      klass += ' infobox-dismiss';
	    }
	    return klass;
	  }
	
	  var events = {
	    'click .infobox-dismiss-link': function clickInfoboxDismissLink(e) {
	      e.preventDefault();
	      this.$el.fadeOut(Time.UNLOADING_FADE, _.bind(this.remove, this));
	    }
	  };
	
	  var template = '\
	    {{#if dismissible}}\
	      <a class="infobox-dismiss-link" title="Dismiss" href="#">\
	        <span class="dismiss-icon"></span>\
	      </a>\
	    {{/if}}\
	    <span class="icon {{icon}}"></span>\
	    {{#if title}}<h3>{{title}}</h3>{{/if}}\
	    {{#if subtitle}}<p>{{subtitle}}</p>{{/if}}\
	    {{#if bullets}}\
	      <ul class="bullets">\
	      {{#each bullets}}<li>{{this}}</li>{{/each}}\
	      </ul>\
	    {{/if}}\
	  ';
	
	  /**
	   * @class src/views/components/Callout
	   * @extends module:Okta.View
	   */
	
	  var Callout = BaseView.extend( /** @lends src/views/components/Callout.prototype */{
	
	    /**
	     * Custom HTML or view to inject to the callout
	     * @type {String|Okta.View}
	     */
	    content: null,
	
	    /**
	     * Size of icon. options are standard, large, compact
	     * @type {String}
	     */
	    size: 'standard',
	
	    /**
	     * Type of the callout. Valid values are: info, success, warning, error, tip
	     * @type {String}
	     */
	    type: 'info',
	
	    /**
	     * Can the callout be dismissed
	     * @type {Boolean}
	     */
	    dismissible: false,
	
	    /**
	     * Callout title
	     * @type {String}
	     */
	    title: null,
	
	    /**
	     * Callout subtitle
	     * @type {String}
	     */
	    subtitle: null,
	
	    /**
	     * Array of strings to render as bullet points
	     * @type {Array}
	     */
	    bullets: null,
	
	    constructor: function constructor() {
	      this.events = _.defaults(this.events || {}, events);
	
	      BaseView.apply(this, arguments);
	
	      this.$el.addClass(getTopClass(this));
	
	      this.template = template;
	
	      var content = getOption(this, 'content');
	      if (content) {
	        this.add(content);
	      }
	    },
	
	    getTemplateData: function getTemplateData() {
	      var icon = getOption(this, 'type');
	      var size = getOption(this, 'size');
	      if (icon === 'tip') {
	        // css is inconsistent
	        icon = 'light-bulb';
	      }
	      switch (size) {
	        case 'slim':
	          icon = '';
	          break;
	        case 'large':
	          icon = [icon, '-', '24'].join('');
	          break;
	        default:
	          icon = [icon, '-', '16'].join('');
	      }
	      return {
	        icon: icon,
	        title: getOption(this, 'title'),
	        subtitle: getOption(this, 'subtitle'),
	        bullets: getOption(this, 'bullets'),
	        dismissible: getOption(this, 'dismissible')
	      };
	    }
	  });
	
	  /**
	   * @class module:Okta.internal.views.components.Callout
	   */
	  return (/** @lends module:Okta.internal.views.components.Callout */{
	      /**
	       * Creates a {@link src/views/components/Callout|Callout}.
	       * @static
	       * @param {Object} options
	       * @param {String|Function} [options.size] Size of icon. options are standard, large, compact, slim
	       * @param {String|Okta.View} [options.content] Custom HTML or view to inject to the callout
	       * @param {String|Function} [options.title] Callout title
	       * @param {String|Function} [options.subtitle] Callout subtitle
	       * @param {Array|Function} [options.bullets] Array of strings to render as bullet points
	       * @param {Boolean|Function} [options.dismissible] Can the callout be dismissed
	       * @param {String|Function} [options.type] Callout type. Valid values are: info, success, warning, error, tip
	       *
	       * @return {src/views/components/Callout}
	       */
	      create: function create(options) {
	        return new Callout(options);
	      }
	    }
	  );
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 571 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(404), __webpack_require__(529), __webpack_require__(528)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, $, TemplateUtil, BaseView) {
	
	  var optionsTemplate = TemplateUtil.tpl('\
	    <a class="icon-16 {{className}}" data-se="{{seleniumId}}">\
	      {{#if icon}}\
	      <span class="icon {{icon}}"></span>\
	      {{/if}}\
	      {{#if title}}\
	      {{title}}\
	      {{/if}}\
	      {{#if subtitle}}\
	        <p class="option-subtitle">{{subtitle}}</p>\
	      {{/if}}\
	   </a>\
	   ');
	
	  var DropDownOption = BaseView.extend({
	    tagName: 'li',
	
	    events: {
	      click: function click(e) {
	        e.preventDefault();
	        this.action && this.action.call(this);
	      }
	    },
	
	    constructor: function constructor() {
	      BaseView.apply(this, arguments);
	      this.$el.addClass('okta-dropdown-option option');
	    },
	
	    render: function render() {
	      this.$el.html(optionsTemplate({
	        icon: _.result(this, 'icon'),
	        className: _.result(this, 'className') || '',
	        title: _.result(this, 'title'),
	        subtitle: _.result(this, 'subtitle'),
	        seleniumId: _.result(this, 'seleniumId')
	      }));
	      return this;
	    }
	  });
	
	  return BaseView.extend({
	
	    events: {
	      'click a.option-selected': function clickAOptionSelected(e) {
	        e.preventDefault();
	        if (_.result(this, 'disabled')) {
	          e.stopPropagation();
	        }
	      },
	      'click .dropdown-disabled': function clickDropdownDisabled(e) {
	        e.preventDefault();
	        e.stopPropagation();
	      }
	    },
	
	    items: [],
	
	    constructor: function constructor() {
	
	      // In this very specific case we want to NOT append className to $el
	      // but to the <a> tag in the template
	      // so we want to disable backbone default functionality.
	      var className = this.className;
	      this.className = null;
	
	      BaseView.apply(this, arguments);
	
	      this.className = className;
	
	      this.$el.addClass('dropdown more-actions float-l');
	
	      _.each(_.result(this, 'items'), function (option) {
	        this.addOption(option, this.options);
	      }, this);
	    },
	
	    template: '\
	      <a href="#" class="link-button {{className}} link-button-icon option-selected center">\
	        {{#if icon}}\
	        <span class="icon {{icon}}"></span>\
	        {{/if}}\
	        <span class="option-selected-text">{{title}}</span>\
	        <span class="icon-dm"></span>\
	      </a>\
	      <div class="options clearfix" style="display: none;">\
	      <ul class="okta-dropdown-list options-wrap clearfix"></ul>\
	      </div>\
	    ',
	
	    getTemplateData: function getTemplateData() {
	      var className = [_.result(this, 'className') || '', _.result(this, 'disabled') ? 'dropdown-disabled' : ''];
	      return {
	        icon: _.result(this, 'icon'),
	        className: $.trim(className.join(' ')),
	        title: _.result(this, 'title')
	      };
	    },
	
	    addOption: function addOption(proto, options) {
	      this.add(DropDownOption.extend(proto), 'ul.options-wrap', { options: options || {} });
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 572 */
/***/ function(module, exports) {

	// empty (null-loader)

/***/ },
/* 573 */
/***/ function(module, exports) {

	// empty (null-loader)

/***/ },
/* 574 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(528), __webpack_require__(561), __webpack_require__(575)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, BaseView, Time) {
	
	  var opts = {
	    lines: 9, // The number of lines to draw
	    length: 0, // The length of each line
	    width: 8, // The line thickness
	    radius: 12, // The radius of the inner circle
	    corners: 1, // Corner roundness (0..1)
	    rotate: 23, // The rotation offset
	    direction: 1, // 1: clockwise, -1: counterclockwise
	    color: '#666', // #rgb or #rrggbb
	    speed: 0.8, // Rounds per second
	    trail: 50, // Afterglow percentage
	    shadow: false, // Whether to render a shadow
	    hwaccel: false, // Whether to use hardware acceleration
	    className: '', // The CSS class to assign to the spinner
	    zIndex: 2e9, // The z-index (defaults to 2000000000)
	    top: 'auto', // Top position relative to parent in px
	    left: 'auto' // Left position relative to parent in px
	  };
	
	  return BaseView.extend({
	
	    constructor: function constructor() {
	      if (!this.spinOptions) {
	        this.spinOptions = {};
	      }
	      _.defaults(this.spinOptions, opts);
	      BaseView.apply(this, arguments);
	    },
	
	    render: function render() {
	      if (!this.spinAtRender) {
	        this.$el.hide();
	      }
	      BaseView.prototype.render.apply(this, arguments);
	      if (this.spinAtRender) {
	        this.spin();
	      }
	      return this;
	    },
	
	    spin: function spin() {
	      this.$el.spin(this.spinOptions).show();
	      return this;
	    },
	
	    empty: function empty() {
	      var $el = this.$el;
	      $el.fadeOut(Time.LOADING_FADE, function () {
	        $el.spin(false);
	      });
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 575 */
/***/ function(module, exports) {

	// empty (null-loader)

/***/ },
/* 576 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/* eslint max-params: [2, 7] */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(404), __webpack_require__(528), __webpack_require__(574), __webpack_require__(570), __webpack_require__(537), __webpack_require__(405)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, $, BaseView, BaseSpinner, Callout, ButtonFactory, StringUtil) {
	
	  var Spinner = BaseSpinner.extend({
	    className: 'spinner',
	    spinAtRender: true,
	    spinOptions: {
	      zIndex: 'auto',
	      left: '25px',
	      top: '25px'
	    }
	  });
	
	  var STATE = {
	    SUCCESS: 'success',
	    INVALID: 'invalid',
	    WARNING: 'warning',
	    ERROR: 'error',
	    FAILED: 'failed',
	    LOADING: 'loading'
	  };
	
	  var CALLOUT_SETTINGS = {
	    success: {
	      title: { i18n: 'dependency.action.completed' },
	      type: 'success',
	      config: ['SUCCESS'],
	      noButton: true
	    },
	    invalid: {
	      title: { i18n: 'dependency.action.required', arg: 'title' },
	      type: 'warning',
	      config: ['DEFAULT']
	    },
	    warning: {
	      title: { i18n: 'dependency.action.not.completed' },
	      type: 'warning',
	      config: ['DEFAULT', 'WARNING']
	    },
	    error: {
	      title: { i18n: 'dependency.action.not.completed' },
	      type: 'error',
	      config: ['DEFAULT', 'WARNING', 'ERROR']
	    },
	    failed: {
	      title: { i18n: 'dependency.action.failed' },
	      subtitle: { i18n: 'dependency.action.failed.subtitle' },
	      type: 'error',
	      noButton: true
	    },
	    loading: {
	      title: { i18n: 'dependency.check.required.action' },
	      type: 'warning',
	      showSpinner: true,
	      noButton: true
	    }
	  };
	
	  /**
	   * A Dependent Flow callout 
	   * @class module:Okta.DependentCallout
	   * @extends module:Okta.View
	   * @param {Object} define callout title and button
	   *
	   * @example
	   * var View = Okta.DependentCallout.extend({
	   *   callout: {
	   *     title: 'Default Title',
	   *     subtitle: 'Default Subtitle',
	   *     button: {
	   *       title: 'Button title',
	   *       href: 'http://www.okta.com'
	   *     },
	   *     WARNING: {
	   *       subtitle: 'Overwrite subtitle for warning'
	   *     }
	   *   }
	   * });
	   *
	   * Fired when it requires to re-evaluate
	   * @event module:Okta.DependentCallout#validate
	   */
	
	  return BaseView.extend({
	
	    __currentState: STATE.SUCCESS,
	
	    /**
	     * Callout configuration settings
	     * @type {Object}
	     */
	    callout: {},
	
	    constructor: function constructor(options) {
	      this.options = options || {};
	
	      if (this.options.callout) {
	        this.callout = this.options.callout;
	      }
	
	      BaseView.prototype.constructor.call(this, options);
	    },
	
	    isValid: function isValid() {
	      return this.__currentState === STATE.SUCCESS;
	    },
	
	    showSuccess: function showSuccess() {
	      if (this.isValid()) {
	        return;
	      }
	
	      this.__currentState = STATE.SUCCESS;
	      this.execCallout();
	    },
	
	    showInvalid: function showInvalid() {
	      this.__currentState = STATE.INVALID;
	      this.execCallout();
	    },
	
	    showWarning: function showWarning() {
	      this.__currentState = STATE.WARNING;
	      this.execCallout();
	    },
	
	    showError: function showError() {
	      this.__currentState = STATE.ERROR;
	      this.execCallout();
	    },
	
	    showFailed: function showFailed() {
	      this.__currentState = STATE.FAILED;
	      this.execCallout();
	    },
	
	    showLoading: function showLoading() {
	      this.__currentState = STATE.LOADING;
	      this.execCallout();
	    },
	
	    removeCallout: function removeCallout() {
	      this.lastView && this.lastView.remove();
	    },
	
	    execCallout: function execCallout() {
	      var calloutConfig = this.__buildCalloutConfig();
	
	      var buttonConfig = this.__getButtonConfig(calloutConfig);
	
	      if (buttonConfig && !calloutConfig.content) {
	        calloutConfig.content = this.__getDependencyCalloutBtn(buttonConfig);
	      }
	
	      this.__showCallout(calloutConfig);
	    },
	
	    __getCalloutConfig: function __getCalloutConfig(type) {
	      var config;
	
	      if (this.callout[type]) {
	        config = this.callout[type];
	      } else if (type === 'DEFAULT') {
	        config = this.callout;
	      }
	
	      return config ? _.pick(config, 'icon', 'title', 'subtitle', 'bullets', 'button', 'className') : {};
	    },
	
	    __getButtonConfig: function __getButtonConfig(calloutConfig) {
	      var config;
	      if (calloutConfig && calloutConfig.button) {
	        config = calloutConfig.button;
	      }
	      return config;
	    },
	
	    __buildCalloutConfig: function __buildCalloutConfig() {
	      var baseConfigs = CALLOUT_SETTINGS[this.__currentState],
	          configs = _.reduce(baseConfigs.config || [], function (combined, config) {
	        return _.extend({}, combined, this.__getCalloutConfig(config));
	      }, {}, this);
	
	      configs = this.__configOverwrite(baseConfigs, configs);
	
	      if (baseConfigs.showSpinner) {
	        this.spinner && this.spinner.remove();
	        this.spinner = new Spinner();
	        configs.content = this.spinner;
	      }
	
	      _.each(['title', 'subtitle', 'bullets'], function (attr) {
	        configs[attr] = _.resultCtx(configs, attr, this);
	      }, this);
	
	      return configs;
	    },
	
	    __configOverwrite: function __configOverwrite(baseConfigs, configs) {
	      if (baseConfigs.title.arg) {
	        configs.title = StringUtil.localize(baseConfigs.title.i18n, 'courage', [configs[baseConfigs.title.arg]]);
	      } else {
	        configs.title = StringUtil.localize(baseConfigs.title.i18n, 'courage');
	      }
	
	      if (baseConfigs.subtitle) {
	        configs.subtitle = StringUtil.localize(baseConfigs.subtitle.i18n, 'courage');
	      }
	
	      if (baseConfigs.noButton) {
	        configs = _.omit(configs, 'button');
	      }
	
	      configs = _.extend({}, _.pick(baseConfigs, 'type'), configs);
	      configs.className = [configs.className ? configs.className : '', 'dependency-callout'].join(' ');
	
	      return configs;
	    },
	
	    __showCallout: function __showCallout(calloutConfig) {
	      var dependencyCallout = Callout.create(calloutConfig);
	      if (calloutConfig.button) {
	        var message = StringUtil.localize('dependency.callout.msg', 'courage');
	        dependencyCallout.add('<span class="o-form-explain">' + message + '</span>');
	      }
	
	      this.removeCallout();
	      this.lastView = this.add(dependencyCallout).last();
	    },
	
	    __getDependencyCalloutBtn: function __getDependencyCalloutBtn(btnConfig) {
	      var btnOptions = _.clone(btnConfig);
	      // add onfocus listener to re-evaluate depedency when callout button is clicked
	      var originalClick = btnOptions.click || function () {};
	
	      // Assign a default icon
	      if (!btnOptions.icon) {
	        btnOptions.icon = 'openinnewtab-16';
	      }
	
	      btnOptions.attributes = _.extend({}, btnOptions.attributes || {}, { target: '_blank' });
	
	      // Append 'open' in the front of button label
	      btnOptions.title = StringUtil.localize('dependency.button.action.open', 'courage', [btnOptions.title]);
	
	      btnOptions.className = [btnOptions.className ? btnOptions.className : '', 'link-button-icon-right'].join(' ');
	
	      btnOptions.click = _.bind(function () {
	        $(window).one('focus', _.bind(function () {
	          this.trigger('validate');
	        }, this));
	        originalClick.call(this);
	      }, this);
	
	      var CalloutBtn = BaseView.extend({
	        children: [ButtonFactory.create(btnOptions)]
	      });
	      return new CalloutBtn();
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 577 */
/***/ function(module, exports) {

	// empty (null-loader)

/***/ },
/* 578 */
/***/ function(module, exports) {

	// empty (null-loader)

/***/ },
/* 579 */
/***/ function(module, exports) {

	// empty (null-loader)

/***/ },
/* 580 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/* eslint max-params: [2, 36] */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(582), __webpack_require__(596), __webpack_require__(593), __webpack_require__(594), __webpack_require__(595), __webpack_require__(589), __webpack_require__(590), __webpack_require__(581), __webpack_require__(583), __webpack_require__(584), __webpack_require__(586), __webpack_require__(588), __webpack_require__(597), __webpack_require__(585)], __WEBPACK_AMD_DEFINE_RESULT__ = function (BaseForm, BaseInput, TextCounterExplain, WizardTitle, EnumTypeHelper, ErrorBanner, ErrorParser, FormUtil, InputContainer, InputFactory, InputLabel, InputWrapper, SchemaFormFactory, InputRegistry) {
	
	  return {
	
	    BaseForm: BaseForm,
	
	    BaseInput: BaseInput,
	
	    components: {
	
	      TextCounterExplain: TextCounterExplain,
	
	      WizardTitle: WizardTitle
	    },
	
	    helpers: {
	
	      EnumTypeHelper: EnumTypeHelper,
	
	      ErrorBanner: ErrorBanner,
	
	      ErrorParser: ErrorParser,
	
	      FormUtil: FormUtil,
	
	      InputContainer: InputContainer,
	
	      InputFactory: InputFactory,
	
	      InputLabel: InputLabel,
	
	      InputWrapper: InputWrapper,
	
	      SchemaFormFactory: SchemaFormFactory,
	
	      InputRegistry: InputRegistry
	
	    }
	
	  };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 581 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/* eslint max-params: [2, 6] */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(405), __webpack_require__(528), __webpack_require__(557), __webpack_require__(520), __webpack_require__(539)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, StringUtil, BaseView, Keys, Logger, ViewUtil) {
	
	  var LABEL_OPTIONS = ['model', 'id', 'inputId', 'type', 'label', 'sublabel', 'tooltip', 'name'],
	      CONTAINER_OPTIONS = ['wide', 'multi', 'input', 'explain', 'customExplain', 'model', 'name', 'type', 'autoRender'],
	      WRAPPER_OPTIONS = ['model', 'name', 'label-top', 'readOnly', 'events', 'initialize', 'showWhen', 'bindings', 'render', 'className', 'data-se', 'toggleWhen'],
	      INPUT_OPTIONS = ['model', 'name', 'inputId', 'type', // base options
	  'input', // custom input
	  'placeholder', 'label', // labels
	  'readOnly', 'read', 'disabled', 'readModeString', // modes
	  'options', // select/radio
	  'deps', // used to specify inputs that have dependencies and show a callout to user on select
	  'from', 'to', // model transformers,
	  'autoRender', // model attributes change event to trigger rerendering of the input
	  'inlineValidation', // control inline validating against the model on focus lost
	  'validateOnlyIfDirty', // check if field has been interacted with and then validate
	  'ariaLabel', // 508 compliance for inputs that do not have label associated with them
	  'params'],
	      // widgets params - for input specific widgets
	
	  OTHER_OPTIONS = ['errorField'];
	
	  var ALL_OPTIONS = _.uniq(_.union(LABEL_OPTIONS, CONTAINER_OPTIONS, WRAPPER_OPTIONS, INPUT_OPTIONS, OTHER_OPTIONS));
	
	  var SAVE_BUTTON_PHASES = ['•         ', '•  •      ', '•  •  •   ', '•  •  •  •', '   •  •  •', '      •  •', '         •', '          ', '          ', '          '];
	
	  function decorateDoWhen(doWhen) {
	    if (doWhen && !doWhen['__edit__']) {
	      return _.extend({ '__edit__': _.constant(true) }, doWhen);
	    }
	  }
	
	  function _createButton(options) {
	
	    options = _.pick(options || {}, 'action', 'id', 'className', 'text', 'type');
	
	    var timeoutId, intervalId, phaseCount;
	
	    return BaseView.extend({
	      tagName: 'input',
	      className: 'button',
	      events: {
	        'click': function click() {
	          if (options.action && !this.disabled()) {
	            options.action.call(this);
	          }
	        },
	        'keyup': function keyup(e) {
	          if (Keys.isEnter(e) && options.action && !this.disabled()) {
	            options.action.call(this);
	          }
	        }
	      },
	
	      disabled: function disabled() {
	        return this.$el.prop('disabled') === true;
	      },
	
	      disable: function disable() {
	        this.$el.prop('disabled', true);
	        this.$el.addClass('btn-disabled');
	      },
	
	      enable: function enable() {
	        this.$el.prop('disabled', false);
	        this.$el.removeClass('btn-disabled');
	      },
	
	      initialize: function initialize() {
	        var self = this;
	
	        this.$el.attr('type', options.type == 'save' ? 'submit' : 'button');
	        this.$el.val(options.text);
	        if (options.id) {
	          this.$el.attr('id', options.id);
	        }
	        if (options.className) {
	          this.$el.addClass(options.className);
	        }
	        if (options.type) {
	          this.$el.attr('data-type', options.type);
	        }
	
	        this.$el.mousedown(function () {
	          self.model.set('__pending__', true);
	        });
	
	        this.$el.mouseup(function () {
	          self.model.set('__pending__', false);
	        });
	
	        this.listenTo(this.model, 'form:set-saving-state', function () {
	          this.disable();
	          if (options.type == 'save') {
	            timeoutId = setTimeout(_.bind(this.__changeSaveText, this), 1000);
	          }
	        });
	        this.listenTo(this.model, 'form:clear-saving-state', function () {
	          this.enable();
	          if (options.type == 'save') {
	            clearTimeout(timeoutId);
	            clearInterval(intervalId);
	            this.$el.val(options.text);
	          }
	        });
	      },
	
	      __changeSaveText: function __changeSaveText() {
	        phaseCount = 0;
	        intervalId = setInterval(_.bind(this.__showLoadingText, this), 200);
	      },
	
	      __showLoadingText: function __showLoadingText() {
	        this.$el.val(SAVE_BUTTON_PHASES[phaseCount++ % SAVE_BUTTON_PHASES.length]);
	      }
	    });
	  }
	
	  function validateInput(options, model) {
	    /* eslint max-statements: 0, complexity: 0 */
	
	    options || (options = {});
	
	    if (options.type == 'label') {
	      if (!options.label) {
	        Logger.warn('A label input must have a "label" parameter', options);
	      }
	      return;
	    }
	
	    if (options.type == 'button') {
	      if (!options.title && !options.icon) {
	        Logger.warn('A button input must have a "title" and/or an "icon" parameter', options);
	      }
	      if (!options.click && !options.href) {
	        Logger.warn('A button input must have a "click" and/or an "href" parameter', options);
	      }
	      return;
	    }
	
	    if (!options.name && !options.input) {
	      Logger.warn('Missing "name" or "input" parameters', options);
	    }
	
	    if (_.isArray(options.name) && _.isArray(options.input)) {
	      throw new Error('Not allowed to have both "name" and "input" defined as array.');
	    }
	
	    if (options.type != 'list' && options.name && model && model.allows) {
	      var names = [];
	      if (_.isArray(options.name)) {
	        names = options.name;
	      } else {
	        names.push(options.name);
	      }
	      _.each(names, function (name) {
	        if (!model.allows(name)) {
	          throw new Error('field not allowed: ' + options.name);
	        }
	      });
	    }
	
	    if (_.isArray(options.input) && options.type != 'list') {
	      _.each(options.input, function (input) {
	        validateInput(input, model);
	      });
	    }
	
	    var keys = _.keys(options),
	        intersection = _.intersection(keys, ALL_OPTIONS);
	
	    if (_.size(intersection) != _.size(options)) {
	      var fields = _.clone(ALL_OPTIONS);
	      fields.unshift(keys);
	      Logger.warn('Invalid input parameters', _.without.apply(null, fields), options);
	    }
	  }
	
	  function generateInputOptions(options, form, createFn) {
	    options = _.clone(options);
	
	    if (_.contains(['list', 'group'], options.type)) {
	      options.params = _.defaults({
	        create: createFn,
	        inputs: _.map(_.isArray(options.input) ? options.input : [options.input], function (input) {
	          return _.first(generateInputOptions(input, form, createFn));
	        })
	      }, options.params || {});
	      delete options.input;
	    }
	
	    var inputs = _.isArray(options.input) ? _.clone(options.input) : [options];
	
	    return _.map(inputs, function (input) {
	      var target = _.defaults({ model: form.model }, input, _.omit(options, 'input', 'inputs'), form.options, {
	        id: _.uniqueId('input'),
	        readOnly: form.isReadOnly(),
	        read: form.hasReadMode()
	      });
	      if (form.isReadOnly()) {
	        target.read = target.readOnly = true;
	      }
	      return target;
	    });
	  }
	
	  return {
	
	    LABEL_OPTIONS: LABEL_OPTIONS,
	    CONTAINER_OPTIONS: CONTAINER_OPTIONS,
	    WRAPPER_OPTIONS: WRAPPER_OPTIONS,
	    INPUT_OPTIONS: INPUT_OPTIONS,
	
	    generateInputOptions: generateInputOptions,
	
	    changeEventString: function changeEventString(fieldNames) {
	      return 'change:' + fieldNames.join(' change:');
	    },
	
	    createReadFormButton: function createReadFormButton(options) {
	
	      var action, text, ariaLabel;
	      if (options.type == 'cancel') {
	        text = ariaLabel = StringUtil.localize('oform.cancel', 'courage');
	        action = function action() {
	          this.model.trigger('form:cancel');
	        };
	      } else {
	        text = StringUtil.localize('oform.edit', 'courage');
	        ariaLabel = text + ' ' + options.formTitle;
	        action = function action() {
	          this.model.set('__edit__', true);
	        };
	      }
	
	      return BaseView.extend({
	        tagName: 'a',
	        attributes: {
	          href: '#',
	          'aria-label': ariaLabel
	        },
	        template: function template() {
	          return _.escape(text);
	        },
	        events: {
	          click: function click(e) {
	            e.preventDefault();
	            action.call(this);
	          }
	        }
	      });
	    },
	
	    createButton: function createButton(options) {
	      options = _.clone(options);
	      switch (options.type) {
	        case 'save':
	          _.defaults(options, { className: 'button-primary' });
	          break;
	        case 'cancel':
	          _.defaults(options, {
	            text: StringUtil.localize('oform.cancel', 'courage'),
	            action: function action() {
	              this.model.trigger('form:cancel');
	            }
	          });
	          break;
	        case 'previous':
	          _.defaults(options, {
	            text: StringUtil.localize('oform.previous', 'courage'),
	            action: function action() {
	              this.model.trigger('form:previous');
	            }
	          });
	          break;
	      }
	      return _createButton(options);
	    },
	
	    validateInput: validateInput,
	
	    /**
	     * Applies a show-when logic on a view instance.
	     * The show-when is a map of a model field name -> a boolean or a function that returns a boolean.
	     * The view will toggle based on the field value.
	     *
	     * @param  {Okta.View} view a view instance that has a this.model attached to it
	     * @param  {Object} showWhen
	     */
	    applyShowWhen: function applyShowWhen(view, showWhen) {
	      var toggleAndResize = function toggleAndResize(bool) {
	        return function () {
	          // The `toggle` is here since an event may be triggered before the el is in the DOM
	          // and in that case slide events may not function as expected.
	          view.$el.toggle(bool);
	          view.model.trigger('form:resize');
	        };
	      };
	
	      ViewUtil.applyDoWhen(view, decorateDoWhen(showWhen), function (bool, options) {
	        if (!options.animate) {
	          view.$el.toggle(bool);
	        } else {
	          view.$el['slide' + (bool ? 'Down' : 'Up')](200, toggleAndResize(bool));
	        }
	      });
	    },
	
	    applyToggleWhen: function applyToggleWhen(view, toggleWhen) {
	      ViewUtil.applyDoWhen(view, decorateDoWhen(toggleWhen), function (bool, options) {
	        view.$el.toggle(bool);
	        view.model.trigger('form:resize');
	        if (options.animate) {
	          view.render();
	        }
	      });
	    }
	  };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 582 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/* eslint max-params: [2, 14], max-statements: [2, 11] */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(404), __webpack_require__(529), __webpack_require__(405), __webpack_require__(528), __webpack_require__(584), __webpack_require__(586), __webpack_require__(583), __webpack_require__(588), __webpack_require__(589), __webpack_require__(590), __webpack_require__(581), __webpack_require__(591), __webpack_require__(592)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, $, TemplateUtil, StringUtil, BaseView, InputFactory, InputLabel, InputContainer, InputWrapper, ErrorBanner, ErrorParser, FormUtil, ReadModeBar, Toolbar) {
	
	  var template = '\
	    {{#if hasReadMode}}\
	      <h2 class="o-form-title-bar" data-se="o-form-title-bar">\
	        {{title}}\
	      </h2>\
	    {{/if}}\
	    <div data-se="o-form-content" class="o-form-content {{layout}} clearfix">\
	      {{#unless hasReadMode}}\
	        {{#if title}}\
	          <h2 data-se="o-form-head" class="okta-form-title o-form-head">{{title}}</h2>\
	        {{/if}}\
	      {{/unless}}\
	      {{#if subtitle}}\
	        <p class="okta-form-subtitle o-form-explain" data-se="o-form-explain">{{subtitle}}</p>\
	      {{/if}}\
	      <div class="o-form-error-container" data-se="o-form-error-container"></div>\
	      <div class="o-form-fieldset-container" data-se="o-form-fieldset-container"></div>\
	    </div>\
	  ';
	
	  // polyfill for `pointer-events: none;` in IE < 11
	  // Logic borrowed from https://github.com/kmewhort/pointer_events_polyfill (BSD)
	  var pointerEventsSupported = $('<div>').css({ 'pointer-events': 'auto' })[0].style.pointerEvents === 'auto';
	  function pointerEventsPolyfill(e) {
	    if (!pointerEventsSupported && this.$el.hasClass('o-form-saving')) {
	      var $el = $(e.currentTarget);
	
	      $el.css('display', 'none');
	      var underneathElem = document.elementFromPoint(e.clientX, e.clientY);
	      $el.css('display', 'block');
	
	      e.target = underneathElem;
	      $(underneathElem).trigger(e);
	
	      return false;
	    }
	  }
	
	  var events = {
	    submit: function submit(e) {
	      e.preventDefault();
	      this.__save();
	    }
	  };
	
	  _.each(['click', 'dblclick', 'mousedown', 'mouseup'], function (event) {
	    events[event + ' .o-form-input'] = pointerEventsPolyfill;
	  });
	
	  var attributes = function attributes(model) {
	    model || (model = {});
	    var collection = model && model.collection || {};
	    return {
	      method: 'POST',
	      action: _.result(model, 'urlRoot') || _.result(collection, 'url') || window.location.pathname,
	      'data-se': 'o-form'
	    };
	  };
	
	  var convertSavingState = function convertSavingState(rawSavingStateEvent, defaultEvent) {
	    rawSavingStateEvent || (rawSavingStateEvent = '');
	    var savingStateEvent = [];
	    if (_.isString(rawSavingStateEvent)) {
	      savingStateEvent = rawSavingStateEvent.split(' ');
	    }
	    savingStateEvent = _.union(savingStateEvent, defaultEvent);
	    return savingStateEvent.join(' ');
	  };
	
	  /**
	   * A Form utility framework
	   *
	   * Okta.Form is a form that operates on one flat model
	   * It exposes one main factory method, {@link module:Okta.Form#addInput|addInput}, which add inputs to the form,
	   * and each input operates on one field in the model, identified by the `name` field.
	   *
	   * See:
	   * [Basic O-Form Tutorial](https://github.com/okta/courage/wiki/Basic-O-Form)
	   *
	   * @class module:Okta.Form
	   * @extends module:Okta.View
	   * @param {Object} options options hash (See {@link module:Okta.View|View})
	   * @param {Object} options.model the model this form operates on
	   * @param {Boolean} [options.label-top=false] position label on top of inputs
	   * @param {Boolean} [options.wide=false] Use a wide input layout for all input
	   */
	
	  /**
	   * Fired when the "Save" button is clicked
	   * @event module:Okta.Form#save
	   * @param {module:Okta.Model} model Model used in the form
	   */
	
	  /**
	   * Fired after the model is successfully saved - applies when {@link module:Okta.Form#autoSave|autoSave}
	   * is set to true
	   * @event module:Okta.Form#saved
	   * @param {module:Okta.Model} model Model used in the form
	   */
	
	  /**
	   * Fired when the model fires an invalid event or an error event;
	   * @event module:Okta.Form#error
	   * @param {module:Okta.Model} model Model used in the form
	   */
	
	  /**
	   * Fired when the form layout is likely to be resized
	   * @event module:Okta.Form#resize
	   * @param {module:Okta.Model} model Model used in the form
	   */
	
	  /**
	   * Fired when the "Cancel" button is clicked
	   * @event module:Okta.Form#cancel
	   */
	
	  return BaseView.extend( /** @lends module:Okta.Form.prototype */{
	
	    /**
	     * Specifies how to validate form:
	     * - In case "local" string provided as a value of the property,
	     * the form will validate only fields added as inputs to the form;
	     * - In case array is provided, the validation will be performed only for fields specified in array;
	     * - In case function is provided, provided function will be used as a validation function,
	     * it must return an error object with the format {fieldName: 'error text'} with as many fields as you need.
	     * @name validate
	     * @memberof module:Okta.Form
	     * @type {String|Array|Function}
	     * @instance
	     */
	
	    constructor: function constructor(options) {
	      /* eslint max-statements: 0, complexity: 0 */
	      options || (options = {});
	      this.options = options;
	
	      this.id = _.uniqueId('form');
	      this.tagName = 'form';
	
	      _.defaults(this.events, events);
	      _.defaults(this.attributes, attributes(options.model));
	
	      this.__buttons = [];
	      this.__errorFields = {};
	
	      this.__saveModelState(options.model);
	
	      if (this.step) {
	        if (!this.save) {
	          this.save = !this.totalSteps || this.step === this.totalSteps ? 'Finish' : 'Next';
	        }
	        this.className += ' wizard';
	      }
	      this.className += ' o-form';
	
	      this.__toolbar = this.__createToolbar(options);
	
	      BaseView.call(this, options);
	
	      _.each(_.result(this, 'inputs') || [], function (input) {
	        // to ingore extra argumests from `each` iteratee function
	        // http://underscorejs.org/#each
	        this.__addLayoutItem(input);
	      }, this);
	
	      this.add(this.__toolbar, '');
	
	      this.listenTo(this.model, 'change:__edit__', this.__applyMode);
	
	      this.listenTo(this.model, 'invalid error', _.throttle(function (model, resp, showBanner) {
	        this.__showErrors(model, resp, showBanner !== false);
	      }, 100, { trailing: false }));
	
	      this.listenTo(this.model, 'form:resize', function () {
	        this.trigger('resize');
	      });
	
	      this.listenTo(this.model, 'form:cancel', _.throttle(this.__cancel, 100, { trailing: false }));
	      this.listenTo(this.model, 'form:previous', _.throttle(this.__previous, 100, { trailing: false }));
	
	      this.__save = _.throttle(this.__save, 200, { trailing: false });
	      this.listenTo(this.model, 'form:save', function () {
	        this.$el.submit();
	      });
	
	      this.listenTo(this.model, 'sync', function () {
	        if (this.model.get('__edit__')) {
	          this.model.set('__edit__', false, { silent: true });
	        }
	        this.__saveModelState(this.model);
	        this.render();
	      });
	
	      var hasSavingState = this.getAttribute('hasSavingState');
	
	      if (this.getAttribute('autoSave')) {
	        this.listenTo(this, 'save', function (model) {
	          var xhr = model.save();
	          if (xhr && xhr.done) {
	            xhr.done(_.bind(function () {
	              this.trigger('saved', model);
	            }, this));
	          }
	        });
	        if (_.isUndefined(hasSavingState)) {
	          hasSavingState = true;
	        }
	      }
	
	      /*
	       * Attach model event listeners
	       * by default, model's request event starts the form saving state,
	       * error and sync event stops it
	       * you can define customized saving start and stop state, like
	       * customSavingState: {start: 'requestingAdditionalInfo', stop: 'retrievedAdditionalInfo'}
	       * doing this does not override the default events
	       */
	      if (hasSavingState) {
	        var customSavingState = this.getAttribute('customSavingState', {});
	        this.listenTo(this.model, convertSavingState(customSavingState.start || '', ['request']), this.__setSavingState);
	        this.listenTo(this.model, convertSavingState(customSavingState.stop || '', ['error', 'sync']), this.__clearSavingState);
	      }
	    },
	
	    /**
	     * Create the bottom button bar
	     * @param  {Object} options options h
	     * @return {Okta.View} The toolbar
	     * @private
	     */
	    __createToolbar: function __createToolbar(options) {
	
	      var danger = this.getAttribute('danger'),
	          saveBtnClassName = danger === true ? 'button-error' : 'button-primary';
	
	      var toolbar = new Toolbar(_.extend({
	        save: this.save || StringUtil.localize('oform.save', 'courage'),
	        saveId: this.saveId,
	        saveClassName: saveBtnClassName,
	        cancel: this.cancel || StringUtil.localize('oform.cancel', 'courage'),
	        noCancelButton: this.noCancelButton || false,
	        hasPrevStep: this.step && this.step > 1
	      }, options || this.options));
	
	      _.each(this.__buttons, function (args) {
	        toolbar.addButton.apply(toolbar, args);
	      });
	
	      return toolbar;
	    },
	
	    className: '',
	
	    attributes: {},
	
	    events: {},
	
	    /**
	     * An array of input configurations to render in the form
	     * @type {Array}
	     */
	    inputs: [],
	
	    template: null,
	
	    /**
	     * Does the form support read/edit toggle.
	     * @type {Boolean|Function}
	     * @default false
	     */
	    read: false,
	
	    /**
	     * Is the form in readOnly mode.
	     * @type {Boolean|Function}
	     * @default false
	     */
	    readOnly: false,
	
	    /**
	     * Should we not render the button bar
	     * @type {Boolean|Function}
	     * @default false
	     */
	    noButtonBar: false,
	
	    /**
	     * Should we not render a cancel button
	     * @type {Boolean|Function}
	     * @default false
	     */
	    noCancelButton: false,
	
	    /**
	     * The text on the save button
	     * @type {String}
	     * @default "Save"
	     */
	    save: null,
	
	    /**
	     * The text on the cancel button
	     * @type {String}
	     * @default "Cancel"
	     */
	    cancel: null,
	
	    /**
	     * To use button-error to style the submit button instead of button-primary.
	     * @type {Boolean|Function}
	     * @default false
	     */
	    danger: false,
	
	    /**
	     * A layout CSS class to add to the form
	     * @type {String|Function}
	     * @default ""
	     */
	    layout: '',
	
	    /**
	     * The step this form is in the context of a wizard
	     * @type {Number}
	     */
	    step: undefined,
	
	    /**
	     * The total numbers of steps the wizard this form is a part of has
	     * @type {Number}
	     */
	    totalSteps: undefined,
	
	    /**
	     * The form's title
	     * @type {String|Function}
	     */
	    title: null,
	
	    /**
	     * The form's subtitle
	     * @type {String|Function}
	     */
	    subtitle: null,
	
	    /**
	     * Auto-save the model when hitting save. Triggers a `saved` event when done
	     * @type {Boolean}
	     * @default false
	     */
	    autoSave: false,
	
	    /**
	     * Scroll to the top of the form on error
	     * @type {Boolean|Function}
	     * @default true
	     */
	    scrollOnError: true,
	
	    /**
	     * Show the error banner upon error
	     * @type {Boolean|Function}
	     * @default true
	     */
	    showErrors: true,
	
	    /**
	     * The form's scrollable area
	     * @type {String}
	     * @default ".o-form-content"
	     */
	    resizeSelector: '.o-form-content',
	
	    /**
	     * Sets whether or not the form shows the saving state when
	     * the model is saved.  Has no effect on setSavingState and clearSavingState as those are manual calls
	     * to trigger/clear the saving state.
	     * @name hasSavingState
	     * @memberof module:Okta.Form
	     * @type {Boolean}
	     * @default false
	     * @instance
	     */
	
	    /**
	     * Get an attribute value from options or instance.
	     * Prefer options value over instance value
	     * @param  {String} name Name of the attribute
	     * @param  {Object} defaultValue the default value to return if the attribute is not found
	     * @return {Object} The value
	     */
	    getAttribute: function getAttribute(name, defaultValue) {
	      var value = _.resultCtx(this.options, name, this);
	      if (_.isUndefined(value)) {
	        value = _.result(this, name);
	      }
	      return !_.isUndefined(value) ? value : defaultValue;
	    },
	
	    /**
	     * Does this form have a "read" mode
	     * @return {Boolean}
	     */
	    hasReadMode: function hasReadMode() {
	      return !!this.getAttribute('read');
	    },
	
	    /**
	     * Is this form in "read only" mode
	     * @return {Boolean}
	     */
	    isReadOnly: function isReadOnly() {
	      return !!this.getAttribute('readOnly');
	    },
	
	    /**
	     * Does this form have a button bar
	     * @return {Boolean}
	     */
	    hasButtonBar: function hasButtonBar() {
	      return !(this.getAttribute('noButtonBar') || this.isReadOnly());
	    },
	
	    render: function render() {
	
	      this.__readModeBar && this.__readModeBar.remove();
	      if (this.hasReadMode() && !this.isReadOnly()) {
	        var readModeBar = ReadModeBar.extend({
	          formTitle: this.getAttribute('title', '')
	        });
	        this.__readModeBar = this.add(readModeBar, '.o-form-title-bar').last();
	      }
	
	      var html = TemplateUtil.tpl(template)({
	        layout: this.getAttribute('layout', ''),
	        title: this.getAttribute('title', '', true),
	        subtitle: this.getAttribute('subtitle', '', true),
	        hasReadMode: this.hasReadMode()
	      });
	
	      this.$el.html(html);
	      delete this.template;
	
	      BaseView.prototype.render.apply(this, arguments);
	
	      this.__applyMode();
	
	      return this;
	    },
	
	    /**
	     * Changes form UI to indicate saving.  Disables all inputs and buttons.  Use this function if you have set
	     * hasSavingState to false on the the form
	     * @private
	     */
	    __setSavingState: function __setSavingState() {
	      this.model.trigger('form:set-saving-state');
	      this.$el.addClass('o-form-saving');
	    },
	
	    /**
	     * Changes form UI back to normal from the saving state.  Use this function if you are have set hasSavingState
	     * to false on the form
	     * @private
	     */
	    __clearSavingState: function __clearSavingState() {
	      this.model.trigger('form:clear-saving-state');
	      this.$el.removeClass('o-form-saving');
	    },
	
	    /**
	     * Toggles the visibility of the bottom button bar
	     * @private
	     */
	    __toggleToolbar: function __toggleToolbar() {
	      this.__toolbar && this.__toolbar.remove();
	      if (this.hasButtonBar() && this._editMode()) {
	        this.__toolbar = this.__createToolbar();
	        this.add(this.__toolbar, '');
	      }
	      this.trigger('resize');
	    },
	
	    /**
	     * Cancels this form
	     * - Reset the model to the previous state
	     * - Clears all errors
	     * - Triggers a `cancel` event
	     * - Sets the model to read mode (if applicable)
	     * @private
	     * @fires cancel
	     */
	    __cancel: function __cancel() {
	      /* eslint max-statements: [2, 12] */
	      var edit = this.model.get('__edit__');
	      this.model.clear({ silent: true });
	      var data;
	      if (this.model.sanitizeAttributes) {
	        data = this.model.sanitizeAttributes(this.__originalModel);
	      } else {
	        data = _.clone(this.__originalModel);
	      }
	      this.model.set(data, { silent: true });
	      this.trigger('cancel', this.model);
	      this.model.trigger('cache:clear');
	      if (edit) {
	        this.model.set('__edit__', false, { silent: true });
	        this.model.trigger('change:__edit__', this.model, false);
	      }
	      this.clearErrors();
	    },
	
	    /**
	     * Runs {@link module:Okta.Form#validate|validate} to check the model state.
	     * Triggers an "invalid" event on the model if validation fails
	     * @returns {Boolean}
	     */
	    isValid: function isValid() {
	      var res,
	          self = this;
	
	      function validateArray(arr) {
	        return _.reduce(arr, function (memo, fieldName) {
	          return _.extend(memo, self.model.validateField(fieldName));
	        }, {});
	      }
	
	      if (_.isUndefined(this.validate)) {
	        return this.model.isValid();
	      } else if (_.isFunction(this.validate)) {
	        res = this.validate();
	      } else if (_.isArray(this.validate)) {
	        res = validateArray(this.validate);
	      } else if (this.validate === 'local') {
	        res = validateArray(this.getInputs().map(function (input) {
	          return input.options.name;
	        }));
	      }
	
	      if (!_.isEmpty(res)) {
	        this.model.trigger('invalid', this.model, res);
	        return false;
	      } else {
	        return true;
	      }
	    },
	
	    /**
	     * A throttled function that saves the form not more than once every 100 ms
	     * Basically all this method does is trigger a `save` event
	     * @fires save
	     * @private
	     */
	    __save: function __save() {
	      this.clearErrors();
	      if (this.isValid()) {
	        this.trigger('save', this.model);
	      }
	    },
	
	    /**
	     * In the context of a wizard, go to previous state
	     * Technically all this method does is trigger a `previous` event
	     * @param  {Event} e
	     * @private
	     */
	    __previous: function __previous() {
	      this.trigger('previous', this.model);
	    },
	
	    /**
	     * Renders the form in the correct mode based on the model.
	     * @private
	     */
	    __applyMode: function __applyMode() {
	      this.clearErrors();
	      this.__toggleToolbar();
	
	      if (this._editMode()) {
	        this.$el.addClass('o-form-edit-mode');
	        this.$el.removeClass('o-form-read-mode');
	        this.$('.o-form-content').removeClass('rounded-btm-4');
	        this.focus();
	      } else {
	        this.$el.removeClass('o-form-edit-mode');
	        this.$el.addClass('o-form-read-mode');
	        this.$('.o-form-content').addClass('rounded-btm-4');
	      }
	    },
	
	    /**
	     * Is the form in edit mode
	     * @return {Boolean}
	     * @private
	     */
	    _editMode: function _editMode() {
	      return this.model.get('__edit__') || !this.hasReadMode();
	    },
	
	    /**
	     * Function can be overridden to alter error summary
	     * @param {Object} responseJSON
	     * @method
	     * @default _.identity
	     */
	    parseErrorMessage: _.identity,
	
	    /**
	     * Show an error message based on an XHR error
	     * @param  {Okta.BaseModel} model the model
	     * @param  {jqXHR} xhr The jQuery XmlHttpRequest Object
	     * @private
	     */
	    __showErrors: function __showErrors(model, resp, showBanner) {
	      this.trigger('error', model);
	
	      /* eslint max-statements: 0 */
	      if (this.getAttribute('showErrors')) {
	
	        var errorSummary;
	        var responseJSON = ErrorParser.getResponseJSON(resp);
	
	        // trigger events for field validation errors
	        var validationErrors = ErrorParser.parseFieldErrors(resp);
	        if (_.size(validationErrors)) {
	          _.each(validationErrors, function (errors, field) {
	            this.model.trigger('form:field-error', this.__errorFields[field] || field, _.map(errors, function (error) {
	              return (/^model\.validation/.test(error) ? StringUtil.localize(error, 'courage') : error
	              );
	            }));
	          }, this);
	        } else if (responseJSON && Array.isArray(responseJSON.errorCauses) && responseJSON.errorCauses.length > 0) {
	          //set errorSummary from first errorCause which is not field specific error
	          errorSummary = responseJSON.errorCauses[0].errorSummary;
	        } else {
	          //set errorSummary from top level errorSummary
	          responseJSON = this.parseErrorMessage(responseJSON);
	          errorSummary = responseJSON && responseJSON.errorSummary;
	        }
	
	        // show the error message
	        if (showBanner) {
	          this.$('.o-form-error-container').addClass('o-form-has-errors');
	          this.add(ErrorBanner, '.o-form-error-container', { options: { errorSummary: errorSummary } });
	        }
	
	        // slide to and focus on the error message
	        if (this.getAttribute('scrollOnError')) {
	          var $el = $('#' + this.id + ' .o-form-error-container');
	          $el.length && $('html, body').animate({ scrollTop: $el.offset().top }, 400);
	        }
	
	        this.model.trigger('form:resize');
	      }
	    },
	
	    /**
	     * Clears the error banner
	     * @private
	     */
	    clearErrors: function clearErrors() {
	      this.$('.o-form-error-container').removeClass('o-form-has-errors');
	      this.model.trigger('form:clear-errors');
	      this.model.trigger('form:resize');
	    },
	
	    /**
	     * Toggles between edit and read mode
	     */
	    toggle: function toggle() {
	      this.model.set('__edit__', !this.hasReadMode() || !this.model.get('__edit__'));
	      return this;
	    },
	
	    __addLayoutItem: function __addLayoutItem(input) {
	      if (InputFactory.supports(input)) {
	        this.addInput(input);
	      } else {
	        this.__addNonInputLayoutItem(input);
	      }
	    },
	
	    __addNonInputLayoutItem: function __addNonInputLayoutItem(item) {
	      var itemOptions = _.omit(item, 'type');
	      switch (item.type) {
	        case 'sectionTitle':
	          this.addSectionTitle(item.title, _.omit(itemOptions, 'title'));
	          break;
	        case 'divider':
	          this.addDivider(itemOptions);
	          break;
	        default:
	          throw new Error('unknown input: ' + item.type);
	      }
	    },
	
	    /**
	     * Adds a view to the buttons tool bar
	     * @param {Object} params parameterized button options
	     * @param {Object} options options to send to {@link module:Okta.View#add|View.add}
	     */
	    addButton: function addButton(params, options) {
	      this.__toolbar && this.__toolbar.addButton(params, options);
	      this.__buttons.push([params, options]);
	    },
	
	    /**
	     * Adds a divider
	     */
	    addDivider: function addDivider(options) {
	      this.add('<div class="okta-form-divider form-divider"></div>');
	      FormUtil.applyShowWhen(this.last(), options && options.showWhen);
	      FormUtil.applyToggleWhen(this.last(), options && options.toggleWhen);
	      return this;
	    },
	
	    /**
	     * Adds section header
	     * @param {String} title
	     */
	    addSectionTitle: function addSectionTitle(title, options) {
	      this.add(TemplateUtil.tpl('<h2 class="o-form-head">{{title}}</h2>')({ title: title }));
	      FormUtil.applyShowWhen(this.last(), options && options.showWhen);
	      FormUtil.applyToggleWhen(this.last(), options && options.toggleWhen);
	      return this;
	    },
	
	    /**
	     * Add a form input
	     * @param {Object} options Options to describe the input
	     * @param {String} options.type The input type.
	     * The options are: `text`, `textarea`, `select`, `checkbox`, `radio`,
	     * `password`, `number`, `textselect`, `date`, `grouppicker`, `su-orgspicker`
	     * `file/image`, `file/cert`, `checkboxset`, `list`, `group`, `zonepicker`
	     * @param {String} options.name The name of the model field this input mutates
	     * @param {String|Function} [options.label]
	     * The input label text.
	     * When passed as a function, will invoke the function (in the context of the {@link InputLabel})
	     * on render time, and use the returned value.
	     * @param {String} [options.sublabel] The input sub label text
	     * @param {String} [options.tooltip] A popover tooltip to be displayed next to the label
	     * @param {String} [options.placeholder] Placeholder text.
	     * @param {String} [options.explain] Explanation text to render below the input
	     * @param {Okta.View} [options.customExplain] A custom view to render below the input (deprecated)
	     * @param {Boolean} [options.disabled=false] Make this input disabled
	     * @param {Boolean} [options.wide=false] Use a wide input layout
	     * @param {Boolean} [options.label-top=false] position label on top of an input
	     * @param {Number} [options.multi] have multiple in-line inputs. useful when `input` is passed as an array of inputs
	     * @param {String} [options.errorField] The API error field here that maps to this input
	     * @param {Boolean} [options.inlineValidation=true] Validate input on focusout
	     * @param {String} [options.ariaLabel] Used to add aria-label attribute to the input when label is not present.
	      * @param {Object} [options.options]
	     * In the context of `radio` and `select`, a key/value set of options
	     *
	     * @param {Object} [options.params]
	     * Widget specific parameters. Varies per input.
	     *
	     * @param {BaseInput|Object[]} [options.input]
	     * - A custom input "class" or instance - preferably a **class**, so we can automagically assign the right
	     * parameters when initializing it
	     * - An array of input definition object literals (such as this one)
	     *
	     * @param {Object} [options.showWhen]
	     * Setting to define when to show (or hide) the input. The input is visible by default.
	     *
	     * @param {Object} [options.bindings]
	     * Bind a certain model attribute to a callback function, so the function is being called on render,
	     * and any time this model field changes.
	     * This is similar to `showWhen` but is not limited to toggling.
	     *
	     * @param {Function} [options.render]
	     * A post-render hook that will run upon render on InputWrapper
	     *
	     * @param {String|Function} className   A className to apply on the {@link InputWrapper}
	     *
	     * @param {Function} [options.initialize]
	     * An `initialize` function to run when initializing the {@link InputWrapper}
	     * Useful for state mutation on start time, and complex state logic
	     *
	     * @example
	     * // showhen: the field will be visible when `advanced` is set to `true`
	     * // and `mode` is set to `"ON"`.
	     * showWhen: {
	     *   'advanced': true,
	     *   'mode': function (value) {
	     *     return value == 'ON'; // this is identical to this.model.get('mode') == 'ON'
	     *   }
	     * }
	     *
	     * @example
	     * // bindings
	     * bindings: {
	     *   'status mode': function (status, mode) {
	     *      var labelView = this.getLabel();
	     *      if (status == 1) {
	     *        labelView.options.label = 'Something';
	     *      }
	     *      else {
	     *        labelView.options.label = mode;
	     *      }
	     *      labelView.render();
	     *   }
	     * }
	     */
	    addInput: function addInput(_options) {
	
	      _options = _.clone(_options);
	
	      FormUtil.validateInput(_options, this.model);
	
	      var inputsOptions = FormUtil.generateInputOptions(_options, this, this.__createInput).reverse();
	
	      // We need a local variable here to keep track
	      // as addInput can be called either directy or through the inputs array.
	      if (_.isEmpty(this.getInputs().toArray())) {
	        _.extend(inputsOptions[0], { validateOnlyIfDirty: true });
	      }
	      var inputs = _.map(inputsOptions, this.__createInput, this);
	
	      _.each(inputsOptions, function (input) {
	        if (input.errorField) {
	          this.__errorFields[input.errorField] = input.name;
	        }
	      }, this);
	
	      var options = {
	        inputId: _.last(inputs).options.inputId,
	        input: inputs,
	        multi: inputsOptions.length > 1 ? inputsOptions.length : undefined
	      };
	      _.extend(options, _.omit(this.options, 'input'), _.omit(_options, 'input'));
	
	      var inputWrapper = this.__createWrapper(options);
	      if (options.label !== false) {
	        inputWrapper.add(this.__createLabel(options));
	      }
	      inputWrapper.add(this._createContainer(options));
	      inputWrapper.type = options.type || options.input.type || 'custom';
	
	      var args = [inputWrapper].concat(_.drop(arguments, 1));
	      return this.add.apply(this, args);
	    },
	
	    /**
	     * @private
	     */
	    __createInput: function __createInput(options) {
	      options = _.pick(options, FormUtil.INPUT_OPTIONS);
	      return InputFactory.create(options);
	    },
	
	    /**
	     * @private
	     */
	    __createWrapper: function __createWrapper(options) {
	      options = _.pick(options, FormUtil.WRAPPER_OPTIONS);
	      return new InputWrapper(options);
	    },
	
	    /**
	     * @private
	     */
	    __createLabel: function __createLabel(options) {
	      options = _.pick(options, FormUtil.LABEL_OPTIONS);
	      return new InputLabel(options);
	    },
	
	    /**
	     * @private
	     */
	    _createContainer: function _createContainer(options) {
	      options = _.pick(options, FormUtil.CONTAINER_OPTIONS);
	      return new InputContainer(options);
	    },
	
	    /**
	     * Stores the current attributes of the model to a private property
	     * @param  {Okta.BaseModel} model The model
	     * @private
	     */
	    __saveModelState: function __saveModelState(model) {
	      this.__originalModel = model.clone().attributes;
	    },
	
	    /**
	     * @override
	     * @ignore
	     */
	    add: function add() {
	      var args = _.toArray(arguments);
	      typeof args[1] === 'undefined' && (args[1] = '> div.o-form-content > .o-form-fieldset-container');
	      return BaseView.prototype.add.apply(this, args);
	    },
	
	    /**
	     * Set the focus on the first input in the form
	     */
	    focus: function focus() {
	      var first = this.getInputs().first();
	      if (first && first.focus) {
	        first.focus();
	      }
	      return this;
	    },
	
	    /**
	     * Disable all inputs in the form
	     * @deprecated not currently in use
	     */
	    disable: function disable() {
	      this.invoke('disable');
	      return this;
	    },
	
	    /**
	     * Enable all inputs in the form
	     * @deprecated not currently in use
	     */
	    enable: function enable() {
	      this.invoke('enable');
	    },
	
	    /**
	     * Set the max-height for o-form-content class container within the form if a height is provided,
	     * otherwise, get its computed inner height
	     * @param {Number} the height in pixel to set for class o-form-content
	     * @return {Number}
	     */
	    contentHeight: function contentHeight(height) {
	      var content = this.$('.o-form-content');
	      if (_.isNumber(height)) {
	        content.css('max-height', height);
	      } else {
	        return content.height();
	      }
	    },
	
	    /**
	     * Get only the input children
	     * @return {InputWrapper[]} An underscore wrapped array of {@link InputWrapper} instances
	     */
	    getInputs: function getInputs() {
	      return _(this.filter(function (view) {
	        return view instanceof InputWrapper;
	      }));
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 583 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(529), __webpack_require__(520), __webpack_require__(528), __webpack_require__(564)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, TemplateUtil, Logger, BaseView, Util) {
	  /**
	   * @class InputContainer
	   * @private
	   *
	   * TODO: OKTA-80796
	   * Attention: Please change with caution since this is used in other places
	   */
	
	  var isABaseView = Util.isABaseView;
	
	  return BaseView.extend({
	
	    attributes: function attributes() {
	      return {
	        'data-se': 'o-form-input-container'
	      };
	    },
	
	    className: function className() {
	      var className = 'o-form-input';
	      if (this.options.wide) {
	        className += ' o-form-wide';
	      }
	      if (_.contains([1, 2, 3, 4], this.options.multi)) {
	        className += ' o-form-multi-input-' + this.options.multi;
	        if (_.isArray(this.options.input)) {
	          var inputGroup = _.find(this.options.input, function (input) {
	            return _.contains(['text+select', 'select+text'], input.options.type);
	          });
	          inputGroup && (className += ' o-form-multi-input-group-' + this.options.multi);
	        }
	      }
	      return className;
	    },
	
	    _getNames: function _getNames() {
	      /*eslint complexity: 0 */
	      var names = _.isArray(this.options.name) ? this.options.name : [this.options.name];
	      if (this.options.type == 'group') {
	        names.push.apply(names, _.pluck(this.options.input[0].options.params.inputs, 'name'));
	      } else if (_.isArray(this.options.name)) {
	        if (this.options.input && this.options.input.options && this.options.input.options.name) {
	          names.push(this.options.input.options.name);
	        }
	      } else if (this.options.input) {
	        if (_.isArray(this.options.input)) {
	          _.each(this.options.input, function (inputItem) {
	            names.push(inputItem.options.name);
	          });
	        } else {
	          names.push(this.options.input.options.name);
	        }
	      }
	      return _.uniq(_.compact(names));
	    },
	
	    constructor: function constructor() {
	      /* eslint max-statements: [2, 18] */
	      BaseView.apply(this, arguments);
	
	      // we want to append the input *before* the explain text
	      if (this.options.input) {
	        if (_.isArray(this.options.input)) {
	          _.each(this.options.input, function (inputItem) {
	            this.add(inputItem, { prepend: true });
	          }, this);
	        } else {
	          this.add(this.options.input, { prepend: true });
	        }
	      }
	
	      this.__setExplain(this.options);
	
	      var names = this._getNames();
	
	      this.listenTo(this.model, 'form:field-error', function (name, errors) {
	        if (_.contains(names, name)) {
	          this.__setError(errors);
	        }
	      });
	
	      this.listenTo(this.model, 'form:clear-errors change:' + names.join(' change:'), this.__clearError);
	      this.listenTo(this.model, 'form:clear-error:' + names.join(' form:clear-error:'), this.__clearError);
	
	      if (_.resultCtx(this.options, 'autoRender', this)) {
	        this.listenTo(this.model, 'change:' + this.options.name, this.render);
	      }
	
	      this.__errorState = false;
	    },
	
	    /**
	     * Populates the explain on the input container (if it exists). There are
	     * two ways to use this:
	     * 1. Raw text - wraps in the correct html template
	     * 2. Custom html
	     *    - pass in a View class (preferred)
	     *    - pass in an instance of a View
	     * Some additional notes:
	     * - You can pass a function that returns any of the above
	     * - This maintains support for the deprecated "customExplain" property
	     *   that was used before. This pattern is superseded by explain, so use
	     *   that instead.
	     * @private
	     */
	    __setExplain: function __setExplain(options) {
	      var explain;
	
	      // Deprecated - if you need custom html, use explain instead
	      if (options.customExplain) {
	        Logger.warn('Deprecated - use explain instead of customExplain');
	        this.add(this.options.customExplain);
	        return;
	      }
	
	      explain = options.explain;
	      if (_.isFunction(explain) && !isABaseView(explain)) {
	        explain = _.resultCtx(this.options, 'explain', this);
	      }
	      if (!explain) {
	        return;
	      }
	
	      if (isABaseView(explain)) {
	        this.template = '<p class="o-form-explain"></p>';
	        this.add(explain, '.o-form-explain');
	      } else {
	        this.template = '<p class="o-form-explain">{{explain}}</p>';
	      }
	    },
	
	    /**
	     * Highlight the input as invalid (validation failed)
	     * Adds an explaination message of the error
	     * @private
	     */
	    __setError: function __setError(errors) {
	
	      this.__errorState = true;
	      this.$el.addClass('o-form-has-errors');
	
	      var tmpl = ['<p class="okta-form-input-error o-form-input-error o-form-explain" role="alert">', '<span class="icon icon-16 error-16-small"></span>', '{{text}}', '</p>'].join('');
	
	      var html = TemplateUtil.tpl(tmpl)({ text: errors.join(', ') });
	      var $elExplain = this.$('.o-form-explain').not('.o-form-input-error').first();
	
	      if ($elExplain.length) {
	        $elExplain.before(html);
	      } else {
	        this.$el.append(html);
	      }
	    },
	
	    /**
	     * Un-highlight the input and remove explaination text
	     * @private
	     */
	    __clearError: function __clearError() {
	      if (this.__errorState) {
	        this.$('.o-form-input-error').remove();
	        this.$el.removeClass('o-form-has-errors');
	        this.__errorState = false;
	        _.defer(_.bind(function () {
	          this.model.trigger('form:resize');
	        }, this));
	      }
	    },
	
	    focus: function focus() {
	      this.each(function (view) {
	        if (view.focus) {
	          return view.focus();
	        }
	      });
	
	      return this;
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 584 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/* eslint max-params: 0, complexity: 0, max-statements: 0 */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(585)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, InputRegistry) {
	
	  function createInput(Input, options) {
	    if (InputRegistry.isBaseInput(Input)) {
	      return Input.prototype ? new Input(_.omit(options, 'input')) : Input;
	    } else {
	      return Input;
	    }
	  }
	
	  function create(options) {
	    options = _.clone(options);
	    if (options.input) {
	      return createInput(options.input, options);
	    }
	    var Input = InputRegistry.get(options);
	    if (!Input) {
	      throw new Error('unknown input: ' + options.type);
	    }
	    return createInput(Input, options);
	  }
	
	  function supports(options) {
	    return !!options.input || !!InputRegistry.get(options);
	  }
	
	  return {
	    create: create,
	    supports: supports
	  };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 585 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_) {
	  var registry = {};
	
	  function isBaseInput(input) {
	    if (_.isFunction(input)) {
	      return _.isFunction(input.prototype.editMode) && _.isFunction(input.prototype.readMode);
	    } else {
	      return _.isObject(input) && _.isFunction(input.editMode) && _.isFunction(input.readMode);
	    }
	  }
	
	  /**
	   * @class module:Okta.internal.views.forms.helpers.InputRegistry
	   */
	  return (/** @lends module:Okta.internal.views.forms.helpers.InputRegistry */{
	      isBaseInput: isBaseInput,
	
	      /**
	       * Register a form input
	       * @param {String} type string identifier for the input
	       * @param {BaseInput} input the input to register
	       */
	      register: function register(type, input) {
	        registry[type] = input;
	      },
	
	      /**
	       * Get a form input by type
	       * @param {Object} options input definition
	       * @param {String} options.type string identifier for the input
	       * @return {BaseInput} a matching input
	       */
	      get: function get(options) {
	        var input = registry[options.type];
	        return input && (isBaseInput(input) ? input : input(options));
	      },
	
	      /**
	       * Unregister an input type
	       * @param {String} type
	       */
	      unregister: function unregister(type) {
	        delete registry[type];
	      }
	    }
	  );
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 586 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(529), __webpack_require__(528), __webpack_require__(587)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, TemplateUtil, BaseView) {
	
	  /**
	   * @class InputLabel
	   * @extends {Okta.View}
	   * @private
	   * The input's label.
	   */
	  return BaseView.extend({
	
	    className: 'okta-form-label o-form-label',
	
	    attributes: {
	      'data-se': 'o-form-label'
	    },
	
	    /**
	     * @constructor
	     * @param  {Object} options options hash
	     * @param  {String} [options.type] Input type
	     * @param  {String|Function} [options.label] Label text
	     * @param  {String|Function} [options.sublabel] Sub label text
	     * @param  {String|Function} [options.tooltip] Tooltip text
	     * @param  {String|Function} [options.inputId] Id of the inputs
	     * @param  {String|Function} [options.id] Id of the inputs
	     */
	    constructor: function constructor(options) {
	      /* eslint max-statements: [2, 16] complexity: [2, 7]*/
	      _.defaults(options, { inputId: options.id });
	      delete options.id;
	
	      BaseView.apply(this, arguments);
	
	      var template;
	      if (this._isLabelView(options.label)) {
	        template = '<label for="{{inputId}}"></label>';
	      } else if (_.contains(['radio', 'checkbox'], options.type) || !options.label) {
	        template = '{{label}}';
	      } else {
	        //space added in the end of the label to avoid selecting label text with double click in read mode
	        template = '<label for="{{inputId}}">{{label}}&nbsp;</label>';
	      }
	      if (options.sublabel) {
	        template += '<span class="o-form-explain">{{sublabel}}</span>';
	      }
	      if (options.tooltip) {
	        if (_.isString(options.tooltip)) {
	          options.tooltip = {
	            text: options.tooltip
	          };
	        }
	        template += '<span class="o-form-tooltip icon-16 icon-only form-help-16" title="{{tooltip.text}}"></span>';
	      }
	      this.template = TemplateUtil.tpl(template);
	    },
	
	    getTemplateData: function getTemplateData() {
	      var options = { label: '' };
	      _.each(['inputId', 'label', 'sublabel', 'tooltip'], function (option) {
	        options[option] = _.resultCtx(this.options, option, this);
	      }, this);
	
	      return options;
	    },
	
	    _isLabelView: function _isLabelView(label) {
	      return !_.isUndefined(label) && label instanceof BaseView;
	    },
	
	    postRender: function postRender() {
	      var options = this.getTemplateData();
	      if (this._isLabelView(options.label)) {
	        this.removeChildren();
	        this.add(options.label, 'label');
	      }
	
	      if (options.tooltip) {
	        this.$('.o-form-tooltip').qtip(_.extend({
	          style: { classes: 'qtip-custom qtip-shadow' },
	          position: {
	            my: 'bottom left',
	            at: 'top center'
	          },
	          hide: { fixed: true },
	          show: { delay: 0 }
	        }, options.tooltip.options));
	      }
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 587 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof2 = __webpack_require__(334);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * qTip2 - Pretty powerful tooltips - v3.0.3-5-g
	 * http://qtip2.com
	 *
	 * Copyright (c) 2017 
	 * Released under the MIT licenses
	 * http://jquery.org/license
	 *
	 * Date: Wed May 24 2017 01:22 UTC+0000
	 * Plugins: tips modal viewport svg imagemap ie6
	 * Styles: core basic css3
	 */
	/*global window: false, jQuery: false, console: false, define: false */
	
	/* Cache window, document, undefined */
	(function (window, document, undefined) {
	
		// Uses AMD or browser globals to create a jQuery plugin.
		(function (factory) {
			"use strict";
	
			if (true) {
				!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(402)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
			} else if (jQuery && !jQuery.fn.qtip) {
				factory(jQuery);
			}
		})(function ($) {
			"use strict"; // Enable ECMAScript "strict" operation for this function. See more: http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/
	
			; // Munge the primitives - Paul Irish tip
			var TRUE = true,
			    FALSE = false,
			    NULL = null,
	
	
			// Common variables
			X = 'x',
			    Y = 'y',
			    WIDTH = 'width',
			    HEIGHT = 'height',
	
	
			// Positioning sides
			TOP = 'top',
			    LEFT = 'left',
			    BOTTOM = 'bottom',
			    RIGHT = 'right',
			    CENTER = 'center',
	
	
			// Position adjustment types
			FLIP = 'flip',
			    FLIPINVERT = 'flipinvert',
			    SHIFT = 'shift',
	
	
			// Shortcut vars
			QTIP,
			    PROTOTYPE,
			    CORNER,
			    CHECKS,
			    PLUGINS = {},
			    NAMESPACE = 'qtip',
			    ATTR_HAS = 'data-hasqtip',
			    ATTR_ID = 'data-qtip-id',
			    WIDGET = ['ui-widget', 'ui-tooltip'],
			    SELECTOR = '.' + NAMESPACE,
			    INACTIVE_EVENTS = 'click dblclick mousedown mouseup mousemove mouseleave mouseenter'.split(' '),
			    CLASS_FIXED = NAMESPACE + '-fixed',
			    CLASS_DEFAULT = NAMESPACE + '-default',
			    CLASS_FOCUS = NAMESPACE + '-focus',
			    CLASS_HOVER = NAMESPACE + '-hover',
			    CLASS_DISABLED = NAMESPACE + '-disabled',
			    replaceSuffix = '_replacedByqTip',
			    oldtitle = 'oldtitle',
			    trackingBound,
	
	
			// Browser detection
			BROWSER = {
				/*
	    * IE version detection
	    *
	    * Adapted from: http://ajaxian.com/archives/attack-of-the-ie-conditional-comment
	    * Credit to James Padolsey for the original implemntation!
	    */
				ie: function () {
					/* eslint-disable no-empty */
					var v, i;
					for (v = 4, i = document.createElement('div'); (i.innerHTML = '<!--[if gt IE ' + v + ']><i></i><![endif]-->') && i.getElementsByTagName('i')[0]; v += 1) {}
					return v > 4 ? v : NaN;
					/* eslint-enable no-empty */
				}(),
	
				/*
	    * iOS version detection
	    */
				iOS: parseFloat(('' + (/CPU.*OS ([0-9_]{1,5})|(CPU like).*AppleWebKit.*Mobile/i.exec(navigator.userAgent) || [0, ''])[1]).replace('undefined', '3_2').replace('_', '.').replace('_', '')) || FALSE
			};
			;function QTip(target, options, id, attr) {
				// Elements and ID
				this.id = id;
				this.target = target;
				this.tooltip = NULL;
				this.elements = { target: target };
	
				// Internal constructs
				this._id = NAMESPACE + '-' + id;
				this.timers = { img: {} };
				this.options = options;
				this.plugins = {};
	
				// Cache object
				this.cache = {
					event: {},
					target: $(),
					disabled: FALSE,
					attr: attr,
					onTooltip: FALSE,
					lastClass: ''
				};
	
				// Set the initial flags
				this.rendered = this.destroyed = this.disabled = this.waiting = this.hiddenDuringWait = this.positioning = this.triggering = FALSE;
			}
			PROTOTYPE = QTip.prototype;
	
			PROTOTYPE._when = function (deferreds) {
				return $.when.apply($, deferreds);
			};
	
			PROTOTYPE.render = function (show) {
				if (this.rendered || this.destroyed) {
					return this;
				} // If tooltip has already been rendered, exit
	
				var self = this,
				    options = this.options,
				    cache = this.cache,
				    elements = this.elements,
				    text = options.content.text,
				    title = options.content.title,
				    button = options.content.button,
				    posOptions = options.position,
				    deferreds = [];
	
				// Add ARIA attributes to target
				$.attr(this.target[0], 'aria-describedby', this._id);
	
				// Create public position object that tracks current position corners
				cache.posClass = this._createPosClass((this.position = { my: posOptions.my, at: posOptions.at }).my);
	
				// Create tooltip element
				this.tooltip = elements.tooltip = $('<div/>', {
					'id': this._id,
					'class': [NAMESPACE, CLASS_DEFAULT, options.style.classes, cache.posClass].join(' '),
					'width': options.style.width || '',
					'height': options.style.height || '',
					'tracking': posOptions.target === 'mouse' && posOptions.adjust.mouse,
	
					/* ARIA specific attributes */
					'role': 'alert',
					'aria-live': 'polite',
					'aria-atomic': FALSE,
					'aria-describedby': this._id + '-content',
					'aria-hidden': TRUE
				}).toggleClass(CLASS_DISABLED, this.disabled).attr(ATTR_ID, this.id).data(NAMESPACE, this).appendTo(posOptions.container).append(
				// Create content element
				elements.content = $('<div />', {
					'class': NAMESPACE + '-content',
					'id': this._id + '-content',
					'aria-atomic': TRUE
				}));
	
				// Set rendered flag and prevent redundant reposition calls for now
				this.rendered = -1;
				this.positioning = TRUE;
	
				// Create title...
				if (title) {
					this._createTitle();
	
					// Update title only if its not a callback (called in toggle if so)
					if (!$.isFunction(title)) {
						deferreds.push(this._updateTitle(title, FALSE));
					}
				}
	
				// Create button
				if (button) {
					this._createButton();
				}
	
				// Set proper rendered flag and update content if not a callback function (called in toggle)
				if (!$.isFunction(text)) {
					deferreds.push(this._updateContent(text, FALSE));
				}
				this.rendered = TRUE;
	
				// Setup widget classes
				this._setWidget();
	
				// Initialize 'render' plugins
				$.each(PLUGINS, function (name) {
					var instance;
					if (this.initialize === 'render' && (instance = this(self))) {
						self.plugins[name] = instance;
					}
				});
	
				// Unassign initial events and assign proper events
				this._unassignEvents();
				this._assignEvents();
	
				// When deferreds have completed
				this._when(deferreds).then(function () {
					// tooltiprender event
					self._trigger('render');
	
					// Reset flags
					self.positioning = FALSE;
	
					// Show tooltip if not hidden during wait period
					if (!self.hiddenDuringWait && (options.show.ready || show)) {
						self.toggle(TRUE, cache.event, FALSE);
					}
					self.hiddenDuringWait = FALSE;
				});
	
				// Expose API
				QTIP.api[this.id] = this;
	
				return this;
			};
	
			PROTOTYPE.destroy = function (immediate) {
				// Set flag the signify destroy is taking place to plugins
				// and ensure it only gets destroyed once!
				if (this.destroyed) {
					return this.target;
				}
	
				function process() {
					if (this.destroyed) {
						return;
					}
					this.destroyed = TRUE;
	
					var target = this.target,
					    title = target.attr(oldtitle),
					    timer;
	
					// Destroy tooltip if rendered
					if (this.rendered) {
						this.tooltip.stop(1, 0).find('*').remove().end().remove();
					}
	
					// Destroy all plugins
					$.each(this.plugins, function () {
						this.destroy && this.destroy();
					});
	
					// Clear timers
					for (timer in this.timers) {
						if (this.timers.hasOwnProperty(timer)) {
							clearTimeout(this.timers[timer]);
						}
					}
	
					// Remove api object and ARIA attributes
					target.removeData(NAMESPACE).removeAttr(ATTR_ID).removeAttr(ATTR_HAS).removeAttr('aria-describedby');
	
					// Reset old title attribute if removed
					if (this.options.suppress && title) {
						target.attr('title', title).removeAttr(oldtitle);
					}
	
					// Remove qTip events associated with this API
					this._unassignEvents();
	
					// Remove ID from used id objects, and delete object references
					// for better garbage collection and leak protection
					this.options = this.elements = this.cache = this.timers = this.plugins = this.mouse = NULL;
	
					// Delete epoxsed API object
					delete QTIP.api[this.id];
				}
	
				// If an immediate destroy is needed
				if ((immediate !== TRUE || this.triggering === 'hide') && this.rendered) {
					this.tooltip.one('tooltiphidden', $.proxy(process, this));
					!this.triggering && this.hide();
				}
	
				// If we're not in the process of hiding... process
				else {
						process.call(this);
					}
	
				return this.target;
			};
			;function invalidOpt(a) {
				return a === NULL || $.type(a) !== 'object';
			}
	
			function invalidContent(c) {
				return !($.isFunction(c) || c && c.attr || c.length || $.type(c) === 'object' && (c.jquery || c.then));
			}
	
			// Option object sanitizer
			function sanitizeOptions(opts) {
				var content, text, ajax, once;
	
				if (invalidOpt(opts)) {
					return FALSE;
				}
	
				if (invalidOpt(opts.metadata)) {
					opts.metadata = { type: opts.metadata };
				}
	
				if ('content' in opts) {
					content = opts.content;
	
					if (invalidOpt(content) || content.jquery || content.done) {
						text = invalidContent(content) ? FALSE : content;
						content = opts.content = {
							text: text
						};
					} else {
						text = content.text;
					}
	
					// DEPRECATED - Old content.ajax plugin functionality
					// Converts it into the proper Deferred syntax
					if ('ajax' in content) {
						ajax = content.ajax;
						once = ajax && ajax.once !== FALSE;
						delete content.ajax;
	
						content.text = function (event, api) {
							var loading = text || $(this).attr(api.options.content.attr) || 'Loading...',
							    deferred = $.ajax($.extend({}, ajax, { context: api })).then(ajax.success, NULL, ajax.error).then(function (newContent) {
								if (newContent && once) {
									api.set('content.text', newContent);
								}
								return newContent;
							}, function (xhr, status, error) {
								if (api.destroyed || xhr.status === 0) {
									return;
								}
								api.set('content.text', status + ': ' + error);
							});
	
							return !once ? (api.set('content.text', loading), deferred) : loading;
						};
					}
	
					if ('title' in content) {
						if ($.isPlainObject(content.title)) {
							content.button = content.title.button;
							content.title = content.title.text;
						}
	
						if (invalidContent(content.title || FALSE)) {
							content.title = FALSE;
						}
					}
				}
	
				if ('position' in opts && invalidOpt(opts.position)) {
					opts.position = { my: opts.position, at: opts.position };
				}
	
				if ('show' in opts && invalidOpt(opts.show)) {
					opts.show = opts.show.jquery ? { target: opts.show } : opts.show === TRUE ? { ready: TRUE } : { event: opts.show };
				}
	
				if ('hide' in opts && invalidOpt(opts.hide)) {
					opts.hide = opts.hide.jquery ? { target: opts.hide } : { event: opts.hide };
				}
	
				if ('style' in opts && invalidOpt(opts.style)) {
					opts.style = { classes: opts.style };
				}
	
				// Sanitize plugin options
				$.each(PLUGINS, function () {
					this.sanitize && this.sanitize(opts);
				});
	
				return opts;
			}
	
			// Setup builtin .set() option checks
			CHECKS = PROTOTYPE.checks = {
				builtin: {
					// Core checks
					'^id$': function id$(obj, o, v, prev) {
						var id = v === TRUE ? QTIP.nextid : v,
						    newId = NAMESPACE + '-' + id;
	
						if (id !== FALSE && id.length > 0 && !$('#' + newId).length) {
							this._id = newId;
	
							if (this.rendered) {
								this.tooltip[0].id = this._id;
								this.elements.content[0].id = this._id + '-content';
								this.elements.title[0].id = this._id + '-title';
							}
						} else {
							obj[o] = prev;
						}
					},
					'^prerender': function prerender(obj, o, v) {
						v && !this.rendered && this.render(this.options.show.ready);
					},
	
					// Content checks
					'^content.text$': function contentText$(obj, o, v) {
						this._updateContent(v);
					},
					'^content.attr$': function contentAttr$(obj, o, v, prev) {
						if (this.options.content.text === this.target.attr(prev)) {
							this._updateContent(this.target.attr(v));
						}
					},
					'^content.title$': function contentTitle$(obj, o, v) {
						// Remove title if content is null
						if (!v) {
							return this._removeTitle();
						}
	
						// If title isn't already created, create it now and update
						v && !this.elements.title && this._createTitle();
						this._updateTitle(v);
					},
					'^content.button$': function contentButton$(obj, o, v) {
						this._updateButton(v);
					},
					'^content.title.(text|button)$': function contentTitleTextButton$(obj, o, v) {
						this.set('content.' + o, v); // Backwards title.text/button compat
					},
	
					// Position checks
					'^position.(my|at)$': function positionMyAt$(obj, o, v) {
						if ('string' === typeof v) {
							this.position[o] = obj[o] = new CORNER(v, o === 'at');
						}
					},
					'^position.container$': function positionContainer$(obj, o, v) {
						this.rendered && this.tooltip.appendTo(v);
					},
	
					// Show checks
					'^show.ready$': function showReady$(obj, o, v) {
						v && (!this.rendered && this.render(TRUE) || this.toggle(TRUE));
					},
	
					// Style checks
					'^style.classes$': function styleClasses$(obj, o, v, p) {
						this.rendered && this.tooltip.removeClass(p).addClass(v);
					},
					'^style.(width|height)': function styleWidthHeight(obj, o, v) {
						this.rendered && this.tooltip.css(o, v);
					},
					'^style.widget|content.title': function styleWidgetContentTitle() {
						this.rendered && this._setWidget();
					},
					'^style.def': function styleDef(obj, o, v) {
						this.rendered && this.tooltip.toggleClass(CLASS_DEFAULT, !!v);
					},
	
					// Events check
					'^events.(render|show|move|hide|focus|blur)$': function eventsRenderShowMoveHideFocusBlur$(obj, o, v) {
						this.rendered && this.tooltip[($.isFunction(v) ? '' : 'un') + 'bind']('tooltip' + o, v);
					},
	
					// Properties which require event reassignment
					'^(show|hide|position).(event|target|fixed|inactive|leave|distance|viewport|adjust)': function showHidePositionEventTargetFixedInactiveLeaveDistanceViewportAdjust() {
						if (!this.rendered) {
							return;
						}
	
						// Set tracking flag
						var posOptions = this.options.position;
						this.tooltip.attr('tracking', posOptions.target === 'mouse' && posOptions.adjust.mouse);
	
						// Reassign events
						this._unassignEvents();
						this._assignEvents();
					}
				}
			};
	
			// Dot notation converter
			function convertNotation(options, notation) {
				var i = 0,
				    obj,
				    option = options,
	
	
				// Split notation into array
				levels = notation.split('.');
	
				// Loop through
				while (option = option[levels[i++]]) {
					if (i < levels.length) {
						obj = option;
					}
				}
	
				return [obj || options, levels.pop()];
			}
	
			PROTOTYPE.get = function (notation) {
				if (this.destroyed) {
					return this;
				}
	
				var o = convertNotation(this.options, notation.toLowerCase()),
				    result = o[0][o[1]];
	
				return result.precedance ? result.string() : result;
			};
	
			function setCallback(notation, args) {
				var category, rule, match;
	
				for (category in this.checks) {
					if (!this.checks.hasOwnProperty(category)) {
						continue;
					}
	
					for (rule in this.checks[category]) {
						if (!this.checks[category].hasOwnProperty(rule)) {
							continue;
						}
	
						if (match = new RegExp(rule, 'i').exec(notation)) {
							args.push(match);
	
							if (category === 'builtin' || this.plugins[category]) {
								this.checks[category][rule].apply(this.plugins[category] || this, args);
							}
						}
					}
				}
			}
	
			var rmove = /^position\.(my|at|adjust|target|container|viewport)|style|content|show\.ready/i,
			    rrender = /^prerender|show\.ready/i;
	
			PROTOTYPE.set = function (option, value) {
				if (this.destroyed) {
					return this;
				}
	
				var rendered = this.rendered,
				    reposition = FALSE,
				    options = this.options,
				    name;
	
				// Convert singular option/value pair into object form
				if ('string' === typeof option) {
					name = option;option = {};option[name] = value;
				} else {
					option = $.extend({}, option);
				}
	
				// Set all of the defined options to their new values
				$.each(option, function (notation, val) {
					if (rendered && rrender.test(notation)) {
						delete option[notation];return;
					}
	
					// Set new obj value
					var obj = convertNotation(options, notation.toLowerCase()),
					    previous;
					previous = obj[0][obj[1]];
					obj[0][obj[1]] = val && val.nodeType ? $(val) : val;
	
					// Also check if we need to reposition
					reposition = rmove.test(notation) || reposition;
	
					// Set the new params for the callback
					option[notation] = [obj[0], obj[1], val, previous];
				});
	
				// Re-sanitize options
				sanitizeOptions(options);
	
				/*
	    * Execute any valid callbacks for the set options
	    * Also set positioning flag so we don't get loads of redundant repositioning calls.
	    */
				this.positioning = TRUE;
				$.each(option, $.proxy(setCallback, this));
				this.positioning = FALSE;
	
				// Update position if needed
				if (this.rendered && this.tooltip[0].offsetWidth > 0 && reposition) {
					this.reposition(options.position.target === 'mouse' ? NULL : this.cache.event);
				}
	
				return this;
			};
			;PROTOTYPE._update = function (content, element) {
				var self = this,
				    cache = this.cache;
	
				// Make sure tooltip is rendered and content is defined. If not return
				if (!this.rendered || !content) {
					return FALSE;
				}
	
				// Use function to parse content
				if ($.isFunction(content)) {
					content = content.call(this.elements.target, cache.event, this) || '';
				}
	
				// Handle deferred content
				if ($.isFunction(content.then)) {
					cache.waiting = TRUE;
					return content.then(function (c) {
						cache.waiting = FALSE;
						return self._update(c, element);
					}, NULL, function (e) {
						return self._update(e, element);
					});
				}
	
				// If content is null... return false
				if (content === FALSE || !content && content !== '') {
					return FALSE;
				}
	
				// Append new content if its a DOM array and show it if hidden
				if (content.jquery && content.length > 0) {
					element.empty().append(content.css({ display: 'block', visibility: 'visible' }));
				}
	
				// Content is a regular string, insert the new content
				else {
						element.html(content);
					}
	
				// Wait for content to be loaded, and reposition
				return this._waitForContent(element).then(function (images) {
					if (self.rendered && self.tooltip[0].offsetWidth > 0) {
						self.reposition(cache.event, !images.length);
					}
				});
			};
	
			PROTOTYPE._waitForContent = function (element) {
				var cache = this.cache;
	
				// Set flag
				cache.waiting = TRUE;
	
				// If imagesLoaded is included, ensure images have loaded and return promise
				return ($.fn.imagesLoaded ? element.imagesLoaded() : new $.Deferred().resolve([])).done(function () {
					cache.waiting = FALSE;
				}).promise();
			};
	
			PROTOTYPE._updateContent = function (content, reposition) {
				this._update(content, this.elements.content, reposition);
			};
	
			PROTOTYPE._updateTitle = function (content, reposition) {
				if (this._update(content, this.elements.title, reposition) === FALSE) {
					this._removeTitle(FALSE);
				}
			};
	
			PROTOTYPE._createTitle = function () {
				var elements = this.elements,
				    id = this._id + '-title';
	
				// Destroy previous title element, if present
				if (elements.titlebar) {
					this._removeTitle();
				}
	
				// Create title bar and title elements
				elements.titlebar = $('<div />', {
					'class': NAMESPACE + '-titlebar ' + (this.options.style.widget ? createWidgetClass('header') : '')
				}).append(elements.title = $('<div />', {
					'id': id,
					'class': NAMESPACE + '-title',
					'aria-atomic': TRUE
				})).insertBefore(elements.content)
	
				// Button-specific events
				.delegate('.qtip-close', 'mousedown keydown mouseup keyup mouseout', function (event) {
					$(this).toggleClass('ui-state-active ui-state-focus', event.type.substr(-4) === 'down');
				}).delegate('.qtip-close', 'mouseover mouseout', function (event) {
					$(this).toggleClass('ui-state-hover', event.type === 'mouseover');
				});
	
				// Create button if enabled
				if (this.options.content.button) {
					this._createButton();
				}
			};
	
			PROTOTYPE._removeTitle = function (reposition) {
				var elements = this.elements;
	
				if (elements.title) {
					elements.titlebar.remove();
					elements.titlebar = elements.title = elements.button = NULL;
	
					// Reposition if enabled
					if (reposition !== FALSE) {
						this.reposition();
					}
				}
			};
			;PROTOTYPE._createPosClass = function (my) {
				return NAMESPACE + '-pos-' + (my || this.options.position.my).abbrev();
			};
	
			PROTOTYPE.reposition = function (event, effect) {
				if (!this.rendered || this.positioning || this.destroyed) {
					return this;
				}
	
				// Set positioning flag
				this.positioning = TRUE;
	
				var cache = this.cache,
				    tooltip = this.tooltip,
				    posOptions = this.options.position,
				    target = posOptions.target,
				    my = posOptions.my,
				    at = posOptions.at,
				    viewport = posOptions.viewport,
				    container = posOptions.container,
				    adjust = posOptions.adjust,
				    method = adjust.method.split(' '),
				    tooltipWidth = tooltip.outerWidth(FALSE),
				    tooltipHeight = tooltip.outerHeight(FALSE),
				    targetWidth = 0,
				    targetHeight = 0,
				    type = tooltip.css('position'),
				    position = { left: 0, top: 0 },
				    visible = tooltip[0].offsetWidth > 0,
				    isScroll = event && event.type === 'scroll',
				    win = $(window),
				    doc = container[0].ownerDocument,
				    mouse = this.mouse,
				    pluginCalculations,
				    offset,
				    adjusted,
				    newClass;
	
				// Check if absolute position was passed
				if ($.isArray(target) && target.length === 2) {
					// Force left top and set position
					at = { x: LEFT, y: TOP };
					position = { left: target[0], top: target[1] };
				}
	
				// Check if mouse was the target
				else if (target === 'mouse') {
						// Force left top to allow flipping
						at = { x: LEFT, y: TOP };
	
						// Use the mouse origin that caused the show event, if distance hiding is enabled
						if ((!adjust.mouse || this.options.hide.distance) && cache.origin && cache.origin.pageX) {
							event = cache.origin;
						}
	
						// Use cached event for resize/scroll events
						else if (!event || event && (event.type === 'resize' || event.type === 'scroll')) {
								event = cache.event;
							}
	
							// Otherwise, use the cached mouse coordinates if available
							else if (mouse && mouse.pageX) {
									event = mouse;
								}
	
						// Calculate body and container offset and take them into account below
						if (type !== 'static') {
							position = container.offset();
						}
						if (doc.body.offsetWidth !== (window.innerWidth || doc.documentElement.clientWidth)) {
							offset = $(document.body).offset();
						}
	
						// Use event coordinates for position
						position = {
							left: event.pageX - position.left + (offset && offset.left || 0),
							top: event.pageY - position.top + (offset && offset.top || 0)
						};
	
						// Scroll events are a pain, some browsers
						if (adjust.mouse && isScroll && mouse) {
							position.left -= (mouse.scrollX || 0) - win.scrollLeft();
							position.top -= (mouse.scrollY || 0) - win.scrollTop();
						}
					}
	
					// Target wasn't mouse or absolute...
					else {
							// Check if event targetting is being used
							if (target === 'event') {
								if (event && event.target && event.type !== 'scroll' && event.type !== 'resize') {
									cache.target = $(event.target);
								} else if (!event.target) {
									cache.target = this.elements.target;
								}
							} else if (target !== 'event') {
								cache.target = $(target.jquery ? target : this.elements.target);
							}
							target = cache.target;
	
							// Parse the target into a jQuery object and make sure there's an element present
							target = $(target).eq(0);
							if (target.length === 0) {
								return this;
							}
	
							// Check if window or document is the target
							else if (target[0] === document || target[0] === window) {
									targetWidth = BROWSER.iOS ? window.innerWidth : target.width();
									targetHeight = BROWSER.iOS ? window.innerHeight : target.height();
	
									if (target[0] === window) {
										position = {
											top: (viewport || target).scrollTop(),
											left: (viewport || target).scrollLeft()
										};
									}
								}
	
								// Check if the target is an <AREA> element
								else if (PLUGINS.imagemap && target.is('area')) {
										pluginCalculations = PLUGINS.imagemap(this, target, at, PLUGINS.viewport ? method : FALSE);
									}
	
									// Check if the target is an SVG element
									else if (PLUGINS.svg && target && target[0].ownerSVGElement) {
											pluginCalculations = PLUGINS.svg(this, target, at, PLUGINS.viewport ? method : FALSE);
										}
	
										// Otherwise use regular jQuery methods
										else {
												targetWidth = target.outerWidth(FALSE);
												targetHeight = target.outerHeight(FALSE);
												position = target.offset();
											}
	
							// Parse returned plugin values into proper variables
							if (pluginCalculations) {
								targetWidth = pluginCalculations.width;
								targetHeight = pluginCalculations.height;
								offset = pluginCalculations.offset;
								position = pluginCalculations.position;
							}
	
							// Adjust position to take into account offset parents
							position = this.reposition.offset(target, position, container);
	
							// Adjust for position.fixed tooltips (and also iOS scroll bug in v3.2-4.0 & v4.3-4.3.2)
							if (BROWSER.iOS > 3.1 && BROWSER.iOS < 4.1 || BROWSER.iOS >= 4.3 && BROWSER.iOS < 4.33 || !BROWSER.iOS && type === 'fixed') {
								position.left -= win.scrollLeft();
								position.top -= win.scrollTop();
							}
	
							// Adjust position relative to target
							if (!pluginCalculations || pluginCalculations && pluginCalculations.adjustable !== FALSE) {
								position.left += at.x === RIGHT ? targetWidth : at.x === CENTER ? targetWidth / 2 : 0;
								position.top += at.y === BOTTOM ? targetHeight : at.y === CENTER ? targetHeight / 2 : 0;
							}
						}
	
				// Adjust position relative to tooltip
				position.left += adjust.x + (my.x === RIGHT ? -tooltipWidth : my.x === CENTER ? -tooltipWidth / 2 : 0);
				position.top += adjust.y + (my.y === BOTTOM ? -tooltipHeight : my.y === CENTER ? -tooltipHeight / 2 : 0);
	
				// Use viewport adjustment plugin if enabled
				if (PLUGINS.viewport) {
					adjusted = position.adjusted = PLUGINS.viewport(this, position, posOptions, targetWidth, targetHeight, tooltipWidth, tooltipHeight);
	
					// Apply offsets supplied by positioning plugin (if used)
					if (offset && adjusted.left) {
						position.left += offset.left;
					}
					if (offset && adjusted.top) {
						position.top += offset.top;
					}
	
					// Apply any new 'my' position
					if (adjusted.my) {
						this.position.my = adjusted.my;
					}
				}
	
				// Viewport adjustment is disabled, set values to zero
				else {
						position.adjusted = { left: 0, top: 0 };
					}
	
				// Set tooltip position class if it's changed
				if (cache.posClass !== (newClass = this._createPosClass(this.position.my))) {
					cache.posClass = newClass;
					tooltip.removeClass(cache.posClass).addClass(newClass);
				}
	
				// tooltipmove event
				if (!this._trigger('move', [position, viewport.elem || viewport], event)) {
					return this;
				}
				delete position.adjusted;
	
				// If effect is disabled, target it mouse, no animation is defined or positioning gives NaN out, set CSS directly
				if (effect === FALSE || !visible || isNaN(position.left) || isNaN(position.top) || target === 'mouse' || !$.isFunction(posOptions.effect)) {
					tooltip.css(position);
				}
	
				// Use custom function if provided
				else if ($.isFunction(posOptions.effect)) {
						posOptions.effect.call(tooltip, this, $.extend({}, position));
						tooltip.queue(function (next) {
							// Reset attributes to avoid cross-browser rendering bugs
							$(this).css({ opacity: '', height: '' });
							if (BROWSER.ie) {
								this.style.removeAttribute('filter');
							}
	
							next();
						});
					}
	
				// Set positioning flag
				this.positioning = FALSE;
	
				return this;
			};
	
			// Custom (more correct for qTip!) offset calculator
			PROTOTYPE.reposition.offset = function (elem, pos, container) {
				if (!container[0]) {
					return pos;
				}
	
				var ownerDocument = $(elem[0].ownerDocument),
				    quirks = !!BROWSER.ie && document.compatMode !== 'CSS1Compat',
				    parent = container[0],
				    scrolled,
				    position,
				    parentOffset,
				    overflow;
	
				function scroll(e, i) {
					pos.left += i * e.scrollLeft();
					pos.top += i * e.scrollTop();
				}
	
				// Compensate for non-static containers offset
				do {
					if ((position = $.css(parent, 'position')) !== 'static') {
						if (position === 'fixed') {
							parentOffset = parent.getBoundingClientRect();
							scroll(ownerDocument, -1);
						} else {
							parentOffset = $(parent).position();
							parentOffset.left += parseFloat($.css(parent, 'borderLeftWidth')) || 0;
							parentOffset.top += parseFloat($.css(parent, 'borderTopWidth')) || 0;
						}
	
						pos.left -= parentOffset.left + (parseFloat($.css(parent, 'marginLeft')) || 0);
						pos.top -= parentOffset.top + (parseFloat($.css(parent, 'marginTop')) || 0);
	
						// If this is the first parent element with an overflow of "scroll" or "auto", store it
						if (!scrolled && (overflow = $.css(parent, 'overflow')) !== 'hidden' && overflow !== 'visible' && $.prop(parent, 'tagName') !== 'BODY') {
							scrolled = $(parent);
						}
					}
				} while (parent = parent.offsetParent);
	
				// Compensate for containers scroll if it also has an offsetParent (or in IE quirks mode)
				if (scrolled && (scrolled[0] !== ownerDocument[0] || quirks)) {
					scroll(scrolled, 1);
				}
	
				return pos;
			};
	
			// Corner class
			var C = (CORNER = PROTOTYPE.reposition.Corner = function (corner, forceY) {
				corner = ('' + corner).replace(/([A-Z])/, ' $1').replace(/middle/gi, CENTER).toLowerCase();
				this.x = (corner.match(/left|right/i) || corner.match(/center/) || ['inherit'])[0].toLowerCase();
				this.y = (corner.match(/top|bottom|center/i) || ['inherit'])[0].toLowerCase();
				this.forceY = !!forceY;
	
				var f = corner.charAt(0);
				this.precedance = f === 't' || f === 'b' ? Y : X;
			}).prototype;
	
			C.invert = function (z, center) {
				this[z] = this[z] === LEFT ? RIGHT : this[z] === RIGHT ? LEFT : center || this[z];
			};
	
			C.string = function (join) {
				var x = this.x,
				    y = this.y;
	
				var result = x !== y ? x === 'center' || y !== 'center' && (this.precedance === Y || this.forceY) ? [y, x] : [x, y] : [x];
	
				return join !== false ? result.join(' ') : result;
			};
	
			C.abbrev = function () {
				var result = this.string(false);
				return result[0].charAt(0) + (result[1] && result[1].charAt(0) || '');
			};
	
			C.clone = function () {
				return new CORNER(this.string(), this.forceY);
			};
	
			;
			PROTOTYPE.toggle = function (state, event) {
				var cache = this.cache,
				    options = this.options,
				    tooltip = this.tooltip;
	
				// Try to prevent flickering when tooltip overlaps show element
				if (event) {
					if (/over|enter/.test(event.type) && cache.event && /out|leave/.test(cache.event.type) && options.show.target.add(event.target).length === options.show.target.length && tooltip.has(event.relatedTarget).length) {
						return this;
					}
	
					// Cache event
					cache.event = $.event.fix(event);
				}
	
				// If we're currently waiting and we've just hidden... stop it
				this.waiting && !state && (this.hiddenDuringWait = TRUE);
	
				// Render the tooltip if showing and it isn't already
				if (!this.rendered) {
					return state ? this.render(1) : this;
				} else if (this.destroyed || this.disabled) {
					return this;
				}
	
				var type = state ? 'show' : 'hide',
				    opts = this.options[type],
				    posOptions = this.options.position,
				    contentOptions = this.options.content,
				    width = this.tooltip.css('width'),
				    visible = this.tooltip.is(':visible'),
				    animate = state || opts.target.length === 1,
				    sameTarget = !event || opts.target.length < 2 || cache.target[0] === event.target,
				    identicalState,
				    allow,
				    after;
	
				// Detect state if valid one isn't provided
				if ((typeof state === 'undefined' ? 'undefined' : (0, _typeof3.default)(state)).search('boolean|number')) {
					state = !visible;
				}
	
				// Check if the tooltip is in an identical state to the new would-be state
				identicalState = !tooltip.is(':animated') && visible === state && sameTarget;
	
				// Fire tooltip(show/hide) event and check if destroyed
				allow = !identicalState ? !!this._trigger(type, [90]) : NULL;
	
				// Check to make sure the tooltip wasn't destroyed in the callback
				if (this.destroyed) {
					return this;
				}
	
				// If the user didn't stop the method prematurely and we're showing the tooltip, focus it
				if (allow !== FALSE && state) {
					this.focus(event);
				}
	
				// If the state hasn't changed or the user stopped it, return early
				if (!allow || identicalState) {
					return this;
				}
	
				// Set ARIA hidden attribute
				$.attr(tooltip[0], 'aria-hidden', !!!state);
	
				// Execute state specific properties
				if (state) {
					// Store show origin coordinates
					this.mouse && (cache.origin = $.event.fix(this.mouse));
	
					// Update tooltip content & title if it's a dynamic function
					if ($.isFunction(contentOptions.text)) {
						this._updateContent(contentOptions.text, FALSE);
					}
					if ($.isFunction(contentOptions.title)) {
						this._updateTitle(contentOptions.title, FALSE);
					}
	
					// Cache mousemove events for positioning purposes (if not already tracking)
					if (!trackingBound && posOptions.target === 'mouse' && posOptions.adjust.mouse) {
						$(document).bind('mousemove.' + NAMESPACE, this._storeMouse);
						trackingBound = TRUE;
					}
	
					// Update the tooltip position (set width first to prevent viewport/max-width issues)
					if (!width) {
						tooltip.css('width', tooltip.outerWidth(FALSE));
					}
					this.reposition(event, arguments[2]);
					if (!width) {
						tooltip.css('width', '');
					}
	
					// Hide other tooltips if tooltip is solo
					if (!!opts.solo) {
						(typeof opts.solo === 'string' ? $(opts.solo) : $(SELECTOR, opts.solo)).not(tooltip).not(opts.target).qtip('hide', new $.Event('tooltipsolo'));
					}
				} else {
					// Clear show timer if we're hiding
					clearTimeout(this.timers.show);
	
					// Remove cached origin on hide
					delete cache.origin;
	
					// Remove mouse tracking event if not needed (all tracking qTips are hidden)
					if (trackingBound && !$(SELECTOR + '[tracking="true"]:visible', opts.solo).not(tooltip).length) {
						$(document).unbind('mousemove.' + NAMESPACE);
						trackingBound = FALSE;
					}
	
					// Blur the tooltip
					this.blur(event);
				}
	
				// Define post-animation, state specific properties
				after = $.proxy(function () {
					if (state) {
						// Prevent antialias from disappearing in IE by removing filter
						if (BROWSER.ie) {
							tooltip[0].style.removeAttribute('filter');
						}
	
						// Remove overflow setting to prevent tip bugs
						tooltip.css('overflow', '');
	
						// Autofocus elements if enabled
						if ('string' === typeof opts.autofocus) {
							$(this.options.show.autofocus, tooltip).focus();
						}
	
						// If set, hide tooltip when inactive for delay period
						this.options.show.target.trigger('qtip-' + this.id + '-inactive');
					} else {
						// Reset CSS states
						tooltip.css({
							display: '',
							visibility: '',
							opacity: '',
							left: '',
							top: ''
						});
					}
	
					// tooltipvisible/tooltiphidden events
					this._trigger(state ? 'visible' : 'hidden');
				}, this);
	
				// If no effect type is supplied, use a simple toggle
				if (opts.effect === FALSE || animate === FALSE) {
					tooltip[type]();
					after();
				}
	
				// Use custom function if provided
				else if ($.isFunction(opts.effect)) {
						tooltip.stop(1, 1);
						opts.effect.call(tooltip, this);
						tooltip.queue('fx', function (n) {
							after();n();
						});
					}
	
					// Use basic fade function by default
					else {
							tooltip.fadeTo(90, state ? 1 : 0, after);
						}
	
				// If inactive hide method is set, active it
				if (state) {
					opts.target.trigger('qtip-' + this.id + '-inactive');
				}
	
				return this;
			};
	
			PROTOTYPE.show = function (event) {
				return this.toggle(TRUE, event);
			};
	
			PROTOTYPE.hide = function (event) {
				return this.toggle(FALSE, event);
			};
			;PROTOTYPE.focus = function (event) {
				if (!this.rendered || this.destroyed) {
					return this;
				}
	
				var qtips = $(SELECTOR),
				    tooltip = this.tooltip,
				    curIndex = parseInt(tooltip[0].style.zIndex, 10),
				    newIndex = QTIP.zindex + qtips.length;
	
				// Only update the z-index if it has changed and tooltip is not already focused
				if (!tooltip.hasClass(CLASS_FOCUS)) {
					// tooltipfocus event
					if (this._trigger('focus', [newIndex], event)) {
						// Only update z-index's if they've changed
						if (curIndex !== newIndex) {
							// Reduce our z-index's and keep them properly ordered
							qtips.each(function () {
								if (this.style.zIndex > curIndex) {
									this.style.zIndex = this.style.zIndex - 1;
								}
							});
	
							// Fire blur event for focused tooltip
							qtips.filter('.' + CLASS_FOCUS).qtip('blur', event);
						}
	
						// Set the new z-index
						tooltip.addClass(CLASS_FOCUS)[0].style.zIndex = newIndex;
					}
				}
	
				return this;
			};
	
			PROTOTYPE.blur = function (event) {
				if (!this.rendered || this.destroyed) {
					return this;
				}
	
				// Set focused status to FALSE
				this.tooltip.removeClass(CLASS_FOCUS);
	
				// tooltipblur event
				this._trigger('blur', [this.tooltip.css('zIndex')], event);
	
				return this;
			};
			;PROTOTYPE.disable = function (state) {
				if (this.destroyed) {
					return this;
				}
	
				// If 'toggle' is passed, toggle the current state
				if (state === 'toggle') {
					state = !(this.rendered ? this.tooltip.hasClass(CLASS_DISABLED) : this.disabled);
				}
	
				// Disable if no state passed
				else if ('boolean' !== typeof state) {
						state = TRUE;
					}
	
				if (this.rendered) {
					this.tooltip.toggleClass(CLASS_DISABLED, state).attr('aria-disabled', state);
				}
	
				this.disabled = !!state;
	
				return this;
			};
	
			PROTOTYPE.enable = function () {
				return this.disable(FALSE);
			};
			;PROTOTYPE._createButton = function () {
				var self = this,
				    elements = this.elements,
				    tooltip = elements.tooltip,
				    button = this.options.content.button,
				    isString = typeof button === 'string',
				    close = isString ? button : 'Close tooltip';
	
				if (elements.button) {
					elements.button.remove();
				}
	
				// Use custom button if one was supplied by user, else use default
				if (button.jquery) {
					elements.button = button;
				} else {
					elements.button = $('<a />', {
						'class': 'qtip-close ' + (this.options.style.widget ? '' : NAMESPACE + '-icon'),
						'title': close,
						'aria-label': close
					}).prepend($('<span />', {
						'class': 'ui-icon ui-icon-close',
						'html': '&times;'
					}));
				}
	
				// Create button and setup attributes
				elements.button.appendTo(elements.titlebar || tooltip).attr('role', 'button').click(function (event) {
					if (!tooltip.hasClass(CLASS_DISABLED)) {
						self.hide(event);
					}
					return FALSE;
				});
			};
	
			PROTOTYPE._updateButton = function (button) {
				// Make sure tooltip is rendered and if not, return
				if (!this.rendered) {
					return FALSE;
				}
	
				var elem = this.elements.button;
				if (button) {
					this._createButton();
				} else {
					elem.remove();
				}
			};
			; // Widget class creator
			function createWidgetClass(cls) {
				return WIDGET.concat('').join(cls ? '-' + cls + ' ' : ' ');
			}
	
			// Widget class setter method
			PROTOTYPE._setWidget = function () {
				var on = this.options.style.widget,
				    elements = this.elements,
				    tooltip = elements.tooltip,
				    disabled = tooltip.hasClass(CLASS_DISABLED);
	
				tooltip.removeClass(CLASS_DISABLED);
				CLASS_DISABLED = on ? 'ui-state-disabled' : 'qtip-disabled';
				tooltip.toggleClass(CLASS_DISABLED, disabled);
	
				tooltip.toggleClass('ui-helper-reset ' + createWidgetClass(), on).toggleClass(CLASS_DEFAULT, this.options.style.def && !on);
	
				if (elements.content) {
					elements.content.toggleClass(createWidgetClass('content'), on);
				}
				if (elements.titlebar) {
					elements.titlebar.toggleClass(createWidgetClass('header'), on);
				}
				if (elements.button) {
					elements.button.toggleClass(NAMESPACE + '-icon', !on);
				}
			};
			;function delay(callback, duration) {
				// If tooltip has displayed, start hide timer
				if (duration > 0) {
					return setTimeout($.proxy(callback, this), duration);
				} else {
					callback.call(this);
				}
			}
	
			function showMethod(event) {
				if (this.tooltip.hasClass(CLASS_DISABLED)) {
					return;
				}
	
				// Clear hide timers
				clearTimeout(this.timers.show);
				clearTimeout(this.timers.hide);
	
				// Start show timer
				this.timers.show = delay.call(this, function () {
					this.toggle(TRUE, event);
				}, this.options.show.delay);
			}
	
			function hideMethod(event) {
				if (this.tooltip.hasClass(CLASS_DISABLED) || this.destroyed) {
					return;
				}
	
				// Check if new target was actually the tooltip element
				var relatedTarget = $(event.relatedTarget),
				    ontoTooltip = relatedTarget.closest(SELECTOR)[0] === this.tooltip[0],
				    ontoTarget = relatedTarget[0] === this.options.show.target[0];
	
				// Clear timers and stop animation queue
				clearTimeout(this.timers.show);
				clearTimeout(this.timers.hide);
	
				// Prevent hiding if tooltip is fixed and event target is the tooltip.
				// Or if mouse positioning is enabled and cursor momentarily overlaps
				if (this !== relatedTarget[0] && this.options.position.target === 'mouse' && ontoTooltip || this.options.hide.fixed && /mouse(out|leave|move)/.test(event.type) && (ontoTooltip || ontoTarget)) {
					/* eslint-disable no-empty */
					try {
						event.preventDefault();
						event.stopImmediatePropagation();
					} catch (e) {}
					/* eslint-enable no-empty */
	
					return;
				}
	
				// If tooltip has displayed, start hide timer
				this.timers.hide = delay.call(this, function () {
					this.toggle(FALSE, event);
				}, this.options.hide.delay, this);
			}
	
			function inactiveMethod(event) {
				if (this.tooltip.hasClass(CLASS_DISABLED) || !this.options.hide.inactive) {
					return;
				}
	
				// Clear timer
				clearTimeout(this.timers.inactive);
	
				this.timers.inactive = delay.call(this, function () {
					this.hide(event);
				}, this.options.hide.inactive);
			}
	
			function repositionMethod(event) {
				if (this.rendered && this.tooltip[0].offsetWidth > 0) {
					this.reposition(event);
				}
			}
	
			// Store mouse coordinates
			PROTOTYPE._storeMouse = function (event) {
				(this.mouse = $.event.fix(event)).type = 'mousemove';
				return this;
			};
	
			// Bind events
			PROTOTYPE._bind = function (targets, events, method, suffix, context) {
				if (!targets || !method || !events.length) {
					return;
				}
				var ns = '.' + this._id + (suffix ? '-' + suffix : '');
				$(targets).bind((events.split ? events : events.join(ns + ' ')) + ns, $.proxy(method, context || this));
				return this;
			};
			PROTOTYPE._unbind = function (targets, suffix) {
				targets && $(targets).unbind('.' + this._id + (suffix ? '-' + suffix : ''));
				return this;
			};
	
			// Global delegation helper
			function delegate(selector, events, method) {
				$(document.body).delegate(selector, (events.split ? events : events.join('.' + NAMESPACE + ' ')) + '.' + NAMESPACE, function () {
					var api = QTIP.api[$.attr(this, ATTR_ID)];
					api && !api.disabled && method.apply(api, arguments);
				});
			}
			// Event trigger
			PROTOTYPE._trigger = function (type, args, event) {
				var callback = new $.Event('tooltip' + type);
				callback.originalEvent = event && $.extend({}, event) || this.cache.event || NULL;
	
				this.triggering = type;
				this.tooltip.trigger(callback, [this].concat(args || []));
				this.triggering = FALSE;
	
				return !callback.isDefaultPrevented();
			};
	
			PROTOTYPE._bindEvents = function (showEvents, hideEvents, showTargets, hideTargets, showCallback, hideCallback) {
				// Get tasrgets that lye within both
				var similarTargets = showTargets.filter(hideTargets).add(hideTargets.filter(showTargets)),
				    toggleEvents = [];
	
				// If hide and show targets are the same...
				if (similarTargets.length) {
	
					// Filter identical show/hide events
					$.each(hideEvents, function (i, type) {
						var showIndex = $.inArray(type, showEvents);
	
						// Both events are identical, remove from both hide and show events
						// and append to toggleEvents
						showIndex > -1 && toggleEvents.push(showEvents.splice(showIndex, 1)[0]);
					});
	
					// Toggle events are special case of identical show/hide events, which happen in sequence
					if (toggleEvents.length) {
						// Bind toggle events to the similar targets
						this._bind(similarTargets, toggleEvents, function (event) {
							var state = this.rendered ? this.tooltip[0].offsetWidth > 0 : false;
							(state ? hideCallback : showCallback).call(this, event);
						});
	
						// Remove the similar targets from the regular show/hide bindings
						showTargets = showTargets.not(similarTargets);
						hideTargets = hideTargets.not(similarTargets);
					}
				}
	
				// Apply show/hide/toggle events
				this._bind(showTargets, showEvents, showCallback);
				this._bind(hideTargets, hideEvents, hideCallback);
			};
	
			PROTOTYPE._assignInitialEvents = function (event) {
				var options = this.options,
				    showTarget = options.show.target,
				    hideTarget = options.hide.target,
				    showEvents = options.show.event ? $.trim('' + options.show.event).split(' ') : [],
				    hideEvents = options.hide.event ? $.trim('' + options.hide.event).split(' ') : [];
	
				// Catch remove/removeqtip events on target element to destroy redundant tooltips
				this._bind(this.elements.target, ['remove', 'removeqtip'], function () {
					this.destroy(true);
				}, 'destroy');
	
				/*
	    * Make sure hoverIntent functions properly by using mouseleave as a hide event if
	    * mouseenter/mouseout is used for show.event, even if it isn't in the users options.
	    */
				if (/mouse(over|enter)/i.test(options.show.event) && !/mouse(out|leave)/i.test(options.hide.event)) {
					hideEvents.push('mouseleave');
				}
	
				/*
	    * Also make sure initial mouse targetting works correctly by caching mousemove coords
	    * on show targets before the tooltip has rendered. Also set onTarget when triggered to
	    * keep mouse tracking working.
	    */
				this._bind(showTarget, 'mousemove', function (moveEvent) {
					this._storeMouse(moveEvent);
					this.cache.onTarget = TRUE;
				});
	
				// Define hoverIntent function
				function hoverIntent(hoverEvent) {
					// Only continue if tooltip isn't disabled
					if (this.disabled || this.destroyed) {
						return FALSE;
					}
	
					// Cache the event data
					this.cache.event = hoverEvent && $.event.fix(hoverEvent);
					this.cache.target = hoverEvent && $(hoverEvent.target);
	
					// Start the event sequence
					clearTimeout(this.timers.show);
					this.timers.show = delay.call(this, function () {
						this.render((typeof hoverEvent === 'undefined' ? 'undefined' : (0, _typeof3.default)(hoverEvent)) === 'object' || options.show.ready);
					}, options.prerender ? 0 : options.show.delay);
				}
	
				// Filter and bind events
				this._bindEvents(showEvents, hideEvents, showTarget, hideTarget, hoverIntent, function () {
					if (!this.timers) {
						return FALSE;
					}
					clearTimeout(this.timers.show);
				});
	
				// Prerendering is enabled, create tooltip now
				if (options.show.ready || options.prerender) {
					hoverIntent.call(this, event);
				}
			};
	
			// Event assignment method
			PROTOTYPE._assignEvents = function () {
				var self = this,
				    options = this.options,
				    posOptions = options.position,
				    tooltip = this.tooltip,
				    showTarget = options.show.target,
				    hideTarget = options.hide.target,
				    containerTarget = posOptions.container,
				    viewportTarget = posOptions.viewport,
				    documentTarget = $(document),
				    windowTarget = $(window),
				    showEvents = options.show.event ? $.trim('' + options.show.event).split(' ') : [],
				    hideEvents = options.hide.event ? $.trim('' + options.hide.event).split(' ') : [];
	
				// Assign passed event callbacks
				$.each(options.events, function (name, callback) {
					self._bind(tooltip, name === 'toggle' ? ['tooltipshow', 'tooltiphide'] : ['tooltip' + name], callback, null, tooltip);
				});
	
				// Hide tooltips when leaving current window/frame (but not select/option elements)
				if (/mouse(out|leave)/i.test(options.hide.event) && options.hide.leave === 'window') {
					this._bind(documentTarget, ['mouseout', 'blur'], function (event) {
						if (!/select|option/.test(event.target.nodeName) && !event.relatedTarget) {
							this.hide(event);
						}
					});
				}
	
				// Enable hide.fixed by adding appropriate class
				if (options.hide.fixed) {
					hideTarget = hideTarget.add(tooltip.addClass(CLASS_FIXED));
				}
	
				/*
	    * Make sure hoverIntent functions properly by using mouseleave to clear show timer if
	    * mouseenter/mouseout is used for show.event, even if it isn't in the users options.
	    */
				else if (/mouse(over|enter)/i.test(options.show.event)) {
						this._bind(hideTarget, 'mouseleave', function () {
							clearTimeout(this.timers.show);
						});
					}
	
				// Hide tooltip on document mousedown if unfocus events are enabled
				if (('' + options.hide.event).indexOf('unfocus') > -1) {
					this._bind(containerTarget.closest('html'), ['mousedown', 'touchstart'], function (event) {
						var elem = $(event.target),
						    enabled = this.rendered && !this.tooltip.hasClass(CLASS_DISABLED) && this.tooltip[0].offsetWidth > 0,
						    isAncestor = elem.parents(SELECTOR).filter(this.tooltip[0]).length > 0;
	
						if (elem[0] !== this.target[0] && elem[0] !== this.tooltip[0] && !isAncestor && !this.target.has(elem[0]).length && enabled) {
							this.hide(event);
						}
					});
				}
	
				// Check if the tooltip hides when inactive
				if ('number' === typeof options.hide.inactive) {
					// Bind inactive method to show target(s) as a custom event
					this._bind(showTarget, 'qtip-' + this.id + '-inactive', inactiveMethod, 'inactive');
	
					// Define events which reset the 'inactive' event handler
					this._bind(hideTarget.add(tooltip), QTIP.inactiveEvents, inactiveMethod);
				}
	
				// Filter and bind events
				this._bindEvents(showEvents, hideEvents, showTarget, hideTarget, showMethod, hideMethod);
	
				// Mouse movement bindings
				this._bind(showTarget.add(tooltip), 'mousemove', function (event) {
					// Check if the tooltip hides when mouse is moved a certain distance
					if ('number' === typeof options.hide.distance) {
						var origin = this.cache.origin || {},
						    limit = this.options.hide.distance,
						    abs = Math.abs;
	
						// Check if the movement has gone beyond the limit, and hide it if so
						if (abs(event.pageX - origin.pageX) >= limit || abs(event.pageY - origin.pageY) >= limit) {
							this.hide(event);
						}
					}
	
					// Cache mousemove coords on show targets
					this._storeMouse(event);
				});
	
				// Mouse positioning events
				if (posOptions.target === 'mouse') {
					// If mouse adjustment is on...
					if (posOptions.adjust.mouse) {
						// Apply a mouseleave event so we don't get problems with overlapping
						if (options.hide.event) {
							// Track if we're on the target or not
							this._bind(showTarget, ['mouseenter', 'mouseleave'], function (event) {
								if (!this.cache) {
									return FALSE;
								}
								this.cache.onTarget = event.type === 'mouseenter';
							});
						}
	
						// Update tooltip position on mousemove
						this._bind(documentTarget, 'mousemove', function (event) {
							// Update the tooltip position only if the tooltip is visible and adjustment is enabled
							if (this.rendered && this.cache.onTarget && !this.tooltip.hasClass(CLASS_DISABLED) && this.tooltip[0].offsetWidth > 0) {
								this.reposition(event);
							}
						});
					}
				}
	
				// Adjust positions of the tooltip on window resize if enabled
				if (posOptions.adjust.resize || viewportTarget.length) {
					this._bind($.event.special.resize ? viewportTarget : windowTarget, 'resize', repositionMethod);
				}
	
				// Adjust tooltip position on scroll of the window or viewport element if present
				if (posOptions.adjust.scroll) {
					this._bind(windowTarget.add(posOptions.container), 'scroll', repositionMethod);
				}
			};
	
			// Un-assignment method
			PROTOTYPE._unassignEvents = function () {
				var options = this.options,
				    showTargets = options.show.target,
				    hideTargets = options.hide.target,
				    targets = $.grep([this.elements.target[0], this.rendered && this.tooltip[0], options.position.container[0], options.position.viewport[0], options.position.container.closest('html')[0], // unfocus
				window, document], function (i) {
					return (typeof i === 'undefined' ? 'undefined' : (0, _typeof3.default)(i)) === 'object';
				});
	
				// Add show and hide targets if they're valid
				if (showTargets && showTargets.toArray) {
					targets = targets.concat(showTargets.toArray());
				}
				if (hideTargets && hideTargets.toArray) {
					targets = targets.concat(hideTargets.toArray());
				}
	
				// Unbind the events
				this._unbind(targets)._unbind(targets, 'destroy')._unbind(targets, 'inactive');
			};
	
			// Apply common event handlers using delegate (avoids excessive .bind calls!)
			$(function () {
				delegate(SELECTOR, ['mouseenter', 'mouseleave'], function (event) {
					var state = event.type === 'mouseenter',
					    tooltip = $(event.currentTarget),
					    target = $(event.relatedTarget || event.target),
					    options = this.options;
	
					// On mouseenter...
					if (state) {
						// Focus the tooltip on mouseenter (z-index stacking)
						this.focus(event);
	
						// Clear hide timer on tooltip hover to prevent it from closing
						tooltip.hasClass(CLASS_FIXED) && !tooltip.hasClass(CLASS_DISABLED) && clearTimeout(this.timers.hide);
					}
	
					// On mouseleave...
					else {
							// When mouse tracking is enabled, hide when we leave the tooltip and not onto the show target (if a hide event is set)
							if (options.position.target === 'mouse' && options.position.adjust.mouse && options.hide.event && options.show.target && !target.closest(options.show.target[0]).length) {
								this.hide(event);
							}
						}
	
					// Add hover class
					tooltip.toggleClass(CLASS_HOVER, state);
				});
	
				// Define events which reset the 'inactive' event handler
				delegate('[' + ATTR_ID + ']', INACTIVE_EVENTS, inactiveMethod);
			});
			; // Initialization method
			function init(elem, id, opts) {
				var obj,
				    posOptions,
				    attr,
				    config,
				    title,
	
	
				// Setup element references
				docBody = $(document.body),
	
	
				// Use document body instead of document element if needed
				newTarget = elem[0] === document ? docBody : elem,
	
	
				// Grab metadata from element if plugin is present
				metadata = elem.metadata ? elem.metadata(opts.metadata) : NULL,
	
	
				// If metadata type if HTML5, grab 'name' from the object instead, or use the regular data object otherwise
				metadata5 = opts.metadata.type === 'html5' && metadata ? metadata[opts.metadata.name] : NULL,
	
	
				// Grab data from metadata.name (or data-qtipopts as fallback) using .data() method,
				html5 = elem.data(opts.metadata.name || 'qtipopts');
	
				// If we don't get an object returned attempt to parse it manualyl without parseJSON
				/* eslint-disable no-empty */
				try {
					html5 = typeof html5 === 'string' ? $.parseJSON(html5) : html5;
				} catch (e) {}
				/* eslint-enable no-empty */
	
				// Merge in and sanitize metadata
				config = $.extend(TRUE, {}, QTIP.defaults, opts, (typeof html5 === 'undefined' ? 'undefined' : (0, _typeof3.default)(html5)) === 'object' ? sanitizeOptions(html5) : NULL, sanitizeOptions(metadata5 || metadata));
	
				// Re-grab our positioning options now we've merged our metadata and set id to passed value
				posOptions = config.position;
				config.id = id;
	
				// Setup missing content if none is detected
				if ('boolean' === typeof config.content.text) {
					attr = elem.attr(config.content.attr);
	
					// Grab from supplied attribute if available
					if (config.content.attr !== FALSE && attr) {
						config.content.text = attr;
					}
	
					// No valid content was found, abort render
					else {
							return FALSE;
						}
				}
	
				// Setup target options
				if (!posOptions.container.length) {
					posOptions.container = docBody;
				}
				if (posOptions.target === FALSE) {
					posOptions.target = newTarget;
				}
				if (config.show.target === FALSE) {
					config.show.target = newTarget;
				}
				if (config.show.solo === TRUE) {
					config.show.solo = posOptions.container.closest('body');
				}
				if (config.hide.target === FALSE) {
					config.hide.target = newTarget;
				}
				if (config.position.viewport === TRUE) {
					config.position.viewport = posOptions.container;
				}
	
				// Ensure we only use a single container
				posOptions.container = posOptions.container.eq(0);
	
				// Convert position corner values into x and y strings
				posOptions.at = new CORNER(posOptions.at, TRUE);
				posOptions.my = new CORNER(posOptions.my);
	
				// Destroy previous tooltip if overwrite is enabled, or skip element if not
				if (elem.data(NAMESPACE)) {
					if (config.overwrite) {
						elem.qtip('destroy', true);
					} else if (config.overwrite === FALSE) {
						return FALSE;
					}
				}
	
				// Add has-qtip attribute
				elem.attr(ATTR_HAS, id);
	
				// Remove title attribute and store it if present
				if (config.suppress && (title = elem.attr('title'))) {
					// Final attr call fixes event delegation and IE default tooltip showing problem
					elem.removeAttr('title').attr(oldtitle, title).attr('title', '');
				}
	
				// Initialize the tooltip and add API reference
				obj = new QTip(elem, config, id, !!attr);
				elem.data(NAMESPACE, obj);
	
				return obj;
			}
	
			// jQuery $.fn extension method
			QTIP = $.fn.qtip = function (options, notation, newValue) {
				var command = ('' + options).toLowerCase(),
				    // Parse command
				returned = NULL,
				    args = $.makeArray(arguments).slice(1),
				    event = args[args.length - 1],
				    opts = this[0] ? $.data(this[0], NAMESPACE) : NULL;
	
				// Check for API request
				if (!arguments.length && opts || command === 'api') {
					return opts;
				}
	
				// Execute API command if present
				else if ('string' === typeof options) {
						this.each(function () {
							var api = $.data(this, NAMESPACE);
							if (!api) {
								return TRUE;
							}
	
							// Cache the event if possible
							if (event && event.timeStamp) {
								api.cache.event = event;
							}
	
							// Check for specific API commands
							if (notation && (command === 'option' || command === 'options')) {
								if (newValue !== undefined || $.isPlainObject(notation)) {
									api.set(notation, newValue);
								} else {
									returned = api.get(notation);
									return FALSE;
								}
							}
	
							// Execute API command
							else if (api[command]) {
									api[command].apply(api, args);
								}
						});
	
						return returned !== NULL ? returned : this;
					}
	
					// No API commands. validate provided options and setup qTips
					else if ('object' === (typeof options === 'undefined' ? 'undefined' : (0, _typeof3.default)(options)) || !arguments.length) {
							// Sanitize options first
							opts = sanitizeOptions($.extend(TRUE, {}, options));
	
							return this.each(function (i) {
								var api, id;
	
								// Find next available ID, or use custom ID if provided
								id = $.isArray(opts.id) ? opts.id[i] : opts.id;
								id = !id || id === FALSE || id.length < 1 || QTIP.api[id] ? QTIP.nextid++ : id;
	
								// Initialize the qTip and re-grab newly sanitized options
								api = init($(this), id, opts);
								if (api === FALSE) {
									return TRUE;
								} else {
									QTIP.api[id] = api;
								}
	
								// Initialize plugins
								$.each(PLUGINS, function () {
									if (this.initialize === 'initialize') {
										this(api);
									}
								});
	
								// Assign initial pre-render events
								api._assignInitialEvents(event);
							});
						}
			};
	
			// Expose class
			$.qtip = QTip;
	
			// Populated in render method
			QTIP.api = {};
			;$.each({
				/* Allow other plugins to successfully retrieve the title of an element with a qTip applied */
				attr: function attr(_attr, val) {
					if (this.length) {
						var self = this[0],
						    title = 'title',
						    api = $.data(self, 'qtip');
	
						if (_attr === title && api && api.options && 'object' === (typeof api === 'undefined' ? 'undefined' : (0, _typeof3.default)(api)) && 'object' === (0, _typeof3.default)(api.options) && api.options.suppress) {
							if (arguments.length < 2) {
								return $.attr(self, oldtitle);
							}
	
							// If qTip is rendered and title was originally used as content, update it
							if (api && api.options.content.attr === title && api.cache.attr) {
								api.set('content.text', val);
							}
	
							// Use the regular attr method to set, then cache the result
							return this.attr(oldtitle, val);
						}
					}
	
					return $.fn['attr' + replaceSuffix].apply(this, arguments);
				},
	
				/* Allow clone to correctly retrieve cached title attributes */
				clone: function clone(keepData) {
					// Clone our element using the real clone method
					var elems = $.fn['clone' + replaceSuffix].apply(this, arguments);
	
					// Grab all elements with an oldtitle set, and change it to regular title attribute, if keepData is false
					if (!keepData) {
						elems.filter('[' + oldtitle + ']').attr('title', function () {
							return $.attr(this, oldtitle);
						}).removeAttr(oldtitle);
					}
	
					return elems;
				}
			}, function (name, func) {
				if (!func || $.fn[name + replaceSuffix]) {
					return TRUE;
				}
	
				var old = $.fn[name + replaceSuffix] = $.fn[name];
				$.fn[name] = function () {
					return func.apply(this, arguments) || old.apply(this, arguments);
				};
			});
	
			/* Fire off 'removeqtip' handler in $.cleanData if jQuery UI not present (it already does similar).
	   * This snippet is taken directly from jQuery UI source code found here:
	   *     http://code.jquery.com/ui/jquery-ui-git.js
	   */
			if (!$.ui) {
				$['cleanData' + replaceSuffix] = $.cleanData;
				$.cleanData = function (elems) {
					for (var i = 0, elem; (elem = $(elems[i])).length; i++) {
						if (elem.attr(ATTR_HAS)) {
							/* eslint-disable no-empty */
							try {
								elem.triggerHandler('removeqtip');
							} catch (e) {}
							/* eslint-enable no-empty */
						}
					}
					$['cleanData' + replaceSuffix].apply(this, arguments);
				};
			}
			; // qTip version
			QTIP.version = '3.0.3-5-g';
	
			// Base ID for all qTips
			QTIP.nextid = 0;
	
			// Inactive events array
			QTIP.inactiveEvents = INACTIVE_EVENTS;
	
			// Base z-index for all qTips
			QTIP.zindex = 15000;
	
			// Define configuration defaults
			QTIP.defaults = {
				prerender: FALSE,
				id: FALSE,
				overwrite: TRUE,
				suppress: TRUE,
				content: {
					text: TRUE,
					attr: 'title',
					title: FALSE,
					button: FALSE
				},
				position: {
					my: 'top left',
					at: 'bottom right',
					target: FALSE,
					container: FALSE,
					viewport: FALSE,
					adjust: {
						x: 0, y: 0,
						mouse: TRUE,
						scroll: TRUE,
						resize: TRUE,
						method: 'flipinvert flipinvert'
					},
					effect: function effect(api, pos) {
						$(this).animate(pos, {
							duration: 200,
							queue: FALSE
						});
					}
				},
				show: {
					target: FALSE,
					event: 'mouseenter',
					effect: TRUE,
					delay: 90,
					solo: FALSE,
					ready: FALSE,
					autofocus: FALSE
				},
				hide: {
					target: FALSE,
					event: 'mouseleave',
					effect: TRUE,
					delay: 0,
					fixed: FALSE,
					inactive: FALSE,
					leave: 'window',
					distance: FALSE
				},
				style: {
					classes: '',
					widget: FALSE,
					width: FALSE,
					height: FALSE,
					def: TRUE
				},
				events: {
					render: NULL,
					move: NULL,
					show: NULL,
					hide: NULL,
					toggle: NULL,
					visible: NULL,
					hidden: NULL,
					focus: NULL,
					blur: NULL
				}
			};
			;var TIP,
			    createVML,
			    SCALE,
			    PIXEL_RATIO,
			    BACKING_STORE_RATIO,
	
	
			// Common CSS strings
			MARGIN = 'margin',
			    BORDER = 'border',
			    COLOR = 'color',
			    BG_COLOR = 'background-color',
			    TRANSPARENT = 'transparent',
			    IMPORTANT = ' !important',
	
	
			// Check if the browser supports <canvas/> elements
			HASCANVAS = !!document.createElement('canvas').getContext,
	
	
			// Invalid colour values used in parseColours()
			INVALID = /rgba?\(0, 0, 0(, 0)?\)|transparent|#123456/i;
	
			// Camel-case method, taken from jQuery source
			// http://code.jquery.com/jquery-1.8.0.js
			function camel(s) {
				return s.charAt(0).toUpperCase() + s.slice(1);
			}
	
			/*
	   * Modified from Modernizr's testPropsAll()
	   * http://modernizr.com/downloads/modernizr-latest.js
	   */
			var cssProps = {},
			    cssPrefixes = ['Webkit', 'O', 'Moz', 'ms'];
			function vendorCss(elem, prop) {
				var ucProp = prop.charAt(0).toUpperCase() + prop.slice(1),
				    props = (prop + ' ' + cssPrefixes.join(ucProp + ' ') + ucProp).split(' '),
				    cur,
				    val,
				    i = 0;
	
				// If the property has already been mapped...
				if (cssProps[prop]) {
					return elem.css(cssProps[prop]);
				}
	
				while (cur = props[i++]) {
					if ((val = elem.css(cur)) !== undefined) {
						cssProps[prop] = cur;
						return val;
					}
				}
			}
	
			// Parse a given elements CSS property into an int
			function intCss(elem, prop) {
				return Math.ceil(parseFloat(vendorCss(elem, prop)));
			}
	
			// VML creation (for IE only)
			if (!HASCANVAS) {
				createVML = function createVML(tag, props, style) {
					return '<qtipvml:' + tag + ' xmlns="urn:schemas-microsoft.com:vml" class="qtip-vml" ' + (props || '') + ' style="behavior: url(#default#VML); ' + (style || '') + '" />';
				};
			}
	
			// Canvas only definitions
			else {
					PIXEL_RATIO = window.devicePixelRatio || 1;
					BACKING_STORE_RATIO = function () {
						var context = document.createElement('canvas').getContext('2d');
						return context.backingStorePixelRatio || context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || 1;
					}();
					SCALE = PIXEL_RATIO / BACKING_STORE_RATIO;
				}
	
			function Tip(qtip, options) {
				this._ns = 'tip';
				this.options = options;
				this.offset = options.offset;
				this.size = [options.width, options.height];
	
				// Initialize
				this.qtip = qtip;
				this.init(qtip);
			}
	
			$.extend(Tip.prototype, {
				init: function init(qtip) {
					var context, tip;
	
					// Create tip element and prepend to the tooltip
					tip = this.element = qtip.elements.tip = $('<div />', { 'class': NAMESPACE + '-tip' }).prependTo(qtip.tooltip);
	
					// Create tip drawing element(s)
					if (HASCANVAS) {
						// save() as soon as we create the canvas element so FF2 doesn't bork on our first restore()!
						context = $('<canvas />').appendTo(this.element)[0].getContext('2d');
	
						// Setup constant parameters
						context.lineJoin = 'miter';
						context.miterLimit = 100000;
						context.save();
					} else {
						context = createVML('shape', 'coordorigin="0,0"', 'position:absolute;');
						this.element.html(context + context);
	
						// Prevent mousing down on the tip since it causes problems with .live() handling in IE due to VML
						qtip._bind($('*', tip).add(tip), ['click', 'mousedown'], function (event) {
							event.stopPropagation();
						}, this._ns);
					}
	
					// Bind update events
					qtip._bind(qtip.tooltip, 'tooltipmove', this.reposition, this._ns, this);
	
					// Create it
					this.create();
				},
	
				_swapDimensions: function _swapDimensions() {
					this.size[0] = this.options.height;
					this.size[1] = this.options.width;
				},
				_resetDimensions: function _resetDimensions() {
					this.size[0] = this.options.width;
					this.size[1] = this.options.height;
				},
	
				_useTitle: function _useTitle(corner) {
					var titlebar = this.qtip.elements.titlebar;
					return titlebar && (corner.y === TOP || corner.y === CENTER && this.element.position().top + this.size[1] / 2 + this.options.offset < titlebar.outerHeight(TRUE));
				},
	
				_parseCorner: function _parseCorner(corner) {
					var my = this.qtip.options.position.my;
	
					// Detect corner and mimic properties
					if (corner === FALSE || my === FALSE) {
						corner = FALSE;
					} else if (corner === TRUE) {
						corner = new CORNER(my.string());
					} else if (!corner.string) {
						corner = new CORNER(corner);
						corner.fixed = TRUE;
					}
	
					return corner;
				},
	
				_parseWidth: function _parseWidth(corner, side, use) {
					var elements = this.qtip.elements,
					    prop = BORDER + camel(side) + 'Width';
	
					return (use ? intCss(use, prop) : intCss(elements.content, prop) || intCss(this._useTitle(corner) && elements.titlebar || elements.content, prop) || intCss(elements.tooltip, prop)) || 0;
				},
	
				_parseRadius: function _parseRadius(corner) {
					var elements = this.qtip.elements,
					    prop = BORDER + camel(corner.y) + camel(corner.x) + 'Radius';
	
					return BROWSER.ie < 9 ? 0 : intCss(this._useTitle(corner) && elements.titlebar || elements.content, prop) || intCss(elements.tooltip, prop) || 0;
				},
	
				_invalidColour: function _invalidColour(elem, prop, compare) {
					var val = elem.css(prop);
					return !val || compare && val === elem.css(compare) || INVALID.test(val) ? FALSE : val;
				},
	
				_parseColours: function _parseColours(corner) {
					var elements = this.qtip.elements,
					    tip = this.element.css('cssText', ''),
					    borderSide = BORDER + camel(corner[corner.precedance]) + camel(COLOR),
					    colorElem = this._useTitle(corner) && elements.titlebar || elements.content,
					    css = this._invalidColour,
					    color = [];
	
					// Attempt to detect the background colour from various elements, left-to-right precedance
					color[0] = css(tip, BG_COLOR) || css(colorElem, BG_COLOR) || css(elements.content, BG_COLOR) || css(elements.tooltip, BG_COLOR) || tip.css(BG_COLOR);
	
					// Attempt to detect the correct border side colour from various elements, left-to-right precedance
					color[1] = css(tip, borderSide, COLOR) || css(colorElem, borderSide, COLOR) || css(elements.content, borderSide, COLOR) || css(elements.tooltip, borderSide, COLOR) || elements.tooltip.css(borderSide);
	
					// Reset background and border colours
					$('*', tip).add(tip).css('cssText', BG_COLOR + ':' + TRANSPARENT + IMPORTANT + ';' + BORDER + ':0' + IMPORTANT + ';');
	
					return color;
				},
	
				_calculateSize: function _calculateSize(corner) {
					var y = corner.precedance === Y,
					    width = this.options.width,
					    height = this.options.height,
					    isCenter = corner.abbrev() === 'c',
					    base = (y ? width : height) * (isCenter ? 0.5 : 1),
					    pow = Math.pow,
					    round = Math.round,
					    bigHyp,
					    ratio,
					    result,
					    smallHyp = Math.sqrt(pow(base, 2) + pow(height, 2)),
					    hyp = [this.border / base * smallHyp, this.border / height * smallHyp];
	
					hyp[2] = Math.sqrt(pow(hyp[0], 2) - pow(this.border, 2));
					hyp[3] = Math.sqrt(pow(hyp[1], 2) - pow(this.border, 2));
	
					bigHyp = smallHyp + hyp[2] + hyp[3] + (isCenter ? 0 : hyp[0]);
					ratio = bigHyp / smallHyp;
	
					result = [round(ratio * width), round(ratio * height)];
					return y ? result : result.reverse();
				},
	
				// Tip coordinates calculator
				_calculateTip: function _calculateTip(corner, size, scale) {
					scale = scale || 1;
					size = size || this.size;
	
					var width = size[0] * scale,
					    height = size[1] * scale,
					    width2 = Math.ceil(width / 2),
					    height2 = Math.ceil(height / 2),
	
	
					// Define tip coordinates in terms of height and width values
					tips = {
						br: [0, 0, width, height, width, 0],
						bl: [0, 0, width, 0, 0, height],
						tr: [0, height, width, 0, width, height],
						tl: [0, 0, 0, height, width, height],
						tc: [0, height, width2, 0, width, height],
						bc: [0, 0, width, 0, width2, height],
						rc: [0, 0, width, height2, 0, height],
						lc: [width, 0, width, height, 0, height2]
					};
	
					// Set common side shapes
					tips.lt = tips.br;tips.rt = tips.bl;
					tips.lb = tips.tr;tips.rb = tips.tl;
	
					return tips[corner.abbrev()];
				},
	
				// Tip coordinates drawer (canvas)
				_drawCoords: function _drawCoords(context, coords) {
					context.beginPath();
					context.moveTo(coords[0], coords[1]);
					context.lineTo(coords[2], coords[3]);
					context.lineTo(coords[4], coords[5]);
					context.closePath();
				},
	
				create: function create() {
					// Determine tip corner
					var c = this.corner = (HASCANVAS || BROWSER.ie) && this._parseCorner(this.options.corner);
	
					// If we have a tip corner...
					this.enabled = !!this.corner && this.corner.abbrev() !== 'c';
					if (this.enabled) {
						// Cache it
						this.qtip.cache.corner = c.clone();
	
						// Create it
						this.update();
					}
	
					// Toggle tip element
					this.element.toggle(this.enabled);
	
					return this.corner;
				},
	
				update: function update(corner, position) {
					if (!this.enabled) {
						return this;
					}
	
					var elements = this.qtip.elements,
					    tip = this.element,
					    inner = tip.children(),
					    options = this.options,
					    curSize = this.size,
					    mimic = options.mimic,
					    round = Math.round,
					    color,
					    precedance,
					    context,
					    coords,
					    bigCoords,
					    translate,
					    newSize,
					    border;
	
					// Re-determine tip if not already set
					if (!corner) {
						corner = this.qtip.cache.corner || this.corner;
					}
	
					// Use corner property if we detect an invalid mimic value
					if (mimic === FALSE) {
						mimic = corner;
					}
	
					// Otherwise inherit mimic properties from the corner object as necessary
					else {
							mimic = new CORNER(mimic);
							mimic.precedance = corner.precedance;
	
							if (mimic.x === 'inherit') {
								mimic.x = corner.x;
							} else if (mimic.y === 'inherit') {
								mimic.y = corner.y;
							} else if (mimic.x === mimic.y) {
								mimic[corner.precedance] = corner[corner.precedance];
							}
						}
					precedance = mimic.precedance;
	
					// Ensure the tip width.height are relative to the tip position
					if (corner.precedance === X) {
						this._swapDimensions();
					} else {
						this._resetDimensions();
					}
	
					// Update our colours
					color = this.color = this._parseColours(corner);
	
					// Detect border width, taking into account colours
					if (color[1] !== TRANSPARENT) {
						// Grab border width
						border = this.border = this._parseWidth(corner, corner[corner.precedance]);
	
						// If border width isn't zero, use border color as fill if it's not invalid (1.0 style tips)
						if (options.border && border < 1 && !INVALID.test(color[1])) {
							color[0] = color[1];
						}
	
						// Set border width (use detected border width if options.border is true)
						this.border = border = options.border !== TRUE ? options.border : border;
					}
	
					// Border colour was invalid, set border to zero
					else {
							this.border = border = 0;
						}
	
					// Determine tip size
					newSize = this.size = this._calculateSize(corner);
					tip.css({
						width: newSize[0],
						height: newSize[1],
						lineHeight: newSize[1] + 'px'
					});
	
					// Calculate tip translation
					if (corner.precedance === Y) {
						translate = [round(mimic.x === LEFT ? border : mimic.x === RIGHT ? newSize[0] - curSize[0] - border : (newSize[0] - curSize[0]) / 2), round(mimic.y === TOP ? newSize[1] - curSize[1] : 0)];
					} else {
						translate = [round(mimic.x === LEFT ? newSize[0] - curSize[0] : 0), round(mimic.y === TOP ? border : mimic.y === BOTTOM ? newSize[1] - curSize[1] - border : (newSize[1] - curSize[1]) / 2)];
					}
	
					// Canvas drawing implementation
					if (HASCANVAS) {
						// Grab canvas context and clear/save it
						context = inner[0].getContext('2d');
						context.restore();context.save();
						context.clearRect(0, 0, 6000, 6000);
	
						// Calculate coordinates
						coords = this._calculateTip(mimic, curSize, SCALE);
						bigCoords = this._calculateTip(mimic, this.size, SCALE);
	
						// Set the canvas size using calculated size
						inner.attr(WIDTH, newSize[0] * SCALE).attr(HEIGHT, newSize[1] * SCALE);
						inner.css(WIDTH, newSize[0]).css(HEIGHT, newSize[1]);
	
						// Draw the outer-stroke tip
						this._drawCoords(context, bigCoords);
						context.fillStyle = color[1];
						context.fill();
	
						// Draw the actual tip
						context.translate(translate[0] * SCALE, translate[1] * SCALE);
						this._drawCoords(context, coords);
						context.fillStyle = color[0];
						context.fill();
					}
	
					// VML (IE Proprietary implementation)
					else {
							// Calculate coordinates
							coords = this._calculateTip(mimic);
	
							// Setup coordinates string
							coords = 'm' + coords[0] + ',' + coords[1] + ' l' + coords[2] + ',' + coords[3] + ' ' + coords[4] + ',' + coords[5] + ' xe';
	
							// Setup VML-specific offset for pixel-perfection
							translate[2] = border && /^(r|b)/i.test(corner.string()) ? BROWSER.ie === 8 ? 2 : 1 : 0;
	
							// Set initial CSS
							inner.css({
								coordsize: newSize[0] + border + ' ' + newSize[1] + border,
								antialias: '' + (mimic.string().indexOf(CENTER) > -1),
								left: translate[0] - translate[2] * Number(precedance === X),
								top: translate[1] - translate[2] * Number(precedance === Y),
								width: newSize[0] + border,
								height: newSize[1] + border
							}).each(function (i) {
								var $this = $(this);
	
								// Set shape specific attributes
								$this[$this.prop ? 'prop' : 'attr']({
									coordsize: newSize[0] + border + ' ' + newSize[1] + border,
									path: coords,
									fillcolor: color[0],
									filled: !!i,
									stroked: !i
								}).toggle(!!(border || i));
	
								// Check if border is enabled and add stroke element
								!i && $this.html(createVML('stroke', 'weight="' + border * 2 + 'px" color="' + color[1] + '" miterlimit="1000" joinstyle="miter"'));
							});
						}
	
					// Opera bug #357 - Incorrect tip position
					// https://github.com/Craga89/qTip2/issues/367
					window.opera && setTimeout(function () {
						elements.tip.css({
							display: 'inline-block',
							visibility: 'visible'
						});
					}, 1);
	
					// Position if needed
					if (position !== FALSE) {
						this.calculate(corner, newSize);
					}
				},
	
				calculate: function calculate(corner, size) {
					if (!this.enabled) {
						return FALSE;
					}
	
					var self = this,
					    elements = this.qtip.elements,
					    tip = this.element,
					    userOffset = this.options.offset,
					    position = {},
					    precedance,
					    corners;
	
					// Inherit corner if not provided
					corner = corner || this.corner;
					precedance = corner.precedance;
	
					// Determine which tip dimension to use for adjustment
					size = size || this._calculateSize(corner);
	
					// Setup corners and offset array
					corners = [corner.x, corner.y];
					if (precedance === X) {
						corners.reverse();
					}
	
					// Calculate tip position
					$.each(corners, function (i, side) {
						var b, bc, br;
	
						if (side === CENTER) {
							b = precedance === Y ? LEFT : TOP;
							position[b] = '50%';
							position[MARGIN + '-' + b] = -Math.round(size[precedance === Y ? 0 : 1] / 2) + userOffset;
						} else {
							b = self._parseWidth(corner, side, elements.tooltip);
							bc = self._parseWidth(corner, side, elements.content);
							br = self._parseRadius(corner);
	
							position[side] = Math.max(-self.border, i ? bc : userOffset + (br > b ? br : -b));
						}
					});
	
					// Adjust for tip size
					position[corner[precedance]] -= size[precedance === X ? 0 : 1];
	
					// Set and return new position
					tip.css({ margin: '', top: '', bottom: '', left: '', right: '' }).css(position);
					return position;
				},
	
				reposition: function reposition(event, api, pos) {
					if (!this.enabled) {
						return;
					}
	
					var cache = api.cache,
					    newCorner = this.corner.clone(),
					    adjust = pos.adjusted,
					    method = api.options.position.adjust.method.split(' '),
					    horizontal = method[0],
					    vertical = method[1] || method[0],
					    shift = { left: FALSE, top: FALSE, x: 0, y: 0 },
					    offset,
					    css = {},
					    props;
	
					function shiftflip(direction, precedance, popposite, side, opposite) {
						// Horizontal - Shift or flip method
						if (direction === SHIFT && newCorner.precedance === precedance && adjust[side] && newCorner[popposite] !== CENTER) {
							newCorner.precedance = newCorner.precedance === X ? Y : X;
						} else if (direction !== SHIFT && adjust[side]) {
							newCorner[precedance] = newCorner[precedance] === CENTER ? adjust[side] > 0 ? side : opposite : newCorner[precedance] === side ? opposite : side;
						}
					}
	
					function shiftonly(xy, side, opposite) {
						if (newCorner[xy] === CENTER) {
							css[MARGIN + '-' + side] = shift[xy] = offset[MARGIN + '-' + side] - adjust[side];
						} else {
							props = offset[opposite] !== undefined ? [adjust[side], -offset[side]] : [-adjust[side], offset[side]];
	
							if ((shift[xy] = Math.max(props[0], props[1])) > props[0]) {
								pos[side] -= adjust[side];
								shift[side] = FALSE;
							}
	
							css[offset[opposite] !== undefined ? opposite : side] = shift[xy];
						}
					}
	
					// If our tip position isn't fixed e.g. doesn't adjust with viewport...
					if (this.corner.fixed !== TRUE) {
						// Perform shift/flip adjustments
						shiftflip(horizontal, X, Y, LEFT, RIGHT);
						shiftflip(vertical, Y, X, TOP, BOTTOM);
	
						// Update and redraw the tip if needed (check cached details of last drawn tip)
						if (newCorner.string() !== cache.corner.string() || cache.cornerTop !== adjust.top || cache.cornerLeft !== adjust.left) {
							this.update(newCorner, FALSE);
						}
					}
	
					// Setup tip offset properties
					offset = this.calculate(newCorner);
	
					// Readjust offset object to make it left/top
					if (offset.right !== undefined) {
						offset.left = -offset.right;
					}
					if (offset.bottom !== undefined) {
						offset.top = -offset.bottom;
					}
					offset.user = this.offset;
	
					// Perform shift adjustments
					shift.left = horizontal === SHIFT && !!adjust.left;
					if (shift.left) {
						shiftonly(X, LEFT, RIGHT);
					}
					shift.top = vertical === SHIFT && !!adjust.top;
					if (shift.top) {
						shiftonly(Y, TOP, BOTTOM);
					}
	
					/*
	    * If the tip is adjusted in both dimensions, or in a
	    * direction that would cause it to be anywhere but the
	    * outer border, hide it!
	    */
					this.element.css(css).toggle(!(shift.x && shift.y || newCorner.x === CENTER && shift.y || newCorner.y === CENTER && shift.x));
	
					// Adjust position to accomodate tip dimensions
					pos.left -= offset.left.charAt ? offset.user : horizontal !== SHIFT || shift.top || !shift.left && !shift.top ? offset.left + this.border : 0;
					pos.top -= offset.top.charAt ? offset.user : vertical !== SHIFT || shift.left || !shift.left && !shift.top ? offset.top + this.border : 0;
	
					// Cache details
					cache.cornerLeft = adjust.left;cache.cornerTop = adjust.top;
					cache.corner = newCorner.clone();
				},
	
				destroy: function destroy() {
					// Unbind events
					this.qtip._unbind(this.qtip.tooltip, this._ns);
	
					// Remove the tip element(s)
					if (this.qtip.elements.tip) {
						this.qtip.elements.tip.find('*').remove().end().remove();
					}
				}
			});
	
			TIP = PLUGINS.tip = function (api) {
				return new Tip(api, api.options.style.tip);
			};
	
			// Initialize tip on render
			TIP.initialize = 'render';
	
			// Setup plugin sanitization options
			TIP.sanitize = function (options) {
				if (options.style && 'tip' in options.style) {
					var opts = options.style.tip;
					if ((typeof opts === 'undefined' ? 'undefined' : (0, _typeof3.default)(opts)) !== 'object') {
						opts = options.style.tip = { corner: opts };
					}
					if (!/string|boolean/i.test((0, _typeof3.default)(opts.corner))) {
						opts.corner = TRUE;
					}
				}
			};
	
			// Add new option checks for the plugin
			CHECKS.tip = {
				'^position.my|style.tip.(corner|mimic|border)$': function positionMyStyleTipCornerMimicBorder$() {
					// Make sure a tip can be drawn
					this.create();
	
					// Reposition the tooltip
					this.qtip.reposition();
				},
				'^style.tip.(height|width)$': function styleTipHeightWidth$(obj) {
					// Re-set dimensions and redraw the tip
					this.size = [obj.width, obj.height];
					this.update();
	
					// Reposition the tooltip
					this.qtip.reposition();
				},
				'^content.title|style.(classes|widget)$': function contentTitleStyleClassesWidget$() {
					this.update();
				}
			};
	
			// Extend original qTip defaults
			$.extend(TRUE, QTIP.defaults, {
				style: {
					tip: {
						corner: TRUE,
						mimic: FALSE,
						width: 6,
						height: 6,
						border: TRUE,
						offset: 0
					}
				}
			});
			;var MODAL,
			    OVERLAY,
			    MODALCLASS = 'qtip-modal',
			    MODALSELECTOR = '.' + MODALCLASS;
	
			OVERLAY = function OVERLAY() {
				var self = this,
				    focusableElems = {},
				    current,
				    prevState,
				    elem;
	
				// Modified code from jQuery UI 1.10.0 source
				// http://code.jquery.com/ui/1.10.0/jquery-ui.js
				function focusable(element) {
					// Use the defined focusable checker when possible
					if ($.expr[':'].focusable) {
						return $.expr[':'].focusable;
					}
	
					var isTabIndexNotNaN = !isNaN($.attr(element, 'tabindex')),
					    nodeName = element.nodeName && element.nodeName.toLowerCase(),
					    map,
					    mapName,
					    img;
	
					if ('area' === nodeName) {
						map = element.parentNode;
						mapName = map.name;
						if (!element.href || !mapName || map.nodeName.toLowerCase() !== 'map') {
							return false;
						}
						img = $('img[usemap=#' + mapName + ']')[0];
						return !!img && img.is(':visible');
					}
	
					return (/input|select|textarea|button|object/.test(nodeName) ? !element.disabled : 'a' === nodeName ? element.href || isTabIndexNotNaN : isTabIndexNotNaN
					);
				}
	
				// Focus inputs using cached focusable elements (see update())
				function focusInputs(blurElems) {
					// Blurring body element in IE causes window.open windows to unfocus!
					if (focusableElems.length < 1 && blurElems.length) {
						blurElems.not('body').blur();
					}
	
					// Focus the inputs
					else {
							focusableElems.first().focus();
						}
				}
	
				// Steal focus from elements outside tooltip
				function stealFocus(event) {
					if (!elem.is(':visible')) {
						return;
					}
	
					var target = $(event.target),
					    tooltip = current.tooltip,
					    container = target.closest(SELECTOR),
					    targetOnTop;
	
					// Determine if input container target is above this
					targetOnTop = container.length < 1 ? FALSE : parseInt(container[0].style.zIndex, 10) > parseInt(tooltip[0].style.zIndex, 10);
	
					// If we're showing a modal, but focus has landed on an input below
					// this modal, divert focus to the first visible input in this modal
					// or if we can't find one... the tooltip itself
					if (!targetOnTop && target.closest(SELECTOR)[0] !== tooltip[0]) {
						focusInputs(target);
					}
				}
	
				$.extend(self, {
					init: function init() {
						// Create document overlay
						elem = self.elem = $('<div />', {
							id: 'qtip-overlay',
							html: '<div></div>',
							mousedown: function mousedown() {
								return FALSE;
							}
						}).hide();
	
						// Make sure we can't focus anything outside the tooltip
						$(document.body).bind('focusin' + MODALSELECTOR, stealFocus);
	
						// Apply keyboard "Escape key" close handler
						$(document).bind('keydown' + MODALSELECTOR, function (event) {
							if (current && current.options.show.modal.escape && event.keyCode === 27) {
								current.hide(event);
							}
						});
	
						// Apply click handler for blur option
						elem.bind('click' + MODALSELECTOR, function (event) {
							if (current && current.options.show.modal.blur) {
								current.hide(event);
							}
						});
	
						return self;
					},
	
					update: function update(api) {
						// Update current API reference
						current = api;
	
						// Update focusable elements if enabled
						if (api.options.show.modal.stealfocus !== FALSE) {
							focusableElems = api.tooltip.find('*').filter(function () {
								return focusable(this);
							});
						} else {
							focusableElems = [];
						}
					},
	
					toggle: function toggle(api, state, duration) {
						var tooltip = api.tooltip,
						    options = api.options.show.modal,
						    effect = options.effect,
						    type = state ? 'show' : 'hide',
						    visible = elem.is(':visible'),
						    visibleModals = $(MODALSELECTOR).filter(':visible:not(:animated)').not(tooltip);
	
						// Set active tooltip API reference
						self.update(api);
	
						// If the modal can steal the focus...
						// Blur the current item and focus anything in the modal we an
						if (state && options.stealfocus !== FALSE) {
							focusInputs($(':focus'));
						}
	
						// Toggle backdrop cursor style on show
						elem.toggleClass('blurs', options.blur);
	
						// Append to body on show
						if (state) {
							elem.appendTo(document.body);
						}
	
						// Prevent modal from conflicting with show.solo, and don't hide backdrop is other modals are visible
						if (elem.is(':animated') && visible === state && prevState !== FALSE || !state && visibleModals.length) {
							return self;
						}
	
						// Stop all animations
						elem.stop(TRUE, FALSE);
	
						// Use custom function if provided
						if ($.isFunction(effect)) {
							effect.call(elem, state);
						}
	
						// If no effect type is supplied, use a simple toggle
						else if (effect === FALSE) {
								elem[type]();
							}
	
							// Use basic fade function
							else {
									elem.fadeTo(parseInt(duration, 10) || 90, state ? 1 : 0, function () {
										if (!state) {
											elem.hide();
										}
									});
								}
	
						// Reset position and detach from body on hide
						if (!state) {
							elem.queue(function (next) {
								elem.css({ left: '', top: '' });
								if (!$(MODALSELECTOR).length) {
									elem.detach();
								}
								next();
							});
						}
	
						// Cache the state
						prevState = state;
	
						// If the tooltip is destroyed, set reference to null
						if (current.destroyed) {
							current = NULL;
						}
	
						return self;
					}
				});
	
				self.init();
			};
			OVERLAY = new OVERLAY();
	
			function Modal(api, options) {
				this.options = options;
				this._ns = '-modal';
	
				this.qtip = api;
				this.init(api);
			}
	
			$.extend(Modal.prototype, {
				init: function init(qtip) {
					var tooltip = qtip.tooltip;
	
					// If modal is disabled... return
					if (!this.options.on) {
						return this;
					}
	
					// Set overlay reference
					qtip.elements.overlay = OVERLAY.elem;
	
					// Add unique attribute so we can grab modal tooltips easily via a SELECTOR, and set z-index
					tooltip.addClass(MODALCLASS).css('z-index', QTIP.modal_zindex + $(MODALSELECTOR).length);
	
					// Apply our show/hide/focus modal events
					qtip._bind(tooltip, ['tooltipshow', 'tooltiphide'], function (event, api, duration) {
						var oEvent = event.originalEvent;
	
						// Make sure mouseout doesn't trigger a hide when showing the modal and mousing onto backdrop
						if (event.target === tooltip[0]) {
							if (oEvent && event.type === 'tooltiphide' && /mouse(leave|enter)/.test(oEvent.type) && $(oEvent.relatedTarget).closest(OVERLAY.elem[0]).length) {
								/* eslint-disable no-empty */
								try {
									event.preventDefault();
								} catch (e) {}
								/* eslint-enable no-empty */
							} else if (!oEvent || oEvent && oEvent.type !== 'tooltipsolo') {
								this.toggle(event, event.type === 'tooltipshow', duration);
							}
						}
					}, this._ns, this);
	
					// Adjust modal z-index on tooltip focus
					qtip._bind(tooltip, 'tooltipfocus', function (event, api) {
						// If focus was cancelled before it reached us, don't do anything
						if (event.isDefaultPrevented() || event.target !== tooltip[0]) {
							return;
						}
	
						var qtips = $(MODALSELECTOR),
	
	
						// Keep the modal's lower than other, regular qtips
						newIndex = QTIP.modal_zindex + qtips.length,
						    curIndex = parseInt(tooltip[0].style.zIndex, 10);
	
						// Set overlay z-index
						OVERLAY.elem[0].style.zIndex = newIndex - 1;
	
						// Reduce modal z-index's and keep them properly ordered
						qtips.each(function () {
							if (this.style.zIndex > curIndex) {
								this.style.zIndex -= 1;
							}
						});
	
						// Fire blur event for focused tooltip
						qtips.filter('.' + CLASS_FOCUS).qtip('blur', event.originalEvent);
	
						// Set the new z-index
						tooltip.addClass(CLASS_FOCUS)[0].style.zIndex = newIndex;
	
						// Set current
						OVERLAY.update(api);
	
						// Prevent default handling
						/* eslint-disable no-empty */
						try {
							event.preventDefault();
						} catch (e) {}
						/* eslint-enable no-empty */
					}, this._ns, this);
	
					// Focus any other visible modals when this one hides
					qtip._bind(tooltip, 'tooltiphide', function (event) {
						if (event.target === tooltip[0]) {
							$(MODALSELECTOR).filter(':visible').not(tooltip).last().qtip('focus', event);
						}
					}, this._ns, this);
				},
	
				toggle: function toggle(event, state, duration) {
					// Make sure default event hasn't been prevented
					if (event && event.isDefaultPrevented()) {
						return this;
					}
	
					// Toggle it
					OVERLAY.toggle(this.qtip, !!state, duration);
				},
	
				destroy: function destroy() {
					// Remove modal class
					this.qtip.tooltip.removeClass(MODALCLASS);
	
					// Remove bound events
					this.qtip._unbind(this.qtip.tooltip, this._ns);
	
					// Delete element reference
					OVERLAY.toggle(this.qtip, FALSE);
					delete this.qtip.elements.overlay;
				}
			});
	
			MODAL = PLUGINS.modal = function (api) {
				return new Modal(api, api.options.show.modal);
			};
	
			// Setup sanitiztion rules
			MODAL.sanitize = function (opts) {
				if (opts.show) {
					if ((0, _typeof3.default)(opts.show.modal) !== 'object') {
						opts.show.modal = { on: !!opts.show.modal };
					} else if (typeof opts.show.modal.on === 'undefined') {
						opts.show.modal.on = TRUE;
					}
				}
			};
	
			// Base z-index for all modal tooltips (use qTip core z-index as a base)
			/* eslint-disable camelcase */
			QTIP.modal_zindex = QTIP.zindex - 200;
			/* eslint-enable camelcase */
	
			// Plugin needs to be initialized on render
			MODAL.initialize = 'render';
	
			// Setup option set checks
			CHECKS.modal = {
				'^show.modal.(on|blur)$': function showModalOnBlur$() {
					// Initialise
					this.destroy();
					this.init();
	
					// Show the modal if not visible already and tooltip is visible
					this.qtip.elems.overlay.toggle(this.qtip.tooltip[0].offsetWidth > 0);
				}
			};
	
			// Extend original api defaults
			$.extend(TRUE, QTIP.defaults, {
				show: {
					modal: {
						on: FALSE,
						effect: TRUE,
						blur: TRUE,
						stealfocus: TRUE,
						escape: TRUE
					}
				}
			});
			;PLUGINS.viewport = function (api, position, posOptions, targetWidth, targetHeight, elemWidth, elemHeight) {
				var target = posOptions.target,
				    tooltip = api.elements.tooltip,
				    my = posOptions.my,
				    at = posOptions.at,
				    adjust = posOptions.adjust,
				    method = adjust.method.split(' '),
				    methodX = method[0],
				    methodY = method[1] || method[0],
				    viewport = posOptions.viewport,
				    container = posOptions.container,
				    adjusted = { left: 0, top: 0 },
				    fixed,
				    newMy,
				    containerOffset,
				    containerStatic,
				    viewportWidth,
				    viewportHeight,
				    viewportScroll,
				    viewportOffset;
	
				// If viewport is not a jQuery element, or it's the window/document, or no adjustment method is used... return
				if (!viewport.jquery || target[0] === window || target[0] === document.body || adjust.method === 'none') {
					return adjusted;
				}
	
				// Cach container details
				containerOffset = container.offset() || adjusted;
				containerStatic = container.css('position') === 'static';
	
				// Cache our viewport details
				fixed = tooltip.css('position') === 'fixed';
				viewportWidth = viewport[0] === window ? viewport.width() : viewport.outerWidth(FALSE);
				viewportHeight = viewport[0] === window ? viewport.height() : viewport.outerHeight(FALSE);
				viewportScroll = { left: fixed ? 0 : viewport.scrollLeft(), top: fixed ? 0 : viewport.scrollTop() };
				viewportOffset = viewport.offset() || adjusted;
	
				// Generic calculation method
				function calculate(side, otherSide, type, adjustment, side1, side2, lengthName, targetLength, elemLength) {
					var initialPos = position[side1],
					    mySide = my[side],
					    atSide = at[side],
					    isShift = type === SHIFT,
					    myLength = mySide === side1 ? elemLength : mySide === side2 ? -elemLength : -elemLength / 2,
					    atLength = atSide === side1 ? targetLength : atSide === side2 ? -targetLength : -targetLength / 2,
					    sideOffset = viewportScroll[side1] + viewportOffset[side1] - (containerStatic ? 0 : containerOffset[side1]),
					    overflow1 = sideOffset - initialPos,
					    overflow2 = initialPos + elemLength - (lengthName === WIDTH ? viewportWidth : viewportHeight) - sideOffset,
					    offset = myLength - (my.precedance === side || mySide === my[otherSide] ? atLength : 0) - (atSide === CENTER ? targetLength / 2 : 0);
	
					// shift
					if (isShift) {
						offset = (mySide === side1 ? 1 : -1) * myLength;
	
						// Adjust position but keep it within viewport dimensions
						position[side1] += overflow1 > 0 ? overflow1 : overflow2 > 0 ? -overflow2 : 0;
						position[side1] = Math.max(-containerOffset[side1] + viewportOffset[side1], initialPos - offset, Math.min(Math.max(-containerOffset[side1] + viewportOffset[side1] + (lengthName === WIDTH ? viewportWidth : viewportHeight), initialPos + offset), position[side1],
	
						// Make sure we don't adjust complete off the element when using 'center'
						mySide === 'center' ? initialPos - myLength : 1E9));
					}
	
					// flip/flipinvert
					else {
							// Update adjustment amount depending on if using flipinvert or flip
							adjustment *= type === FLIPINVERT ? 2 : 0;
	
							// Check for overflow on the left/top
							if (overflow1 > 0 && (mySide !== side1 || overflow2 > 0)) {
								position[side1] -= offset + adjustment;
								newMy.invert(side, side1);
							}
	
							// Check for overflow on the bottom/right
							else if (overflow2 > 0 && (mySide !== side2 || overflow1 > 0)) {
									position[side1] -= (mySide === CENTER ? -offset : offset) + adjustment;
									newMy.invert(side, side2);
								}
	
							// Make sure we haven't made things worse with the adjustment and reset if so
							if (position[side1] < viewportScroll[side1] && -position[side1] > overflow2) {
								position[side1] = initialPos;newMy = my.clone();
							}
						}
	
					return position[side1] - initialPos;
				}
	
				// Set newMy if using flip or flipinvert methods
				if (methodX !== 'shift' || methodY !== 'shift') {
					newMy = my.clone();
				}
	
				// Adjust position based onviewport and adjustment options
				adjusted = {
					left: methodX !== 'none' ? calculate(X, Y, methodX, adjust.x, LEFT, RIGHT, WIDTH, targetWidth, elemWidth) : 0,
					top: methodY !== 'none' ? calculate(Y, X, methodY, adjust.y, TOP, BOTTOM, HEIGHT, targetHeight, elemHeight) : 0,
					my: newMy
				};
	
				return adjusted;
			};
			;PLUGINS.polys = {
				// POLY area coordinate calculator
				//	Special thanks to Ed Cradock for helping out with this.
				//	Uses a binary search algorithm to find suitable coordinates.
				polygon: function polygon(baseCoords, corner) {
					var result = {
						width: 0, height: 0,
						position: {
							top: 1e10, right: 0,
							bottom: 0, left: 1e10
						},
						adjustable: FALSE
					},
					    i = 0,
					    next,
					    coords = [],
					    compareX = 1,
					    compareY = 1,
					    realX = 0,
					    realY = 0,
					    newWidth,
					    newHeight;
	
					// First pass, sanitize coords and determine outer edges
					i = baseCoords.length;
					while (i--) {
						next = [parseInt(baseCoords[--i], 10), parseInt(baseCoords[i + 1], 10)];
	
						if (next[0] > result.position.right) {
							result.position.right = next[0];
						}
						if (next[0] < result.position.left) {
							result.position.left = next[0];
						}
						if (next[1] > result.position.bottom) {
							result.position.bottom = next[1];
						}
						if (next[1] < result.position.top) {
							result.position.top = next[1];
						}
	
						coords.push(next);
					}
	
					// Calculate height and width from outer edges
					newWidth = result.width = Math.abs(result.position.right - result.position.left);
					newHeight = result.height = Math.abs(result.position.bottom - result.position.top);
	
					// If it's the center corner...
					if (corner.abbrev() === 'c') {
						result.position = {
							left: result.position.left + result.width / 2,
							top: result.position.top + result.height / 2
						};
					} else {
						// Second pass, use a binary search algorithm to locate most suitable coordinate
						while (newWidth > 0 && newHeight > 0 && compareX > 0 && compareY > 0) {
							newWidth = Math.floor(newWidth / 2);
							newHeight = Math.floor(newHeight / 2);
	
							if (corner.x === LEFT) {
								compareX = newWidth;
							} else if (corner.x === RIGHT) {
								compareX = result.width - newWidth;
							} else {
								compareX += Math.floor(newWidth / 2);
							}
	
							if (corner.y === TOP) {
								compareY = newHeight;
							} else if (corner.y === BOTTOM) {
								compareY = result.height - newHeight;
							} else {
								compareY += Math.floor(newHeight / 2);
							}
	
							i = coords.length;
							while (i--) {
								if (coords.length < 2) {
									break;
								}
	
								realX = coords[i][0] - result.position.left;
								realY = coords[i][1] - result.position.top;
	
								if (corner.x === LEFT && realX >= compareX || corner.x === RIGHT && realX <= compareX || corner.x === CENTER && (realX < compareX || realX > result.width - compareX) || corner.y === TOP && realY >= compareY || corner.y === BOTTOM && realY <= compareY || corner.y === CENTER && (realY < compareY || realY > result.height - compareY)) {
									coords.splice(i, 1);
								}
							}
						}
						result.position = { left: coords[0][0], top: coords[0][1] };
					}
	
					return result;
				},
	
				rect: function rect(ax, ay, bx, by) {
					return {
						width: Math.abs(bx - ax),
						height: Math.abs(by - ay),
						position: {
							left: Math.min(ax, bx),
							top: Math.min(ay, by)
						}
					};
				},
	
				_angles: {
					tc: 3 / 2, tr: 7 / 4, tl: 5 / 4,
					bc: 1 / 2, br: 1 / 4, bl: 3 / 4,
					rc: 2, lc: 1, c: 0
				},
				ellipse: function ellipse(cx, cy, rx, ry, corner) {
					var c = PLUGINS.polys._angles[corner.abbrev()],
					    rxc = c === 0 ? 0 : rx * Math.cos(c * Math.PI),
					    rys = ry * Math.sin(c * Math.PI);
	
					return {
						width: rx * 2 - Math.abs(rxc),
						height: ry * 2 - Math.abs(rys),
						position: {
							left: cx + rxc,
							top: cy + rys
						},
						adjustable: FALSE
					};
				},
				circle: function circle(cx, cy, r, corner) {
					return PLUGINS.polys.ellipse(cx, cy, r, r, corner);
				}
			};
			;PLUGINS.svg = function (api, svg, corner) {
				var elem = svg[0],
				    root = $(elem.ownerSVGElement),
				    ownerDocument = elem.ownerDocument,
				    strokeWidth2 = (parseInt(svg.css('stroke-width'), 10) || 0) / 2,
				    frameOffset,
				    mtx,
				    transformed,
				    len,
				    next,
				    i,
				    points,
				    result,
				    position;
	
				// Ascend the parentNode chain until we find an element with getBBox()
				while (!elem.getBBox) {
					elem = elem.parentNode;
				}
				if (!elem.getBBox || !elem.parentNode) {
					return FALSE;
				}
	
				// Determine which shape calculation to use
				switch (elem.nodeName) {
					case 'ellipse':
					case 'circle':
						result = PLUGINS.polys.ellipse(elem.cx.baseVal.value, elem.cy.baseVal.value, (elem.rx || elem.r).baseVal.value + strokeWidth2, (elem.ry || elem.r).baseVal.value + strokeWidth2, corner);
						break;
	
					case 'line':
					case 'polygon':
					case 'polyline':
						// Determine points object (line has none, so mimic using array)
						points = elem.points || [{ x: elem.x1.baseVal.value, y: elem.y1.baseVal.value }, { x: elem.x2.baseVal.value, y: elem.y2.baseVal.value }];
	
						for (result = [], i = -1, len = points.numberOfItems || points.length; ++i < len;) {
							next = points.getItem ? points.getItem(i) : points[i];
							result.push.apply(result, [next.x, next.y]);
						}
	
						result = PLUGINS.polys.polygon(result, corner);
						break;
	
					// Unknown shape or rectangle? Use bounding box
					default:
						result = elem.getBBox();
						result = {
							width: result.width,
							height: result.height,
							position: {
								left: result.x,
								top: result.y
							}
						};
						break;
				}
	
				// Shortcut assignments
				position = result.position;
				root = root[0];
	
				// Convert position into a pixel value
				if (root.createSVGPoint) {
					mtx = elem.getScreenCTM();
					points = root.createSVGPoint();
	
					points.x = position.left;
					points.y = position.top;
					transformed = points.matrixTransform(mtx);
					position.left = transformed.x;
					position.top = transformed.y;
				}
	
				// Check the element is not in a child document, and if so, adjust for frame elements offset
				if (ownerDocument !== document && api.position.target !== 'mouse') {
					frameOffset = $((ownerDocument.defaultView || ownerDocument.parentWindow).frameElement).offset();
					if (frameOffset) {
						position.left += frameOffset.left;
						position.top += frameOffset.top;
					}
				}
	
				// Adjust by scroll offset of owner document
				ownerDocument = $(ownerDocument);
				position.left += ownerDocument.scrollLeft();
				position.top += ownerDocument.scrollTop();
	
				return result;
			};
			;PLUGINS.imagemap = function (api, area, corner) {
				if (!area.jquery) {
					area = $(area);
				}
	
				var shape = (area.attr('shape') || 'rect').toLowerCase().replace('poly', 'polygon'),
				    image = $('img[usemap="#' + area.parent('map').attr('name') + '"]'),
				    coordsString = $.trim(area.attr('coords')),
				    coordsArray = coordsString.replace(/,$/, '').split(','),
				    imageOffset,
				    coords,
				    i,
				    result,
				    len;
	
				// If we can't find the image using the map...
				if (!image.length) {
					return FALSE;
				}
	
				// Pass coordinates string if polygon
				if (shape === 'polygon') {
					result = PLUGINS.polys.polygon(coordsArray, corner);
				}
	
				// Otherwise parse the coordinates and pass them as arguments
				else if (PLUGINS.polys[shape]) {
						for (i = -1, len = coordsArray.length, coords = []; ++i < len;) {
							coords.push(parseInt(coordsArray[i], 10));
						}
	
						result = PLUGINS.polys[shape].apply(this, coords.concat(corner));
					}
	
					// If no shapre calculation method was found, return false
					else {
							return FALSE;
						}
	
				// Make sure we account for padding and borders on the image
				imageOffset = image.offset();
				imageOffset.left += Math.ceil((image.outerWidth(FALSE) - image.width()) / 2);
				imageOffset.top += Math.ceil((image.outerHeight(FALSE) - image.height()) / 2);
	
				// Add image position to offset coordinates
				result.position.left += imageOffset.left;
				result.position.top += imageOffset.top;
	
				return result;
			};
			;var IE6,
	
	
			/*
	   * BGIFrame adaption (http://plugins.jquery.com/project/bgiframe)
	   * Special thanks to Brandon Aaron
	   */
			BGIFRAME = '<iframe class="qtip-bgiframe" frameborder="0" tabindex="-1" src="javascript:\'\';" ' + ' style="display:block; position:absolute; z-index:-1; filter:alpha(opacity=0); ' + '-ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";"></iframe>';
	
			function Ie6(api) {
				this._ns = 'ie6';
	
				this.qtip = api;
				this.init(api);
			}
	
			$.extend(Ie6.prototype, {
				_scroll: function _scroll() {
					var overlay = this.qtip.elements.overlay;
					overlay && (overlay[0].style.top = $(window).scrollTop() + 'px');
				},
	
				init: function init(qtip) {
					var tooltip = qtip.tooltip;
	
					// Create the BGIFrame element if needed
					if ($('select, object').length < 1) {
						this.bgiframe = qtip.elements.bgiframe = $(BGIFRAME).appendTo(tooltip);
	
						// Update BGIFrame on tooltip move
						qtip._bind(tooltip, 'tooltipmove', this.adjustBGIFrame, this._ns, this);
					}
	
					// redraw() container for width/height calculations
					this.redrawContainer = $('<div/>', { id: NAMESPACE + '-rcontainer' }).appendTo(document.body);
	
					// Fixup modal plugin if present too
					if (qtip.elements.overlay && qtip.elements.overlay.addClass('qtipmodal-ie6fix')) {
						qtip._bind(window, ['scroll', 'resize'], this._scroll, this._ns, this);
						qtip._bind(tooltip, ['tooltipshow'], this._scroll, this._ns, this);
					}
	
					// Set dimensions
					this.redraw();
				},
	
				adjustBGIFrame: function adjustBGIFrame() {
					var tooltip = this.qtip.tooltip,
					    dimensions = {
						height: tooltip.outerHeight(FALSE),
						width: tooltip.outerWidth(FALSE)
					},
					    plugin = this.qtip.plugins.tip,
					    tip = this.qtip.elements.tip,
					    tipAdjust,
					    offset;
	
					// Adjust border offset
					offset = parseInt(tooltip.css('borderLeftWidth'), 10) || 0;
					offset = { left: -offset, top: -offset };
	
					// Adjust for tips plugin
					if (plugin && tip) {
						tipAdjust = plugin.corner.precedance === 'x' ? [WIDTH, LEFT] : [HEIGHT, TOP];
						offset[tipAdjust[1]] -= tip[tipAdjust[0]]();
					}
	
					// Update bgiframe
					this.bgiframe.css(offset).css(dimensions);
				},
	
				// Max/min width simulator function
				redraw: function redraw() {
					if (this.qtip.rendered < 1 || this.drawing) {
						return this;
					}
	
					var tooltip = this.qtip.tooltip,
					    style = this.qtip.options.style,
					    container = this.qtip.options.position.container,
					    perc,
					    width,
					    max,
					    min;
	
					// Set drawing flag
					this.qtip.drawing = 1;
	
					// If tooltip has a set height/width, just set it... like a boss!
					if (style.height) {
						tooltip.css(HEIGHT, style.height);
					}
					if (style.width) {
						tooltip.css(WIDTH, style.width);
					}
	
					// Simulate max/min width if not set width present...
					else {
							// Reset width and add fluid class
							tooltip.css(WIDTH, '').appendTo(this.redrawContainer);
	
							// Grab our tooltip width (add 1 if odd so we don't get wrapping problems.. huzzah!)
							width = tooltip.width();
							if (width % 2 < 1) {
								width += 1;
							}
	
							// Grab our max/min properties
							max = tooltip.css('maxWidth') || '';
							min = tooltip.css('minWidth') || '';
	
							// Parse into proper pixel values
							perc = (max + min).indexOf('%') > -1 ? container.width() / 100 : 0;
							max = (max.indexOf('%') > -1 ? perc : 1 * parseInt(max, 10)) || width;
							min = (min.indexOf('%') > -1 ? perc : 1 * parseInt(min, 10)) || 0;
	
							// Determine new dimension size based on max/min/current values
							width = max + min ? Math.min(Math.max(width, min), max) : width;
	
							// Set the newly calculated width and remvoe fluid class
							tooltip.css(WIDTH, Math.round(width)).appendTo(container);
						}
	
					// Set drawing flag
					this.drawing = 0;
	
					return this;
				},
	
				destroy: function destroy() {
					// Remove iframe
					this.bgiframe && this.bgiframe.remove();
	
					// Remove bound events
					this.qtip._unbind([window, this.qtip.tooltip], this._ns);
				}
			});
	
			IE6 = PLUGINS.ie6 = function (api) {
				// Proceed only if the browser is IE6
				return BROWSER.ie === 6 ? new Ie6(api) : FALSE;
			};
	
			IE6.initialize = 'render';
	
			CHECKS.ie6 = {
				'^content|style$': function contentStyle$() {
					this.redraw();
				}
			};
			;
		});
	})(window, document);

/***/ },
/* 588 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(528), __webpack_require__(581)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, BaseView, FormUtil) {
	
	  function runCallback(callback, field) {
	    callback.apply(this, _.map(field.split(/\s+/), function (field) {
	      return this.model.get(field);
	    }, this));
	  }
	
	  function runIf(fn, ctx) {
	    if (_.isFunction(fn)) {
	      fn.call(ctx);
	    }
	  }
	
	  /**
	   * @class InputWrapper
	   * @extends Okta.View
	   * @private
	   * The outer wrapper that warps the label and the input container
	   */
	  return BaseView.extend({
	
	    className: function className() {
	      var className = 'o-form-fieldset';
	
	      if (this.options['label-top']) {
	        className += ' o-form-label-top';
	      }
	
	      if (this.options.readOnly) {
	        className += ' o-form-read-mode';
	      }
	
	      return className;
	    },
	
	    attributes: function attributes() {
	      return {
	        'data-se': this.options['data-se'] || 'o-form-fieldset'
	      };
	    },
	
	    /**
	     * @constructor
	     * @param  {Object} options options hash
	     * @param  {Object} [options.events]
	     * @param  {Object} [options.bindings]
	     * @param  {Object} [options.showWhen]
	     * @param  {Function} [options.initialize] post initialize callback
	     * @param  {Function} [options.render] post render callback
	     */
	    constructor: function constructor(options) {
	      if (options.className) {
	        this.inputWrapperClassName = this.className;
	        this.optionsClassName = options.className;
	        options.className = function () {
	          return _.result(this, 'inputWrapperClassName', '') + ' ' + _.result(this, 'optionsClassName');
	        };
	      }
	      BaseView.apply(this, arguments);
	      _.each(options.events || {}, function (callback, event) {
	        this.listenTo(this.model, event, callback);
	      }, this);
	
	      _.each(options.bindings || {}, function (callback, field) {
	        this.listenTo(this.model, FormUtil.changeEventString(field.split(/\s+/)), _.bind(runCallback, this, callback, field));
	      }, this);
	
	      FormUtil.applyShowWhen(this, options.showWhen);
	      FormUtil.applyToggleWhen(this, options.toggleWhen);
	
	      runIf(options.initialize, this);
	    },
	
	    postRender: function postRender() {
	      _.each(this.options.bindings || {}, runCallback, this);
	      runIf(this.options.render, this);
	    },
	
	    /**
	     * @return {InputLabel}
	     */
	    getLabel: function getLabel() {
	      return this.size() > 1 ? this.at(0) : null;
	    },
	    /**
	     * @deprecated ambiguous naming, use {@link #getInputContainer}
	     */
	    getInput: function getInput() {
	      return this.getInputContainer();
	    },
	
	    /**
	     * @return {InputContainer}
	     */
	    getInputContainer: function getInputContainer() {
	      return this.at(this.size() > 1 ? 1 : 0);
	    },
	
	    /**
	     * @return {BaseInput[]}
	     */
	    getInputs: function getInputs() {
	      return this.getInputContainer().toArray();
	    },
	
	    focus: function focus() {
	      return this.getInput().focus();
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 589 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(528)], __WEBPACK_AMD_DEFINE_RESULT__ = function (BaseView) {
	
	  var template = '\
	    <div class="okta-form-infobox-error infobox infobox-error" role="alert">\
	      <span class="icon error-16"></span>\
	      {{#if errorSummary}}\
	        <p>{{errorSummary}}</p>\
	      {{else}}\
	        <p>{{i18n code="oform.errorbanner.title" bundle="courage"}}</p>\
	      {{/if}}\
	    </div>\
	  ';
	
	  return BaseView.extend({
	    template: template,
	    modelEvents: {
	      'form:clear-errors': 'remove'
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 590 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(405)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, StringUtil) {
	
	  var FIELD_REGEX = /^([\S]+)\: (.+)$/;
	
	  return {
	
	    /**
	     * Helper function that returns the json output of an xhr objext
	     * @param  {jqXhr} xhr
	     * @return {Object}
	     */
	    getResponseJSON: function getResponseJSON(xhr) {
	      try {
	        return xhr.responseJSON || JSON.parse(xhr.responseText);
	      } catch (e) {
	        return;
	      }
	    },
	
	    /**
	     * Parses an error summary to extract a field name and an error message
	     * @param  {String} errorSummary The raw error summary
	     * @return {String[]} An array with two members: [field name, error message]
	     */
	    parseErrorSummary: function parseErrorSummary(errorSummary) {
	      // error format is: `fieldName: The field cannot be left blank`
	      var matches = errorSummary.match(FIELD_REGEX);
	      if (matches) {
	        return [matches[1], matches[2]];
	      }
	    },
	
	    /**
	     * Parses an error cause object to extract a field name from property attribute
	     * and an error message form errorSummary attribute. It looks to see if there is
	     * a custom override/translation for the erorrCause.reason before using the errorSummary
	     * @param  {Object} errorCause object
	     * @return {String[]} An array with two members: [field name, error message]
	     */
	    parseErrorCauseObject: function parseErrorCauseObject(errorCause) {
	      if (errorCause.property && errorCause.errorSummary) {
	        var localizedMsg = StringUtil.localize(errorCause.reason),
	            apiMsg = errorCause.errorSummary,
	            field = errorCause.property,
	            errorMessage = localizedMsg.indexOf('L10N_ERROR[') === -1 ? localizedMsg : apiMsg;
	        return [field, errorMessage];
	      }
	    },
	
	    parseErrors: function parseErrors(resp) {
	      var responseJSON = this.getResponseJSON(resp);
	      return _.map(responseJSON && responseJSON.errorCauses || [], function (errorCause) {
	        return ('' + errorCause.errorSummary).replace(FIELD_REGEX, '$2');
	      });
	    },
	
	    /**
	     * Parses the response for errors
	     * Returns a map of field names > array or error messages
	     * Example:
	     * ```javascript
	     * {
	     *   url: ['The field cannot be left blank', 'The field has to be a valid URI'],
	     *   name: ['The field cannot be left blank']
	     * }
	     * ```
	     * @param  {Object} resp
	     * @return {Object}
	     */
	    parseFieldErrors: function parseFieldErrors(resp) {
	      var responseJSON = this.getResponseJSON(resp),
	          errors = {};
	
	      // xhr error object
	      if (responseJSON) {
	        _.each(responseJSON.errorCauses || [], function (cause) {
	          var res = [];
	          if (cause.property && cause.errorSummary) {
	            res = this.parseErrorCauseObject(cause);
	          } else {
	            res = this.parseErrorSummary(cause && cause.errorSummary || '');
	          }
	          if (res) {
	            var fieldName = res[0],
	                message = res[1];
	            errors[fieldName] || (errors[fieldName] = []);
	            errors[fieldName].push(message);
	          }
	        }, this);
	      }
	      // validation key/value object
	      else if (_.isObject(resp) && _.size(resp)) {
	          _.each(resp, function (msg, field) {
	            errors[field] = [msg];
	          });
	        }
	      return _.size(errors) ? errors : undefined;
	    }
	  };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 591 */
/***/ function(module, exports) {

	// empty (null-loader)

/***/ },
/* 592 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(528), __webpack_require__(581)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, BaseView, FormUtil) {
	
	  return BaseView.extend({
	
	    className: 'o-form-button-bar',
	
	    initialize: function initialize(options) {
	      this.addButton({
	        type: 'save',
	        text: _.resultCtx(options, 'save', this),
	        id: _.resultCtx(options, 'saveId', this),
	        className: _.resultCtx(options, 'saveClassName', this)
	      });
	
	      if (!options.noCancelButton) {
	        this.addButton({ type: 'cancel', text: _.resultCtx(options, 'cancel', this) });
	      }
	
	      if (options.hasPrevStep) {
	        this.addButton({ type: 'previous' }, { prepend: true });
	      }
	    },
	
	    /**
	     * Adds a buttomn to the toolbar
	     * @param {Object} params button parameters
	     * @param {Object} options {@link Okta.View#add} options
	     */
	    addButton: function addButton(params, options) {
	      return this.add(FormUtil.createButton(params), options);
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 593 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(528)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, BaseView) {
	
	  return BaseView.extend({
	
	    template: '\
	    {{#if hasRemaining}}\
	      {{i18n code="characters.remaining" bundle="courage" arguments="count"}}\
	    {{/if}}\
	    {{#unless hasRemaining}}\
	      <div class="o-form-text-counter-over">\
	        {{i18n code="characters.over" bundle="courage" arguments="count"}}\
	      </div>\
	    {{/unless}}',
	
	    modelEvents: function modelEvents() {
	      var events = {};
	      events['change:' + this.options.field] = _.throttle(this.render, 50);
	
	      return events;
	    },
	
	    /**
	     *
	     * @param {Okta.Model} options.model an Model
	     * @param {String} options.field the model field to track the count against.
	     *                               it shall have defined "maxLength".
	     *
	     */
	    initialize: function initialize() {
	      if (!this.options.model || !this.options.field) {
	        throw new Error('Cannot create TextCounterExplain. missing arguments ["model", "field"]');
	      }
	
	      var propertySchema = this.options.model.getPropertySchema(this.options.field);
	
	      if (!propertySchema || !_.isNumber(propertySchema.maxLength)) {
	        throw new Error('Cannot create TextCounterExplain. property missing "maxLength" definition');
	      }
	
	      this.field = this.options.field;
	      this.maxLength = propertySchema.maxLength;
	    },
	
	    getTemplateData: function getTemplateData() {
	      var value = this.model.get(this.field) || '',
	          max = this.maxLength,
	          remains = max - value.length,
	          hasRemaining = remains >= 0;
	
	      return { hasRemaining: hasRemaining,
	        count: hasRemaining ? remains : Math.abs(remains)
	      };
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 594 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(528)], __WEBPACK_AMD_DEFINE_RESULT__ = function (BaseView) {
	
	  var View = BaseView.extend({
	
	    tagName: 'h2',
	
	    className: 'wizard-head',
	
	    template: '<span class="step-num">{{step}}</span>{{title}}'
	
	  });
	
	  return View;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 595 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _stringify = __webpack_require__(406);
	
	var _stringify2 = _interopRequireDefault(_stringify);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/* eslint max-statements: 0 */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(404), __webpack_require__(559), __webpack_require__(405)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, $, SchemaUtil, StringUtil) {
	  var NAME = 'name',
	      ENUM_KEY_PREFIX = '_enum_';
	
	  /**
	   * Generate Input Options in order to create an input in an Form for Enum type attribute.
	   * @param {Object} config informations for creating input options
	   *   config.name        schema property name
	   *   config.title       schema property title
	   *   config.readOnly    create an read only input?
	   *   config.explain     sub-title to the input
	   *   config.enumValues  list of enum values for creating input options (Dropdown/SimpleCheckBoxSet)
	   *   config.displayType display type of schema property
	   *
	   * @return {Object} inputOptions options for create an Input view. (Dropdown/SimpleCheckBoxSet)
	   *
	   */
	  function getEnumInputOptions(config) {
	    var enumOneOf = convertToOneOf(config.enumValues),
	        inputOptions = {
	      name: config.name,
	      label: config.title,
	      readOnly: config.readOnly,
	      customExplain: config.explain,
	      params: { enumOneOf: enumOneOf },
	      options: getDropdownOptionsFromOneOf(enumOneOf)
	    };
	
	    // input type
	    if (SchemaUtil.isArrayDataType(config.displayType)) {
	      inputOptions.type = 'checkboxset';
	      inputOptions.to = valuesToEnumObjects;
	      inputOptions.from = enumObjectsToValues;
	    } else {
	      inputOptions.type = 'select';
	      inputOptions.to = valueToEnumObject;
	      inputOptions.from = enumObjectToValue;
	    }
	
	    inputOptions.input = null;
	    return inputOptions;
	  }
	
	  function getDropdownOptions(values) {
	    return _.isArray(values) ? getDropdownOptionsFromOneOf(convertToOneOf(values)) : {};
	  }
	
	  function getDropdownOptionsFromOneOf(values) {
	    if (!isOneOfEnumObject(values)) {
	      return {};
	    }
	
	    return _.reduce(values, function (options, value, index) {
	      options[convertIndexToEnumIndex(index)] = value.title;
	      return options;
	    }, {});
	  }
	
	  function convertToOneOf(values) {
	    // assume this is a legacy enum array and convert to oneOf object
	    if (!_.all(values, $.isPlainObject)) {
	      return convertEnumToOneOf(values);
	
	      // we assume object without const and title is an enum object which need special conversion
	    } else if (!isOneOfEnumObject(values)) {
	      return convertEnumObjectToOneOf(values);
	    }
	
	    return values;
	  }
	
	  function isOneOfEnumObject(values) {
	    return _.isArray(values) && _.all(values, function (value) {
	      return _.has(value, 'const') && _.has(value, 'title');
	    });
	  }
	
	  function convertEnumToOneOf(values) {
	    return _.map(values, function (value) {
	      return {
	        const: value,
	        title: valueToTitle(value)
	      };
	    });
	  }
	
	  function valueToTitle(value) {
	    if (_.isObject(value)) {
	      return (0, _stringify2.default)(value);
	    }
	
	    if (_.isNumber(value)) {
	      return value + '';
	    }
	
	    return value;
	  }
	
	  function convertEnumObjectToOneOf(values) {
	    // If all object found the key NAME, use the NAME's value as display name
	    var findKey = _.partial(_.has, _, NAME);
	    if (_.all(values, findKey)) {
	      return _.chain(values).filter(function (value) {
	        return $.isPlainObject(value) && _.has(value, NAME);
	      }).map(function (value) {
	        return { const: value, title: value[NAME] };
	      }).value();
	    }
	
	    // Assume a legacy object array does not need special handling and just convert to const/title enum
	    return convertEnumToOneOf(values);
	  }
	
	  function convertIndexToEnumIndex(index) {
	    return '' + ENUM_KEY_PREFIX + index;
	  }
	
	  function enumObjectToValue(obj) {
	    // Cannot rely on comparator in findIndex when compare objects so need special handling
	    var index = _.findIndex(this.options.params.enumOneOf, function (oneOfObj) {
	      return _.isObject(obj) ? _.isEqual(oneOfObj.const, obj) : oneOfObj.const === obj;
	    });
	
	    return index > -1 ? convertIndexToEnumIndex(index) : obj;
	  }
	
	  function valueToEnumObject(val) {
	    if (!_.isString(val) || val.indexOf(ENUM_KEY_PREFIX) !== 0) {
	      return val;
	    }
	
	    var index = val.replace(ENUM_KEY_PREFIX, '');
	
	    // @see `getEnumInputOptions` how enumValues has been set.
	    var enumValue = this.options.params && _.isArray(this.options.params.enumOneOf) ? this.options.params.enumOneOf[index] : null;
	
	    return _.has(enumValue, 'const') ? enumValue.const : enumValue;
	  }
	
	  function valuesToEnumObjects(values) {
	    return _.map(values, valueToEnumObject.bind(this));
	  }
	
	  function enumObjectsToValues(values) {
	    return _.map(values, enumObjectToValue.bind(this));
	  }
	
	  function isStringConstraint(value) {
	    return _.isString(value) && $.trim(value) !== '';
	  }
	
	  function isNumberConstraint(value) {
	    return _.isNumber(value) || _.isNumber(StringUtil.parseFloat($.trim(value)));
	  }
	
	  function isIntegerConstraint(value) {
	    var integer = _.isNumber(value) ? value : StringUtil.parseInt($.trim(value));
	
	    return typeof integer === 'number' && isFinite(integer) && Math.floor(integer) === integer;
	  }
	
	  function isObjectConstraint(value) {
	    if (_.isObject(value) && !_.isArray(value)) {
	      return true;
	    }
	
	    var object = StringUtil.parseObject($.trim(value));
	    return _.isObject(object) && !_.isArray(object);
	  }
	
	  function isConstraintValueMatchType(value, type) {
	    switch (type) {
	      case SchemaUtil.STRING:
	        return isStringConstraint(value);
	      case SchemaUtil.NUMBER:
	        return isNumberConstraint(value);
	      case SchemaUtil.INTEGER:
	        return isIntegerConstraint(value);
	      case SchemaUtil.OBJECT:
	        return isObjectConstraint(value);
	    }
	  }
	
	  return {
	    getEnumInputOptions: getEnumInputOptions,
	    getDropdownOptions: getDropdownOptions,
	    convertToOneOf: convertToOneOf,
	    isConstraintValueMatchType: isConstraintValueMatchType
	  };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 596 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/* eslint-env es6 */
	/* eslint max-statements: [2, 17], max-len: [2, 160], max-params: [2, 6] */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(404), __webpack_require__(528), __webpack_require__(570), __webpack_require__(537), __webpack_require__(405)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, $, BaseView, Callout, ButtonFactory, StringUtil) {
	
	  /**
	   * @class BaseInput
	   * @private
	   * An abstract object that defines an input for {@link Okta.Form}
	   *
	   * BaseInputs are typically not created directly, but being passed to {@link Okta.Form#addInput}
	   * @extends Okta.View
	   */
	
	  return BaseView.extend({
	
	    tagName: 'span',
	
	    attributes: function attributes() {
	      return {
	        'data-se': 'o-form-input-' + this.getNameString()
	      };
	    },
	
	    /**
	    * default placeholder text when options.placeholder is not defined
	    */
	    defaultPlaceholder: '',
	
	    constructor: function constructor(options) {
	      options = _.defaults(options || {}, {
	        inputId: options.id || _.uniqueId('input'),
	        placeholder: this.defaultPlaceholder,
	        inlineValidation: true,
	        validateOnlyIfDirty: false
	      });
	
	      delete options.id;
	
	      // decorate the `enable` and `disable` and toggle the `o-form-disabled` class.
	      // so we wont need to worry about this when overriding the methods
	      var self = this;
	      _.each({ enable: 'removeClass', disable: 'addClass' }, function (method, action) {
	        self[action] = _.wrap(self[action], function (fn) {
	          fn.apply(self, arguments);
	          self.$el[method]('o-form-disabled');
	        });
	      });
	
	      BaseView.call(this, options);
	
	      if (_.result(options, 'readOnly') !== true && _.result(options, 'read') === true) {
	        this.listenTo(this.model, 'change:__edit__', this.render);
	      }
	
	      if (_.isFunction(this.focus)) {
	        this.focus = _.debounce(_.bind(this.focus, this), 50);
	      }
	
	      // Enable inline validation if this is not the first field in the form.
	      if (!_.result(options, 'validateOnlyIfDirty')) {
	        this.addInlineValidation();
	      }
	
	      this.addModelListeners();
	      this.$el.addClass('o-form-input-name-' + this.getNameString());
	    },
	
	    addAriaLabel: function addAriaLabel() {
	      var ariaLabel = this.options.ariaLabel;
	      if (ariaLabel) {
	        this.$(':input').attr('aria-label', ariaLabel);
	      }
	    },
	
	    addInlineValidation: function addInlineValidation() {
	      if (_.result(this.options, 'inlineValidation')) {
	        this.$el.on('focusout', ':input', _.bind(this.validate, this));
	      }
	    },
	
	    toModelValue: function toModelValue() {
	      var value = this.val();
	      if (_.isFunction(this.to)) {
	        value = this.to.call(this, value);
	      }
	      if (_.isFunction(this.options.to)) {
	        value = this.options.to.call(this, value);
	      }
	      return value;
	    },
	
	    __getDependencyCalloutBtn: function __getDependencyCalloutBtn(btnConfig) {
	      var self = this;
	      var btnOptions = _.clone(btnConfig);
	      // add onfocus listener to re-evaluate depedency when callout button is clicked
	      var originalClick = btnOptions.click || function () {};
	      btnOptions.click = function () {
	        $(window).one('focus.dependency', function () {
	          self.__showInputDependencies();
	        });
	        originalClick.call(self);
	      };
	      var CalloutBtn = BaseView.extend({
	        children: [ButtonFactory.create(btnOptions)]
	      });
	      return new CalloutBtn();
	    },
	
	    getCalloutParent: function getCalloutParent() {
	      return this.$('input[value="' + this.getModelValue() + '"]').parent();
	    },
	
	    __getCalloutMsgContainer: function __getCalloutMsgContainer(calloutMsg) {
	      return BaseView.extend({
	        template: '\
	        <span class="o-form-explain">\
	           {{msg}}\
	        </span>\
	        ',
	        getTemplateData: function getTemplateData() {
	          return {
	            msg: calloutMsg
	          };
	        }
	      });
	    },
	
	    showCallout: function showCallout(calloutConfig, dependencyResolved) {
	      var callout = _.clone(calloutConfig);
	      callout.className = 'dependency-callout';
	      if (callout.btn) {
	        callout.content = this.__getDependencyCalloutBtn(callout.btn);
	        delete callout.btn;
	      }
	      var dependencyCallout = Callout.create(callout);
	      if (!dependencyResolved) {
	        dependencyCallout.add(this.__getCalloutMsgContainer(StringUtil.localize('dependency.callout.msg', 'courage')));
	      }
	      var calloutParent = this.getCalloutParent();
	      calloutParent.append(dependencyCallout.render().el);
	      if (callout.type == 'success') {
	        _.delay(function () {
	          // fade out success callout
	          dependencyCallout.$el.fadeOut(800);
	        }, 1000);
	      }
	    },
	
	    removeCallout: function removeCallout() {
	      this.$el.find('.dependency-callout').remove();
	    },
	
	    __evaluateCalloutObject: function __evaluateCalloutObject(dependencyResolved, calloutTitle) {
	      var defaultCallout;
	      if (dependencyResolved) {
	        defaultCallout = {
	          title: StringUtil.localize('dependency.action.completed', 'courage'),
	          size: 'large',
	          type: 'success'
	        };
	      } else {
	        defaultCallout = {
	          title: StringUtil.localize('dependency.action.required', 'courage', [calloutTitle]),
	          size: 'large',
	          type: 'warning'
	        };
	      }
	      return defaultCallout;
	    },
	
	    __handleDependency: function __handleDependency(result, callout) {
	      var self = this;
	      var calloutConfig = _.isFunction(callout) ? callout(result) : _.extend({}, callout, self.__evaluateCalloutObject(result.resolved, callout.title));
	      // remove existing callouts if any
	      self.removeCallout();
	      self.showCallout(calloutConfig, result.resolved);
	    },
	
	    __showInputDependencies: function __showInputDependencies() {
	      var self = this;
	      var fieldDependency = self.options.deps[self.getModelValue()];
	      if (fieldDependency && _.isFunction(fieldDependency.func)) {
	        fieldDependency.func().done(function (data) {
	          self.__handleDependency({ resolved: true, data: data }, fieldDependency.callout);
	        }).fail(function (data) {
	          self.__handleDependency({ resolved: false, data: data }, fieldDependency.callout);
	        });
	      } else {
	        self.removeCallout();
	      }
	    },
	
	    _isEdited: false,
	    /**
	     * updates the model with the input's value
	     */
	    update: function update() {
	      if (!this._isEdited && _.result(this.options, 'validateOnlyIfDirty')) {
	        this._isEdited = true;
	        this.addInlineValidation();
	      }
	      this.model.set(this.options.name, this.toModelValue());
	      if (this.options.deps) {
	        // check for dependencies
	        this.__showInputDependencies();
	      }
	    },
	
	    /**
	     * Is the input in edit mode
	     * @return {Boolean}
	     */
	    isEditMode: function isEditMode() {
	      var ret = !_.result(this.options, 'readOnly') && (_.result(this.options, 'read') !== true || this.model.get('__edit__') === true);
	      return ret;
	    },
	
	    /**
	     * Renders the input
	     * @readonly
	     */
	    render: function render() {
	      this.preRender();
	      var params = this.options.params;
	      this.options.params = _.resultCtx(this.options, 'params', this);
	
	      if (this.isEditMode()) {
	        this.editMode();
	        if (_.resultCtx(this.options, 'disabled', this)) {
	          this.disable();
	        } else {
	          this.enable();
	        }
	      } else {
	        this.readMode();
	      }
	
	      this.options.params = params;
	      this.addAriaLabel();
	      this.postRender();
	
	      return this;
	    },
	
	    /**
	     * checks if the current value in the model is valid for this field
	     */
	    validate: function validate() {
	      if (!this.model.get('__pending__') && this.isEditMode() && _.isFunction(this.model.validateField)) {
	        var validationError = this.model.validateField(this.options.name);
	        if (validationError) {
	          _.delay(function () {
	            this.model.trigger('form:clear-error:' + this.options.name);
	            this.model.trigger('invalid', this.model, validationError, false);
	          }.bind(this), 100);
	        }
	      }
	    },
	
	    /**
	    * Add model event listeners
	    */
	    addModelListeners: function addModelListeners() {
	      this.listenTo(this.model, 'form:field-error', function (name) {
	        if (this.options.name === name) {
	          this.__markError();
	        }
	      });
	      this.listenTo(this.model, 'form:clear-errors change:' + this.options.name, this.__clearError);
	      this.listenTo(this.model, 'form:clear-error:' + this.options.name, this.__clearError);
	    },
	
	    /**
	    * The value of the input
	    * @return {Mixed}
	    */
	    val: function val() {
	      throw new Error('val() is an abstract method');
	    },
	
	    /**
	    * Set focus on the input
	    */
	    focus: function focus() {
	      throw new Error('focus() is an abstract method');
	    },
	
	    /**
	    * Default value in read mode
	    * When model has no value for the field
	    */
	    defaultValue: function defaultValue() {
	      return '';
	    },
	
	    /**
	    * Renders the input in edit mode
	    */
	    editMode: function editMode() {
	      var options = _.extend({}, this.options, {
	        value: this.getModelValue()
	      });
	      this.$el.html(this.template(options));
	      this.options.multi && this.$el.removeClass('margin-r');
	      return this;
	    },
	
	    /**
	    * Renders the readable value of the input in read mode
	    */
	    readMode: function readMode() {
	      this.$el.text(this.getReadModeString());
	      this.$el.removeClass('error-field');
	      this.options.multi && this.$el.addClass('margin-r');
	      return this;
	    },
	
	    getReadModeString: function getReadModeString() {
	      var readModeStr = _.resultCtx(this.options, 'readModeString', this);
	      if (readModeStr) {
	        return readModeStr;
	      }
	      return this.toStringValue();
	    },
	
	    /**
	     * The model value off the field associated with the input
	     * @return {Mixed}
	     */
	    getModelValue: function getModelValue() {
	      var value = this.model.get(this.options.name);
	
	      if (_.isFunction(this.from)) {
	        value = this.from.call(this, value);
	      }
	      if (_.isFunction(this.options.from)) {
	        value = this.options.from.call(this, value);
	      }
	      return value;
	    },
	
	    /*
	    * convenience method to get the textual value from the model
	    * will return the textual label rather than value in case of select/radio
	    * @return {String}
	    */
	    toStringValue: function toStringValue() {
	      var value = this.getModelValue();
	      if (this.options.options) {
	        // dropdown or radio
	        value = this.options.options[value];
	      }
	      return value || this.defaultValue();
	    },
	
	    /**
	     * Triggers a form:resize event in order to tell dialogs content size has changed
	     */
	    resize: function resize() {
	      this.model.trigger('form:resize');
	    },
	
	    /**
	     * Disable the input
	     */
	    disable: function disable() {
	      this.$(':input').prop('disabled', true);
	    },
	
	    /**
	     * Enable the input
	     */
	    enable: function enable() {
	      this.$(':input').prop('disabled', false);
	    },
	
	    /**
	     * Change the type of the input field. (e.g., text <--> password)
	     * @param type
	     */
	    changeType: function changeType(type) {
	      this.$(':input').prop('type', type);
	      // Update the options so that it keeps the uptodate state
	      this.options.type = type;
	    },
	
	    getNameString: function getNameString() {
	      if (_.isArray(this.options.name)) {
	        return this.options.name.join('-');
	      }
	      return this.options.name;
	    },
	
	    /**
	     * Get parameters, computing _.result
	     * @param  {[type]} options alternative options
	     * @return {Object} the params
	     */
	    getParams: function getParams(options) {
	      var opts = options || this.options || {};
	      return _.clone(_.resultCtx(opts, 'params', this) || {});
	    },
	
	    /**
	     * get a parameter from options.params, compute _.result when needed.
	     * @param  {String} key
	     * @param  {Object} defaultValue
	     * @return {Object} the params
	     */
	    getParam: function getParam(key, defaultValue) {
	      var result = _.resultCtx(this.getParams(), key, this);
	      return !_.isUndefined(result) ? result : defaultValue;
	    },
	
	    /**
	     * Get a parameter from options.params or if empty, object attribute.
	     *
	     * @param  {String} key
	     * @return {Object} the param or attribute
	     */
	    getParamOrAttribute: function getParamOrAttribute(key) {
	      return this.getParam(key) || _.result(this, key);
	    },
	
	    __markError: function __markError() {
	      this.$el.addClass('o-form-has-errors');
	    },
	
	    __clearError: function __clearError() {
	      this.$el.removeClass('o-form-has-errors');
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 597 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/* eslint max-statements: 0, max-params: 0 */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(405), __webpack_require__(598), __webpack_require__(601), __webpack_require__(595)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, StringUtil, BooleanSelect, TextBoxSet, EnumTypeHelper) {
	  // Maps each __displayType__ to a basic set of inputOptions.
	  function defaultOptions(property) {
	    /* eslint complexity: [2, 22] */
	    var type = property.get('__displayType__'),
	        values = property.get('__possibleValues__'),
	        name = property.get('name'),
	        title = property.get('title');
	    var inputOptions = {
	      type: 'text',
	      name: name,
	      label: title || name
	    };
	
	    // @see customOptions for enum complex "object" type,
	    // a.k.a "object" or "arrayofobject" type has enum values defined.
	    // Other cases (e.g., nested object type) are not support yet.
	
	    switch (type) {
	      case 'arrayofstring':
	        inputOptions.input = TextBoxSet;
	        inputOptions.params = { itemType: 'string' };
	        break;
	      case 'arrayofnumber':
	        inputOptions.input = TextBoxSet;
	        inputOptions.params = { itemType: 'number' };
	        break;
	      case 'arrayofinteger':
	        inputOptions.input = TextBoxSet;
	        inputOptions.params = { itemType: 'integer' };
	        break;
	      case 'arrayofobject':
	        inputOptions.input = TextBoxSet;
	        inputOptions.params = { itemType: property.get('items').type };
	        break;
	      case 'arrayofref-id':
	        inputOptions.input = TextBoxSet;
	        inputOptions.params = { itemType: property.get('items').format };
	        break;
	      case 'boolean':
	        inputOptions.input = BooleanSelect;
	        break;
	      case 'integer':
	      case 'number':
	        inputOptions.to = convertStringToNumber;
	        break;
	      case 'reference':
	        inputOptions.type = 'select';
	        inputOptions.options = getChoices(values);
	        break;
	      case 'image':
	        inputOptions.readOnly = true;
	        inputOptions.from = function (value) {
	          return _.isEmpty(value) ? '' : StringUtil.localize('user.profile.image.image_set', 'courage'); //TODO
	        };
	        break;
	      case 'password':
	        inputOptions.type = 'password';
	        break;
	      case 'date':
	        inputOptions.type = 'date';
	        break;
	      case 'uri':
	      case 'country-code':
	      case 'language-code':
	      case 'email':
	      case 'locale':
	      case 'timezone':
	      case 'string':
	      case 'object':
	        //default input options
	        break;
	      default:
	        throw new Error('unknown type: ' + type);
	    }
	    return inputOptions;
	  }
	
	  // Sets nonbasic inputOptions, such as an array with possible values
	  function customOptions(property) {
	    var inputOptions = {},
	        name = property.get('name'),
	        type = property.get('__displayType__'),
	        values = property.get('__possibleValues__'),
	        prefix = property.get('__fieldNamePrefix__');
	
	    if (prefix) {
	      inputOptions.name = prefix + name;
	      inputOptions.errorField = name;
	    }
	
	    if (property.isEnumType()) {
	      var configs = {
	        displayType: type,
	        title: property.get('title'),
	        enumValues: property.getEnumValues()
	      };
	      inputOptions = _.extend({}, EnumTypeHelper.getEnumInputOptions(configs), inputOptions);
	    } else if (isArray(type) && values) {
	      inputOptions.type = 'checkboxset';
	      inputOptions.input = null;
	      inputOptions.options = getChoices(values);
	    }
	
	    return inputOptions;
	  }
	
	  function convertStringToNumber(string) {
	    var number = StringUtil.parseFloat(string);
	    return string === '' ? null : number;
	  }
	
	  function isArray(type) {
	    return type && type.indexOf('array') >= 0;
	  }
	
	  // converts possibleValues to choices
	  // [a, b, c] => {a: a, b: b, c: c}
	  function getChoices(values) {
	    return _.object(values, values);
	  }
	
	  // A schema property may have an objectName either
	  // at the root level or nested in the items object
	  function getObjectName(schemaProp) {
	    var items = schemaProp.get('items');
	    if (items) {
	      return items.objectName;
	    } else {
	      return schemaProp.get('objectName');
	    }
	  }
	
	  function augmentSchemaProp(schemaProp, possibleValues, profile) {
	    var name = schemaProp.get('name'),
	        prefix = profile['__nestedProperty__'],
	        defaultValues = possibleValues[name],
	        userValues = profile.get(name),
	        //TODO: Not implemented
	    fixedValues,
	        values;
	
	    // If API responds with a field name that differs from the form-field name
	    // example: Model's 'profile.username' vs. server's 'username'
	    if (prefix) {
	      schemaProp.set('__fieldNamePrefix__', prefix);
	    }
	
	    // case 1: objectName - fixed list of values are set for the input
	    fixedValues = possibleValues[getObjectName(schemaProp)];
	
	    // case 2: name only - default list of values are provided, user can add more
	    // TODO: this case does not yet exist, so it is not tested
	    if (defaultValues && userValues) {
	      defaultValues = _.union(defaultValues, userValues);
	    }
	
	    // If both fixed and default values exist,
	    // take the fixed values unless they are empty
	    if (fixedValues && fixedValues.length) {
	      values = fixedValues;
	    } else if (defaultValues && defaultValues.length) {
	      values = defaultValues;
	    }
	
	    schemaProp.set('__possibleValues__', values);
	  }
	
	  function augmentSchemaProps(schemaProps, possibleValues, profile) {
	    schemaProps.each(function (schemaProp) {
	      augmentSchemaProp(schemaProp, possibleValues, profile);
	    });
	
	    return schemaProps;
	  }
	
	  /**
	   * Remove invalid schema properties from a collection
	   *
	   * @param {SchemaProperties Collection} [properties] A collection of schema properties
	   * @param {Object} [values] An object of the form { key: [value1, value2]}
	   * @return {Array} An array of valid schema models, this can be used to reset
	   * a schema properties collection for example.
	   * @private
	   */
	  function cleanSchema(properties, values) {
	    return properties.filter(function (schema) {
	      return isValidSchemaProp(schema, values);
	    });
	  }
	
	  /**
	   * Checks the validity of a schema property.
	   *
	   * @param {SchemaProperty} [schemaProp] A schema property backbone model
	   * @param {Object} [values] An object of the form { key: [value1, value2]}
	   * @return {Boolean} true/false
	   * @private
	   */
	  function isValidSchemaProp(schemaProp, values) {
	    var objectName = getObjectName(schemaProp),
	        results = values[objectName];
	
	    // a schema property that references an empty list of values
	    // Im looking at you, google apps.
	    if (objectName && _(results).isEmpty()) {
	      return false;
	    }
	    return true;
	  }
	
	  return {
	
	    /**
	     * Creates the options hash for BaseForm.addInput from a prepared schema
	     * property.
	     *
	     * @param {Okta.Model} [preparedSchemaProp] A schema property backbone model
	     * that has been standardized by the prepareSchema method.
	     * @return {Object} An object containing all of the options needed by
	     * BaseForm's addInput()
	     */
	    createInputOptions: function createInputOptions(preparedSchemaProp) {
	      var custom = customOptions(preparedSchemaProp),
	          standard = defaultOptions(preparedSchemaProp);
	
	      // underscore did not support nested extend
	      // https://github.com/jashkenas/underscore/issues/162
	      if (custom.params && standard.params) {
	        custom.params = _.defaults(custom.params, standard.params);
	      }
	      return _.defaults(custom, standard);
	    },
	
	    hasValidSchemaProps: function hasValidSchemaProps(schemaProps, possibleValues) {
	      if (_.isEmpty(schemaProps)) {
	        return false;
	      } else {
	        var validSchema = cleanSchema(schemaProps, possibleValues);
	        return !!validSchema.length;
	      }
	    },
	
	    /**
	     * This method is responsible for preparing a collection for the form
	     * factory to use by putting all of the information to create an input
	     * into the schema property and removing invalid properties.
	     * The typical UD form takes 3 models:
	     * The data model has the input values.
	     * The schema model describes which input to use, such as a textbox or a checkbox.
	     * The possible values model provide a list of default options to display, for example in a drop down menu.
	     *
	     * @param {SchemaProperty Collection} [schemaProps] A schema property backbone model.
	     * @param {Object} [possibleValues] An object of the form { key: [value1, value2]}
	     * @param {Okta.Model} [profile] A backbone model containing the property described by the schema property.
	     * @return {SchemaProperty Collection} A schema property collection with standardized models.
	     * The standard schema model adds a couple of additional private properties to
	     * allow the form factory to reference lookup values or name prefixes without going to a second model.
	     */
	    prepareSchema: function prepareSchema(schemaProps, possibleValues, profile) {
	      schemaProps.reset(cleanSchema(schemaProps, possibleValues));
	      return augmentSchemaProps(schemaProps, possibleValues, profile);
	    },
	
	    /**
	     * `prepareSchema` will reset the property list which may not be necessary at some case.
	     * like when setting default value for schema properties.
	     * (more detail about such case @see wiki UX, App+Entitlements+for+Provisioning)
	     *
	     * @param { }
	     * @return {String}
	     */
	
	    augmentSchemaProps: augmentSchemaProps,
	
	    augmentSchemaProp: augmentSchemaProp
	  };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 598 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(599)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Select) {
	
	  var options = {
	    'undefined': 'undefined',
	    'true': 'true',
	    'false': 'false'
	  };
	
	  var from = function from(val) {
	    if (val) {
	      return 'true';
	    }
	    if (val === false) {
	      return 'false';
	    }
	    return 'undefined';
	  };
	
	  var to = function to(val) {
	    switch (val) {
	      case 'undefined':
	        return null;
	      case 'true':
	        return true;
	      case 'false':
	        return false;
	      default:
	        return null;
	    }
	  };
	
	  return Select.extend({
	
	    initialize: function initialize() {
	      this.options.options = options;
	      this.options.from = from;
	      this.options.to = to;
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 599 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(404), __webpack_require__(330), __webpack_require__(557), __webpack_require__(529), __webpack_require__(596), __webpack_require__(600)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, Keys, TemplateUtil, BaseInput) {
	
	  var template = TemplateUtil.tpl('<select id="{{inputId}}" name="{{name}}"></select>');
	  var option = TemplateUtil.tpl('<option value="{{key}}">{{value}}</option>');
	
	  // Chosen has known problems when it's at the bottom of a container that has
	  // overflow:hidden set. Because it attaches to the parent container, its
	  // dropdown will be cut off in the UI. Any modal with a chosen select element
	  // at the bottom will manifest this behavior.
	  //
	  // The fix (aside from replacing Chosen) is to change Chosen's behavior -
	  // use the existing styles, but attach it to 'body' and position it correctly
	  // so that it is not affected by a parent overflow.
	  //
	  // More details can be found in OKTA-46489, OKTA-83570
	  var CHOSEN_WINDOW_MARGIN = 20;
	  var CHOSEN_MAX_HEIGHT = 240;
	  var CHOSEN_Z_INDEX = 50000;
	
	  function defer(fn) {
	    if (this.params.autoWidth) {
	      return fn.call(this);
	    } else {
	      return _.defer(_.bind(fn, this));
	    }
	  }
	
	  function findSelectWidth(self) {
	    self.$select.hide();
	    var select = $(self.$select[0]).hide();
	    $('body').append(select);
	    var width = self.params.width = select.width() * 1.2 + 'px';
	    self.$el.append(select.show());
	    return width;
	  }
	
	  function recalculateChosen($chosen, $results, $clone) {
	    var offset = $clone.offset();
	    $chosen.css({
	      left: offset.left,
	      top: offset.top
	    });
	    // Update the max-height to fit within the constraints of the window. This
	    // is especially important for modals because page scrolling is disabled.
	    var $win = $(window),
	        rHeight = $results.outerHeight(),
	        rBottom = rHeight + $results.offset().top - $win.scrollTop(),
	        wHeight = $win.height() - CHOSEN_WINDOW_MARGIN,
	        maxHeight = Math.min(rHeight + wHeight - rBottom, CHOSEN_MAX_HEIGHT);
	    $results.css('max-height', maxHeight);
	  }
	
	  function fixChosenModal($select) {
	    var $chosen = $select.next('.chzn-container'),
	        $clone = $chosen.clone(),
	        $results = $chosen.find('.chzn-results');
	
	    // Use a hidden clone to maintain layout and calculate offset. This is
	    // necessary for more complex layouts (like adding a group rule) where
	    // the chosen element is floated.
	    $clone.css('visibility', 'hidden');
	    $clone.removeAttr('id');
	    $clone.find('li').removeAttr('id');
	
	    // Save the original styles - we'll revert to them when the select closes
	    var baseStyles = {
	      'left': $chosen.css('left'),
	      'top': $chosen.css('top'),
	      'position': $chosen.css('position'),
	      'float': $chosen.css('float'),
	      'z-index': $chosen.css('z-index')
	    };
	    $results.hide();
	
	    // Handler for any resize events that happen when the results list is open
	    var resizeHandler = _.debounce(function () {
	      recalculateChosen($chosen, $results, $clone);
	    }, 10);
	
	    // When the dropdown opens, attach it to body, with the correct absolute
	    // position coordinates
	    $select.on('liszt:showing_dropdown', function () {
	      $chosen.width($chosen.width());
	      $select.after($clone);
	      // .chzn-container can trigger the vertical scrollbar if it causes scrollHeight > window height after append to
	      // the body. Force top -999999 to avoid the scrollbar so $chosen can find the right offset for relocation.
	      $chosen.css({
	        'position': 'absolute',
	        'float': 'none',
	        'z-index': CHOSEN_Z_INDEX,
	        'top': -999999
	      });
	      $('body').append($chosen);
	      $results.show();
	      recalculateChosen($chosen, $results, $clone);
	      // Capture scroll events:
	      // - for forms that use fixed positioning (like editing attributes in
	      //   Profile Editor) - window scroll
	      // - for forms that are too long for the modal - o-form-content scroll
	      $select.parents().scroll(resizeHandler);
	      $(window).on('resize scroll', resizeHandler);
	    });
	
	    // When the dropdown closes or the element is removed, revert to the
	    // original styles and reattach it to its original placement in the dom.
	    $select.on('liszt:hiding_dropdown remove', function () {
	      $select.parents().off('scroll', resizeHandler);
	      $(window).off('resize scroll', resizeHandler);
	      $chosen.css(baseStyles);
	      $results.hide();
	      $results.css('max-height', CHOSEN_MAX_HEIGHT);
	      $clone.remove();
	      $select.after($chosen);
	    });
	  }
	
	  return BaseInput.extend({
	
	    className: 'o-form-select',
	
	    /**
	    * @Override
	    */
	    events: {
	      'change select': 'update',
	      'keyup .chzn-search > :text': function keyupChznSearchText(e) {
	        if (Keys.isEsc(e)) {
	          this.$('.chzn-search > :text').val('');
	          e.stopPropagation();
	        }
	      }
	    },
	
	    constructor: function constructor() {
	      this.template = template;
	      this.option = option;
	      BaseInput.apply(this, arguments);
	      this.params = this.options.params || {};
	    },
	
	    /**
	    * @Override
	    */
	    editMode: function editMode() {
	      /* eslint max-statements: [2, 13] */
	
	      this.$el.html(template(this.options));
	      this.$select = this.$('select');
	
	      var options = this.getOptions();
	      _.each(options, function (value, key) {
	        this.$select.append(option({ key: key, value: value }));
	      }, this);
	
	      // Fix a regression in jQuery 1.x on Firefox
	      // jQuery.val(value) prepends an empty option to the dropdown
	      // if value doesnt exist in the dropdown.
	      // http://bugs.jquery.com/ticket/13514
	      var value = this.getModelValue();
	      if (value) {
	        this.$select.val(value);
	      } else {
	        this.$('option:first-child').prop('selected', true);
	      }
	      this.$el.addClass('o-form-control');
	
	      if (this.params.chosen !== false) {
	        this.__applyChosen();
	      }
	      return this;
	    },
	
	    __applyChosen: function __applyChosen(update) {
	      var width = this.options.wide ? '100%' : this.params.width || '62%';
	      if (this.params.autoWidth) {
	        width = findSelectWidth(this);
	      }
	
	      defer.call(this, function () {
	        var searchThreshold = this.getParam('searchThreshold', 10);
	        if (!_.result(this.options, 'autoRender') && update !== false) {
	          this.update();
	        }
	        this.$select.chosen({
	          'width': width,
	          'disable_search_threshold': searchThreshold,
	          'placeholder_text': this.options['placeholder']
	        });
	        fixChosenModal(this.$select);
	
	        if (this.params.autoWidth) {
	          // fix a chosen css bug
	          this.$el.width(0);
	        }
	
	        this.model.trigger('form:resize');
	      });
	    },
	
	    /**
	    * @Override
	    */
	    val: function val() {
	      return this.$select && this.$select.val();
	    },
	
	    /**
	    * @Override
	    */
	    focus: function focus() {
	      if (this.$select) {
	        return this.$select.focus();
	      }
	    },
	
	    /**
	     * @Override
	     */
	    toStringValue: function toStringValue() {
	      var selectedOption = this.getModelValue(),
	          displayString = selectedOption,
	          options = this.getOptions();
	      if (!_.isEmpty(options)) {
	        displayString = options[selectedOption];
	      }
	      if (_.isUndefined(displayString)) {
	        displayString = this.defaultValue();
	      }
	      return displayString || '';
	    },
	
	    /**
	     * Convert options to an object
	     * support input options that is a
	     * 1. a static object such as {key1: val1, key2: val2...}
	     * 2. a function to be called to return a static object
	     * will return an object with key-value pairs or with empty content
	     * @return {Object} The value
	     */
	    getOptions: function getOptions() {
	      var options = this.options.options;
	
	      if (_.isFunction(options)) {
	        options = options.call(this);
	      }
	
	      return _.isObject(options) ? options : {};
	    },
	
	    remove: function remove() {
	      if (this.$select) {
	        this.$select.trigger('remove');
	      }
	      return BaseInput.prototype.remove.apply(this, arguments);
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 600 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	
	// Chosen, a Select Box Enhancer for jQuery and Prototype
	// by Patrick Filler for Harvest, http://getharvest.com
	//
	// Version 0.11.1
	// Full source at https://github.com/harvesthq/chosen
	// Copyright (c) 2011 Harvest http://getharvest.com
	
	// MIT License, https://github.com/harvesthq/chosen/blob/master/LICENSE.md
	// This file is generated by `grunt build`, do not edit it by hand.
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(402)], __WEBPACK_AMD_DEFINE_RESULT__ = function (jQuery) {
	  (function () {
	    var SelectParser;
	
	    SelectParser = function () {
	      function SelectParser() {
	        this.options_index = 0;
	        this.parsed = [];
	      }
	
	      SelectParser.prototype.add_node = function (child) {
	        if (child.nodeName.toUpperCase() === "OPTGROUP") {
	          return this.add_group(child);
	        } else {
	          return this.add_option(child);
	        }
	      };
	
	      SelectParser.prototype.add_group = function (group) {
	        var group_position, option, _i, _len, _ref, _results;
	
	        group_position = this.parsed.length;
	        this.parsed.push({
	          array_index: group_position,
	          group: true,
	          label: group.label,
	          children: 0,
	          disabled: group.disabled
	        });
	        _ref = group.childNodes;
	        _results = [];
	        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	          option = _ref[_i];
	          _results.push(this.add_option(option, group_position, group.disabled));
	        }
	        return _results;
	      };
	
	      SelectParser.prototype.add_option = function (option, group_position, group_disabled) {
	        if (option.nodeName.toUpperCase() === "OPTION") {
	          if (option.text !== "") {
	            if (group_position != null) {
	              this.parsed[group_position].children += 1;
	            }
	            this.parsed.push({
	              array_index: this.parsed.length,
	              options_index: this.options_index,
	              value: option.value,
	              text: option.text,
	              html: option.innerHTML,
	              selected: option.selected,
	              disabled: group_disabled === true ? group_disabled : option.disabled,
	              group_array_index: group_position,
	              classes: option.className,
	              style: option.style.cssText
	            });
	          } else {
	            this.parsed.push({
	              array_index: this.parsed.length,
	              options_index: this.options_index,
	              empty: true
	            });
	          }
	          return this.options_index += 1;
	        }
	      };
	
	      return SelectParser;
	    }();
	
	    SelectParser.select_to_array = function (select) {
	      var child, parser, _i, _len, _ref;
	
	      parser = new SelectParser();
	      _ref = select.childNodes;
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        child = _ref[_i];
	        parser.add_node(child);
	      }
	      return parser.parsed;
	    };
	
	    this.SelectParser = SelectParser;
	  }).call(this);
	
	  (function () {
	    var AbstractChosen, root;
	
	    root = this;
	
	    AbstractChosen = function () {
	      function AbstractChosen(form_field, options) {
	        this.form_field = form_field;
	        this.options = options != null ? options : {};
	        if (!AbstractChosen.browser_is_supported()) {
	          return;
	        }
	        this.is_multiple = this.form_field.multiple;
	        this.set_default_text();
	        this.set_default_values();
	        this.setup();
	        this.set_up_html();
	        this.register_observers();
	        this.finish_setup();
	      }
	
	      AbstractChosen.prototype.set_default_values = function () {
	        var _this = this;
	
	        this.click_test_action = function (evt) {
	          return _this.test_active_click(evt);
	        };
	        this.activate_action = function (evt) {
	          return _this.activate_field(evt);
	        };
	        this.active_field = false;
	        this.mouse_on_container = false;
	        this.results_showing = false;
	        this.result_highlighted = null;
	        this.result_single_selected = null;
	        this.allow_single_deselect = this.options.allow_single_deselect != null && this.form_field.options[0] != null && this.form_field.options[0].text === "" ? this.options.allow_single_deselect : false;
	        this.disable_search_threshold = this.options.disable_search_threshold || 0;
	        this.disable_search = this.options.disable_search || false;
	        this.enable_split_word_search = this.options.enable_split_word_search != null ? this.options.enable_split_word_search : true;
	        this.search_contains = this.options.search_contains || false;
	        this.single_backstroke_delete = this.options.single_backstroke_delete || false;
	        this.max_selected_options = this.options.max_selected_options || Infinity;
	        return this.inherit_select_classes = this.options.inherit_select_classes || false;
	      };
	
	      AbstractChosen.prototype.set_default_text = function () {
	        if (this.form_field.getAttribute("data-placeholder")) {
	          this.default_text = this.form_field.getAttribute("data-placeholder");
	        } else if (this.is_multiple) {
	          this.default_text = this.options.placeholder_text_multiple || this.options.placeholder_text || AbstractChosen.default_multiple_text;
	        } else {
	          this.default_text = this.options.placeholder_text_single || this.options.placeholder_text || AbstractChosen.default_single_text;
	        }
	        return this.results_none_found = this.form_field.getAttribute("data-no_results_text") || this.options.no_results_text || AbstractChosen.default_no_result_text;
	      };
	
	      AbstractChosen.prototype.mouse_enter = function () {
	        return this.mouse_on_container = true;
	      };
	
	      AbstractChosen.prototype.mouse_leave = function () {
	        return this.mouse_on_container = false;
	      };
	
	      AbstractChosen.prototype.input_focus = function (evt) {
	        var _this = this;
	
	        if (this.is_multiple) {
	          if (!this.active_field) {
	            return setTimeout(function () {
	              return _this.container_mousedown();
	            }, 50);
	          }
	        } else {
	          if (!this.active_field) {
	            return this.activate_field();
	          }
	        }
	      };
	
	      AbstractChosen.prototype.input_blur = function (evt) {
	        var _this = this;
	
	        if (!this.mouse_on_container) {
	          this.active_field = false;
	          return setTimeout(function () {
	            return _this.blur_test();
	          }, 100);
	        }
	      };
	
	      AbstractChosen.prototype.result_add_option = function (option) {
	        var classes, style;
	
	        option.dom_id = this.container_id + "_o_" + option.array_index;
	        classes = [];
	        if (!option.disabled && !(option.selected && this.is_multiple)) {
	          classes.push("active-result");
	        }
	        if (option.disabled && !(option.selected && this.is_multiple)) {
	          classes.push("disabled-result");
	        }
	        if (option.selected) {
	          classes.push("result-selected");
	        }
	        if (option.group_array_index != null) {
	          classes.push("group-option");
	        }
	        if (option.classes !== "") {
	          classes.push(option.classes);
	        }
	        style = option.style.cssText !== "" ? " style=\"" + option.style + "\"" : "";
	        return '<li id="' + option.dom_id + '" class="' + classes.join(' ') + '"' + style + '>' + option.html + '</li>';
	      };
	
	      AbstractChosen.prototype.results_update_field = function () {
	        this.set_default_text();
	        if (!this.is_multiple) {
	          this.results_reset_cleanup();
	        }
	        this.result_clear_highlight();
	        this.result_single_selected = null;
	        return this.results_build();
	      };
	
	      AbstractChosen.prototype.results_toggle = function () {
	        if (this.results_showing) {
	          return this.results_hide();
	        } else {
	          return this.results_show();
	        }
	      };
	
	      AbstractChosen.prototype.results_search = function (evt) {
	        if (this.results_showing) {
	          return this.winnow_results();
	        } else {
	          return this.results_show();
	        }
	      };
	
	      AbstractChosen.prototype.choices_count = function () {
	        var option, _i, _len, _ref;
	
	        if (this.selected_option_count != null) {
	          return this.selected_option_count;
	        }
	        this.selected_option_count = 0;
	        _ref = this.form_field.options;
	        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	          option = _ref[_i];
	          if (option.selected) {
	            this.selected_option_count += 1;
	          }
	        }
	        return this.selected_option_count;
	      };
	
	      AbstractChosen.prototype.choices_click = function (evt) {
	        evt.preventDefault();
	        if (!(this.results_showing || this.is_disabled)) {
	          return this.results_show();
	        }
	      };
	
	      AbstractChosen.prototype.keyup_checker = function (evt) {
	        var stroke, _ref;
	
	        stroke = (_ref = evt.which) != null ? _ref : evt.keyCode;
	        this.search_field_scale();
	        switch (stroke) {
	          case 8:
	            if (this.is_multiple && this.backstroke_length < 1 && this.choices_count() > 0) {
	              return this.keydown_backstroke();
	            } else if (!this.pending_backstroke) {
	              this.result_clear_highlight();
	              return this.results_search();
	            }
	            break;
	          case 13:
	            evt.preventDefault();
	            if (this.results_showing) {
	              return this.result_select(evt);
	            }
	            break;
	          case 27:
	            if (this.results_showing) {
	              this.results_hide();
	            }
	            return true;
	          case 9:
	          case 38:
	          case 40:
	          case 16:
	          case 91:
	          case 17:
	            break;
	          default:
	            return this.results_search();
	        }
	      };
	
	      AbstractChosen.prototype.generate_field_id = function () {
	        var new_id;
	
	        new_id = this.generate_random_id();
	        this.form_field.id = new_id;
	        return new_id;
	      };
	
	      AbstractChosen.prototype.generate_random_char = function () {
	        var chars, newchar, rand;
	
	        chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	        rand = Math.floor(Math.random() * chars.length);
	        return newchar = chars.substring(rand, rand + 1);
	      };
	
	      AbstractChosen.prototype.container_width = function () {
	        if (this.options.width != null) {
	          return this.options.width;
	        } else {
	          return "" + this.form_field.offsetWidth + "px";
	        }
	      };
	
	      AbstractChosen.browser_is_supported = function () {
	        var _ref;
	
	        if (window.navigator.appName === "Microsoft Internet Explorer") {
	          return null !== (_ref = document.documentMode) && _ref >= 8;
	        }
	        return true;
	      };
	
	      AbstractChosen.default_multiple_text = "Select Some Options";
	
	      AbstractChosen.default_single_text = "Select an Option";
	
	      AbstractChosen.default_no_result_text = "No results match";
	
	      return AbstractChosen;
	    }();
	
	    root.AbstractChosen = AbstractChosen;
	  }).call(this);
	
	  (function () {
	    var $,
	        Chosen,
	        root,
	        _ref,
	        __hasProp = {}.hasOwnProperty,
	        __extends = function __extends(child, parent) {
	      for (var key in parent) {
	        if (__hasProp.call(parent, key)) child[key] = parent[key];
	      }function ctor() {
	        this.constructor = child;
	      }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
	    };
	
	    root = this;
	
	    // OKTA-93521 - plugin assumes root is global scope
	    var AbstractChosen = root.AbstractChosen;
	
	    $ = jQuery;
	
	    $.fn.extend({
	      chosen: function chosen(options) {
	        if (!AbstractChosen.browser_is_supported()) {
	          return this;
	        }
	        return this.each(function (input_field) {
	          var $this;
	
	          $this = $(this);
	          if (!$this.hasClass("chzn-done")) {
	            return $this.data('chosen', new Chosen(this, options));
	          }
	        });
	      }
	    });
	
	    Chosen = function (_super) {
	      __extends(Chosen, _super);
	
	      function Chosen() {
	        _ref = Chosen.__super__.constructor.apply(this, arguments);
	        return _ref;
	      }
	
	      Chosen.prototype.setup = function () {
	        this.form_field_jq = $(this.form_field);
	        this.current_selectedIndex = this.form_field.selectedIndex;
	        return this.is_rtl = this.form_field_jq.hasClass("chzn-rtl");
	      };
	
	      Chosen.prototype.finish_setup = function () {
	        return this.form_field_jq.addClass("chzn-done");
	      };
	
	      Chosen.prototype.set_up_html = function () {
	        var container_classes, container_props;
	
	        this.container_id = this.form_field.id.length ? this.form_field.id.replace(/[^\w]/g, '_') : this.generate_field_id();
	        this.container_id += "_chzn";
	        container_classes = ["chzn-container"];
	        container_classes.push("chzn-container-" + (this.is_multiple ? "multi" : "single"));
	        if (this.inherit_select_classes && this.form_field.className) {
	          container_classes.push(this.form_field.className);
	        }
	        if (this.is_rtl) {
	          container_classes.push("chzn-rtl");
	        }
	        container_props = {
	          'id': this.container_id,
	          'class': container_classes.join(' '),
	          'style': "width: " + this.container_width() + ";",
	          'title': this.form_field.title
	        };
	        this.container = $("<div />", container_props);
	        if (this.is_multiple) {
	          this.container.html('<ul class="chzn-choices"><li class="search-field"><input type="text" value="' + this.default_text + '" class="default" autocomplete="off" style="width:25px;" /></li></ul><div class="chzn-drop"><ul class="chzn-results"></ul></div>');
	        } else {
	          this.container.html('<a href="javascript:void(0)" class="chzn-single chzn-default" tabindex="-1"><span>' + this.default_text + '</span><div><b></b></div></a><div class="chzn-drop"><div class="chzn-search"><input type="text" autocomplete="off" /></div><ul class="chzn-results"></ul></div>');
	        }
	        this.form_field_jq.hide().after(this.container);
	        this.dropdown = this.container.find('div.chzn-drop').first();
	        this.search_field = this.container.find('input').first();
	        this.search_results = this.container.find('ul.chzn-results').first();
	        this.search_field_scale();
	        this.search_no_results = this.container.find('li.no-results').first();
	        if (this.is_multiple) {
	          this.search_choices = this.container.find('ul.chzn-choices').first();
	          this.search_container = this.container.find('li.search-field').first();
	        } else {
	          this.search_container = this.container.find('div.chzn-search').first();
	          this.selected_item = this.container.find('.chzn-single').first();
	        }
	        this.results_build();
	        this.set_tab_index();
	        this.set_label_behavior();
	        return this.form_field_jq.trigger("liszt:ready", {
	          chosen: this
	        });
	      };
	
	      Chosen.prototype.register_observers = function () {
	        var _this = this;
	
	        this.container.mousedown(function (evt) {
	          _this.container_mousedown(evt);
	        });
	        this.container.mouseup(function (evt) {
	          _this.container_mouseup(evt);
	        });
	        this.container.mouseenter(function (evt) {
	          _this.mouse_enter(evt);
	        });
	        this.container.mouseleave(function (evt) {
	          _this.mouse_leave(evt);
	        });
	        this.search_results.mouseup(function (evt) {
	          _this.search_results_mouseup(evt);
	        });
	        this.search_results.mouseover(function (evt) {
	          _this.search_results_mouseover(evt);
	        });
	        this.search_results.mouseout(function (evt) {
	          _this.search_results_mouseout(evt);
	        });
	        this.search_results.bind('mousewheel DOMMouseScroll', function (evt) {
	          _this.search_results_mousewheel(evt);
	        });
	        this.form_field_jq.bind("liszt:updated", function (evt) {
	          _this.results_update_field(evt);
	        });
	        this.form_field_jq.bind("liszt:activate", function (evt) {
	          _this.activate_field(evt);
	        });
	        this.form_field_jq.bind("liszt:open", function (evt) {
	          _this.container_mousedown(evt);
	        });
	        this.search_field.blur(function (evt) {
	          _this.input_blur(evt);
	        });
	        this.search_field.keyup(function (evt) {
	          _this.keyup_checker(evt);
	        });
	        this.search_field.keydown(function (evt) {
	          _this.keydown_checker(evt);
	        });
	        this.search_field.focus(function (evt) {
	          _this.input_focus(evt);
	        });
	        if (this.is_multiple) {
	          return this.search_choices.click(function (evt) {
	            _this.choices_click(evt);
	          });
	        } else {
	          return this.container.click(function (evt) {
	            evt.preventDefault();
	          });
	        }
	      };
	
	      Chosen.prototype.search_field_disabled = function () {
	        this.is_disabled = this.form_field_jq[0].disabled;
	        if (this.is_disabled) {
	          this.container.addClass('chzn-disabled');
	          this.search_field[0].disabled = true;
	          if (!this.is_multiple) {
	            this.selected_item.unbind("focus", this.activate_action);
	          }
	          return this.close_field();
	        } else {
	          this.container.removeClass('chzn-disabled');
	          this.search_field[0].disabled = false;
	          if (!this.is_multiple) {
	            return this.selected_item.bind("focus", this.activate_action);
	          }
	        }
	      };
	
	      Chosen.prototype.container_mousedown = function (evt) {
	        if (!this.is_disabled) {
	          if (evt && evt.type === "mousedown" && !this.results_showing) {
	            evt.preventDefault();
	          }
	          if (!(evt != null && $(evt.target).hasClass("search-choice-close"))) {
	            if (!this.active_field) {
	              if (this.is_multiple) {
	                this.search_field.val("");
	              }
	              $(document).click(this.click_test_action);
	              this.results_show();
	            } else if (!this.is_multiple && evt && ($(evt.target)[0] === this.selected_item[0] || $(evt.target).parents("a.chzn-single").length)) {
	              evt.preventDefault();
	              this.results_toggle();
	            }
	            return this.activate_field();
	          }
	        }
	      };
	
	      Chosen.prototype.container_mouseup = function (evt) {
	        if (evt.target.nodeName === "ABBR" && !this.is_disabled) {
	          return this.results_reset(evt);
	        }
	      };
	
	      Chosen.prototype.search_results_mousewheel = function (evt) {
	        var delta, _ref1, _ref2;
	
	        delta = -((_ref1 = evt.originalEvent) != null ? _ref1.wheelDelta : void 0) || ((_ref2 = evt.originialEvent) != null ? _ref2.detail : void 0);
	        if (delta != null) {
	          evt.preventDefault();
	          if (evt.type === 'DOMMouseScroll') {
	            delta = delta * 40;
	          }
	          return this.search_results.scrollTop(delta + this.search_results.scrollTop());
	        }
	      };
	
	      Chosen.prototype.blur_test = function (evt) {
	        if (!this.active_field && this.container.hasClass("chzn-container-active")) {
	          return this.close_field();
	        }
	      };
	
	      Chosen.prototype.close_field = function () {
	        $(document).unbind("click", this.click_test_action);
	        this.active_field = false;
	        this.results_hide();
	        this.container.removeClass("chzn-container-active");
	        this.clear_backstroke();
	        this.show_search_field_default();
	        return this.search_field_scale();
	      };
	
	      Chosen.prototype.activate_field = function () {
	        this.container.addClass("chzn-container-active");
	        this.active_field = true;
	        this.search_field.val(this.search_field.val());
	        return this.search_field.focus();
	      };
	
	      Chosen.prototype.test_active_click = function (evt) {
	        if ($(evt.target).parents('#' + this.container_id).length) {
	          return this.active_field = true;
	        } else {
	          return this.close_field();
	        }
	      };
	
	      Chosen.prototype.results_build = function () {
	        var content, data, _i, _len, _ref1;
	
	        this.parsing = true;
	        this.selected_option_count = null;
	        this.results_data = root.SelectParser.select_to_array(this.form_field);
	        if (this.is_multiple) {
	          this.search_choices.find("li.search-choice").remove();
	        } else if (!this.is_multiple) {
	          this.selected_item.addClass("chzn-default").find("span").text(this.default_text);
	          if (this.disable_search || this.form_field.options.length <= this.disable_search_threshold) {
	            this.search_field[0].readOnly = true;
	            this.container.addClass("chzn-container-single-nosearch");
	          } else {
	            this.search_field[0].readOnly = false;
	            this.container.removeClass("chzn-container-single-nosearch");
	          }
	        }
	        content = '';
	        _ref1 = this.results_data;
	        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
	          data = _ref1[_i];
	          if (data.group) {
	            content += this.result_add_group(data);
	          } else if (!data.empty) {
	            content += this.result_add_option(data);
	            if (data.selected && this.is_multiple) {
	              this.choice_build(data);
	            } else if (data.selected && !this.is_multiple) {
	              this.selected_item.removeClass("chzn-default").find("span").text(data.text);
	              if (this.allow_single_deselect) {
	                this.single_deselect_control_build();
	              }
	            }
	          }
	        }
	        this.search_field_disabled();
	        this.show_search_field_default();
	        this.search_field_scale();
	        this.search_results.html(content);
	        return this.parsing = false;
	      };
	
	      Chosen.prototype.result_add_group = function (group) {
	        group.dom_id = this.container_id + "_g_" + group.array_index;
	        return '<li id="' + group.dom_id + '" class="group-result">' + $("<div />").text(group.label).html() + '</li>';
	      };
	
	      Chosen.prototype.result_do_highlight = function (el) {
	        var high_bottom, high_top, maxHeight, visible_bottom, visible_top;
	
	        if (el.length) {
	          this.result_clear_highlight();
	          this.result_highlight = el;
	          this.result_highlight.addClass("highlighted");
	          maxHeight = parseInt(this.search_results.css("maxHeight"), 10);
	          visible_top = this.search_results.scrollTop();
	          visible_bottom = maxHeight + visible_top;
	          high_top = this.result_highlight.position().top + this.search_results.scrollTop();
	          high_bottom = high_top + this.result_highlight.outerHeight();
	          if (high_bottom >= visible_bottom) {
	            return this.search_results.scrollTop(high_bottom - maxHeight > 0 ? high_bottom - maxHeight : 0);
	          } else if (high_top < visible_top) {
	            return this.search_results.scrollTop(high_top);
	          }
	        }
	      };
	
	      Chosen.prototype.result_clear_highlight = function () {
	        if (this.result_highlight) {
	          this.result_highlight.removeClass("highlighted");
	        }
	        return this.result_highlight = null;
	      };
	
	      Chosen.prototype.results_show = function () {
	        if (this.is_multiple && this.max_selected_options <= this.choices_count()) {
	          this.form_field_jq.trigger("liszt:maxselected", {
	            chosen: this
	          });
	          return false;
	        }
	        this.container.addClass("chzn-with-drop");
	        this.form_field_jq.trigger("liszt:showing_dropdown", {
	          chosen: this
	        });
	        this.results_showing = true;
	        this.search_field.focus();
	        this.search_field.val(this.search_field.val());
	        return this.winnow_results();
	      };
	
	      Chosen.prototype.results_hide = function () {
	        if (this.results_showing) {
	          this.result_clear_highlight();
	          this.container.removeClass("chzn-with-drop");
	          this.form_field_jq.trigger("liszt:hiding_dropdown", {
	            chosen: this
	          });
	        }
	        return this.results_showing = false;
	      };
	
	      Chosen.prototype.set_tab_index = function (el) {
	        var ti;
	
	        if (this.form_field_jq.attr("tabindex")) {
	          ti = this.form_field_jq.attr("tabindex");
	          this.form_field_jq.attr("tabindex", -1);
	          return this.search_field.attr("tabindex", ti);
	        }
	      };
	
	      Chosen.prototype.set_label_behavior = function () {
	        var _this = this;
	
	        this.form_field_label = this.form_field_jq.parents("label");
	        if (!this.form_field_label.length && this.form_field.id.length) {
	          this.form_field_label = $("label[for='" + this.form_field.id + "']");
	        }
	        if (this.form_field_label.length > 0) {
	          return this.form_field_label.click(function (evt) {
	            if (_this.is_multiple) {
	              return _this.container_mousedown(evt);
	            } else {
	              return _this.activate_field();
	            }
	          });
	        }
	      };
	
	      Chosen.prototype.show_search_field_default = function () {
	        if (this.is_multiple && this.choices_count() < 1 && !this.active_field) {
	          this.search_field.val(this.default_text);
	          return this.search_field.addClass("default");
	        } else {
	          this.search_field.val("");
	          return this.search_field.removeClass("default");
	        }
	      };
	
	      Chosen.prototype.search_results_mouseup = function (evt) {
	        var target;
	
	        target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
	        if (target.length) {
	          this.result_highlight = target;
	          this.result_select(evt);
	          return this.search_field.focus();
	        }
	      };
	
	      Chosen.prototype.search_results_mouseover = function (evt) {
	        var target;
	
	        target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
	        if (target) {
	          return this.result_do_highlight(target);
	        }
	      };
	
	      Chosen.prototype.search_results_mouseout = function (evt) {
	        if ($(evt.target).hasClass("active-result" || $(evt.target).parents('.active-result').first())) {
	          return this.result_clear_highlight();
	        }
	      };
	
	      Chosen.prototype.choice_build = function (item) {
	        var choice,
	            close_link,
	            _this = this;
	
	        choice = $('<li />', {
	          "class": "search-choice"
	        }).html("<span>" + item.html + "</span>");
	        if (item.disabled) {
	          choice.addClass('search-choice-disabled');
	        } else {
	          close_link = $('<a />', {
	            href: '#',
	            "class": 'search-choice-close',
	            rel: item.array_index
	          });
	          close_link.click(function (evt) {
	            return _this.choice_destroy_link_click(evt);
	          });
	          choice.append(close_link);
	        }
	        return this.search_container.before(choice);
	      };
	
	      Chosen.prototype.choice_destroy_link_click = function (evt) {
	        evt.preventDefault();
	        evt.stopPropagation();
	        if (!this.is_disabled) {
	          return this.choice_destroy($(evt.target));
	        }
	      };
	
	      Chosen.prototype.choice_destroy = function (link) {
	        if (this.result_deselect(link.attr("rel"))) {
	          this.show_search_field_default();
	          if (this.is_multiple && this.choices_count() > 0 && this.search_field.val().length < 1) {
	            this.results_hide();
	          }
	          link.parents('li').first().remove();
	          return this.search_field_scale();
	        }
	      };
	
	      Chosen.prototype.results_reset = function () {
	        this.form_field.options[0].selected = true;
	        this.selected_option_count = null;
	        this.selected_item.find("span").text(this.default_text);
	        if (!this.is_multiple) {
	          this.selected_item.addClass("chzn-default");
	        }
	        this.show_search_field_default();
	        this.results_reset_cleanup();
	        this.form_field_jq.trigger("change");
	        if (this.active_field) {
	          return this.results_hide();
	        }
	      };
	
	      Chosen.prototype.results_reset_cleanup = function () {
	        this.current_selectedIndex = this.form_field.selectedIndex;
	        return this.selected_item.find("abbr").remove();
	      };
	
	      Chosen.prototype.result_select = function (evt) {
	        var high, high_id, item, position;
	
	        if (this.result_highlight) {
	          high = this.result_highlight;
	          high_id = high.attr("id");
	          this.result_clear_highlight();
	          if (this.is_multiple && this.max_selected_options <= this.choices_count()) {
	            this.form_field_jq.trigger("liszt:maxselected", {
	              chosen: this
	            });
	            return false;
	          }
	          if (this.is_multiple) {
	            high.removeClass("active-result");
	          } else {
	            this.search_results.find(".result-selected").removeClass("result-selected");
	            this.result_single_selected = high;
	            this.selected_item.removeClass("chzn-default");
	          }
	          high.addClass("result-selected");
	          position = high_id.substr(high_id.lastIndexOf("_") + 1);
	          item = this.results_data[position];
	          item.selected = true;
	          this.form_field.options[item.options_index].selected = true;
	          this.selected_option_count = null;
	          if (this.is_multiple) {
	            this.choice_build(item);
	          } else {
	            this.selected_item.find("span").first().text(item.text);
	            if (this.allow_single_deselect) {
	              this.single_deselect_control_build();
	            }
	          }
	          if (!((evt.metaKey || evt.ctrlKey) && this.is_multiple)) {
	            this.results_hide();
	          }
	          this.search_field.val("");
	          if (this.is_multiple || this.form_field.selectedIndex !== this.current_selectedIndex) {
	            this.form_field_jq.trigger("change", {
	              'selected': this.form_field.options[item.options_index].value
	            });
	          }
	          this.current_selectedIndex = this.form_field.selectedIndex;
	          return this.search_field_scale();
	        }
	      };
	
	      Chosen.prototype.result_activate = function (el, option) {
	        if (option.disabled) {
	          return el.addClass("disabled-result");
	        } else if (this.is_multiple && option.selected) {
	          return el.addClass("result-selected");
	        } else {
	          return el.addClass("active-result");
	        }
	      };
	
	      Chosen.prototype.result_deactivate = function (el) {
	        return el.removeClass("active-result result-selected disabled-result");
	      };
	
	      Chosen.prototype.result_deselect = function (pos) {
	        var result, result_data;
	
	        result_data = this.results_data[pos];
	        if (!this.form_field.options[result_data.options_index].disabled) {
	          result_data.selected = false;
	          this.form_field.options[result_data.options_index].selected = false;
	          this.selected_option_count = null;
	          result = $("#" + this.container_id + "_o_" + pos);
	          result.removeClass("result-selected").addClass("active-result").show();
	          this.result_clear_highlight();
	          this.winnow_results();
	          this.form_field_jq.trigger("change", {
	            deselected: this.form_field.options[result_data.options_index].value
	          });
	          this.search_field_scale();
	          return true;
	        } else {
	          return false;
	        }
	      };
	
	      Chosen.prototype.single_deselect_control_build = function () {
	        if (!this.allow_single_deselect) {
	          return;
	        }
	        if (!this.selected_item.find("abbr").length) {
	          this.selected_item.find("span").first().after("<abbr class=\"search-choice-close\"></abbr>");
	        }
	        return this.selected_item.addClass("chzn-single-with-deselect");
	      };
	
	      Chosen.prototype.winnow_results = function () {
	        var found, option, part, parts, regex, regexAnchor, result, result_id, results, searchText, startpos, text, zregex, _i, _j, _len, _len1, _ref1;
	
	        this.no_results_clear();
	        results = 0;
	        searchText = this.search_field.val() === this.default_text ? "" : $('<div/>').text($.trim(this.search_field.val())).html();
	        regexAnchor = this.search_contains ? "" : "^";
	        regex = new RegExp(regexAnchor + searchText.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&"), 'i');
	        zregex = new RegExp(searchText.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&"), 'i');
	        _ref1 = this.results_data;
	        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
	          option = _ref1[_i];
	          if (!option.empty) {
	            if (option.group) {
	              $('#' + option.dom_id).css('display', 'none');
	            } else {
	              found = false;
	              result_id = option.dom_id;
	              result = $("#" + result_id);
	              if (regex.test(option.html)) {
	                found = true;
	                results += 1;
	              } else if (this.enable_split_word_search && (option.html.indexOf(" ") >= 0 || option.html.indexOf("[") === 0)) {
	                parts = option.html.replace(/\[|\]/g, "").split(" ");
	                if (parts.length) {
	                  for (_j = 0, _len1 = parts.length; _j < _len1; _j++) {
	                    part = parts[_j];
	                    if (regex.test(part)) {
	                      found = true;
	                      results += 1;
	                    }
	                  }
	                }
	              }
	              if (found) {
	                if (searchText.length) {
	                  startpos = option.html.search(zregex);
	                  text = option.html.substr(0, startpos + searchText.length) + '</em>' + option.html.substr(startpos + searchText.length);
	                  text = text.substr(0, startpos) + '<em>' + text.substr(startpos);
	                } else {
	                  text = option.html;
	                }
	                result.html(text);
	                this.result_activate(result, option);
	                if (option.group_array_index != null) {
	                  $("#" + this.results_data[option.group_array_index].dom_id).css('display', 'list-item');
	                }
	              } else {
	                if (this.result_highlight && result_id === this.result_highlight.attr('id')) {
	                  this.result_clear_highlight();
	                }
	                this.result_deactivate(result);
	              }
	            }
	          }
	        }
	        if (results < 1 && searchText.length) {
	          return this.no_results(searchText);
	        } else {
	          return this.winnow_results_set_highlight();
	        }
	      };
	
	      Chosen.prototype.winnow_results_set_highlight = function () {
	        var do_high, selected_results;
	
	        if (!this.result_highlight) {
	          selected_results = !this.is_multiple ? this.search_results.find(".result-selected.active-result") : [];
	          do_high = selected_results.length ? selected_results.first() : this.search_results.find(".active-result").first();
	          if (do_high != null) {
	            return this.result_do_highlight(do_high);
	          }
	        }
	      };
	
	      Chosen.prototype.no_results = function (terms) {
	        var no_results_html;
	
	        no_results_html = $('<li class="no-results">' + this.results_none_found + ' "<span></span>"</li>');
	        no_results_html.find("span").first().html(terms);
	        return this.search_results.append(no_results_html);
	      };
	
	      Chosen.prototype.no_results_clear = function () {
	        return this.search_results.find(".no-results").remove();
	      };
	
	      Chosen.prototype.keydown_arrow = function () {
	        var next_sib;
	
	        if (this.results_showing && this.result_highlight) {
	          next_sib = this.result_highlight.nextAll("li.active-result").first();
	          if (next_sib) {
	            return this.result_do_highlight(next_sib);
	          }
	        } else {
	          return this.results_show();
	        }
	      };
	
	      Chosen.prototype.keyup_arrow = function () {
	        var prev_sibs;
	
	        if (!this.results_showing && !this.is_multiple) {
	          return this.results_show();
	        } else if (this.result_highlight) {
	          prev_sibs = this.result_highlight.prevAll("li.active-result");
	          if (prev_sibs.length) {
	            return this.result_do_highlight(prev_sibs.first());
	          } else {
	            if (this.choices_count() > 0) {
	              this.results_hide();
	            }
	            return this.result_clear_highlight();
	          }
	        }
	      };
	
	      Chosen.prototype.keydown_backstroke = function () {
	        var next_available_destroy;
	
	        if (this.pending_backstroke) {
	          this.choice_destroy(this.pending_backstroke.find("a").first());
	          return this.clear_backstroke();
	        } else {
	          next_available_destroy = this.search_container.siblings("li.search-choice").last();
	          if (next_available_destroy.length && !next_available_destroy.hasClass("search-choice-disabled")) {
	            this.pending_backstroke = next_available_destroy;
	            if (this.single_backstroke_delete) {
	              return this.keydown_backstroke();
	            } else {
	              return this.pending_backstroke.addClass("search-choice-focus");
	            }
	          }
	        }
	      };
	
	      Chosen.prototype.clear_backstroke = function () {
	        if (this.pending_backstroke) {
	          this.pending_backstroke.removeClass("search-choice-focus");
	        }
	        return this.pending_backstroke = null;
	      };
	
	      Chosen.prototype.keydown_checker = function (evt) {
	        var stroke, _ref1;
	
	        stroke = (_ref1 = evt.which) != null ? _ref1 : evt.keyCode;
	        this.search_field_scale();
	        if (stroke !== 8 && this.pending_backstroke) {
	          this.clear_backstroke();
	        }
	        switch (stroke) {
	          case 8:
	            this.backstroke_length = this.search_field.val().length;
	            break;
	          case 9:
	            if (this.results_showing && !this.is_multiple) {
	              this.result_select(evt);
	            }
	            this.mouse_on_container = false;
	            break;
	          case 13:
	            evt.preventDefault();
	            break;
	          case 38:
	            evt.preventDefault();
	            this.keyup_arrow();
	            break;
	          case 40:
	            evt.preventDefault();
	            this.keydown_arrow();
	            break;
	        }
	      };
	
	      Chosen.prototype.search_field_scale = function () {
	        var div, h, style, style_block, styles, w, _i, _len;
	
	        if (this.is_multiple) {
	          h = 0;
	          w = 0;
	          style_block = "position:absolute; left: -1000px; top: -1000px; display:none;";
	          styles = ['font-size', 'font-style', 'font-weight', 'font-family', 'line-height', 'text-transform', 'letter-spacing'];
	          for (_i = 0, _len = styles.length; _i < _len; _i++) {
	            style = styles[_i];
	            style_block += style + ":" + this.search_field.css(style) + ";";
	          }
	          div = $('<div />', {
	            'style': style_block
	          });
	          div.text(this.search_field.val());
	          $('body').append(div);
	          w = div.width() + 25;
	          div.remove();
	          if (!this.f_width) {
	            this.f_width = this.container.outerWidth();
	          }
	          if (w > this.f_width - 10) {
	            w = this.f_width - 10;
	          }
	          return this.search_field.css({
	            'width': w + 'px'
	          });
	        }
	      };
	
	      Chosen.prototype.generate_random_id = function () {
	        var string;
	
	        string = "sel" + this.generate_random_char() + this.generate_random_char() + this.generate_random_char();
	        while ($("#" + string).length > 0) {
	          string += this.generate_random_char();
	        }
	        return string;
	      };
	
	      return Chosen;
	    }(AbstractChosen);
	
	    root.Chosen = Chosen;
	  }).call(this);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 601 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(596), __webpack_require__(559), __webpack_require__(602)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, BaseInput, SchemaUtil, DeletableBox) {
	
	  return BaseInput.extend({
	    className: 'array-input',
	
	    template: '<a href="#" class="array-inputs-button link-button">Add Another</a>',
	
	    params: {
	      itemType: 'string'
	    },
	
	    events: {
	      'click .array-inputs-button': function clickArrayInputsButton(e) {
	        e.preventDefault();
	        if (this.isEditMode()) {
	          this.addNewElement();
	        }
	      }
	    },
	
	    initialize: function initialize(options) {
	      options || (options = {});
	      this.params = _.defaults(options.params || {}, this.params);
	      this.uniqueIdPrefix = 'array';
	    },
	
	    // api returns null for an array that does not have value
	    // convert it to an empty array
	    from: function from(val) {
	      if (!_.isArray(val)) {
	        return [];
	      }
	      return val;
	    },
	
	    // @Override
	    editMode: function editMode() {
	      this._setArrayObject();
	      this.$el.html(this.template);
	      _.each(this.arrayObject, _.bind(this._addDeletableBox, this));
	
	      return this;
	    },
	
	    // @Override
	    readMode: function readMode() {
	      this.editMode();
	      this.$('.array-inputs-button').addClass('link-button-disabled');
	    },
	
	    // @Override
	    // converts arrayObject to a plain array
	    // for string type array, returns all values
	    // for number/integer type array, returns values in number type
	    val: function val() {
	      var values = _.values(this.arrayObject);
	      if (_.contains([SchemaUtil.DATATYPE.number, SchemaUtil.DATATYPE.integer], this.params.itemType)) {
	        values = _.filter(values, _.isNumber);
	      }
	      return values;
	    },
	
	    focus: function focus() {},
	
	    addNewElement: function addNewElement() {
	      var value = '',
	          key = _.uniqueId(this.uniqueIdPrefix);
	      this.arrayObject[key] = value;
	      this._addDeletableBox(value, key);
	      // update is called to make sure an empty string value is added for string type array
	      this.update();
	    },
	
	    _addDeletableBox: function _addDeletableBox(value, key) {
	      var deletableBox = new DeletableBox(_.extend(_.pick(this.options, 'read', 'readOnly', 'model'), { key: key, value: value, itemType: this.params.itemType }));
	      this.listenTo(deletableBox, 'updateArray', function (updatedValue) {
	        if (_.isNull(updatedValue)) {
	          delete this.arrayObject[key];
	          this.stopListening(deletableBox);
	        } else {
	          this.arrayObject[key] = updatedValue;
	        }
	        this.update();
	      });
	
	      deletableBox.render().$el.hide();
	      this.$('.array-inputs-button').before(deletableBox.el);
	      deletableBox.$el.slideDown();
	
	      return deletableBox;
	    },
	
	    _setArrayObject: function _setArrayObject() {
	      var array = this.model.get(this.options.name);
	      this.arrayObject = {};
	      if (_.isArray(array) && !_.isEmpty(array)) {
	        var keys = [],
	            self = this;
	        _(array.length).times(function () {
	          keys.push(_.uniqueId(self.uniqueIdPrefix));
	        });
	        this.arrayObject = _.object(keys, array);
	      }
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 602 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/* eslint max-params: [2, 6] */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(528), __webpack_require__(559), __webpack_require__(405), __webpack_require__(529), __webpack_require__(561)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, BaseView, SchemaUtil, StringUtil, TemplateUtil, Time) {
	
	  var isVowel = function isVowel(string) {
	    return (/^[aeiou]/.test(string)
	    );
	  };
	
	  var getArticle = function getArticle(string) {
	    return isVowel(string) ? 'an' : 'a';
	  };
	
	  var template = TemplateUtil.tpl('\
	    <div class="o-form-input-group-controls">\
	      <span class="input-fix o-form-control">\
	        <input type="text" class="o-form-text" name="{{key}}" id="{{key}}" value="{{value}}" \
	        placeholder="{{placeholder}}"/>\
	      </span>\
	      <a href="#" class="link-button link-button-icon icon-only clear-input-16">\
	        <span class="icon "></span>\
	      </a>\
	    </div>\
	    <p class="o-form-input-error o-form-explain">\
	      <span class="icon icon-16 error-16-small"></span> {{errorExplain}}\
	    </p>\
	  '),
	      errorClass = 'o-form-has-errors',
	      updateArrayEvent = 'updateArray';
	
	  return BaseView.extend({
	
	    tagName: 'div',
	
	    className: 'o-form-input-group',
	
	    events: {
	      'click a': function clickA(e) {
	        e.preventDefault();
	        this.remove();
	      },
	      'keyup input': function keyupInput() {
	        this.update();
	      }
	    },
	
	    isEditMode: function isEditMode() {
	      return !this.options.readOnly && (this.options.read !== true || this.model.get('__edit__') === true);
	    },
	
	    initialize: function initialize() {
	      this.template = template(_.extend(this.options, {
	        placeholder: this.getPlaceholderText(),
	        errorExplain: this.getErrorExplainText()
	      }));
	      this.update = _.debounce(this.update, this.options.debounceDelay || Time.DEBOUNCE_DELAY);
	    },
	
	    render: function render() {
	      if (this.isEditMode()) {
	        this.$el.html(this.template);
	      } else {
	        this.$el.text(this.options.value);
	        this.$('a').hide();
	      }
	      return this;
	    },
	
	    remove: function remove() {
	      this.trigger(updateArrayEvent, null);
	      this.$el.slideUp(_.bind(function () {
	        BaseView.prototype.remove.call(this, arguments);
	      }, this));
	    },
	
	    update: function update() {
	      var updatedValue = this.$('input').val(),
	          parseFunc = _.object([SchemaUtil.DATATYPE.number, SchemaUtil.DATATYPE.integer], [StringUtil.parseFloat, this.parseInt]);
	      if (_.has(parseFunc, this.options.itemType)) {
	        updatedValue = parseFunc[this.options.itemType](updatedValue);
	        !_.isNumber(updatedValue) ? this.markInvalid() : this.clearInvalid();
	      }
	      this.trigger(updateArrayEvent, updatedValue);
	    },
	
	    markInvalid: function markInvalid() {
	      this.$el.addClass(errorClass);
	    },
	
	    clearInvalid: function clearInvalid() {
	      this.$el.removeClass(errorClass);
	    },
	
	    getPlaceholderText: function getPlaceholderText() {
	      var text = ['Enter'];
	      text.push(getArticle(this.options.itemType));
	      text.push(this.options.itemType.toLowerCase());
	      return text.join(' ');
	    },
	
	    getErrorExplainText: function getErrorExplainText() {
	      var text = ['Value must be'];
	      text.push(getArticle(this.options.itemType));
	      text.push(this.options.itemType.toLowerCase());
	      return text.join(' ');
	    },
	
	    parseInt: function (_parseInt) {
	      function parseInt(_x) {
	        return _parseInt.apply(this, arguments);
	      }
	
	      parseInt.toString = function () {
	        return _parseInt.toString();
	      };
	
	      return parseInt;
	    }(function (string) {
	      // native javascript parseInt is aggressive
	      // there're cases we don't want a string to be parsed even though it is convertable
	      // so that we don't convert a string silently before warning a user the potential error
	      // this is to make sure the string is in an integer format before we parse it
	      if (/^-?\d+$/.test(string)) {
	        var num = parseInt(string, 10);
	        return !_.isNaN(num) ? num : string;
	      }
	      return string;
	    })
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 603 */
/***/ function(module, exports) {

	// empty (null-loader)

/***/ },
/* 604 */
/***/ function(module, exports) {

	// empty (null-loader)

/***/ },
/* 605 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	// Manually updated from courage 4.4.0-beta.7d33b21
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(404), __webpack_require__(529), __webpack_require__(606), __webpack_require__(557), __webpack_require__(607), __webpack_require__(587)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, TemplateUtil, BaseInput, Keys) {
	
	  var className = 'okta-form-input-field input-fix';
	
	  function hasTitleAndText(options) {
	    var title = options.title,
	        text = options.text;
	
	    return title && text && title !== text;
	  }
	
	  // options may be a string or an object.
	  function createQtipContent(options) {
	    if (hasTitleAndText(options)) {
	      return options;
	    }
	    return { text: options.text || options };
	  }
	
	  return BaseInput.extend({
	    template: TemplateUtil.tpl('\
	      {{#if params.innerTooltip}}\
	        <span class="input-tooltip icon form-help-16"></span>\
	      {{/if}}\
	      {{#if params.icon}}\
	        <span class="icon input-icon {{params.icon}}"></span>\
	      {{/if}}\
	      <input type="{{type}}" placeholder="{{placeholder}}" name="{{name}}" id="{{inputId}}"\
	       value="{{value}}" aria-label="{{placeholder}}" autocomplete="off"/>\
	      {{#if params.iconDivider}}\
	        <span class="input-icon-divider"></span>\
	      {{/if}}\
	      '),
	    /**
	    * @Override
	    */
	    events: {
	      'input input': 'update',
	      'change input': 'update',
	      'keydown input': 'update',
	      'keyup input': function keyupInput(e) {
	        if (Keys.isEnter(e)) {
	          this.model.trigger('form:save');
	        } else if (Keys.isEsc(e)) {
	          this.model.trigger('form:cancel');
	        }
	      }
	    },
	
	    constructor: function constructor() {
	      BaseInput.apply(this, arguments);
	      this.$el.addClass('o-form-control');
	    },
	
	    /**
	    * @Override
	    */
	    editMode: function editMode() {
	      this.$el.addClass(className);
	      BaseInput.prototype.editMode.apply(this, arguments);
	      this.$('input').placeholder();
	    },
	
	    /**
	    * @Override
	    */
	    readMode: function readMode() {
	      BaseInput.prototype.readMode.apply(this, arguments);
	      if (this.options.type == 'password') {
	        this.$el.text('********');
	      }
	      this.$el.removeClass(className);
	    },
	
	    /**
	    * @Override
	    */
	    val: function val() {
	      //IE will only read clear text pw if type="password" is explicitly in selector
	      var inputValue = this.$('input[type="' + this.options.type + '"]').val();
	
	      if (this.options.type !== 'password') {
	        inputValue = $.trim(inputValue);
	      }
	      return inputValue;
	    },
	
	    /**
	    * @Override
	    */
	    focus: function focus() {
	      return this.$('input').focus();
	    },
	
	    postRender: function postRender() {
	      var params = this.options.params,
	          content;
	
	      if (params && params.innerTooltip) {
	        content = createQtipContent(params.innerTooltip);
	        this.$('.input-tooltip').qtip({
	          content: content,
	          style: { classes: 'okta-tooltip qtip-custom qtip-shadow' },
	          position: {
	            my: 'bottom left',
	            // Note: qTip2 has a known issue calculating the tooltip offset when:
	            // 1. A container element has both:
	            //    a) position: relative/absolute
	            //    b) overlay: value other than 'visible'
	            // 2. The page is scrolled
	            //
	            // We set position:relative and overlay:auto on the body element,
	            // where both are required for:
	            // - Positioning the footer correctly
	            // - Displaying long pages in embedded browsers
	            //
	            // The original design called for a fixed position relative to the
	            // tooltip icon - this has been switched to "relative to mouse, and
	            // update position when mouse moves" because of this constraint.
	            target: 'mouse',
	            adjust: {
	              method: 'flip',
	              mouse: true,
	              y: -5,
	              x: 5
	            },
	            viewport: $('body')
	          }
	        });
	      }
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 606 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/* eslint-env es6 */
	/* eslint max-statements: [2, 17], max-len: [2, 160], max-params: [2, 6] */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(404), __webpack_require__(528), __webpack_require__(570), __webpack_require__(537), __webpack_require__(405)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, $, BaseView, Callout, ButtonFactory, StringUtil) {
	
	  /**
	   * @class BaseInput
	   * @private
	   * An abstract object that defines an input for {@link Okta.Form}
	   *
	   * BaseInputs are typically not created directly, but being passed to {@link Okta.Form#addInput}
	   * @extends Okta.View
	   */
	
	  return BaseView.extend({
	
	    tagName: 'span',
	
	    attributes: function attributes() {
	      return {
	        'data-se': 'o-form-input-' + this.getNameString()
	      };
	    },
	
	    /**
	    * default placeholder text when options.placeholder is not defined
	    */
	    defaultPlaceholder: '',
	
	    constructor: function constructor(options) {
	      options = _.defaults(options || {}, {
	        inputId: options.id || _.uniqueId('input'),
	        placeholder: this.defaultPlaceholder,
	        inlineValidation: true,
	        validateOnlyIfDirty: false
	      });
	
	      delete options.id;
	
	      // decorate the `enable` and `disable` and toggle the `o-form-disabled` class.
	      // so we wont need to worry about this when overriding the methods
	      var self = this;
	      _.each({ enable: 'removeClass', disable: 'addClass' }, function (method, action) {
	        self[action] = _.wrap(self[action], function (fn) {
	          fn.apply(self, arguments);
	          self.$el[method]('o-form-disabled');
	        });
	      });
	
	      BaseView.call(this, options);
	
	      if (_.result(options, 'readOnly') !== true && _.result(options, 'read') === true) {
	        this.listenTo(this.model, 'change:__edit__', this.render);
	      }
	
	      if (_.isFunction(this.focus)) {
	        this.focus = _.debounce(_.bind(this.focus, this), 50);
	      }
	
	      // Enable inline validation if this is not the first field in the form.
	      if (!_.result(options, 'validateOnlyIfDirty')) {
	        this.addInlineValidation();
	      }
	
	      this.addModelListeners();
	      this.$el.addClass('o-form-input-name-' + this.getNameString());
	    },
	
	    addAriaLabel: function addAriaLabel() {
	      var ariaLabel = this.options.ariaLabel;
	      if (ariaLabel) {
	        this.$(':input').attr('aria-label', ariaLabel);
	      }
	    },
	
	    addInlineValidation: function addInlineValidation() {
	      if (_.result(this.options, 'inlineValidation')) {
	        this.$el.on('focusout', ':input', _.bind(this.validate, this));
	      }
	    },
	
	    toModelValue: function toModelValue() {
	      var value = this.val();
	      if (_.isFunction(this.to)) {
	        value = this.to.call(this, value);
	      }
	      if (_.isFunction(this.options.to)) {
	        value = this.options.to.call(this, value);
	      }
	      return value;
	    },
	
	    __getDependencyCalloutBtn: function __getDependencyCalloutBtn(btnConfig) {
	      var self = this;
	      var btnOptions = _.clone(btnConfig);
	      // add onfocus listener to re-evaluate depedency when callout button is clicked
	      var originalClick = btnOptions.click || function () {};
	      btnOptions.click = function () {
	        $(window).one('focus.dependency', function () {
	          self.__showInputDependencies();
	        });
	        originalClick.call(self);
	      };
	      var CalloutBtn = BaseView.extend({
	        children: [ButtonFactory.create(btnOptions)]
	      });
	      return new CalloutBtn();
	    },
	
	    getCalloutParent: function getCalloutParent() {
	      return this.$('input[value="' + this.getModelValue() + '"]').parent();
	    },
	
	    __getCalloutMsgContainer: function __getCalloutMsgContainer(calloutMsg) {
	      return BaseView.extend({
	        template: '\
	        <span class="o-form-explain">\
	           {{msg}}\
	        </span>\
	        ',
	        getTemplateData: function getTemplateData() {
	          return {
	            msg: calloutMsg
	          };
	        }
	      });
	    },
	
	    showCallout: function showCallout(calloutConfig, dependencyResolved) {
	      var callout = _.clone(calloutConfig);
	      callout.className = 'dependency-callout';
	      if (callout.btn) {
	        callout.content = this.__getDependencyCalloutBtn(callout.btn);
	        delete callout.btn;
	      }
	      var dependencyCallout = Callout.create(callout);
	      if (!dependencyResolved) {
	        dependencyCallout.add(this.__getCalloutMsgContainer(StringUtil.localize('dependency.callout.msg', 'courage')));
	      }
	      var calloutParent = this.getCalloutParent();
	      calloutParent.append(dependencyCallout.render().el);
	      if (callout.type == 'success') {
	        _.delay(function () {
	          // fade out success callout
	          dependencyCallout.$el.fadeOut(800);
	        }, 1000);
	      }
	    },
	
	    removeCallout: function removeCallout() {
	      this.$el.find('.dependency-callout').remove();
	    },
	
	    __evaluateCalloutObject: function __evaluateCalloutObject(dependencyResolved, calloutTitle) {
	      var defaultCallout;
	      if (dependencyResolved) {
	        defaultCallout = {
	          title: StringUtil.localize('dependency.action.completed', 'courage'),
	          size: 'large',
	          type: 'success'
	        };
	      } else {
	        defaultCallout = {
	          title: StringUtil.localize('dependency.action.required', 'courage', [calloutTitle]),
	          size: 'large',
	          type: 'warning'
	        };
	      }
	      return defaultCallout;
	    },
	
	    __handleDependency: function __handleDependency(result, callout) {
	      var self = this;
	      var calloutConfig = _.isFunction(callout) ? callout(result) : _.extend({}, callout, self.__evaluateCalloutObject(result.resolved, callout.title));
	      // remove existing callouts if any
	      self.removeCallout();
	      self.showCallout(calloutConfig, result.resolved);
	    },
	
	    __showInputDependencies: function __showInputDependencies() {
	      var self = this;
	      var fieldDependency = self.options.deps[self.getModelValue()];
	      if (fieldDependency && _.isFunction(fieldDependency.func)) {
	        fieldDependency.func().done(function (data) {
	          self.__handleDependency({ resolved: true, data: data }, fieldDependency.callout);
	        }).fail(function (data) {
	          self.__handleDependency({ resolved: false, data: data }, fieldDependency.callout);
	        });
	      } else {
	        self.removeCallout();
	      }
	    },
	
	    _isEdited: false,
	    /**
	     * updates the model with the input's value
	     */
	    update: function update() {
	      if (!this._isEdited && _.result(this.options, 'validateOnlyIfDirty')) {
	        this._isEdited = true;
	        this.addInlineValidation();
	      }
	      this.model.set(this.options.name, this.toModelValue());
	      if (this.options.deps) {
	        // check for dependencies
	        this.__showInputDependencies();
	      }
	    },
	
	    /**
	     * Is the input in edit mode
	     * @return {Boolean}
	     */
	    isEditMode: function isEditMode() {
	      var ret = !_.result(this.options, 'readOnly') && (_.result(this.options, 'read') !== true || this.model.get('__edit__') === true);
	      return ret;
	    },
	
	    /**
	     * Renders the input
	     * @readonly
	     */
	    render: function render() {
	      this.preRender();
	      var params = this.options.params;
	      this.options.params = _.resultCtx(this.options, 'params', this);
	
	      if (this.isEditMode()) {
	        this.editMode();
	        if (_.resultCtx(this.options, 'disabled', this)) {
	          this.disable();
	        } else {
	          this.enable();
	        }
	      } else {
	        this.readMode();
	      }
	
	      this.options.params = params;
	      this.addAriaLabel();
	      this.postRender();
	
	      return this;
	    },
	
	    /**
	     * checks if the current value in the model is valid for this field
	     */
	    validate: function validate() {
	      if (!this.model.get('__pending__') && this.isEditMode() && _.isFunction(this.model.validateField)) {
	        var validationError = this.model.validateField(this.options.name);
	        if (validationError) {
	          _.delay(function () {
	            this.model.trigger('form:clear-error:' + this.options.name);
	            this.model.trigger('invalid', this.model, validationError, false);
	          }.bind(this), 100);
	        }
	      }
	    },
	
	    /**
	    * Add model event listeners
	    */
	    addModelListeners: function addModelListeners() {
	      this.listenTo(this.model, 'form:field-error', function (name) {
	        if (this.options.name === name) {
	          this.__markError();
	        }
	      });
	      this.listenTo(this.model, 'form:clear-errors change:' + this.options.name, this.__clearError);
	      this.listenTo(this.model, 'form:clear-error:' + this.options.name, this.__clearError);
	    },
	
	    /**
	    * The value of the input
	    * @return {Mixed}
	    */
	    val: function val() {
	      throw new Error('val() is an abstract method');
	    },
	
	    /**
	    * Set focus on the input
	    */
	    focus: function focus() {
	      throw new Error('focus() is an abstract method');
	    },
	
	    /**
	    * Default value in read mode
	    * When model has no value for the field
	    */
	    defaultValue: function defaultValue() {
	      return '';
	    },
	
	    /**
	    * Renders the input in edit mode
	    */
	    editMode: function editMode() {
	      var options = _.extend({}, this.options, {
	        value: this.getModelValue()
	      });
	      this.$el.html(this.template(options));
	      this.options.multi && this.$el.removeClass('margin-r');
	      return this;
	    },
	
	    /**
	    * Renders the readable value of the input in read mode
	    */
	    readMode: function readMode() {
	      this.$el.text(this.getReadModeString());
	      this.$el.removeClass('error-field');
	      this.options.multi && this.$el.addClass('margin-r');
	      return this;
	    },
	
	    getReadModeString: function getReadModeString() {
	      var readModeStr = _.resultCtx(this.options, 'readModeString', this);
	      if (readModeStr) {
	        return readModeStr;
	      }
	      return this.toStringValue();
	    },
	
	    /**
	     * The model value off the field associated with the input
	     * @return {Mixed}
	     */
	    getModelValue: function getModelValue() {
	      var value = this.model.get(this.options.name);
	
	      if (_.isFunction(this.from)) {
	        value = this.from.call(this, value);
	      }
	      if (_.isFunction(this.options.from)) {
	        value = this.options.from.call(this, value);
	      }
	      return value;
	    },
	
	    /*
	    * convenience method to get the textual value from the model
	    * will return the textual label rather than value in case of select/radio
	    * @return {String}
	    */
	    toStringValue: function toStringValue() {
	      var value = this.getModelValue();
	      if (this.options.options) {
	        // dropdown or radio
	        value = this.options.options[value];
	      }
	      return value || this.defaultValue();
	    },
	
	    /**
	     * Triggers a form:resize event in order to tell dialogs content size has changed
	     */
	    resize: function resize() {
	      this.model.trigger('form:resize');
	    },
	
	    /**
	     * Disable the input
	     */
	    disable: function disable() {
	      this.$(':input').prop('disabled', true);
	    },
	
	    /**
	     * Enable the input
	     */
	    enable: function enable() {
	      this.$(':input').prop('disabled', false);
	    },
	
	    /**
	     * Change the type of the input field. (e.g., text <--> password)
	     * @param type
	     */
	    changeType: function changeType(type) {
	      this.$(':input').prop('type', type);
	      // Update the options so that it keeps the uptodate state
	      this.options.type = type;
	    },
	
	    getNameString: function getNameString() {
	      if (_.isArray(this.options.name)) {
	        return this.options.name.join('-');
	      }
	      return this.options.name;
	    },
	
	    /**
	     * Get parameters, computing _.result
	     * @param  {[type]} options alternative options
	     * @return {Object} the params
	     */
	    getParams: function getParams(options) {
	      var opts = options || this.options || {};
	      return _.clone(_.resultCtx(opts, 'params', this) || {});
	    },
	
	    /**
	     * get a parameter from options.params, compute _.result when needed.
	     * @param  {String} key
	     * @param  {Object} defaultValue
	     * @return {Object} the params
	     */
	    getParam: function getParam(key, defaultValue) {
	      var result = _.resultCtx(this.getParams(), key, this);
	      return !_.isUndefined(result) ? result : defaultValue;
	    },
	
	    /**
	     * Get a parameter from options.params or if empty, object attribute.
	     *
	     * @param  {String} key
	     * @return {Object} the param or attribute
	     */
	    getParamOrAttribute: function getParamOrAttribute(key) {
	      return this.getParam(key) || _.result(this, key);
	    },
	
	    __markError: function __markError() {
	      this.$el.addClass('o-form-has-errors');
	    },
	
	    __clearError: function __clearError() {
	      this.$el.removeClass('o-form-has-errors');
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 607 */
/***/ function(module, exports, __webpack_require__) {

	/*** IMPORTS FROM imports-loader ***/
	(function() {
	var jQuery = __webpack_require__(402);
	
	/*! http://mths.be/placeholder v2.0.7 by @mathias */
	;(function(window, document, $) {
	
		var isInputSupported = 'placeholder' in document.createElement('input');
		var isTextareaSupported = 'placeholder' in document.createElement('textarea');
		var prototype = $.fn;
		var valHooks = $.valHooks;
		var propHooks = $.propHooks;
		var hooks;
		var placeholder;
	
		if (isInputSupported && isTextareaSupported) {
	
			placeholder = prototype.placeholder = function() {
				return this;
			};
	
			placeholder.input = placeholder.textarea = true;
	
		} else {
	
			placeholder = prototype.placeholder = function() {
				var $this = this;
				$this
					.filter((isInputSupported ? 'textarea' : ':input') + '[placeholder]')
					.not('.placeholder')
					.bind({
						'focus.placeholder': clearPlaceholder,
						'blur.placeholder': setPlaceholder
					})
					.data('placeholder-enabled', true)
					.trigger('blur.placeholder');
				return $this;
			};
	
			placeholder.input = isInputSupported;
			placeholder.textarea = isTextareaSupported;
	
			hooks = {
				'get': function(element) {
					var $element = $(element);
	
					var $passwordInput = $element.data('placeholder-password');
					if ($passwordInput) {
						return $passwordInput[0].value;
					}
	
					return $element.data('placeholder-enabled') && $element.hasClass('placeholder') ? '' : element.value;
				},
				'set': function(element, value) {
					var $element = $(element);
	
					var $passwordInput = $element.data('placeholder-password');
					if ($passwordInput) {
						return $passwordInput[0].value = value;
					}
	
					if (!$element.data('placeholder-enabled')) {
						return element.value = value;
					}
					if (value == '') {
						element.value = value;
						// Issue #56: Setting the placeholder causes problems if the element continues to have focus.
						if (element != safeActiveElement()) {
							// We can't use `triggerHandler` here because of dummy text/password inputs :(
							setPlaceholder.call(element);
						}
					} else if ($element.hasClass('placeholder')) {
						clearPlaceholder.call(element, true, value) || (element.value = value);
					} else {
						element.value = value;
					}
					// `set` can not return `undefined`; see http://jsapi.info/jquery/1.7.1/val#L2363
					return $element;
				}
			};
	
			if (!isInputSupported) {
				valHooks.input = hooks;
				propHooks.value = hooks;
			}
			if (!isTextareaSupported) {
				valHooks.textarea = hooks;
				propHooks.value = hooks;
			}
	
			$(function() {
				// Look for forms
				$(document).delegate('form', 'submit.placeholder', function() {
					// Clear the placeholder values so they don't get submitted
					var $inputs = $('.placeholder', this).each(clearPlaceholder);
					setTimeout(function() {
						$inputs.each(setPlaceholder);
					}, 10);
				});
			});
	
			// Clear placeholder values upon page reload
			$(window).bind('beforeunload.placeholder', function() {
				$('.placeholder').each(function() {
					this.value = '';
				});
			});
	
		}
	
		function args(elem) {
			// Return an object of element attributes
			var newAttrs = {};
			var rinlinejQuery = /^jQuery\d+$/;
			$.each(elem.attributes, function(i, attr) {
				if (attr.specified && !rinlinejQuery.test(attr.name)) {
					newAttrs[attr.name] = attr.value;
				}
			});
			return newAttrs;
		}
	
		function clearPlaceholder(event, value) {
			var input = this;
			var $input = $(input);
			if (input.value == $input.attr('placeholder') && $input.hasClass('placeholder')) {
				if ($input.data('placeholder-password')) {
					$input = $input.hide().next().show().attr('id', $input.removeAttr('id').data('placeholder-id'));
					// If `clearPlaceholder` was called from `$.valHooks.input.set`
					if (event === true) {
						return $input[0].value = value;
					}
					$input.focus();
				} else {
					input.value = '';
					$input.removeClass('placeholder');
					input == safeActiveElement() && input.select();
				}
			}
		}
	
		function setPlaceholder() {
			var $replacement;
			var input = this;
			var $input = $(input);
			var id = this.id;
			if (input.value == '') {
				if (input.type == 'password') {
					if (!$input.data('placeholder-textinput')) {
						try {
							$replacement = $input.clone().attr({ 'type': 'text' });
						} catch(e) {
							$replacement = $('<input>').attr($.extend(args(this), { 'type': 'text' }));
						}
						$replacement
							.removeAttr('name')
							.data({
								'placeholder-password': $input,
								'placeholder-id': id
							})
							.bind('focus.placeholder', clearPlaceholder);
						$input
							.data({
								'placeholder-textinput': $replacement,
								'placeholder-id': id
							})
							.before($replacement);
					}
					$input = $input.removeAttr('id').hide().prev().attr('id', id).show();
					// Note: `$input[0] != input` now!
				}
				$input.addClass('placeholder');
				$input[0].value = $input.attr('placeholder');
			} else {
				$input.removeClass('placeholder');
			}
		}
	
		function safeActiveElement() {
			// Avoid IE9 `document.activeElement` of death
			// https://github.com/mathiasbynens/jquery-placeholder/pull/99
			try {
				return document.activeElement;
			} catch (err) {}
		}
	
	}(this, document, jQuery));
	
	}.call(window));

/***/ },
/* 608 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2018, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(529), __webpack_require__(605)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, TemplateUtil, TextBox) {
	
	  var toggleTemplate = TemplateUtil.tpl('\
	      <span class="password-toggle">\
	        <span class="eyeicon visibility-16 button-show"></span>\
	        <span class="eyeicon visibility-off-16 button-hide"></span>\
	      </span>\
	  ');
	
	  var toggleTimeout = 30000;
	
	  return TextBox.extend({
	    initialize: function initialize() {
	      if (this.__showPasswordToggle()) {
	        this.events['click .password-toggle .button-show'] = '__showPassword';
	        this.events['click .password-toggle .button-hide'] = '__hidePassword';
	      }
	      this.delegateEvents();
	    },
	
	    postRender: function postRender() {
	      if (this.isEditMode() && this.__showPasswordToggle()) {
	        this.$el.append(toggleTemplate);
	        this.$el.find('input[type="password"]').addClass('password-with-toggle');
	      }
	      TextBox.prototype.postRender.apply(this, arguments);
	    },
	
	    __showPasswordToggle: function __showPasswordToggle() {
	      return this.options.params && this.options.params.showPasswordToggle;
	    },
	
	    __showPassword: function __showPassword() {
	      var _this = this;
	
	      TextBox.prototype.changeType.apply(this, ['text']);
	      this.$('.password-toggle .button-show').hide();
	      this.$('.password-toggle .button-hide').show();
	      this.passwordToggleTimer = _.delay(function () {
	        _this.__hidePassword();
	      }, toggleTimeout);
	    },
	
	    __hidePassword: function __hidePassword() {
	      TextBox.prototype.changeType.apply(this, ['password']);
	      this.$('.password-toggle .button-show').show();
	      this.$('.password-toggle .button-hide').hide();
	      // clear timeout
	      if (this.passwordToggleTimer) {
	        clearTimeout(this.passwordToggleTimer);
	      }
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 609 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(557), __webpack_require__(529), __webpack_require__(606), __webpack_require__(610)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, Keys, TemplateUtil, BaseInput) {
	
	  var template = TemplateUtil.tpl('\
	    <input type="checkbox" name="{{name}}" id="{{inputId}}"/>\
	    <label for="{{inputId}}" data-se-for-name="{{name}}">{{placeholder}}</label>\
	  ');
	
	  return BaseInput.extend({
	    template: template,
	    /**
	    * @Override
	    */
	    events: {
	      'change :checkbox': 'update',
	      'keyup': function keyup(e) {
	        if (Keys.isSpaceBar(e)) {
	          this.$(':checkbox').click();
	        } else if (Keys.isEnter(e)) {
	          this.model.trigger('form:save');
	        }
	      }
	    },
	
	    /**
	    * @Override
	    */
	    editMode: function editMode() {
	      var placeholder = _.resultCtx(this.options, 'placeholder', this);
	      if (placeholder === '') {
	        placeholder = _.resultCtx(this.options, 'label', this);
	      } else if (placeholder === false) {
	        placeholder = '';
	      }
	
	      this.$el.html(this.template(_.extend(_.omit(this.options, 'placeholder'), { placeholder: placeholder })));
	      var $input = this.$(':checkbox');
	      $input.prop('checked', this.getModelValue() || false);
	
	      this.$('input').customInput();
	      this.model.trigger('form:resize');
	
	      return this;
	    },
	
	    /**
	     * @Override
	    */
	    readMode: function readMode() {
	      this.editMode();
	      this.$(':checkbox').prop('disabled', true);
	      return this;
	    },
	
	    /**
	    * @Override
	    */
	    val: function val() {
	      return this.$(':checkbox').prop('checked');
	    },
	
	    /**
	    * @Override
	    */
	    focus: function focus() {
	      return this.$(':checkbox').focus();
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 610 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/**
	 * There are following local modifications:
	 * - Author: Uzi Kilon ukilon@okta.com
	 *   Bug: OKTA-20830 - solves the conflict when there are multiple labels
	 */
	/**
	 * --------------------------------------------------------------------
	 * jQuery customInput plugin
	 * Author: Maggie Costello Wachs maggie@filamentgroup.com, Scott Jehl, scott@filamentgroup.com
	 * Copyright (c) 2009 Filament Group
	 * licensed under MIT (filamentgroup.com/examples/mit-license.txt)
	 * --------------------------------------------------------------------
	*/
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(402)], __WEBPACK_AMD_DEFINE_RESULT__ = function (jQuery) {
	  var $ = jQuery;
	  jQuery.fn.customInput = function () {
	    return $(this).each(function () {
	      if ($(this).is('[type=checkbox],[type=radio]')) {
	        var input = $(this);
	
	        // get the associated label using the input's id
	        var label = input.siblings('label[for="' + input.attr('id') + '"]:first');
	        if (!label.length) {
	          label = input.closest('label[for="' + input.attr('id') + '"]:first');
	        }
	        // wrap the input + label in a div
	        input.add(label).wrapAll('<div class="custom-' + input.attr('type') + '"></div>');
	
	        // necessary for browsers that don't support the :hover pseudo class on labels
	        label.hover(function () {
	          $(this).addClass('hover');
	        }, function () {
	          $(this).removeClass('hover');
	        });
	
	        //bind custom event, trigger it, bind click,focus,blur events
	        input.bind('updateState', function () {
	          input.is(':checked') ? label.addClass('checked') : label.removeClass('checked checkedHover checkedFocus');
	        }).trigger('updateState').click(function () {
	          $('input[name="' + $(this).attr('name') + '"]').trigger('updateState');
	        }).focus(function () {
	          label.addClass('focus');
	          if (input.is(':checked')) {
	            $(this).addClass('checkedFocus');
	          }
	        }).blur(function () {
	          label.removeClass('focus checkedFocus');
	        });
	      }
	    });
	  };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 611 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/* eslint max-statements: [2, 12], max-params: [2, 6] */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(404), __webpack_require__(557), __webpack_require__(564), __webpack_require__(606), __webpack_require__(528), __webpack_require__(610)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, $, Keys, Util, BaseInput, BaseView) {
	
	  var isABaseView = Util.isABaseView;
	
	  var RadioOption = BaseView.extend({
	    template: '\
	      <input type="radio" name="{{name}}" data-se-name="{{realName}}" value="{{value}}" id="{{optionId}}">\
	      <label for="{{optionId}}" data-se-for-name="{{realName}}" class="radio-label">\
	        {{label}}\
	      </label>\
	    ',
	    initialize: function initialize(options) {
	      var explain;
	
	      explain = options.explain;
	      if (_.isFunction(explain) && !isABaseView(explain)) {
	        explain = _.resultCtx(this.options, 'explain', this);
	      }
	      if (!explain) {
	        return;
	      }
	
	      if (isABaseView(explain)) {
	        this.add('<p class="o-form-explain"></p>', '.radio-label');
	        this.add(explain, '.o-form-explain');
	      } else {
	        this.add('<p class="o-form-explain">{{explain}}</p>', '.radio-label');
	      }
	    }
	  });
	
	  return BaseInput.extend({
	
	    /**
	    * @Override
	    */
	    events: {
	      'change :radio': 'update',
	      'keyup': function keyup(e) {
	        if (Keys.isSpaceBar(e)) {
	          $(e.target).click();
	        } else if (Keys.isEnter(e)) {
	          this.model.trigger('form:save');
	        }
	      }
	    },
	
	    /**
	    * @Override
	    */
	    editMode: function editMode() {
	      var templates = [];
	      this.$el.empty();
	
	      _.each(this.options.options, function (value, key) {
	        var options = {
	          optionId: _.uniqueId('option'),
	          name: this.options.inputId,
	          realName: this.options.name,
	          value: key
	        };
	
	        if (!_.isObject(value)) {
	          value = { label: value };
	        }
	        _.extend(options, value);
	
	        templates.push(new RadioOption(options).render().el);
	      }, this);
	      this.$el.append(templates);
	      var value = this.getModelValue();
	      if (value) {
	        this.$(':radio[value=' + value + ']').prop('checked', true);
	      }
	
	      this.$('input').customInput();
	      this.model.trigger('form:resize');
	
	      if (this.getParam('inline') === true) {
	        this.$('div.custom-radio').addClass('inline');
	      }
	
	      return this;
	    },
	
	    /**
	    * @Override
	    */
	    readMode: function readMode() {
	      this.editMode();
	      this.$(':radio').prop('disabled', true);
	      return this;
	    },
	
	    /**
	    * @Override
	    */
	    val: function val() {
	      return this.$(':radio:checked').val();
	    },
	
	    /**
	    * @Override
	    */
	    focus: function focus() {
	      return this.$('label:eq(0)').focus();
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 612 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(404), __webpack_require__(330), __webpack_require__(557), __webpack_require__(529), __webpack_require__(606), __webpack_require__(600)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, _, Keys, TemplateUtil, BaseInput) {
	
	  var template = TemplateUtil.tpl('<select id="{{inputId}}" name="{{name}}"></select>');
	  var option = TemplateUtil.tpl('<option value="{{key}}">{{value}}</option>');
	
	  // Chosen has known problems when it's at the bottom of a container that has
	  // overflow:hidden set. Because it attaches to the parent container, its
	  // dropdown will be cut off in the UI. Any modal with a chosen select element
	  // at the bottom will manifest this behavior.
	  //
	  // The fix (aside from replacing Chosen) is to change Chosen's behavior -
	  // use the existing styles, but attach it to 'body' and position it correctly
	  // so that it is not affected by a parent overflow.
	  //
	  // More details can be found in OKTA-46489, OKTA-83570
	  var CHOSEN_WINDOW_MARGIN = 20;
	  var CHOSEN_MAX_HEIGHT = 240;
	  var CHOSEN_Z_INDEX = 50000;
	
	  function defer(fn) {
	    if (this.params.autoWidth) {
	      return fn.call(this);
	    } else {
	      return _.defer(_.bind(fn, this));
	    }
	  }
	
	  function findSelectWidth(self) {
	    self.$select.hide();
	    var select = $(self.$select[0]).hide();
	    $('body').append(select);
	    var width = self.params.width = select.width() * 1.2 + 'px';
	    self.$el.append(select.show());
	    return width;
	  }
	
	  function recalculateChosen($chosen, $results, $clone) {
	    var offset = $clone.offset();
	    $chosen.css({
	      left: offset.left,
	      top: offset.top
	    });
	    // Update the max-height to fit within the constraints of the window. This
	    // is especially important for modals because page scrolling is disabled.
	    var $win = $(window),
	        rHeight = $results.outerHeight(),
	        rBottom = rHeight + $results.offset().top - $win.scrollTop(),
	        wHeight = $win.height() - CHOSEN_WINDOW_MARGIN,
	        maxHeight = Math.min(rHeight + wHeight - rBottom, CHOSEN_MAX_HEIGHT);
	    $results.css('max-height', maxHeight);
	  }
	
	  function fixChosenModal($select) {
	    var $chosen = $select.next('.chzn-container'),
	        $clone = $chosen.clone(),
	        $results = $chosen.find('.chzn-results');
	
	    // Use a hidden clone to maintain layout and calculate offset. This is
	    // necessary for more complex layouts (like adding a group rule) where
	    // the chosen element is floated.
	    $clone.css('visibility', 'hidden');
	    $clone.removeAttr('id');
	    $clone.find('li').removeAttr('id');
	
	    // Save the original styles - we'll revert to them when the select closes
	    var baseStyles = {
	      'left': $chosen.css('left'),
	      'top': $chosen.css('top'),
	      'position': $chosen.css('position'),
	      'float': $chosen.css('float'),
	      'z-index': $chosen.css('z-index')
	    };
	    $results.hide();
	
	    // Handler for any resize events that happen when the results list is open
	    var resizeHandler = _.debounce(function () {
	      recalculateChosen($chosen, $results, $clone);
	    }, 10);
	
	    // When the dropdown opens, attach it to body, with the correct absolute
	    // position coordinates
	    $select.on('liszt:showing_dropdown', function () {
	      $chosen.width($chosen.width());
	      $select.after($clone);
	      // .chzn-container can trigger the vertical scrollbar if it causes scrollHeight > window height after append to
	      // the body. Force top -999999 to avoid the scrollbar so $chosen can find the right offset for relocation.
	      $chosen.css({
	        'position': 'absolute',
	        'float': 'none',
	        'z-index': CHOSEN_Z_INDEX,
	        'top': -999999
	      });
	      $('body').append($chosen);
	      $results.show();
	      recalculateChosen($chosen, $results, $clone);
	      // Capture scroll events:
	      // - for forms that use fixed positioning (like editing attributes in
	      //   Profile Editor) - window scroll
	      // - for forms that are too long for the modal - o-form-content scroll
	      $select.parents().scroll(resizeHandler);
	      $(window).on('resize scroll', resizeHandler);
	    });
	
	    // When the dropdown closes or the element is removed, revert to the
	    // original styles and reattach it to its original placement in the dom.
	    $select.on('liszt:hiding_dropdown remove', function () {
	      $select.parents().off('scroll', resizeHandler);
	      $(window).off('resize scroll', resizeHandler);
	      $chosen.css(baseStyles);
	      $results.hide();
	      $results.css('max-height', CHOSEN_MAX_HEIGHT);
	      $clone.remove();
	      $select.after($chosen);
	    });
	  }
	
	  return BaseInput.extend({
	
	    className: 'o-form-select',
	
	    /**
	    * @Override
	    */
	    events: {
	      'change select': 'update',
	      'keyup .chzn-search > :text': function keyupChznSearchText(e) {
	        if (Keys.isEsc(e)) {
	          this.$('.chzn-search > :text').val('');
	          e.stopPropagation();
	        }
	      }
	    },
	
	    constructor: function constructor() {
	      this.template = template;
	      this.option = option;
	      BaseInput.apply(this, arguments);
	      this.params = this.options.params || {};
	    },
	
	    /**
	    * @Override
	    */
	    editMode: function editMode() {
	      /* eslint max-statements: [2, 13] */
	
	      this.$el.html(template(this.options));
	      this.$select = this.$('select');
	
	      var options = this.getOptions();
	      _.each(options, function (value, key) {
	        this.$select.append(option({ key: key, value: value }));
	      }, this);
	
	      // Fix a regression in jQuery 1.x on Firefox
	      // jQuery.val(value) prepends an empty option to the dropdown
	      // if value doesnt exist in the dropdown.
	      // http://bugs.jquery.com/ticket/13514
	      var value = this.getModelValue();
	      if (value) {
	        this.$select.val(value);
	      } else {
	        this.$('option:first-child').prop('selected', true);
	      }
	      this.$el.addClass('o-form-control');
	
	      if (this.params.chosen !== false) {
	        this.__applyChosen();
	      }
	      return this;
	    },
	
	    __applyChosen: function __applyChosen(update) {
	      var width = this.options.wide ? '100%' : this.params.width || '62%';
	      if (this.params.autoWidth) {
	        width = findSelectWidth(this);
	      }
	
	      defer.call(this, function () {
	        var searchThreshold = this.getParam('searchThreshold', 10);
	        if (!_.result(this.options, 'autoRender') && update !== false) {
	          this.update();
	        }
	        this.$select.chosen({
	          'width': width,
	          'disable_search_threshold': searchThreshold,
	          'placeholder_text': this.options['placeholder']
	        });
	        fixChosenModal(this.$select);
	
	        if (this.params.autoWidth) {
	          // fix a chosen css bug
	          this.$el.width(0);
	        }
	
	        this.model.trigger('form:resize');
	      });
	    },
	
	    /**
	    * @Override
	    */
	    val: function val() {
	      return this.$select && this.$select.val();
	    },
	
	    /**
	    * @Override
	    */
	    focus: function focus() {
	      if (this.$select) {
	        return this.$select.focus();
	      }
	    },
	
	    /**
	     * @Override
	     */
	    toStringValue: function toStringValue() {
	      var selectedOption = this.getModelValue(),
	          displayString = selectedOption,
	          options = this.getOptions();
	      if (!_.isEmpty(options)) {
	        displayString = options[selectedOption];
	      }
	      if (_.isUndefined(displayString)) {
	        displayString = this.defaultValue();
	      }
	      return displayString || '';
	    },
	
	    /**
	     * Convert options to an object
	     * support input options that is a
	     * 1. a static object such as {key1: val1, key2: val2...}
	     * 2. a function to be called to return a static object
	     * will return an object with key-value pairs or with empty content
	     * @return {Object} The value
	     */
	    getOptions: function getOptions() {
	      var options = this.options.options;
	
	      if (_.isFunction(options)) {
	        options = options.call(this);
	      }
	
	      return _.isObject(options) ? options : {};
	    },
	
	    remove: function remove() {
	      if (this.$select) {
	        this.$select.trigger('remove');
	      }
	      return BaseInput.prototype.remove.apply(this, arguments);
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 613 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/*globals module */
	
	var OktaSignIn = function () {
	
	  var _ = __webpack_require__(330),
	      config = __webpack_require__(412),
	      OAuth2Util = __webpack_require__(614);
	
	  function getProperties(authClient, LoginRouter, Util, config) {
	
	    /**
	     * Check if a session exists
	     * @param callback - callback function invoked with 'true'/'false' as the argument.
	     */
	    function checkSession(callback) {
	      authClient.session.exists().then(callback);
	    }
	
	    /**
	     * Close the current session (sign-out). Callback is invoked with an error message
	     * if the operation was not successful.
	     * @param callback - function to invoke after closing the session.
	     */
	    function closeSession(callback) {
	      authClient.session.close().then(callback).fail(function () {
	        callback('There was a problem closing the session');
	      });
	    }
	
	    /**
	     * Keep-alive for the session. The callback is invoked with the object containing
	     * the session if successful and {status: 'INACTIVE'} if it is not successful.
	     * @param callback - function to invoke after refreshing the session.
	     */
	    function refreshSession(callback) {
	      authClient.session.refresh().then(callback).fail(function () {
	        callback({ status: 'INACTIVE' });
	      });
	    }
	
	    /**
	     * Refresh the idToken
	     * @param idToken - idToken generated from the OAUTH call
	     * @param callback - function to invoke after refreshing the idToken.
	     *        The callback will be passed a new idToken if successful and
	     *        an error message if not.
	     * @param opts - OAUTH options to refresh the idToken
	     */
	    function refreshIdToken(idToken, callback, opts) {
	      authClient.idToken.refresh(opts).then(callback).fail(function () {
	        callback('There was a problem refreshing the id_token');
	      });
	    }
	
	    /**
	     * Check if there is an active session. If there is one, the callback is invoked with
	     * the session and user information (similar to calling the global success callback)
	     * and if not, the callback is invoked with {status: 'INACTIVE'}, at which point,
	     * the widget can be rendered using renderEl().
	     * @param callback - function to invoke after checking if there is an active session.
	     */
	    function getSession(callback) {
	      authClient.session.get().then(function (res) {
	        if (res.status === 'ACTIVE' && res.user) {
	          // only include the attributes that are passed into the successFn on primary auth.
	          res.user = _.pick(res.user, 'id', 'profile', 'passwordChanged');
	        }
	        callback(res);
	      });
	    }
	
	    /**
	     * Render the sign in widget to an element.
	     * @param options - options for the signin widget.
	     *        Must have an el or $el property to render the widget to.
	     * @param success - success callback function
	     * @param error - error callback function
	     */
	    var router;
	    function render(options, success, error) {
	      if (router) {
	        throw 'An instance of the widget has already been rendered. Call remove() first.';
	      }
	
	      /**
	       * -- Development Mode --
	       * When the page loads, provide a helpful message to remind the developer that
	       * tokens have not been removed from the hash fragment.
	       */
	      if (hasTokensInUrl()) {
	        Util.debugMessage('\n            Looks like there are still tokens in the URL! Don\'t forget to parse and store them.\n            See: https://github.com/okta/okta-signin-widget/#oidc-tokenparsetokensfromurlsuccess-error.\n          ');
	      }
	
	      router = new LoginRouter(_.extend({}, config, options, {
	        authClient: authClient,
	        globalSuccessFn: success,
	        globalErrorFn: error
	      }));
	      router.start();
	    }
	
	    function hide() {
	      if (router) {
	        router.hide();
	      }
	    }
	
	    function show() {
	      if (router) {
	        router.show();
	      }
	    }
	
	    function remove() {
	      if (router) {
	        router.remove();
	        router = undefined;
	      }
	    }
	
	    /**
	     * Check if tokens have been passed back into the url, which happens in
	     * the social auth IDP redirect flow.
	     */
	    function hasTokensInUrl() {
	      return Util.hasTokensInHash(window.location.hash);
	    }
	
	    /**
	     * Parses tokens from the url.
	     * @param success - success callback function (usually the same as passed to render)
	     * @param error - error callback function (usually the same as passed to render)
	     */
	    function parseTokensFromUrl(success, error) {
	      authClient.token.parseFromUrl().then(success).fail(error);
	    }
	
	    /**
	     * Renders the Widget with opinionated defaults for the full-page
	     * redirect flow.
	     * @param options - options for the signin widget
	     */
	    function showSignInToGetTokens(options) {
	      var renderOptions = OAuth2Util.transformShowSignInToGetTokensOptions(options, config);
	      return render(renderOptions);
	    }
	
	    // Properties exposed on OktaSignIn object.
	    return {
	      renderEl: render,
	      showSignInToGetTokens: showSignInToGetTokens,
	      signOut: closeSession,
	      idToken: {
	        refresh: refreshIdToken
	      },
	      session: {
	        close: closeSession,
	        exists: checkSession,
	        get: getSession,
	        refresh: refreshSession
	      },
	      token: {
	        hasTokensInUrl: hasTokensInUrl,
	        parseTokensFromUrl: parseTokensFromUrl
	      },
	      tokenManager: authClient.tokenManager,
	      hide: hide,
	      show: show,
	      remove: remove
	    };
	  }
	
	  function OktaSignIn(options) {
	    var OktaAuth, Util, authClient, LoginRouter;
	
	    // Modify the underscore, handlebars, and jquery modules
	    // Remove once these are explicitly required in Courage
	    __webpack_require__(330);
	    __webpack_require__(403);
	    __webpack_require__(404);
	
	    OktaAuth = __webpack_require__(617);
	    Util = __webpack_require__(638);
	    LoginRouter = __webpack_require__(639);
	
	    Util.debugMessage('\n        The Okta Sign-In Widget is running in development mode.\n        When you are ready to publish your app, embed the minified version to turn on production mode.\n        See: https://developer.okta.com/code/javascript/okta_sign-in_widget#cdn\n      ');
	
	    authClient = new OktaAuth({
	      url: options.baseUrl,
	      transformErrorXHR: Util.transformErrorXHR,
	      headers: {
	        'X-Okta-User-Agent-Extended': 'okta-signin-widget-' + config.version
	      },
	      clientId: options.clientId,
	      redirectUri: options.redirectUri
	    });
	    _.extend(this, LoginRouter.prototype.Events, getProperties(authClient, LoginRouter, Util, options));
	
	    // Triggers the event up the chain so it is available to the consumers of the widget.
	    this.listenTo(LoginRouter.prototype, 'all', this.trigger);
	  }
	
	  return OktaSignIn;
	}();
	module.exports = OktaSignIn;

/***/ },
/* 614 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(615), __webpack_require__(616)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Enums, Errors) {
	
	  var util = {};
	  var _ = Okta._;
	
	  function hasResponseType(params, type) {
	    if (_.isArray(params.responseType)) {
	      return _.contains(params.responseType, type);
	    } else {
	      return type === params.responseType;
	    }
	  }
	
	  /**
	   * Get the tokens in the OIDC/OAUTH flows
	   *
	   * @param settings - settings model object
	   * @param params - {idp: 'xxx'} for social auth
	   *                 {sessionToken: 'xxx'} for okta idp
	   */
	  util.getTokens = function (settings, params, controller) {
	
	    function success(result) {
	      settings.callGlobalSuccess(Enums.SUCCESS, result);
	    }
	
	    function error(error) {
	      // OKTA-104330- Handle error case where user is not assigned to OIDC client
	      if (error.errorCode === 'access_denied') {
	        controller.model.trigger('error', controller.model, { 'responseJSON': error });
	        controller.model.appState.trigger('removeLoading');
	      } else {
	        settings.callGlobalError(new Errors.OAuthError(error.message));
	      }
	    }
	
	    var authClient = settings.getAuthClient(),
	        options = settings.toJSON({ verbose: true }),
	        oauthParams = {},
	        extraOptions = {};
	
	    _.extend(oauthParams, _.pick(options, 'clientId', 'redirectUri'), _.pick(options.authParams, 'responseType', 'responseMode', 'display', 'scopes', 'state', 'nonce'), params);
	
	    // Extra Options for Social Idp popup window title and id_token response timeout
	    extraOptions.popupTitle = Okta.loc('socialauth.popup.title', 'login');
	    extraOptions.timeout = options.oAuthTimeout;
	
	    _.extend(extraOptions, _.pick(options.authParams, 'issuer', 'authorizeUrl'));
	
	    // Redirect flow - this can be used when logging into an external IDP, or
	    // converting the Okta sessionToken to an access_token, id_token, and/or
	    // authorization code. Note: The authorization code flow will always redirect.
	    if (oauthParams.display === 'page' || hasResponseType(oauthParams, 'code')) {
	      authClient.token.getWithRedirect(oauthParams, extraOptions);
	    }
	
	    // Default flow if logging in with Okta as the IDP - convert sessionToken to
	    // tokens in a hidden iframe. Used in Single Page Apps where the app does
	    // not want to redirect away from the page to convert the token.
	    else if (oauthParams.sessionToken) {
	        authClient.token.getWithoutPrompt(oauthParams, extraOptions).then(success).fail(error).done();
	      }
	
	      // Default flow if logging in with an external IDP - opens a popup and
	      // gets the token from a postMessage response.
	      else {
	          authClient.token.getWithPopup(oauthParams, extraOptions).then(success).fail(error).done();
	        }
	  };
	
	  // Parse through the OAuth 'authParams' object to ensure the 'openid' scope is
	  // included (if required)
	  util.addOrRemoveOpenIdScope = function (authParams) {
	    if (!authParams.responseType) {
	      return;
	    }
	
	    //  Convert scope into an Array
	    var scope = Array.isArray(authParams.scopes) ? authParams.scopes : authParams.scopes.split(' ');
	
	    // Remove the 'openid' scope, as it is only required if an 'id_token' is requested
	    if (scope.includes('openid')) {
	      scope.splice(scope.indexOf('openid'), 1);
	    }
	
	    // Add the 'openid' scope
	    if (authParams.responseType.includes('id_token')) {
	      scope.push('openid');
	    }
	
	    return scope;
	  };
	
	  // Utility handlers for mapping convenience keys to OAuth params
	  util.getResponseType = function (options) {
	    var responseType = [];
	    if (options.getIdToken !== false) {
	      responseType.push('id_token');
	    }
	
	    if (options.getAccessToken) {
	      responseType.push('token');
	    }
	
	    return responseType;
	  };
	
	  util.transformShowSignInToGetTokensOptions = function (options) {
	    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	
	    // Override specific OAuth/OIDC values
	    if (!options.clientId && !config.clientId) {
	      throw new Errors.ConfigError('showSignInToGetTokens() requires a "clientId" property.');
	    }
	
	    var renderOptions = {
	      clientId: options.clientId,
	      redirectUri: options.redirectUri,
	      authParams: {
	        issuer: options.authorizationServerId || 'default',
	        display: 'page',
	        responseMode: 'fragment',
	        responseType: util.getResponseType(options),
	        scopes: options.scope || config.authParams && config.authParams.scopes || ['openid']
	      }
	    };
	
	    // Ensure the 'openid' scope is provided when an 'id_token' is requested.
	    // If the 'openid' scope is present and isn't needed, remove it.
	    renderOptions.authParams.scopes = util.addOrRemoveOpenIdScope(renderOptions.authParams);
	
	    return renderOptions;
	  };
	
	  return util;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 615 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(module.exports = {
	
	  DIRECTION_BACK: 'DIRECTION_BACK',
	
	  RECOVERY_TYPE_PASSWORD: 'PASSWORD',
	  RECOVERY_TYPE_UNLOCK: 'UNLOCK',
	  RECOVERY_FACTOR_TYPE_SMS: 'SMS',
	  RECOVERY_FACTOR_TYPE_EMAIL: 'EMAIL',
	  RECOVERY_FACTOR_TYPE_CALL: 'CALL',
	
	  // Global success messages
	  SUCCESS: 'SUCCESS',
	  FORGOT_PASSWORD_EMAIL_SENT: 'FORGOT_PASSWORD_EMAIL_SENT',
	  UNLOCK_ACCOUNT_EMAIL_SENT: 'UNLOCK_ACCOUNT_EMAIL_SENT',
	
	  // Global error messages
	  CONFIG_ERROR: 'CONFIG_ERROR',
	  UNSUPPORTED_BROWSER_ERROR: 'UNSUPPORTED_BROWSER_ERROR',
	  OAUTH_ERROR: 'OAUTH_ERROR',
	  AUTH_STOP_POLL_INITIATION_ERROR: 'AUTH_STOP_POLL_INITIATION_ERROR',
	
	  // Enroll choice page types
	  ALL_OPTIONAL_NONE_ENROLLED: 'ALL_OPTIONAL_NONE_ENROLLED',
	  ALL_OPTIONAL_SOME_ENROLLED: 'ALL_OPTIONAL_SOME_ENROLLED',
	  HAS_REQUIRED_NONE_ENROLLED: 'HAS_REQUIRED_NONE_ENROLLED',
	  HAS_REQUIRED_SOME_REQUIRED_ENROLLED: 'HAS_REQUIRED_SOME_REQUIRED_ENROLLED',
	  HAS_REQUIRED_ALL_REQUIRED_ENROLLED: 'HAS_REQUIRED_ALL_REQUIRED_ENROLLED',
	
	  // Operations
	  PRIMARY_AUTH: 'PRIMARY_AUTH',
	  FORGOT_PASSWORD: 'FORGOT_PASSWORD',
	  UNLOCK_ACCOUNT: 'UNLOCK_ACCOUNT',
	
	  // Auth Types
	  SESSION_SSO: 'SESSION_SSO',
	  SESSION_STEP_UP: 'SESSION_STEP_UP',
	
	  //Registration
	  ACTIVATION_EMAIL_SENT: 'ACTIVATION_EMAIL_SENT',
	  REGISTRATION_COMPLETE: 'REGISTRATION_COMPLETE',
	  REGISTRATION_FAILED: 'REGISTRATION_FAILED',
	
	  //IDP Discovery
	  IDP_DISCOVERY: 'IDP_DISCOVERY'
	});

/***/ },
/* 616 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(615)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Enums) {
	
	  function ConfigError(message) {
	    this.name = Enums.CONFIG_ERROR;
	    this.message = message || Okta.loc('error.config');
	  }
	  ConfigError.prototype = new Error();
	
	  function UnsupportedBrowserError(message) {
	    this.name = Enums.UNSUPPORTED_BROWSER_ERROR;
	    this.message = message || Okta.loc('error.unsupported.browser');
	  }
	  UnsupportedBrowserError.prototype = new Error();
	
	  function OAuthError(message) {
	    this.name = Enums.OAUTH_ERROR;
	    this.message = message;
	  }
	  OAuthError.prototype = new Error();
	
	  function RegistrationError(message) {
	    this.name = Enums.REGISTRATION_FAILED;
	    this.message = message;
	  }
	  RegistrationError.prototype = new Error();
	
	  // Thrown when initiation of poll was cancelled.
	  function AuthStopPollInitiationError() {
	    this.name = Enums.AUTH_STOP_POLL_INITIATION_ERROR;
	  }
	  AuthStopPollInitiationError.prototype = new Error();
	
	  return {
	    ConfigError: ConfigError,
	    UnsupportedBrowserError: UnsupportedBrowserError,
	    OAuthError: OAuthError,
	    RegistrationError: RegistrationError,
	    AuthStopPollInitiationError: AuthStopPollInitiationError
	  };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 617 */
/***/ function(module, exports, __webpack_require__) {

	var jqueryRequest = __webpack_require__(618);
	module.exports = __webpack_require__(619)(jqueryRequest);


/***/ },
/* 618 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	var $ = __webpack_require__(402);
	
	function jqueryRequest(method, url, args) {
	  var deferred = $.Deferred();
	  $.ajax({
	    type: method,
	    url: url,
	    headers: args.headers,
	    data: JSON.stringify(args.data),
	    xhrFields: {
	      withCredentials: true
	    }
	  })
	  .then(function(data, textStatus, jqXHR) {
	    delete jqXHR.then;
	    deferred.resolve(jqXHR);
	  }, function(jqXHR) {
	    delete jqXHR.then;
	    deferred.reject(jqXHR);
	  });
	  return deferred;
	}
	
	module.exports = jqueryRequest;


/***/ },
/* 619 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	/* eslint-disable complexity */
	/* eslint-disable max-statements */
	
	__webpack_require__(620);
	
	var Q                 = __webpack_require__(409);
	var oauthUtil         = __webpack_require__(622);
	var util              = __webpack_require__(624);
	var tx                = __webpack_require__(631);
	var session           = __webpack_require__(633);
	var cookies           = __webpack_require__(625);
	var token             = __webpack_require__(634);
	var AuthSdkError      = __webpack_require__(628);
	var config            = __webpack_require__(629);
	var TokenManager      = __webpack_require__(637);
	var http              = __webpack_require__(623);
	
	function OktaAuthBuilder(args) {
	  var sdk = this;
	
	  if (!args) {
	    throw new AuthSdkError('No arguments passed to constructor. ' +
	      'Required usage: new OktaAuth(args)');
	  }
	
	  if (!args.url) {
	    throw new AuthSdkError('No url passed to constructor. ' +
	      'Required usage: new OktaAuth({url: "https://sample.okta.com"})');
	  }
	
	  if (args.url.indexOf('-admin.') !== -1) {
	    throw new AuthSdkError('URL passed to constructor contains "-admin" in subdomain. ' +
	      'Required usage: new OktaAuth({url: "https://dev-12345.okta.com})');
	  }
	
	  this.options = {
	    url: util.removeTrailingSlash(args.url),
	    clientId: args.clientId,
	    issuer: util.removeTrailingSlash(args.issuer),
	    authorizeUrl: util.removeTrailingSlash(args.authorizeUrl),
	    userinfoUrl: util.removeTrailingSlash(args.userinfoUrl),
	    redirectUri: args.redirectUri,
	    ajaxRequest: args.ajaxRequest,
	    transformErrorXHR: args.transformErrorXHR,
	    headers: args.headers
	  };
	
	  this.userAgent = 'okta-auth-js-' + config.SDK_VERSION;
	
	  // Digital clocks will drift over time, so the server
	  // can misalign with the time reported by the browser.
	  // The maxClockSkew allows relaxing the time-based
	  // validation of tokens (in seconds, not milliseconds).
	  // It currently defaults to 300, because 5 min is the
	  // default maximum tolerance allowed by Kerberos.
	  // (https://technet.microsoft.com/en-us/library/cc976357.aspx)
	  if (!args.maxClockSkew && args.maxClockSkew !== 0) {
	    this.options.maxClockSkew = config.DEFAULT_MAX_CLOCK_SKEW;
	  } else {
	    this.options.maxClockSkew = args.maxClockSkew;
	  }
	
	  sdk.session = {
	    close: util.bind(session.closeSession, null, sdk),
	    exists: util.bind(session.sessionExists, null, sdk),
	    get: util.bind(session.getSession, null, sdk),
	    refresh: util.bind(session.refreshSession, null, sdk),
	    setCookieAndRedirect: util.bind(session.setCookieAndRedirect, null, sdk)
	  };
	
	  sdk.tx = {
	    status: util.bind(tx.transactionStatus, null, sdk),
	    resume: util.bind(tx.resumeTransaction, null, sdk),
	    exists: util.bind(tx.transactionExists, null, sdk)
	  };
	
	  // This is exposed so we can mock document.cookie in our tests
	  sdk.tx.exists._getCookie = function(name) {
	    return cookies.getCookie(name);
	  };
	
	  sdk.idToken = {
	    authorize: util.deprecateWrap('Use token.getWithoutPrompt, token.getWithPopup, or token.getWithRedirect ' +
	      'instead of idToken.authorize.', util.bind(token.getToken, null, sdk)),
	    verify: util.deprecateWrap('Use token.verify instead of idToken.verify', util.bind(token.verifyIdToken, null, sdk)),
	    refresh: util.deprecateWrap('Use token.refresh instead of idToken.refresh',
	      util.bind(token.refreshIdToken, null, sdk)),
	    decode: util.deprecateWrap('Use token.decode instead of idToken.decode', token.decodeToken)
	  };
	
	  // This is exposed so we can mock window.location.href in our tests
	  sdk.idToken.authorize._getLocationHref = function() {
	    return window.location.href;
	  };
	
	  sdk.token = {
	    getWithoutPrompt: util.bind(token.getWithoutPrompt, null, sdk),
	    getWithPopup: util.bind(token.getWithPopup, null, sdk),
	    getWithRedirect: util.bind(token.getWithRedirect, null, sdk),
	    parseFromUrl: util.bind(token.parseFromUrl, null, sdk),
	    decode: token.decodeToken,
	    refresh: util.bind(token.refreshToken, null, sdk),
	    getUserInfo: util.bind(token.getUserInfo, null, sdk),
	    verify: util.bind(token.verifyToken, null, sdk)
	  };
	
	  // This is exposed so we can set window.location in our tests
	  sdk.token.getWithRedirect._setLocation = function(url) {
	    window.location = url;
	  };
	
	  // This is exposed so we can mock getting window.history in our tests
	  sdk.token.parseFromUrl._getHistory = function() {
	    return window.history;
	  };
	
	  // This is exposed so we can mock getting window.location in our tests
	  sdk.token.parseFromUrl._getLocation = function() {
	    return window.location;
	  };
	
	  // This is exposed so we can mock getting window.document in our tests
	  sdk.token.parseFromUrl._getDocument = function() {
	    return window.document;
	  };
	
	  sdk.fingerprint._getUserAgent = function() {
	    return navigator.userAgent;
	  };
	
	  var isWindowsPhone = /windows phone|iemobile|wpdesktop/i;
	  sdk.features.isFingerprintSupported = function() {
	    var agent = sdk.fingerprint._getUserAgent();
	    return agent && !isWindowsPhone.test(agent);
	  };
	
	  sdk.tokenManager = new TokenManager(sdk, args.tokenManager);
	}
	
	var proto = OktaAuthBuilder.prototype;
	
	proto.features = {};
	
	proto.features.isPopupPostMessageSupported = function() {
	  var isIE8or9 = document.documentMode && document.documentMode < 10;
	  if (window.postMessage && !isIE8or9) {
	    return true;
	  }
	  return false;
	};
	
	proto.features.isTokenVerifySupported = function() {
	  return typeof crypto !== 'undefined' && crypto.subtle && typeof Uint8Array !== 'undefined';
	};
	
	// { username, password, (relayState), (context) }
	proto.signIn = function (opts) {
	  var sdk = this;
	  opts = util.clone(opts || {});
	  function postToTransaction(options) {
	    delete opts.sendFingerprint;
	    return tx.postToTransaction(sdk, '/api/v1/authn', opts, options);
	  }
	  if (!opts.sendFingerprint) {
	    return postToTransaction();
	  }
	  return sdk.fingerprint()
	  .then(function(fingerprint) {
	    return postToTransaction({
	      headers: {
	        'X-Device-Fingerprint': fingerprint
	      }
	    });
	  });
	};
	
	proto.signOut = function () {
	  return this.session.close();
	};
	
	// { username, (relayState) }
	proto.forgotPassword = function (opts) {
	  return tx.postToTransaction(this, '/api/v1/authn/recovery/password', opts);
	};
	
	// { username, (relayState) }
	proto.unlockAccount = function (opts) {
	  return tx.postToTransaction(this, '/api/v1/authn/recovery/unlock', opts);
	};
	
	// { recoveryToken }
	proto.verifyRecoveryToken = function (opts) {
	  return tx.postToTransaction(this, '/api/v1/authn/recovery/token', opts);
	};
	
	// { resource, (rel), (requestContext)}
	proto.webfinger = function (opts) {
	  var url = '/.well-known/webfinger' + util.toQueryParams(opts);
	  var options = {
	    headers: {
	      'Accept': 'application/jrd+json'
	    }
	  };
	  return http.get(this, url, options);
	};
	
	proto.fingerprint = function(options) {
	  options = options || {};
	  var sdk = this;
	  if (!sdk.features.isFingerprintSupported()) {
	    return Q.reject(new AuthSdkError('Fingerprinting is not supported on this device'));
	  }
	
	  var deferred = Q.defer();
	
	  var iframe = document.createElement('iframe');
	  iframe.style.display = 'none';
	
	  function listener(e) {
	    if (!e || !e.data || e.origin !== sdk.options.url) {
	      return;
	    }
	
	    try {
	      var msg = JSON.parse(e.data);
	    } catch (err) {
	      return deferred.reject(new AuthSdkError('Unable to parse iframe response'));
	    }
	
	    if (!msg) { return; }
	    if (msg.type === 'FingerprintAvailable') {
	      return deferred.resolve(msg.fingerprint);
	    }
	    if (msg.type === 'FingerprintServiceReady') {
	      e.source.postMessage(JSON.stringify({
	        type: 'GetFingerprint'
	      }), e.origin);
	    }
	  }
	  oauthUtil.addListener(window, 'message', listener);
	
	  iframe.src = sdk.options.url + '/auth/services/devicefingerprint';
	  document.body.appendChild(iframe);
	
	  var timeout = setTimeout(function() {
	    deferred.reject(new AuthSdkError('Fingerprinting timed out'));
	  }, options.timeout || 15000);
	
	  return deferred.promise.fin(function() {
	    clearTimeout(timeout);
	    oauthUtil.removeListener(window, 'message', listener);
	    if (document.body.contains(iframe)) {
	      iframe.parentElement.removeChild(iframe);
	    }
	  });
	};
	
	module.exports = function(ajaxRequest) {
	  function OktaAuth(args) {
	    if (!(this instanceof OktaAuth)) {
	      return new OktaAuth(args);
	    }
	
	    if (args && !args.ajaxRequest) {
	      args.ajaxRequest = ajaxRequest;
	    }
	    util.bind(OktaAuthBuilder, this)(args);
	  }
	  OktaAuth.prototype = OktaAuthBuilder.prototype;
	  OktaAuth.prototype.constructor = OktaAuth;
	
	  return OktaAuth;
	};


/***/ },
/* 620 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	__webpack_require__(621);
	
	// Production steps of ECMA-262, Edition 5, 15.4.4.14
	// Reference: http://es5.github.io/#x15.4.4.14
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf#Polyfill
	if (!Array.prototype.indexOf) {
	  Array.prototype.indexOf = function(searchElement, fromIndex) {
	
	    var k;
	
	    // 1. Let o be the result of calling ToObject passing
	    //    the this value as the argument.
	    if (this == null) {
	      throw new TypeError('"this" is null or not defined');
	    }
	
	    var o = Object(this);
	
	    // 2. Let lenValue be the result of calling the Get
	    //    internal method of o with the argument "length".
	    // 3. Let len be ToUint32(lenValue).
	    var len = o.length >>> 0;
	
	    // 4. If len is 0, return -1.
	    if (len === 0) {
	      return -1;
	    }
	
	    // 5. If argument fromIndex was passed let n be
	    //    ToInteger(fromIndex); else let n be 0.
	    var n = +fromIndex || 0;
	
	    if (Math.abs(n) === Infinity) {
	      n = 0;
	    }
	
	    // 6. If n >= len, return -1.
	    if (n >= len) {
	      return -1;
	    }
	
	    // 7. If n >= 0, then Let k be n.
	    // 8. Else, n<0, Let k be len - abs(n).
	    //    If k is less than 0, then let k be 0.
	    k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);
	
	    // 9. Repeat, while k < len
	    while (k < len) {
	      // a. Let Pk be ToString(k).
	      //   This is implicit for LHS operands of the in operator
	      // b. Let kPresent be the result of calling the
	      //    HasProperty internal method of o with argument Pk.
	      //   This step can be combined with c
	      // c. If kPresent is true, then
	      //    i.  Let elementK be the result of calling the Get
	      //        internal method of o with the argument ToString(k).
	      //   ii.  Let same be the result of applying the
	      //        Strict Equality Comparison Algorithm to
	      //        searchElement and elementK.
	      //  iii.  If same is true, return k.
	      if (k in o && o[k] === searchElement) {
	        return k;
	      }
	      k++;
	    }
	    return -1;
	  };
	}
	
	if (!Array.isArray) {
	  Array.isArray = function(obj) {
	    return Object.prototype.toString.call(obj) === '[object Array]';
	  };
	}


/***/ },
/* 621 */
/***/ function(module, exports, __webpack_require__) {

	;(function () {
	
	  var object =  true ? exports : this; // #8: web workers
	  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
	
	  function InvalidCharacterError(message) {
	    this.message = message;
	  }
	  InvalidCharacterError.prototype = new Error;
	  InvalidCharacterError.prototype.name = 'InvalidCharacterError';
	
	  // encoder
	  // [https://gist.github.com/999166] by [https://github.com/nignag]
	  object.btoa || (
	  object.btoa = function (input) {
	    var str = String(input);
	    for (
	      // initialize result and counter
	      var block, charCode, idx = 0, map = chars, output = '';
	      // if the next str index does not exist:
	      //   change the mapping table to "="
	      //   check if d has no fractional digits
	      str.charAt(idx | 0) || (map = '=', idx % 1);
	      // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
	      output += map.charAt(63 & block >> 8 - idx % 1 * 8)
	    ) {
	      charCode = str.charCodeAt(idx += 3/4);
	      if (charCode > 0xFF) {
	        throw new InvalidCharacterError("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
	      }
	      block = block << 8 | charCode;
	    }
	    return output;
	  });
	
	  // decoder
	  // [https://gist.github.com/1020396] by [https://github.com/atk]
	  object.atob || (
	  object.atob = function (input) {
	    var str = String(input).replace(/=+$/, '');
	    if (str.length % 4 == 1) {
	      throw new InvalidCharacterError("'atob' failed: The string to be decoded is not correctly encoded.");
	    }
	    for (
	      // initialize result and counters
	      var bc = 0, bs, buffer, idx = 0, output = '';
	      // get next character
	      buffer = str.charAt(idx++);
	      // character found in table? initialize bit storage and add its ascii value;
	      ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,
	        // and if not first of each 4 characters,
	        // convert the first 8 bits to one ascii character
	        bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0
	    ) {
	      // try to find character in table (0-63, not found => -1)
	      buffer = chars.indexOf(buffer);
	    }
	    return output;
	  });
	
	}());


/***/ },
/* 622 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable complexity, max-statements */
	var http = __webpack_require__(623);
	var util = __webpack_require__(624);
	var storageUtil = __webpack_require__(626);
	var AuthSdkError = __webpack_require__(628);
	
	var httpCache = storageUtil.getHttpCache();
	
	function isToken(obj) {
	  if (obj &&
	      (obj.accessToken || obj.idToken) &&
	      Array.isArray(obj.scopes)) {
	    return true;
	  }
	  return false;
	}
	
	function addListener(eventTarget, name, fn) {
	  if (eventTarget.addEventListener) {
	    eventTarget.addEventListener(name, fn);
	  } else {
	    eventTarget.attachEvent('on' + name, fn);
	  }
	}
	
	function removeListener(eventTarget, name, fn) {
	  if (eventTarget.removeEventListener) {
	    eventTarget.removeEventListener(name, fn);
	  } else {
	    eventTarget.detachEvent('on' + name, fn);
	  }
	}
	
	function loadFrame(src) {
	  var iframe = document.createElement('iframe');
	  iframe.style.display = 'none';
	  iframe.src = src;
	
	  return document.body.appendChild(iframe);
	}
	
	function loadPopup(src, options) {
	  var title = options.popupTitle || 'External Identity Provider User Authentication';
	  var appearance = 'toolbar=no, scrollbars=yes, resizable=yes, ' +
	    'top=100, left=500, width=600, height=600';
	
	  if (util.isIE11OrLess()) {
	    // IE<=11 doesn't fully support postMessage at time of writting.
	    // the following simple solution happened to solve the issue
	    // without adding another proxy layer which makes flow more complecated.
	    var winEl = window.open('/', title, appearance);
	    winEl.location.href = src;
	    return winEl;
	  } else {
	    return window.open(src, title, appearance);
	  }
	}
	
	function getWellKnown(sdk, issuer) {
	  return http.get(sdk, (issuer || sdk.options.url) + '/.well-known/openid-configuration', {
	    cacheResponse: true
	  });
	}
	
	function getKey(sdk, issuer, kid) {
	  return getWellKnown(sdk, issuer)
	  .then(function(wellKnown) {
	    var jwksUri = wellKnown['jwks_uri'];
	
	    // Check our kid against the cached version (if it exists and isn't expired)
	    var cacheContents = httpCache.getStorage();
	    var cachedResponse = cacheContents[jwksUri];
	    if (cachedResponse && Date.now()/1000 < cachedResponse.expiresAt) {
	      var cachedKey = util.find(cachedResponse.response.keys, {
	        kid: kid
	      });
	
	      if (cachedKey) {
	        return cachedKey;
	      }
	    }
	
	    // Remove cache for the key
	    httpCache.clearStorage(jwksUri);
	
	    // Pull the latest keys if the key wasn't in the cache
	    return http.get(sdk, jwksUri, {
	      cacheResponse: true
	    })
	    .then(function(res) {
	      var key = util.find(res.keys, {
	        kid: kid
	      });
	
	      if (key) {
	        return key;
	      }
	
	      throw new AuthSdkError('The key id, ' + kid + ', was not found in the server\'s keys');
	    });
	  });
	}
	
	function validateClaims(sdk, claims, aud, iss, nonce) {
	  if (!claims || !iss || !aud) {
	    throw new AuthSdkError('The jwt, iss, and aud arguments are all required');
	  }
	
	  if (nonce && claims.nonce !== nonce) {
	    throw new AuthSdkError('OAuth flow response nonce doesn\'t match request nonce');
	  }
	
	  var now = Math.floor(new Date().getTime()/1000);
	
	  if (claims.iss !== iss) {
	    throw new AuthSdkError('The issuer [' + claims.iss + '] ' +
	      'does not match [' + iss + ']');
	  }
	
	  if (claims.aud !== aud) {
	    throw new AuthSdkError('The audience [' + claims.aud + '] ' +
	      'does not match [' + aud + ']');
	  }
	
	  if (claims.iat > claims.exp) {
	    throw new AuthSdkError('The JWT expired before it was issued');
	  }
	
	  if ((now - sdk.options.maxClockSkew) > claims.exp) {
	    throw new AuthSdkError('The JWT expired and is no longer valid');
	  }
	
	  if (claims.iat > (now + sdk.options.maxClockSkew)) {
	    throw new AuthSdkError('The JWT was issued in the future');
	  }
	}
	
	function getOAuthUrls(sdk, oauthParams, options) {
	  options = options || {};
	
	  // Get user-supplied arguments
	  var authorizeUrl = util.removeTrailingSlash(options.authorizeUrl) || sdk.options.authorizeUrl;
	  var issuer = util.removeTrailingSlash(options.issuer) || sdk.options.issuer;
	  var userinfoUrl = util.removeTrailingSlash(options.userinfoUrl) || sdk.options.userinfoUrl;
	
	  // If an issuer exists but it's not a url, assume it's an authServerId
	  if (issuer && !(/^https?:/.test(issuer))) {
	    // Make it a url
	    issuer = sdk.options.url + '/oauth2/' + issuer;
	  }
	
	  // If an authorizeUrl is supplied without an issuer, and an id_token is requested
	  if (!issuer && authorizeUrl &&
	      oauthParams.responseType.indexOf('id_token') !== -1) {
	    // The issuer is ambiguous, so we won't be able to validate the id_token jwt
	    throw new AuthSdkError('Cannot request idToken with an authorizeUrl without an issuer');
	  }
	
	  // If a token is requested without an issuer
	  if (!issuer && oauthParams.responseType.indexOf('token') !== -1) {
	    // If an authorizeUrl is supplied without a userinfoUrl
	    if (authorizeUrl && !userinfoUrl) {
	      // The userinfoUrl is ambiguous, so we won't be able to call getUserInfo
	      throw new AuthSdkError('Cannot request accessToken with an authorizeUrl without an issuer or userinfoUrl');
	    }
	
	    // If a userinfoUrl is supplied without a authorizeUrl
	    if (userinfoUrl && !authorizeUrl) {
	      // The authorizeUrl is ambiguous, so we won't be able to call the authorize endpoint
	      throw new AuthSdkError('Cannot request token with an userinfoUrl without an issuer or authorizeUrl');
	    }
	  }
	
	  var sharedResourceServerRegex = new RegExp('^https?://.*?/oauth2/.+');
	
	  // Default the issuer to our baseUrl
	  issuer = issuer || sdk.options.url;
	
	  // A shared resource server issuer looks like:
	  // https://example.okta.com/oauth2/aus8aus76q8iphupD0h7
	  if (sharedResourceServerRegex.test(issuer)) {
	    // A shared resource server authorizeUrl looks like:
	    // https://example.okta.com/oauth2/aus8aus76q8iphupD0h7/v1/authorize
	    authorizeUrl = authorizeUrl || issuer + '/v1/authorize';
	    // Shared resource server userinfoUrls look like:
	    // https://example.okta.com/oauth2/aus8aus76q8iphupD0h7/v1/userinfo
	    userinfoUrl = userinfoUrl || issuer + '/v1/userinfo';
	
	  // Normally looks like:
	  // https://example.okta.com
	  } else {
	    // Normal authorizeUrls look like:
	    // https://example.okta.com/oauth2/v1/authorize
	    authorizeUrl = authorizeUrl || issuer + '/oauth2/v1/authorize';
	    // Normal userinfoUrls look like:
	    // https://example.okta.com/oauth2/v1/userinfo
	    userinfoUrl = userinfoUrl || issuer + '/oauth2/v1/userinfo';
	  }
	
	  return {
	    issuer: issuer,
	    authorizeUrl: authorizeUrl,
	    userinfoUrl: userinfoUrl
	  };
	}
	
	function hashToObject(hash) {
	  // Predefine regexs for parsing hash
	  var plus2space = /\+/g;
	  var paramSplit = /([^&=]+)=?([^&]*)/g;
	
	  // Remove the leading hash
	  var fragment = hash.substring(1);
	
	  var obj = {};
	
	  // Loop until we have no more params
	  var param;
	  while (true) { // eslint-disable-line no-constant-condition
	    param = paramSplit.exec(fragment);
	    if (!param) { break; }
	
	    var key = param[1];
	    var value = param[2];
	
	    // id_token should remain base64url encoded
	    if (key === 'id_token' || key === 'access_token' || key === 'code') {
	      obj[key] = value;
	    } else {
	      obj[key] = decodeURIComponent(value.replace(plus2space, ' '));
	    }
	  }
	  return obj;
	}
	
	module.exports = {
	  getWellKnown: getWellKnown,
	  getKey: getKey,
	  validateClaims: validateClaims,
	  getOAuthUrls: getOAuthUrls,
	  loadFrame: loadFrame,
	  loadPopup: loadPopup,
	  hashToObject: hashToObject,
	  isToken: isToken,
	  addListener: addListener,
	  removeListener: removeListener
	};


/***/ },
/* 623 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable complexity */
	var util = __webpack_require__(624);
	var cookies = __webpack_require__(625);
	var storageUtil = __webpack_require__(626);
	var Q = __webpack_require__(409);
	var AuthApiError = __webpack_require__(630);
	var config = __webpack_require__(629);
	
	function httpRequest(sdk, options) {
	  options = options || {};
	  var url = options.url,
	      method = options.method,
	      args = options.args,
	      saveAuthnState = options.saveAuthnState,
	      accessToken = options.accessToken,
	      httpCache = storageUtil.getHttpCache();
	
	  if (options.cacheResponse) {
	    var cacheContents = httpCache.getStorage();
	    var cachedResponse = cacheContents[url];
	    if (cachedResponse && Date.now()/1000 < cachedResponse.expiresAt) {
	      return Q.resolve(cachedResponse.response);
	    }
	  }
	
	  var headers = {
	    'Accept': 'application/json',
	    'Content-Type': 'application/json',
	    'X-Okta-User-Agent-Extended': sdk.userAgent
	  };
	  util.extend(headers, sdk.options.headers, options.headers);
	
	  if (accessToken && util.isString(accessToken)) {
	    headers['Authorization'] = 'Bearer ' + accessToken;
	  }
	
	  var ajaxOptions = {
	    headers: headers,
	    data: args || undefined
	  };
	
	  var err, res;
	  return new Q(sdk.options.ajaxRequest(method, url, ajaxOptions))
	    .then(function(resp) {
	      res = resp.responseText;
	      if (res && util.isString(res)) {
	        res = JSON.parse(res);
	      }
	
	      if (saveAuthnState) {
	        if (!res.stateToken) {
	          cookies.deleteCookie(config.STATE_TOKEN_COOKIE_NAME);
	        }
	      }
	
	      if (res && res.stateToken && res.expiresAt) {
	        cookies.setCookie(config.STATE_TOKEN_COOKIE_NAME, res.stateToken, res.expiresAt);
	      }
	
	      if (res && options.cacheResponse) {
	        httpCache.updateStorage(url, {
	          expiresAt: Math.floor(Date.now()/1000) + config.DEFAULT_CACHE_DURATION,
	          response: res
	        });
	      }
	
	      return res;
	    })
	    .fail(function(resp) {
	      var serverErr = resp.responseText || {};
	      if (util.isString(serverErr)) {
	        try {
	          serverErr = JSON.parse(serverErr);
	        } catch (e) {
	          serverErr = {
	            errorSummary: 'Unknown error'
	          };
	        }
	      }
	
	      if (resp.status >= 500) {
	        serverErr.errorSummary = 'Unknown error';
	      }
	
	      if (sdk.options.transformErrorXHR) {
	        resp = sdk.options.transformErrorXHR(util.clone(resp));
	      }
	
	      err = new AuthApiError(serverErr, resp);
	
	      if (err.errorCode === 'E0000011') {
	        cookies.deleteCookie(config.STATE_TOKEN_COOKIE_NAME);
	      }
	
	      throw err;
	    });
	}
	
	function get(sdk, url, options) {
	  url = util.isAbsoluteUrl(url) ? url : sdk.options.url + url;
	  var getOptions = {
	    url: url,
	    method: 'GET'
	  };
	  util.extend(getOptions, options);
	  return httpRequest(sdk, getOptions);
	}
	
	function post(sdk, url, args, options) {
	  url = util.isAbsoluteUrl(url) ? url : sdk.options.url + url;
	  var postOptions = {
	    url: url,
	    method: 'POST',
	    args: args,
	    saveAuthnState: true
	  };
	  util.extend(postOptions, options);
	  return httpRequest(sdk, postOptions);
	}
	
	module.exports = {
	  get: get,
	  post: post,
	  httpRequest: httpRequest
	};


/***/ },
/* 624 */
/***/ function(module, exports) {

	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	/* eslint-env es6 */
	var util = module.exports;
	
	util.base64UrlToBase64 = function(b64u) {
	  return b64u.replace(/\-/g, '+').replace(/_/g, '/');
	};
	
	util.base64UrlToString = function(b64u) {
	  var b64 = util.base64UrlToBase64(b64u);
	  switch (b64.length % 4) {
	    case 0:
	      break;
	    case 2:
	      b64 += '==';
	      break;
	    case 3:
	      b64 += '=';
	      break;
	    default:
	      throw 'Not a valid Base64Url';
	  }
	  var utf8 = atob(b64);
	  try {
	    return decodeURIComponent(escape(utf8));
	  } catch (e) {
	    return utf8;
	  }
	};
	
	util.stringToBuffer = function(str) {
	  var buffer = new Uint8Array(str.length);
	  for (var i = 0; i < str.length; i++) {
	    buffer[i] = str.charCodeAt(i);
	  }
	  return buffer;
	};
	
	util.base64UrlDecode = function(str) {
	  return atob(util.base64UrlToBase64(str));
	};
	
	util.bind = function(fn, ctx) {
	  var additionalArgs = Array.prototype.slice.call(arguments, 2);
	  return function() {
	    var args = Array.prototype.slice.call(arguments);
	    args = additionalArgs.concat(args);
	    return fn.apply(ctx, args);
	  };
	};
	
	util.isAbsoluteUrl = function(url) {
	  return /^(?:[a-z]+:)?\/\//i.test(url);
	};
	
	util.isString = function(obj) {
	  return Object.prototype.toString.call(obj) === '[object String]';
	};
	
	util.isObject = function(obj) {
	  return Object.prototype.toString.call(obj) === '[object Object]';
	};
	
	util.isNumber = function(obj) {
	  return Object.prototype.toString.call(obj) === '[object Number]';
	};
	
	util.isArray = function(obj) {
	  return Object.prototype.toString.call(obj) === '[object Array]';
	};
	
	util.isoToUTCString = function(str) {
	  var parts = str.match(/\d+/g),
	      isoTime = Date.UTC(parts[0], parts[1] - 1, parts[2], parts[3], parts[4], parts[5]),
	      isoDate = new Date(isoTime);
	
	  return isoDate.toUTCString();
	};
	
	util.toQueryParams = function(obj) {
	  var str = [];
	  if (obj !== null) {
	    for (var key in obj) {
	      if (obj.hasOwnProperty(key) &&
	          obj[key] !== undefined &&
	          obj[key] !== null) {
	        str.push(key + '=' + encodeURIComponent(obj[key]));
	      }
	    }
	  }
	  if (str.length) {
	    return '?' + str.join('&');
	  } else {
	    return '';
	  }
	};
	
	util.genRandomString = function(length) {
	  var randomCharset = 'abcdefghijklnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
	  var random = '';
	  for (var c = 0, cl = randomCharset.length; c < length; ++c) {
	    random += randomCharset[Math.floor(Math.random() * cl)];
	  }
	  return random;
	};
	
	util.extend = function() {
	  var obj1 = arguments[0];
	  var objArray = [].slice.call(arguments, 1);
	  objArray.forEach(function(obj) {
	    for (var prop in obj) {
	      if (obj.hasOwnProperty(prop)) {
	        obj1[prop] = obj[prop];
	      }
	    }
	  });
	};
	
	util.removeNils = function(obj) {
	  var cleaned = {};
	  for (var prop in obj) {
	    if (obj.hasOwnProperty(prop)) {
	      var value = obj[prop];
	      if (value !== null && value !== undefined) {
	        cleaned[prop] = value;
	      }
	    }
	  }
	  return cleaned;
	};
	
	util.clone = function(obj) {
	  if (obj) {
	    var str = JSON.stringify(obj);
	    if (str) {
	      return JSON.parse(str);
	    }
	  }
	  return obj;
	};
	
	// Analogous to _.omit
	util.omit = function(obj) {
	  var props = Array.prototype.slice.call(arguments, 1);
	  var newobj = {};
	  for (var p in obj) {
	    if (obj.hasOwnProperty(p) && props.indexOf(p) == -1) {
	      newobj[p] = obj[p];
	    }
	  }
	  return util.clone(newobj);
	};
	
	util.find = function(collection, searchParams) {
	  var c = collection.length;
	  while (c--) {
	    var item = collection[c];
	    var found = true;
	    for (var prop in searchParams) {
	      if (!searchParams.hasOwnProperty(prop)) {
	        continue;
	      }
	      if (item[prop] !== searchParams[prop]) {
	        found = false;
	        break;
	      }
	    }
	    if (found) {
	      return item;
	    }
	  }
	};
	
	util.getLink = function(obj, linkName, altName) {
	  if (!obj || !obj._links) {
	    return;
	  }
	  
	  var link = util.clone(obj._links[linkName]);
	
	  // If a link has a name and we have an altName, return if they match
	  if (link && link.name && altName) {
	    if (link.name === altName) {
	      return link;
	    }
	  } else {
	    return link;
	  }
	};
	
	util.getNativeConsole = function() {
	  return window.console;
	};
	
	util.getConsole = function() {
	  var nativeConsole = util.getNativeConsole();
	  if (nativeConsole && nativeConsole.log) {
	    return nativeConsole;
	  }
	  return {
	    log: function() {}
	  };
	};
	
	util.warn = function(text) {
	  /* eslint-disable no-console */
	  util.getConsole().log('[okta-auth-sdk] WARN: ' + text);
	  /* eslint-enable */
	};
	
	util.deprecate = function(text) {
	  /* eslint-disable no-console */
	  util.getConsole().log('[okta-auth-sdk] DEPRECATION: ' + text);
	  /* eslint-enable */
	};
	
	util.deprecateWrap = function(text, fn) {
	  return function() {
	    util.deprecate(text);
	    return fn.apply(null, arguments);
	  };
	};
	
	util.removeTrailingSlash = function(path) {
	  if (!path) {
	    return;
	  }
	  if (path.slice(-1) === '/') {
	    return path.slice(0, -1);
	  }
	  return path;
	};
	
	util.isIE11OrLess = function() {
	  return !!document.documentMode && document.documentMode <= 11;
	};


/***/ },
/* 625 */
/***/ function(module, exports, __webpack_require__) {

	var util = __webpack_require__(624);
	
	function setCookie(name, value, expiresAt) {
	  var expiresText = '';
	  if (expiresAt) {
	    expiresText = ' expires=' + util.isoToUTCString(expiresAt) + ';';
	  }
	
	  var cookieText = name + '=' + value + '; path=/;' + expiresText;
	  setCookie._setDocumentCookie(cookieText);
	
	  return cookieText;
	}
	
	// Exposed for testing
	setCookie._setDocumentCookie = function(cookieText) {
	  document.cookie = cookieText;
	};
	
	function getCookie(name) {
	  var pattern = new RegExp(name + '=([^;]*)'),
	      matched = getCookie._getDocumentCookie().match(pattern);
	
	  if (matched) {
	    var cookie = matched[1];
	    return cookie;
	  }
	}
	
	// Exposed for testing
	getCookie._getDocumentCookie = function() {
	  return document.cookie;
	};
	
	function deleteCookie(name) {
	  setCookie(name, '', '1970-01-01T00:00:00Z');
	}
	
	module.exports = {
	  setCookie: setCookie,
	  getCookie: getCookie,
	  deleteCookie: deleteCookie
	};


/***/ },
/* 626 */
/***/ function(module, exports, __webpack_require__) {

	var cookies = __webpack_require__(625);
	var storageBuilder = __webpack_require__(627);
	var config = __webpack_require__(629);
	
	// Building this as an object allows us to mock the functions in our tests
	var storageUtil = {};
	
	// IE11 bug that Microsoft doesn't plan to fix
	// https://connect.microsoft.com/IE/Feedback/Details/1496040
	storageUtil.browserHasLocalStorage = function() {
	  try {
	    if (storageUtil.getLocalStorage()) {
	      return true;
	    } else {
	      return false;
	    }
	  } catch (e) {
	    return false;
	  }
	};
	
	storageUtil.browserHasSessionStorage = function() {
	  try {
	    if (storageUtil.getSessionStorage()) {
	      return true;
	    } else {
	      return false;
	    }
	  } catch (e) {
	    return false;
	  }
	};
	
	storageUtil.getHttpCache = function() {
	  if (storageUtil.browserHasLocalStorage()) {
	    return storageBuilder(storageUtil.getLocalStorage(), config.CACHE_STORAGE_NAME);
	  } else if (storageUtil.browserHasSessionStorage()) {
	    return storageBuilder(storageUtil.getSessionStorage(), config.CACHE_STORAGE_NAME);
	  } else {
	    return storageBuilder(storageUtil.getCookieStorage(), config.CACHE_STORAGE_NAME);
	  }
	};
	
	storageUtil.getLocalStorage = function() {
	  return localStorage;
	};
	
	storageUtil.getSessionStorage = function() {
	  return sessionStorage;
	};
	
	// Provides webStorage-like interface for cookies
	storageUtil.getCookieStorage = function() {
	  return {
	    getItem: cookies.getCookie,
	    setItem: function(key, value) {
	      // Cookie shouldn't expire
	      cookies.setCookie(key, value, '2038-01-19T03:14:07.000Z');
	    }
	  };
	};
	
	module.exports = storageUtil;


/***/ },
/* 627 */
/***/ function(module, exports, __webpack_require__) {

	var AuthSdkError = __webpack_require__(628);
	
	// storage must have getItem and setItem
	function storageBuilder(webstorage, storageName) {
	  function getStorage() {
	    var storageString = webstorage.getItem(storageName);
	    storageString = storageString || '{}';
	    try {
	      return JSON.parse(storageString);
	    } catch(e) {
	      throw new AuthSdkError('Unable to parse storage string: ' + storageName);
	    }
	  }
	
	  function setStorage(storage) {
	    try {
	      var storageString = JSON.stringify(storage);
	      webstorage.setItem(storageName, storageString);
	    } catch(e) {
	      throw new AuthSdkError('Unable to set storage: ' + storageName);
	    }
	  }
	
	  function clearStorage(key) {
	    if (!key) {
	      setStorage({});
	    }
	    var storage = getStorage();
	    delete storage[key];
	    setStorage(storage);
	  }
	
	  function updateStorage(key, value) {
	    var storage = getStorage();
	    storage[key] = value;
	    setStorage(storage);
	  }
	
	  return {
	    getStorage: getStorage,
	    setStorage: setStorage,
	    clearStorage: clearStorage,
	    updateStorage: updateStorage
	  };
	}
	
	module.exports = storageBuilder;


/***/ },
/* 628 */
/***/ function(module, exports) {

	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	function AuthSdkError(msg, xhr) {
	  this.name = 'AuthSdkError';
	  this.message = msg;
	
	  this.errorCode = 'INTERNAL';
	  this.errorSummary = msg;
	  this.errorLink = 'INTERNAL';
	  this.errorId = 'INTERNAL';
	  this.errorCauses = [];
	  if (xhr) {
	    this.xhr = xhr;
	  }
	}
	AuthSdkError.prototype = new Error();
	
	module.exports = AuthSdkError;


/***/ },
/* 629 */
/***/ function(module, exports) {

	module.exports = {
	  "STATE_TOKEN_COOKIE_NAME": "oktaStateToken",
	  "DEFAULT_POLLING_DELAY": 500,
	  "DEFAULT_MAX_CLOCK_SKEW": 300,
	  "DEFAULT_CACHE_DURATION": 86400,
	  "FRAME_ID": "okta-oauth-helper-frame",
	  "REDIRECT_OAUTH_PARAMS_COOKIE_NAME": "okta-oauth-redirect-params",
	  "REDIRECT_STATE_COOKIE_NAME": "okta-oauth-state",
	  "REDIRECT_NONCE_COOKIE_NAME": "okta-oauth-nonce",
	  "TOKEN_STORAGE_NAME": "okta-token-storage",
	  "CACHE_STORAGE_NAME": "okta-cache-storage",
	  "SDK_VERSION": "1.16.0"
	};

/***/ },
/* 630 */
/***/ function(module, exports) {

	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	function AuthApiError(err, xhr) {
	  this.name = 'AuthApiError';
	  this.message = err.errorSummary;
	  this.errorSummary = err.errorSummary;
	  this.errorCode = err.errorCode;
	  this.errorLink = err.errorLink;
	  this.errorId = err.errorId;
	  this.errorCauses = err.errorCauses;
	
	  if (xhr) {
	    this.xhr = xhr;
	  }
	}
	AuthApiError.prototype = new Error();
	
	module.exports = AuthApiError;


/***/ },
/* 631 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable complexity, max-statements */
	var http              = __webpack_require__(623);
	var util              = __webpack_require__(624);
	var Q                 = __webpack_require__(409);
	var AuthSdkError      = __webpack_require__(628);
	var AuthPollStopError = __webpack_require__(632);
	var config            = __webpack_require__(629);
	
	function addStateToken(res, options) {
	  var builtArgs = {};
	  util.extend(builtArgs, options);
	
	  // Add the stateToken if one isn't passed and we have one
	  if (!builtArgs.stateToken && res.stateToken) {
	    builtArgs.stateToken = res.stateToken;
	  }
	
	  return builtArgs;
	}
	
	function getStateToken(res) {
	  return addStateToken(res);
	}
	
	function transactionStatus(sdk, args) {
	  args = addStateToken(sdk, args);
	  return http.post(sdk, sdk.options.url + '/api/v1/authn', args);
	}
	
	function resumeTransaction(sdk, args) {
	  if (!args || !args.stateToken) {
	    var stateToken = sdk.tx.exists._getCookie(config.STATE_TOKEN_COOKIE_NAME);
	    if (stateToken) {
	      args = {
	        stateToken: stateToken
	      };
	    } else {
	      return Q.reject(new AuthSdkError('No transaction to resume'));
	    }
	  }
	  return sdk.tx.status(args)
	    .then(function(res) {
	      return new AuthTransaction(sdk, res);
	    });
	}
	
	function transactionExists(sdk) {
	  // We have a cookie state token
	  return !!sdk.tx.exists._getCookie(config.STATE_TOKEN_COOKIE_NAME);
	}
	
	function postToTransaction(sdk, url, args, options) {
	  return http.post(sdk, url, args, options)
	    .then(function(res) {
	      return new AuthTransaction(sdk, res);
	    });
	}
	
	function getPollFn(sdk, res, ref) {
	  return function (options) {
	    var delay;
	    var rememberDevice;
	    var autoPush;
	
	    if (util.isNumber(options)) {
	      delay = options;
	    } else if (util.isObject(options)) {
	      delay = options.delay;
	      rememberDevice = options.rememberDevice;
	      autoPush = options.autoPush;
	    }
	
	    if (!delay && delay !== 0) {
	      delay = config.DEFAULT_POLLING_DELAY;
	    }
	
	    // Get the poll function
	    var pollLink = util.getLink(res, 'next', 'poll');
	    function pollFn() {
	      var opts = {};
	      if (typeof autoPush === 'function') {
	        try {
	          opts.autoPush = !!autoPush();
	        }
	        catch (e) {
	          return Q.reject(new AuthSdkError('AutoPush resulted in an error.'));
	        }
	      }
	      else if (autoPush !== undefined && autoPush !== null) {
	        opts.autoPush = !!autoPush;
	      }
	      if (typeof rememberDevice === 'function') {
	        try {
	          opts.rememberDevice = !!rememberDevice();
	        }
	        catch (e) {
	          return Q.reject(new AuthSdkError('RememberDevice resulted in an error.'));
	        }
	      }
	      else if (rememberDevice !== undefined && rememberDevice !== null) {
	        opts.rememberDevice = !!rememberDevice;
	      }
	
	      var href = pollLink.href + util.toQueryParams(opts);
	      return http.post(sdk, href, getStateToken(res), {
	        saveAuthnState: false  
	      });
	    }
	
	    ref.isPolling = true;
	
	    var retryCount = 0;
	    var recursivePoll = function () {
	      // If the poll was manually stopped during the delay
	      if (!ref.isPolling) {
	        return Q.reject(new AuthPollStopError());
	      }
	      return pollFn()
	        .then(function (pollRes) {
	          // Reset our retry counter on success
	          retryCount = 0;
	
	          // If we're still waiting
	          if (pollRes.factorResult && pollRes.factorResult === 'WAITING') {
	
	            // If the poll was manually stopped while the pollFn was called
	            if (!ref.isPolling) {
	              throw new AuthPollStopError();
	            }
	
	            // Continue poll
	            return Q.delay(delay)
	              .then(recursivePoll);
	
	          } else {
	            // Any non-waiting result, even if polling was stopped
	            // during a request, will return
	            ref.isPolling = false;
	            return new AuthTransaction(sdk, pollRes);
	          }
	        })
	        .fail(function(err) {
	          // Exponential backoff, up to 16 seconds
	          if (err.xhr &&
	              (err.xhr.status === 0 || err.xhr.status === 429) &&
	              retryCount <= 4) {
	            var delayLength = Math.pow(2, retryCount) * 1000;
	            retryCount++;
	            return Q.delay(delayLength)
	              .then(recursivePoll);
	          }
	          throw err;
	        });
	    };
	    return recursivePoll()
	      .fail(function(err) {
	        ref.isPolling = false;
	        throw err;
	      });
	  };
	}
	
	function link2fn(sdk, res, obj, link, ref) {
	  if (Array.isArray(link)) {
	    return function(name, opts) {
	      if (!name) {
	        throw new AuthSdkError('Must provide a link name');
	      }
	
	      var lk = util.find(link, {name: name});
	      if (!lk) {
	        throw new AuthSdkError('No link found for that name');
	      }
	
	      return link2fn(sdk, res, obj, lk, ref)(opts);
	    };
	
	  } else if (link.hints &&
	      link.hints.allow &&
	      link.hints.allow.length === 1) {
	    var method = link.hints.allow[0];
	    switch (method) {
	
	      case 'GET':
	        return function() {
	          return http.get(sdk, link.href);
	        };
	
	      case 'POST':
	        return function(opts) {
	          if (ref && ref.isPolling) {
	            ref.isPolling = false;
	          }
	
	          var data = addStateToken(res, opts);
	
	          if (res.status === 'MFA_ENROLL') {
	            // Add factorType and provider
	            util.extend(data, {
	              factorType: obj.factorType,
	              provider: obj.provider
	            });
	          }
	
	          var params = {};
	          var autoPush = data.autoPush;
	          if (autoPush !== undefined) {
	            if (typeof autoPush === 'function') {
	              try {
	                params.autoPush = !!autoPush();
	              }
	              catch (e) {
	                return Q.reject(new AuthSdkError('AutoPush resulted in an error.'));
	              }
	            }
	            else if (autoPush !== null) {
	              params.autoPush = !!autoPush;
	            }
	            data = util.omit(data, 'autoPush');
	          }
	
	          var rememberDevice = data.rememberDevice;
	          if (rememberDevice !== undefined) {
	            if (typeof rememberDevice === 'function') {
	              try {
	                params.rememberDevice = !!rememberDevice();
	              }
	              catch (e) {
	                return Q.reject(new AuthSdkError('RememberDevice resulted in an error.'));
	              }
	            }
	            else if (rememberDevice !== null) {
	              params.rememberDevice = !!rememberDevice;
	            }
	            data = util.omit(data, 'rememberDevice');
	
	          } else if (data.profile &&
	                    data.profile.updatePhone !== undefined) {
	            if (data.profile.updatePhone) {
	              params.updatePhone = true;
	            }
	            data.profile = util.omit(data.profile, 'updatePhone');
	          }
	          var href = link.href + util.toQueryParams(params);
	          return postToTransaction(sdk, href, data);
	        };
	    }
	  }
	}
	
	function links2fns(sdk, res, obj, ref) {
	  var fns = {};
	  for (var linkName in obj._links) {
	    if (!obj._links.hasOwnProperty(linkName)) {
	      continue;
	    }
	
	    var link = obj._links[linkName];
	    
	    if (linkName === 'next') {
	      linkName = link.name;
	    }
	
	    if (link.type) {
	      fns[linkName] = link;
	      continue;
	    }
	
	    switch (linkName) {
	      // poll is only found at the transaction
	      // level, so we don't need to pass the link
	      case 'poll':
	        fns.poll = getPollFn(sdk, res, ref);
	        break;
	
	      default:
	        var fn = link2fn(sdk, res, obj, link, ref);
	        if (fn) {
	          fns[linkName] = fn;
	        }
	    }
	  }
	  return fns;
	}
	
	function flattenEmbedded(sdk, res, obj, ref) {
	  obj = obj || res;
	  obj = util.clone(obj);
	
	  if (Array.isArray(obj)) {
	    var objArr = [];
	    for (var o = 0, ol = obj.length; o < ol; o++) {
	      objArr.push(flattenEmbedded(sdk, res, obj[o], ref));
	    }
	    return objArr;
	  }
	
	  var embedded = obj._embedded || {};
	
	  for (var key in embedded) {
	    if (!embedded.hasOwnProperty(key)) {
	      continue;
	    }
	
	    // Flatten any nested _embedded objects
	    if (util.isObject(embedded[key]) || Array.isArray(embedded[key])) {
	      embedded[key] = flattenEmbedded(sdk, res, embedded[key], ref);
	    }
	  }
	
	  // Convert any links on the embedded object
	  var fns = links2fns(sdk, res, obj, ref);
	  util.extend(embedded, fns);
	
	  obj = util.omit(obj, '_embedded', '_links');
	  util.extend(obj, embedded);
	  return obj;
	}
	
	function AuthTransaction(sdk, res) {
	  if (res) {
	    this.data = res;
	    util.extend(this, flattenEmbedded(sdk, res, res, {}));
	    delete this.stateToken;
	
	    // RECOVERY_CHALLENGE has some responses without _links.
	    // Without _links, we emulate cancel to make it intuitive
	    // to return to the starting state. We may remove this
	    // when OKTA-75434 is resolved
	    if (res.status === 'RECOVERY_CHALLENGE' && !res._links) {
	      this.cancel = function() {
	        return new Q(new AuthTransaction(sdk));
	      };
	    }
	  }
	}
	
	module.exports = {
	  transactionStatus: transactionStatus,
	  resumeTransaction: resumeTransaction,
	  transactionExists: transactionExists,
	  postToTransaction: postToTransaction
	};


/***/ },
/* 632 */
/***/ function(module, exports) {

	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	function AuthPollStopError() {
	  this.name = 'AuthPollStopError';
	  this.message = 'The poll was stopped by the sdk';
	}
	AuthPollStopError.prototype = new Error();
	
	module.exports = AuthPollStopError;


/***/ },
/* 633 */
/***/ function(module, exports, __webpack_require__) {

	var util = __webpack_require__(624);
	var http = __webpack_require__(623);
	
	function sessionExists(sdk) {
	  return sdk.session.get()
	    .then(function(res) {
	      if (res.status === 'ACTIVE') {
	        return true;
	      }
	      return false;
	    })
	    .fail(function() {
	      return false;
	    });
	}
	
	function getSession(sdk) { 
	  return http.get(sdk, '/api/v1/sessions/me')
	  .then(function(session) {
	    var res = util.omit(session, '_links');
	
	    res.refresh = function() {
	      return http.post(sdk, util.getLink(session, 'refresh').href);
	    };
	
	    res.user = function() {
	      return http.get(sdk, util.getLink(session, 'user').href);
	    };
	
	    return res;
	  })
	  .fail(function() {
	    // Return INACTIVE status on failure
	    return {status: 'INACTIVE'};
	  });
	}
	
	function closeSession(sdk) {
	  return http.httpRequest(sdk, {
	    url: sdk.options.url + '/api/v1/sessions/me',
	    method: 'DELETE'
	  });
	}
	
	function refreshSession(sdk) {
	  return http.post(sdk, '/api/v1/sessions/me/lifecycle/refresh');
	}
	
	function setCookieAndRedirect(sdk, sessionToken, redirectUrl) {
	  redirectUrl = redirectUrl || window.location.href;
	  window.location = sdk.options.url + '/login/sessionCookieRedirect' +
	    util.toQueryParams({
	      checkAccountSetupComplete: true,
	      token: sessionToken,
	      redirectUrl: redirectUrl
	    });
	}
	
	module.exports = {
	  sessionExists: sessionExists,
	  getSession: getSession,
	  closeSession: closeSession,
	  refreshSession: refreshSession,
	  setCookieAndRedirect: setCookieAndRedirect
	};


/***/ },
/* 634 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable complexity, max-statements */
	var http          = __webpack_require__(623);
	var util          = __webpack_require__(624);
	var oauthUtil     = __webpack_require__(622);
	var Q             = __webpack_require__(409);
	var sdkCrypto     = __webpack_require__(635);
	var AuthSdkError  = __webpack_require__(628);
	var OAuthError    = __webpack_require__(636);
	var config        = __webpack_require__(629);
	var cookies       = __webpack_require__(625);
	
	function decodeToken(token) {
	  var jwt = token.split('.');
	  var decodedToken;
	
	  try {
	    decodedToken = {
	      header: JSON.parse(util.base64UrlToString(jwt[0])),
	      payload: JSON.parse(util.base64UrlToString(jwt[1])),
	      signature: jwt[2]
	    };
	  } catch(e) {
	    throw new AuthSdkError('Malformed token');
	  }
	
	  return decodedToken;
	}
	
	function verifyIdToken(sdk, idToken, options) {
	  options = options || {};
	
	  if (!sdk.features.isTokenVerifySupported()) {
	    return Q.reject(new AuthSdkError('This browser doesn\'t support crypto.subtle'));
	  }
	
	  function isExpired(jwtExp) {
	    var expirationTime;
	    if (options.expirationTime || options.expirationTime === 0) {
	      expirationTime = options.expirationTime;
	    } else {
	      expirationTime = Math.floor(Date.now()/1000);
	    }
	    if (jwtExp &&
	        jwtExp > expirationTime) {
	      return true;
	    }
	  }
	
	  function hasAudience(jwtAudience) {
	    if (!options.audience) {
	      return true;
	    }
	    var audiences = Array.isArray(options.audience) ? options.audience : [options.audience];
	    var jwtAudiences = Array.isArray(jwtAudience) ? jwtAudience : [jwtAudience];
	    var ai = audiences.length;
	    while (ai--) {
	      var aud = audiences[ai];
	      if (jwtAudiences.indexOf(aud) !== -1) {
	        return true;
	      }
	    }
	  }
	
	  return oauthUtil.getWellKnown(sdk)
	    .then(function(res) {
	      return http.get(sdk, res['jwks_uri']);
	    })
	    .then(function(res) {
	      var key = res.keys[0];
	      return sdkCrypto.verifyToken(idToken, key);
	    })
	    .then(function(res) {
	      if (!res) {
	        return false;
	      }
	      var jwt = sdk.token.decode(idToken);
	
	      if (isExpired(jwt.payload.exp)) {
	        return false;
	      }
	
	      if (!hasAudience(jwt.payload.aud)) {
	        return false;
	      }
	
	      if (options.issuer &&
	          options.issuer !== jwt.payload.iss) {
	        return false;
	      }
	
	      return true;
	    });
	}
	
	function verifyToken(sdk, token, nonce, ignoreSignature) {
	  return new Q()
	  .then(function() {
	    if (!token || !token.idToken) {
	      throw new AuthSdkError('Only idTokens may be verified');
	    }
	
	    var jwt = decodeToken(token.idToken);
	
	    // Standard claim validation
	    oauthUtil.validateClaims(sdk, jwt.payload, token.clientId, token.issuer, nonce);
	
	    // If the browser doesn't support native crypto or we choose not 
	    // to verify the signature, bail early
	    if (ignoreSignature || !sdk.features.isTokenVerifySupported()) {
	      return token;
	    }
	
	    return oauthUtil.getKey(sdk, token.issuer, jwt.header.kid)
	    .then(function(key) {
	      return sdkCrypto.verifyToken(token.idToken, key);
	    })
	    .then(function(valid) {
	      if (!valid) {
	        throw new AuthSdkError('The token signature is not valid');
	      }
	      return token;
	    });
	  });
	}
	
	function refreshIdToken(sdk, options) {
	  options = options || {};
	  options.display = null;
	  options.prompt = 'none';
	  return getToken(sdk, options);
	}
	
	function addPostMessageListener(sdk, timeout, state) {
	  var deferred = Q.defer();
	
	  function responseHandler(e) {
	    if (!e.data ||
	        e.origin !== sdk.options.url ||
	        (e.data && util.isString(state) && e.data.state !== state)) {
	      return;
	    }
	    deferred.resolve(e.data);
	  }
	
	  oauthUtil.addListener(window, 'message', responseHandler);
	
	  return deferred.promise.timeout(timeout || 120000, new AuthSdkError('OAuth flow timed out'))
	    .fin(function() {
	      oauthUtil.removeListener(window, 'message', responseHandler);
	    });
	}
	
	function addFragmentListener(sdk, windowEl, timeout) {
	  var deferred = Q.defer();
	
	  function hashChangeHandler() {
	    /*
	      We are only able to access window.location.hash on a window
	      that has the same domain. A try/catch is necessary because
	      there's no other way to determine that the popup is in
	      another domain. When we try to access a window on another 
	      domain, an error is thrown.
	    */
	    try {
	      if (windowEl &&
	          windowEl.location &&
	          windowEl.location.hash) {
	        deferred.resolve(oauthUtil.hashToObject(windowEl.location.hash));
	      } else if (windowEl && !windowEl.closed) {
	        setTimeout(hashChangeHandler, 500);
	      }
	    } catch (err) {
	      setTimeout(hashChangeHandler, 500);
	    }
	  }
	
	  hashChangeHandler();
	
	  return deferred.promise.timeout(timeout || 120000, new AuthSdkError('OAuth flow timed out'));
	}
	
	function handleOAuthResponse(sdk, oauthParams, res, urls) {
	  urls = urls || {};
	
	  var tokenTypes = oauthParams.responseType;
	  var scopes = util.clone(oauthParams.scopes);
	  var clientId = oauthParams.clientId || sdk.options.clientId;
	
	  return new Q()
	  .then(function() {
	    if (res['error'] || res['error_description']) {
	      throw new OAuthError(res['error'], res['error_description']);
	    }
	
	    if (res.state !== oauthParams.state) {
	      throw new AuthSdkError('OAuth flow response state doesn\'t match request state');
	    }
	
	    var tokenDict = {};
	    
	    if (res['access_token']) {
	      tokenDict['token'] = {
	        accessToken: res['access_token'],
	        expiresAt: Number(res['expires_in']) + Math.floor(Date.now()/1000),
	        tokenType: res['token_type'],
	        scopes: scopes,
	        authorizeUrl: urls.authorizeUrl,
	        userinfoUrl: urls.userinfoUrl
	      };
	    }
	
	    if (res['code']) {
	      tokenDict['code'] = {
	        authorizationCode: res['code']
	      };
	    }
	
	    if (res['id_token']) {
	      var jwt = sdk.token.decode(res['id_token']);
	
	      var idToken = {
	        idToken: res['id_token'],
	        claims: jwt.payload,
	        expiresAt: jwt.payload.exp,
	        scopes: scopes,
	        authorizeUrl: urls.authorizeUrl,
	        issuer: urls.issuer,
	        clientId: clientId
	      };
	
	      return verifyToken(sdk, idToken, oauthParams.nonce, true)
	      .then(function() {
	        tokenDict['id_token'] = idToken;
	        return tokenDict;
	      });
	    }
	
	    return tokenDict;
	  })
	  .then(function(tokenDict) {
	    if (!Array.isArray(tokenTypes)) {
	      return tokenDict[tokenTypes];
	    }
	
	    if (!tokenDict['token'] && !tokenDict['id_token']) {
	      throw new AuthSdkError('Unable to parse OAuth flow response');
	    }
	
	    // Create token array in the order of the responseType array
	    return tokenTypes.map(function(item) {
	      return tokenDict[item];
	    });
	  });
	}
	
	function getDefaultOAuthParams(sdk, oauthOptions) {
	  oauthOptions = util.clone(oauthOptions) || {};
	
	  if (oauthOptions.scope) {
	    util.deprecate('The param "scope" is equivalent to "scopes". Use "scopes" instead.');
	    oauthOptions.scopes = oauthOptions.scope;
	    delete oauthOptions.scope;
	  }
	
	  var defaults = {
	    clientId: sdk.options.clientId,
	    redirectUri: sdk.options.redirectUri || window.location.href,
	    responseType: 'id_token',
	    responseMode: 'okta_post_message',
	    state: util.genRandomString(64),
	    nonce: util.genRandomString(64),
	    scopes: ['openid', 'email']
	  };
	  util.extend(defaults, oauthOptions);
	  return defaults;
	}
	
	function convertOAuthParamsToQueryParams(oauthParams) {
	  // Quick validation
	  if (!oauthParams.clientId) {
	    throw new AuthSdkError('A clientId must be specified in the OktaAuth constructor to get a token');
	  }
	
	  if (util.isString(oauthParams.responseType) && oauthParams.responseType.indexOf(' ') !== -1) {
	    throw new AuthSdkError('Multiple OAuth responseTypes must be defined as an array');
	  }
	
	  // Convert our params to their actual OAuth equivalents
	  var oauthQueryParams = util.removeNils({
	    'client_id': oauthParams.clientId,
	    'redirect_uri': oauthParams.redirectUri,
	    'response_type': oauthParams.responseType,
	    'response_mode': oauthParams.responseMode,
	    'state': oauthParams.state,
	    'nonce': oauthParams.nonce,
	    'prompt': oauthParams.prompt,
	    'display': oauthParams.display,
	    'sessionToken': oauthParams.sessionToken,
	    'idp': oauthParams.idp,
	    'max_age': oauthParams.maxAge
	  });
	
	  if (Array.isArray(oauthQueryParams['response_type'])) {
	    oauthQueryParams['response_type'] = oauthQueryParams['response_type'].join(' ');
	  }
	
	  if (oauthParams.responseType.indexOf('id_token') !== -1 &&
	      oauthParams.scopes.indexOf('openid') === -1) {
	    throw new AuthSdkError('openid scope must be specified in the scopes argument when requesting an id_token');
	  } else {
	    oauthQueryParams.scope = oauthParams.scopes.join(' ');
	  }
	
	  return oauthQueryParams;
	}
	
	function buildAuthorizeParams(oauthParams) {
	  var oauthQueryParams = convertOAuthParamsToQueryParams(oauthParams);
	  return util.toQueryParams(oauthQueryParams);
	}
	
	/*
	 * Retrieve an idToken from an Okta or a third party idp
	 * 
	 * Two main flows:
	 *
	 *  1) Exchange a sessionToken for a token
	 * 
	 *    Required:
	 *      clientId: passed via the OktaAuth constructor or into getToken
	 *      sessionToken: 'yourtoken'
	 *
	 *    Optional:
	 *      redirectUri: defaults to window.location.href
	 *      scopes: defaults to ['openid', 'email']
	 *
	 *    Forced:
	 *      prompt: 'none'
	 *      responseMode: 'okta_post_message'
	 *      display: undefined
	 *
	 *  2) Get a token from an idp
	 *
	 *    Required:
	 *      clientId: passed via the OktaAuth constructor or into getToken
	 *
	 *    Optional:
	 *      redirectUri: defaults to window.location.href
	 *      scopes: defaults to ['openid', 'email']
	 *      idp: defaults to Okta as an idp
	 *      prompt: no default. Pass 'none' to throw an error if user is not signed in
	 *
	 *    Forced:
	 *      display: 'popup'
	 *
	 *  Only common optional params shown. Any OAuth parameters not explicitly forced are available to override
	 *
	 * @param {Object} oauthOptions
	 * @param {String} [oauthOptions.clientId] ID of this client
	 * @param {String} [oauthOptions.redirectUri] URI that the iframe or popup will go to once authenticated
	 * @param {String[]} [oauthOptions.scopes] OAuth 2.0 scopes to request (openid must be specified)
	 * @param {String} [oauthOptions.idp] ID of an external IdP to use for user authentication
	 * @param {String} [oauthOptions.sessionToken] Bootstrap Session Token returned by the Okta Authentication API
	 * @param {String} [oauthOptions.prompt] Determines whether the Okta login will be displayed on failure.
	 *                                       Use 'none' to prevent this behavior
	 *
	 * @param {Object} options
	 * @param {Integer} [options.timeout] Time in ms before the flow is automatically terminated. Defaults to 120000
	 * @param {String} [options.popupTitle] Title dispayed in the popup.
	 *                                      Defaults to 'External Identity Provider User Authentication'
	 */
	function getToken(sdk, oauthOptions, options) {
	  oauthOptions = oauthOptions || {};
	  options = options || {};
	
	  // Default OAuth query params
	  var oauthParams = getDefaultOAuthParams(sdk, oauthOptions);
	
	  // Start overriding any options that don't make sense
	  var sessionTokenOverrides = {
	    prompt: 'none',
	    responseMode: 'okta_post_message',
	    display: null
	  };
	
	  var idpOverrides = {
	    display: 'popup'
	  };
	
	  if (oauthOptions.sessionToken) {
	    util.extend(oauthParams, sessionTokenOverrides);
	  } else if (oauthOptions.idp) {
	    util.extend(oauthParams, idpOverrides);
	  }
	
	  // Use the query params to build the authorize url
	  var requestUrl,
	      urls;
	  try {
	    // Get authorizeUrl and issuer
	    urls = oauthUtil.getOAuthUrls(sdk, oauthParams, options);
	    requestUrl = urls.authorizeUrl + buildAuthorizeParams(oauthParams);
	  } catch (e) {
	    return Q.reject(e);
	  }
	
	  // Determine the flow type
	  var flowType;
	  if (oauthParams.sessionToken || oauthParams.display === null) {
	    flowType = 'IFRAME';
	  } else if (oauthParams.display === 'popup') {
	    flowType = 'POPUP';
	  } else {
	    flowType = 'IMPLICIT';
	  }
	
	  function getOrigin(url) {
	    var originRegex = /^(https?\:\/\/)?([^:\/?#]*(?:\:[0-9]+)?)/;
	    return originRegex.exec(url)[0];
	  }
	
	  // Execute the flow type
	  switch (flowType) {
	    case 'IFRAME':
	      var iframePromise = addPostMessageListener(sdk, options.timeout, oauthParams.state);
	      var iframeEl = oauthUtil.loadFrame(requestUrl);
	      return iframePromise
	        .then(function(res) {
	          return handleOAuthResponse(sdk, oauthParams, res, urls);
	        })
	        .fin(function() {
	          if (document.body.contains(iframeEl)) {
	            iframeEl.parentElement.removeChild(iframeEl);
	          }
	        });
	
	    case 'POPUP': // eslint-disable-line no-case-declarations
	      var popupPromise;
	
	      // Add listener on postMessage before window creation, so
	      // postMessage isn't triggered before we're listening
	      if (oauthParams.responseMode === 'okta_post_message') {
	        if (!sdk.features.isPopupPostMessageSupported()) {
	          return Q.reject(new AuthSdkError('This browser doesn\'t have full postMessage support'));
	        }
	        popupPromise = addPostMessageListener(sdk, options.timeout, oauthParams.state);
	      }
	
	      // Create the window
	      var windowOptions = {
	        popupTitle: options.popupTitle
	      };
	      var windowEl = oauthUtil.loadPopup(requestUrl, windowOptions);
	
	      // Poll until we get a valid hash fragment
	      if (oauthParams.responseMode === 'fragment') {
	        var windowOrigin = getOrigin(sdk.idToken.authorize._getLocationHref());
	        var redirectUriOrigin = getOrigin(oauthParams.redirectUri);
	        if (windowOrigin !== redirectUriOrigin) {
	          return Q.reject(new AuthSdkError('Using fragment, the redirectUri origin (' + redirectUriOrigin +
	            ') must match the origin of this page (' + windowOrigin + ')'));
	        }
	        popupPromise = addFragmentListener(sdk, windowEl, options.timeout);
	      }
	
	      // Both postMessage and fragment require a poll to see if the popup closed
	      var popupDeferred = Q.defer();
	      function hasClosed(win) { // eslint-disable-line no-inner-declarations
	        if (win.closed) {
	          popupDeferred.reject(new AuthSdkError('Unable to parse OAuth flow response'));
	        }
	      }
	      var closePoller = setInterval(function() {
	        hasClosed(windowEl);
	      }, 500);
	
	      // Proxy the promise results into the deferred
	      popupPromise
	      .then(function(res) {
	        popupDeferred.resolve(res);
	      })
	      .fail(function(err) {
	        popupDeferred.reject(err);
	      });
	
	      return popupDeferred.promise
	        .then(function(res) {
	          return handleOAuthResponse(sdk, oauthParams, res, urls);
	        })
	        .fin(function() {
	          if (!windowEl.closed) {
	            clearInterval(closePoller);
	            windowEl.close();
	          }
	        });
	
	    default:
	      return Q.reject(new AuthSdkError('The full page redirect flow is not supported'));
	  }
	}
	
	function getWithoutPrompt(sdk, oauthOptions, options) {
	  var oauthParams = util.clone(oauthOptions) || {};
	  util.extend(oauthParams, {
	    prompt: 'none',
	    responseMode: 'okta_post_message',
	    display: null
	  });
	  return getToken(sdk, oauthParams, options);
	}
	
	function getWithPopup(sdk, oauthOptions, options) {
	  var oauthParams = util.clone(oauthOptions) || {};
	  util.extend(oauthParams, {
	    display: 'popup'
	  });
	  return getToken(sdk, oauthParams, options);
	}
	
	function getWithRedirect(sdk, oauthOptions, options) {
	  oauthOptions = util.clone(oauthOptions) || {};
	  var oauthParams = getDefaultOAuthParams(sdk, oauthOptions);
	  // If the user didn't specify a responseMode
	  if (!oauthOptions.responseMode) {
	    // And it's only an auth code request (responseType could be an array)
	    var respType = oauthParams.responseType;
	    if (respType.indexOf('code') !== -1 &&
	        (util.isString(respType) || (Array.isArray(respType) && respType.length === 1))) {
	        // Default the responseMode to query
	        util.extend(oauthParams, {
	          responseMode: 'query'
	        });
	    // Otherwise, default to fragment
	    } else {
	      util.extend(oauthParams, {
	        responseMode: 'fragment'
	      });
	    }
	  }
	  
	  var urls = oauthUtil.getOAuthUrls(sdk, oauthParams, options);
	  var requestUrl = urls.authorizeUrl + buildAuthorizeParams(oauthParams);
	
	  // Set session cookie to store the oauthParams
	  cookies.setCookie(config.REDIRECT_OAUTH_PARAMS_COOKIE_NAME, JSON.stringify({
	    responseType: oauthParams.responseType,
	    state: oauthParams.state,
	    nonce: oauthParams.nonce,
	    scopes: oauthParams.scopes,
	    urls: urls
	  }));
	
	  // Set nonce cookie for servers to validate nonce in id_token
	  cookies.setCookie(config.REDIRECT_NONCE_COOKIE_NAME, oauthParams.nonce);
	
	  // Set state cookie for servers to validate state
	  cookies.setCookie(config.REDIRECT_STATE_COOKIE_NAME, oauthParams.state);
	
	  sdk.token.getWithRedirect._setLocation(requestUrl);
	}
	
	function refreshToken(sdk, token) {
	  if (!oauthUtil.isToken(token)) {
	    return Q.reject(new AuthSdkError('Refresh must be passed a token with ' +
	      'an array of scopes and an accessToken or idToken'));
	  }
	
	  var responseType;
	  if (token.accessToken) {
	    responseType = 'token';
	  } else {
	    responseType = 'id_token';
	  }
	  return sdk.token.getWithoutPrompt({
	    responseType: responseType,
	    scopes: token.scopes
	  }, {
	    authorizeUrl: token.authorizeUrl,
	    userinfoUrl: token.userinfoUrl,
	    issuer: token.issuer
	  });
	}
	
	function removeHash(sdk) {
	  var nativeHistory = sdk.token.parseFromUrl._getHistory();
	  var nativeDoc = sdk.token.parseFromUrl._getDocument();
	  var nativeLoc = sdk.token.parseFromUrl._getLocation();
	  if (nativeHistory && nativeHistory.replaceState) {
	    nativeHistory.replaceState(null, nativeDoc.title, nativeLoc.pathname + nativeLoc.search);
	  } else {
	    nativeLoc.hash = '';
	  }
	}
	
	function parseFromUrl(sdk, url) {
	  var nativeLoc = sdk.token.parseFromUrl._getLocation();
	  var hash = nativeLoc.hash;
	  if (url) {
	    hash = url.substring(url.indexOf('#'));
	  }
	
	  var oauthParamsCookie = cookies.getCookie(config.REDIRECT_OAUTH_PARAMS_COOKIE_NAME);
	  if (!hash || !oauthParamsCookie) {
	    return Q.reject(new AuthSdkError('Unable to parse a token from the url'));
	  }
	  try {
	    var oauthParams = JSON.parse(oauthParamsCookie);
	    var urls = oauthParams.urls;
	    delete oauthParams.urls;
	    cookies.deleteCookie(config.REDIRECT_OAUTH_PARAMS_COOKIE_NAME);
	  } catch(e) {
	    return Q.reject(new AuthSdkError('Unable to parse the ' + 
	      config.REDIRECT_OAUTH_PARAMS_COOKIE_NAME + ' cookie: ' + e.message));
	  }
	
	  return Q.resolve(oauthUtil.hashToObject(hash))
	    .then(function(res) {
	      if (!url) {
	        // Remove the hash from the url
	        removeHash(sdk);
	      }
	      return handleOAuthResponse(sdk, oauthParams, res, urls);
	    });
	}
	
	function getUserInfo(sdk, accessTokenObject) {
	  if (!accessTokenObject ||
	      (!oauthUtil.isToken(accessTokenObject) && !accessTokenObject.accessToken && !accessTokenObject.userinfoUrl)) {
	    return Q.reject(new AuthSdkError('getUserInfo requires an access token object'));
	  }
	  return http.httpRequest(sdk, {
	    url: accessTokenObject.userinfoUrl,
	    method: 'GET',
	    accessToken: accessTokenObject.accessToken
	  })
	  .fail(function(err) {
	    if (err.xhr && (err.xhr.status === 401 || err.xhr.status === 403)) {
	      var authenticateHeader = err.xhr.getResponseHeader('WWW-Authenticate');
	      if (authenticateHeader) {
	        var errorMatches = authenticateHeader.match(/error="(.*?)"/) || [];
	        var errorDescriptionMatches = authenticateHeader.match(/error_description="(.*?)"/) || [];
	        var error = errorMatches[1];
	        var errorDescription = errorDescriptionMatches[1];
	        if (error && errorDescription) {
	          err = new OAuthError(error, errorDescription);
	        }
	      }
	    }
	    throw err;
	  });
	}
	
	module.exports = {
	  getToken: getToken,
	  getWithoutPrompt: getWithoutPrompt,
	  getWithPopup: getWithPopup,
	  getWithRedirect: getWithRedirect,
	  parseFromUrl: parseFromUrl,
	  refreshIdToken: refreshIdToken,
	  decodeToken: decodeToken,
	  verifyIdToken: verifyIdToken,
	  refreshToken: refreshToken,
	  getUserInfo: getUserInfo,
	  verifyToken: verifyToken
	};


/***/ },
/* 635 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	var util = __webpack_require__(624);
	
	function verifyToken(idToken, key) {
	  key = util.clone(key);
	
	  var format = 'jwk';
	  var algo = {
	    name: 'RSASSA-PKCS1-v1_5',
	    hash: { name: 'SHA-256' }
	  };
	  var extractable = true;
	  var usages = ['verify'];
	
	  // https://connect.microsoft.com/IE/feedback/details/2242108/webcryptoapi-importing-jwk-with-use-field-fails
	  // This is a metadata tag that specifies the intent of how the key should be used.
	  // It's not necessary to properly verify the jwt's signature.
	  delete key.use;
	
	  return crypto.subtle.importKey(
	    format,
	    key,
	    algo,
	    extractable,
	    usages
	  )
	  .then(function(cryptoKey) {
	    var jwt = idToken.split('.');
	    var payload = util.stringToBuffer(jwt[0] + '.' + jwt[1]);
	    var b64Signature = util.base64UrlDecode(jwt[2]);
	    var signature = util.stringToBuffer(b64Signature);
	
	    return crypto.subtle.verify(
	      algo,
	      cryptoKey,
	      signature,
	      payload
	    );
	  });
	}
	
	module.exports = {
	  verifyToken: verifyToken
	};


/***/ },
/* 636 */
/***/ function(module, exports) {

	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	function OAuthError(errorCode, summary) {
	  this.name = 'OAuthError';
	  this.message = summary;
	
	  this.errorCode = errorCode;
	  this.errorSummary = summary;
	}
	OAuthError.prototype = new Error();
	
	module.exports = OAuthError;


/***/ },
/* 637 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint complexity:[0,8] max-statements:[0,21] */
	var util = __webpack_require__(624);
	var AuthSdkError = __webpack_require__(628);
	var storageUtil = __webpack_require__(626);
	var Q = __webpack_require__(409);
	var Emitter = __webpack_require__(545);
	var config = __webpack_require__(629);
	var storageBuilder = __webpack_require__(627);
	
	function emitExpired(tokenMgmtRef, key, token) {
	  tokenMgmtRef.emitter.emit('expired', key, token);
	}
	
	function clearRefreshTimeout(tokenMgmtRef, key) {
	  clearTimeout(tokenMgmtRef.refreshTimeouts[key]);
	  delete tokenMgmtRef.refreshTimeouts[key];
	}
	
	function clearRefreshTimeoutAll(tokenMgmtRef) {
	  var refreshTimeouts = tokenMgmtRef.refreshTimeouts;
	  for(var key in refreshTimeouts) {
	    if (!refreshTimeouts.hasOwnProperty(key)) {
	      continue;
	    }
	    clearRefreshTimeout(tokenMgmtRef, key);
	  }
	  tokenMgmtRef.refreshTimeouts = {};
	}
	
	function setRefreshTimeout(sdk, tokenMgmtRef, storage, key, token) {
	  var refreshWait = (token.expiresAt * 1000) - Date.now();
	  if (refreshWait < 0) {
	    // Already expired
	    refreshWait = 0;
	  }
	  var refreshTimeout = setTimeout(function() {
	    if (tokenMgmtRef.autoRefresh) {
	      return refresh(sdk, tokenMgmtRef, storage, key);
	    } else if (token.expiresAt * 1000 <= Date.now()) {
	      remove(tokenMgmtRef, storage, key);
	      emitExpired(tokenMgmtRef, key, token);
	    }
	  }, refreshWait);
	
	  // Clear any existing timeout
	  clearRefreshTimeout(tokenMgmtRef, key);
	
	  // Add a new timeout
	  tokenMgmtRef.refreshTimeouts[key] = refreshTimeout;
	}
	
	function setRefreshTimeoutAll(sdk, tokenMgmtRef, storage) {
	  try {
	    var tokenStorage = storage.getStorage();
	  } catch(e) {
	    // Any errors thrown on instantiation will not be caught,
	    // because there are no listeners yet
	    tokenMgmtRef.emitter.emit('error', e);
	    return;
	  }
	
	  for(var key in tokenStorage) {
	    if (!tokenStorage.hasOwnProperty(key)) {
	      continue;
	    }
	    var token = tokenStorage[key];
	    setRefreshTimeout(sdk, tokenMgmtRef, storage, key, token);
	  }
	}
	
	function add(sdk, tokenMgmtRef, storage, key, token) {
	  var tokenStorage = storage.getStorage();
	  if (!util.isObject(token) ||
	      !token.scopes ||
	      (!token.expiresAt && token.expiresAt !== 0) ||
	      (!token.idToken && !token.accessToken)) {
	    throw new AuthSdkError('Token must be an Object with scopes, expiresAt, and an idToken or accessToken properties');
	  }
	  tokenStorage[key] = token;
	  storage.setStorage(tokenStorage);
	  setRefreshTimeout(sdk, tokenMgmtRef, storage, key, token);
	}
	
	function get(storage, key) {
	  var tokenStorage = storage.getStorage();
	  return tokenStorage[key];
	}
	
	function remove(tokenMgmtRef, storage, key) {
	  // Clear any listener for this token
	  clearRefreshTimeout(tokenMgmtRef, key);
	
	  // Remove it from storage
	  var tokenStorage = storage.getStorage();
	  delete tokenStorage[key];
	  storage.setStorage(tokenStorage);
	}
	
	function refresh(sdk, tokenMgmtRef, storage, key) {
	  try {
	    var token = get(storage, key);
	    if (!token) {
	      throw new AuthSdkError('The tokenManager has no token for the key: ' + key);
	    }
	  } catch (e) {
	    return Q.reject(e);
	  }
	
	  // Remove existing autoRefresh timeout for this key
	  clearRefreshTimeout(tokenMgmtRef, key);
	
	  return sdk.token.refresh(token)
	  .then(function(freshToken) {
	    add(sdk, tokenMgmtRef, storage, key, freshToken);
	    tokenMgmtRef.emitter.emit('refreshed', key, freshToken, token);
	    return freshToken;
	  })
	  .fail(function(err) {
	    if (err.name === 'OAuthError') {
	      remove(tokenMgmtRef, storage, key);
	      emitExpired(tokenMgmtRef, key, token);
	    }
	    throw err;
	  });
	}
	
	function clear(tokenMgmtRef, storage) {
	  clearRefreshTimeoutAll(tokenMgmtRef);
	  storage.clearStorage();
	}
	
	function TokenManager(sdk, options) {
	  options = options || {};
	  options.storage = options.storage || 'localStorage';
	  if (!options.autoRefresh && options.autoRefresh !== false) {
	    options.autoRefresh = true;
	  }
	
	  if (options.storage === 'localStorage' && !storageUtil.browserHasLocalStorage()) {
	    util.warn('This browser doesn\'t support localStorage. Switching to sessionStorage.');
	    options.storage = 'sessionStorage';
	  }
	
	  if (options.storage === 'sessionStorage' && !storageUtil.browserHasSessionStorage()) {
	    util.warn('This browser doesn\'t support sessionStorage. Switching to cookie-based storage.');
	    options.storage = 'cookie';
	  }
	
	  var storage;
	  switch(options.storage) {
	    case 'localStorage':
	      storage = storageBuilder(localStorage, config.TOKEN_STORAGE_NAME);
	      break;
	    case 'sessionStorage':
	      storage = storageBuilder(sessionStorage, config.TOKEN_STORAGE_NAME);
	      break;
	    case 'cookie':
	      storage = storageBuilder(storageUtil.getCookieStorage(), config.TOKEN_STORAGE_NAME);
	      break;
	    default:
	      throw new AuthSdkError('Unrecognized storage option');
	  }
	
	  var tokenMgmtRef = {
	    emitter: new Emitter(),
	    autoRefresh: options.autoRefresh,
	    refreshTimeouts: {}
	  };
	
	  this.add = util.bind(add, this, sdk, tokenMgmtRef, storage);
	  this.get = util.bind(get, this, storage);
	  this.remove = util.bind(remove, this, tokenMgmtRef, storage);
	  this.clear = util.bind(clear, this, tokenMgmtRef, storage);
	  this.refresh = util.bind(refresh, this, sdk, tokenMgmtRef, storage);
	  this.on = util.bind(tokenMgmtRef.emitter.on, tokenMgmtRef.emitter);
	  this.off = util.bind(tokenMgmtRef.emitter.off, tokenMgmtRef.emitter);
	  
	  setRefreshTimeoutAll(sdk, tokenMgmtRef, storage);
	}
	
	module.exports = TokenManager;


/***/ },
/* 638 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	/* eslint complexity: [2, 8], max-depth: [2, 3] */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(411)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Logger) {
	
	  var Util = {};
	  var _ = Okta._;
	
	  Util.hasTokensInHash = function (hash) {
	    return (/((id|access)_token=)/i.test(hash)
	    );
	  };
	
	  Util.transformErrorXHR = function (xhr) {
	    // Handle network connection error
	    if (xhr.status === 0 && _.isEmpty(xhr.responseJSON)) {
	      xhr.responseJSON = { errorSummary: Okta.loc('error.network.connection', 'login') };
	      return xhr;
	    }
	    if (!xhr.responseJSON) {
	      try {
	        xhr.responseJSON = JSON.parse(xhr.responseText);
	      } catch (parseException) {
	        xhr.responseJSON = { errorSummary: Okta.loc('oform.error.unexpected', 'login') };
	        return xhr;
	      }
	    }
	    // Temporary solution to display field errors
	    // Assuming there is only one field error in a response
	    if (xhr.responseJSON && xhr.responseJSON.errorCauses && xhr.responseJSON.errorCauses.length) {
	      xhr.responseJSON.errorSummary = xhr.responseJSON.errorCauses[0].errorSummary;
	    }
	    // Replace error messages
	    if (!_.isEmpty(xhr.responseJSON)) {
	      var errorMsg = Okta.loc('errors.' + xhr.responseJSON.errorCode, 'login');
	      if (errorMsg.indexOf('L10N_ERROR[') === -1) {
	        xhr.responseJSON.errorSummary = errorMsg;
	        if (xhr.responseJSON && xhr.responseJSON.errorCauses && xhr.responseJSON.errorCauses.length) {
	          // BaseForm will consume errorCauses before errorSummary if it is an array,
	          // so, we have to make sure to remove it when we have a valid error code
	          delete xhr.responseJSON.errorCauses;
	        }
	      }
	    }
	    return xhr;
	  };
	
	  // Simple helper function to lowercase all strings in the given array
	  Util.toLower = function (strings) {
	    return _.map(strings, function (str) {
	      return str.toLowerCase();
	    });
	  };
	
	  // A languageCode can be composed of multiple parts, i.e:
	  // {{langage}}-{{region}}-{{dialect}}
	  //
	  // In these cases, it's necessary to generate a list of other possible
	  // combinations that we might support (in preferred order).
	  //
	  // For example:
	  // en-US -> [en-US, en]
	  // de-DE-bavarian -> [de-DE-bavarian, de-DE, de]
	  function expandLanguage(language) {
	    var expanded = [language],
	        parts = language.split('-');
	    while (parts.pop() && parts.length > 0) {
	      expanded.push(parts.join('-'));
	    }
	    return expanded;
	  }
	
	  // Following the rules of expanding one language, this will generate
	  // all potential languages in the given order (where higher priority is
	  // given to expanded languages over other downstream languages).
	  Util.expandLanguages = function (languages) {
	    return _.chain(languages).map(expandLanguage).flatten().uniq().value();
	  };
	
	  //helper to call setTimeout
	  Util.callAfterTimeout = function (callback, time) {
	    return setTimeout(callback, time);
	  };
	
	  // Helper function to provide consistent formatting of template literals
	  // that are logged when in development mode.
	  Util.debugMessage = function (message) {
	    Logger.warn('\n' + message.replace(/^(\s)+/gm, ''));
	  };
	
	  return Util;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 639 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	/* eslint max-params: [2, 44] */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(651), __webpack_require__(749), __webpack_require__(686), __webpack_require__(703), __webpack_require__(706), __webpack_require__(715), __webpack_require__(723), __webpack_require__(725), __webpack_require__(726), __webpack_require__(729), __webpack_require__(731), __webpack_require__(732), __webpack_require__(733), __webpack_require__(737), __webpack_require__(738), __webpack_require__(739), __webpack_require__(740), __webpack_require__(743), __webpack_require__(744), __webpack_require__(745), __webpack_require__(746), __webpack_require__(747), __webpack_require__(640), __webpack_require__(752), __webpack_require__(754), __webpack_require__(755), __webpack_require__(756), __webpack_require__(759), __webpack_require__(760), __webpack_require__(762), __webpack_require__(763), __webpack_require__(764), __webpack_require__(765), __webpack_require__(766), __webpack_require__(767), __webpack_require__(768), __webpack_require__(769), __webpack_require__(653), __webpack_require__(770), __webpack_require__(777), __webpack_require__(778), __webpack_require__(658), __webpack_require__(781), __webpack_require__(784)], __WEBPACK_AMD_DEFINE_RESULT__ = function (BaseLoginRouter, IDPDiscoveryController, PrimaryAuthController, VerifyDuoController, MfaVerifyController, VerifyWindowsHelloController, VerifyU2FController, VerifyCustomFactorController, EnrollChoicesController, EnrollDuoController, EnrollQuestionController, EnrollWindowsHelloController, EnrollCallAndSmsController, EnrollOnPremController, EnrollSymantecVipController, EnrollYubikeyController, EnrollTotpController, EnrollU2FController, EnrollCustomFactorController, BarcodeTotpController, BarcodePushController, ActivateTotpController, ManualSetupTotpController, ManualSetupPushController, EnrollmentLinkSentController, EnterPasscodePushFlowController, PasswordExpiredController, CustomPasswordExpiredController, ForgotPasswordController, RecoveryChallengeController, PwdResetEmailSentController, RecoveryQuestionController, PasswordResetController, RecoveryLoadingController, UnlockAccountController, AccountUnlockedController, UnlockEmailSentController, RefreshAuthStateController, RegistrationController, RegistrationCompleteController, ConsentRequiredController, SecurityBeacon, FactorBeacon, ConsentBeacon) {
	  return BaseLoginRouter.extend({
	
	    routes: {
	      '': 'defaultAuth',
	      'signin': 'primaryAuth',
	      'signin/verify/duo/web': 'verifyDuo',
	      'signin/verify/fido/webauthn': 'verifyWindowsHello',
	      'signin/verify/fido/u2f': 'verifyU2F',
	      'signin/verify/generic_saml/assertion:saml2': 'verifyCustomFactor',
	      'signin/verify/:provider/:factorType': 'verify',
	      'signin/enroll': 'enrollChoices',
	      'signin/enroll/duo/web': 'enrollDuo',
	      'signin/enroll/okta/question': 'enrollQuestion',
	      'signin/enroll/okta/sms': 'enrollSms',
	      'signin/enroll/okta/call': 'enrollCall',
	      'signin/enroll-activate/okta/sms': 'enrollSms',
	      'signin/enroll/rsa/token': 'enrollRsa',
	      'signin/enroll/del_oath/token': 'enrollOnPrem',
	      'signin/enroll/symantec/token': 'enrollSymantecVip',
	      'signin/enroll/yubico/token:hardware': 'enrollYubikey',
	      'signin/enroll/fido/webauthn': 'enrollWindowsHello',
	      'signin/enroll/fido/u2f': 'enrollU2F',
	      'signin/enroll/generic_saml/assertion:saml2': 'enrollCustomFactor',
	      'signin/enroll/:provider/:factorType': 'enrollTotpFactor',
	      'signin/enroll-activate/okta/push': 'scanBarcodePushFactor',
	      'signin/enroll-activate/okta/push/manual': 'manualSetupPushFactor',
	      'signin/enroll-activate/okta/push/sent': 'activationLinkSent',
	      'signin/enroll-activate/okta/token:software:totp/passcode': 'enterPasscodeInPushEnrollmentFlow',
	      'signin/enroll-activate/:provider/:factorType': 'scanBarcodeTotpFactor',
	      'signin/enroll-activate/:provider/:factorType/activate': 'activateTotpFactor',
	      'signin/enroll-activate/:provider/:factorType/manual': 'manualSetupTotpFactor',
	      'signin/password-expired': 'passwordExpired',
	      'signin/custom-password-expired': 'customPasswordExpired',
	      'signin/forgot-password': 'forgotPassword',
	      'signin/recovery-challenge': 'recoveryChallenge',
	      'signin/recovery-emailed': 'recoveryEmailSent',
	      'signin/recovery-question': 'recoveryQuestion',
	      'signin/password-reset': 'passwordReset',
	      'signin/reset-password/:token': 'recoveryLoading',
	      'signin/user-unlock/:token': 'recoveryLoading',
	      'signin/recovery/:token': 'recoveryLoading',
	      'signin/unlock-emailed': 'unlockEmailSent',
	      'signin/unlock': 'unlockAccount',
	      'signin/account-unlocked': 'accountUnlocked',
	      'signin/refresh-auth-state(/:token)': 'refreshAuthState',
	      'signin/register': 'register',
	      'signin/register-complete': 'registerComplete',
	      'signin/consent': 'consentRequired',
	      '*wildcard': 'defaultAuth'
	    },
	
	    // Route handlers that do not require a stateToken. If the page is refreshed,
	    // these functions will not require a status call to refresh the stateToken.
	    stateLessRouteHandlers: ['defaultAuth', 'idpDiscovery', 'primaryAuth', 'forgotPassword', 'recoveryLoading', 'unlockAccount', 'refreshAuthState', 'register', 'registerComplete'],
	
	    defaultAuth: function defaultAuth() {
	      if (this.settings.get('features.idpDiscovery')) {
	        this.idpDiscovery();
	      } else {
	        this.primaryAuth();
	      }
	    },
	
	    idpDiscovery: function idpDiscovery() {
	      this.render(IDPDiscoveryController, { Beacon: SecurityBeacon });
	    },
	
	    primaryAuth: function primaryAuth() {
	      this.render(PrimaryAuthController, { Beacon: SecurityBeacon });
	    },
	
	    verifyDuo: function verifyDuo() {
	      this.render(VerifyDuoController, {
	        provider: 'DUO',
	        factorType: 'web',
	        Beacon: FactorBeacon
	      });
	    },
	
	    verifyWindowsHello: function verifyWindowsHello() {
	      this.render(VerifyWindowsHelloController, {
	        provider: 'FIDO',
	        factorType: 'webauthn',
	        Beacon: FactorBeacon
	      });
	    },
	
	    verifyU2F: function verifyU2F() {
	      this.render(VerifyU2FController, {
	        provider: 'FIDO',
	        factorType: 'u2f',
	        Beacon: FactorBeacon
	      });
	    },
	
	    verifyCustomFactor: function verifyCustomFactor() {
	      this.render(VerifyCustomFactorController, {
	        provider: 'GENERIC_SAML',
	        factorType: 'assertion:saml2',
	        Beacon: FactorBeacon
	      });
	    },
	
	    verify: function verify(provider, factorType) {
	      this.render(MfaVerifyController, {
	        provider: provider.toUpperCase(),
	        factorType: factorType,
	        Beacon: FactorBeacon
	      });
	    },
	
	    enrollChoices: function enrollChoices() {
	      this.render(EnrollChoicesController, { Beacon: SecurityBeacon });
	    },
	
	    enrollDuo: function enrollDuo() {
	      this.render(EnrollDuoController, {
	        provider: 'DUO',
	        factorType: 'web',
	        Beacon: FactorBeacon
	      });
	    },
	
	    enrollQuestion: function enrollQuestion() {
	      this.render(EnrollQuestionController, {
	        provider: 'OKTA',
	        factorType: 'question',
	        Beacon: FactorBeacon
	      });
	    },
	
	    enrollSms: function enrollSms() {
	      this.render(EnrollCallAndSmsController, {
	        provider: 'OKTA',
	        factorType: 'sms',
	        Beacon: FactorBeacon
	      });
	    },
	
	    enrollCall: function enrollCall() {
	      this.render(EnrollCallAndSmsController, {
	        provider: 'OKTA',
	        factorType: 'call',
	        Beacon: FactorBeacon
	      });
	    },
	
	    enrollRsa: function enrollRsa() {
	      this.render(EnrollOnPremController, {
	        provider: 'RSA',
	        factorType: 'token',
	        Beacon: FactorBeacon
	      });
	    },
	
	    enrollOnPrem: function enrollOnPrem() {
	      this.render(EnrollOnPremController, {
	        provider: 'DEL_OATH',
	        factorType: 'token',
	        Beacon: FactorBeacon
	      });
	    },
	
	    enrollSymantecVip: function enrollSymantecVip() {
	      this.render(EnrollSymantecVipController, {
	        provider: 'SYMANTEC',
	        factorType: 'token',
	        Beacon: FactorBeacon
	      });
	    },
	
	    enrollYubikey: function enrollYubikey() {
	      this.render(EnrollYubikeyController, {
	        provider: 'YUBICO',
	        factorType: 'token:hardware',
	        Beacon: FactorBeacon
	      });
	    },
	
	    enrollCustomFactor: function enrollCustomFactor() {
	      this.render(EnrollCustomFactorController, {
	        provider: 'GENERIC_SAML',
	        factorType: 'assertion:saml2',
	        Beacon: FactorBeacon
	      });
	    },
	
	    enrollTotpFactor: function enrollTotpFactor(provider, factorType) {
	      this.render(EnrollTotpController, {
	        provider: provider.toUpperCase(),
	        factorType: factorType,
	        Beacon: FactorBeacon
	      });
	    },
	
	    enrollWindowsHello: function enrollWindowsHello() {
	      this.render(EnrollWindowsHelloController, {
	        provider: 'FIDO',
	        factorType: 'webauthn',
	        Beacon: FactorBeacon
	      });
	    },
	
	    enrollU2F: function enrollU2F() {
	      this.render(EnrollU2FController, {
	        provider: 'FIDO',
	        factorType: 'u2f',
	        Beacon: FactorBeacon
	      });
	    },
	
	    scanBarcodeTotpFactor: function scanBarcodeTotpFactor(provider, factorType) {
	      this.render(BarcodeTotpController, {
	        provider: provider.toUpperCase(),
	        factorType: factorType,
	        Beacon: FactorBeacon
	      });
	    },
	
	    scanBarcodePushFactor: function scanBarcodePushFactor() {
	      this.render(BarcodePushController, {
	        provider: 'OKTA',
	        factorType: 'push',
	        Beacon: FactorBeacon
	      });
	    },
	
	    activateTotpFactor: function activateTotpFactor(provider, factorType) {
	      this.render(ActivateTotpController, {
	        provider: provider.toUpperCase(),
	        factorType: factorType,
	        Beacon: FactorBeacon
	      });
	    },
	
	    manualSetupTotpFactor: function manualSetupTotpFactor(provider, factorType) {
	      this.render(ManualSetupTotpController, {
	        provider: provider.toUpperCase(),
	        factorType: factorType,
	        Beacon: FactorBeacon
	      });
	    },
	
	    manualSetupPushFactor: function manualSetupPushFactor() {
	      this.render(ManualSetupPushController, {
	        provider: 'OKTA',
	        factorType: 'push',
	        Beacon: FactorBeacon
	      });
	    },
	
	    activationLinkSent: function activationLinkSent() {
	      this.render(EnrollmentLinkSentController, {
	        provider: 'OKTA',
	        factorType: 'push',
	        Beacon: FactorBeacon
	      });
	    },
	
	    enterPasscodeInPushEnrollmentFlow: function enterPasscodeInPushEnrollmentFlow() {
	      this.render(EnterPasscodePushFlowController, {
	        provider: 'OKTA',
	        factorType: 'token:software:totp',
	        Beacon: FactorBeacon
	      });
	    },
	
	    passwordExpired: function passwordExpired() {
	      this.render(PasswordExpiredController, { Beacon: SecurityBeacon });
	    },
	
	    customPasswordExpired: function customPasswordExpired() {
	      this.render(CustomPasswordExpiredController, { Beacon: SecurityBeacon });
	    },
	
	    forgotPassword: function forgotPassword() {
	      this.render(ForgotPasswordController);
	    },
	
	    recoveryChallenge: function recoveryChallenge() {
	      this.render(RecoveryChallengeController, { Beacon: SecurityBeacon });
	    },
	
	    recoveryEmailSent: function recoveryEmailSent() {
	      this.render(PwdResetEmailSentController, { Beacon: SecurityBeacon });
	    },
	
	    unlockEmailSent: function unlockEmailSent() {
	      this.render(UnlockEmailSentController, { Beacon: SecurityBeacon });
	    },
	
	    recoveryQuestion: function recoveryQuestion() {
	      this.render(RecoveryQuestionController, { Beacon: SecurityBeacon });
	    },
	
	    passwordReset: function passwordReset() {
	      this.render(PasswordResetController, { Beacon: SecurityBeacon });
	    },
	
	    recoveryLoading: function recoveryLoading(token) {
	      this.render(RecoveryLoadingController, {
	        token: token,
	        Beacon: SecurityBeacon
	      });
	    },
	
	    unlockAccount: function unlockAccount() {
	      this.render(UnlockAccountController);
	    },
	
	    accountUnlocked: function accountUnlocked() {
	      this.render(AccountUnlockedController, { Beacon: SecurityBeacon });
	    },
	
	    refreshAuthState: function refreshAuthState(token) {
	      this.render(RefreshAuthStateController, {
	        token: token,
	        Beacon: SecurityBeacon
	      });
	    },
	
	    register: function register() {
	      this.render(RegistrationController);
	    },
	
	    registerComplete: function registerComplete() {
	      this.render(RegistrationCompleteController);
	    },
	
	    consentRequired: function consentRequired() {
	      this.render(ConsentRequiredController, { Beacon: ConsentBeacon });
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 640 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(641), __webpack_require__(642), __webpack_require__(643), __webpack_require__(646), __webpack_require__(648), __webpack_require__(649)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FactorUtil, FormController, FormType, RouterUtil, ManualSetupFooter, TextBox) {
	
	  var _ = Okta._;
	
	  return FormController.extend({
	    className: 'enroll-manual-totp',
	    Model: function Model() {
	      return {
	        local: {
	          'sharedSecret': ['string', false, this.options.appState.get('sharedSecret')],
	          '__factorType__': ['string', false, this.options.factorType],
	          '__provider__': ['string', false, this.options.provider]
	        }
	      };
	    },
	
	    Form: {
	      title: function title() {
	        var factorName = FactorUtil.getFactorLabel(this.model.get('__provider__'), this.model.get('__factorType__'));
	        return Okta.loc('enroll.totp.title', 'login', [factorName]);
	      },
	      subtitle: _.partial(Okta.loc, 'enroll.totp.cannotScanBarcode', 'login'),
	      noButtonBar: true,
	      attributes: { 'data-se': 'step-manual-setup' },
	
	      formChildren: function formChildren() {
	        return [FormType.View({ View: '\
	            <p class="okta-form-subtitle o-form-explain text-align-c">\
	              {{i18n code="enroll.totp.manualSetupInstructions" bundle="login"}}\
	            </p>\
	          ' }), FormType.Input({
	          name: 'sharedSecret',
	          input: TextBox,
	          type: 'text',
	          disabled: true
	        }), FormType.Toolbar({
	          noCancelButton: true,
	          save: Okta.loc('oform.next', 'login')
	        })];
	      }
	    },
	
	    Footer: ManualSetupFooter,
	
	    initialize: function initialize() {
	      this.listenTo(this.form, 'save', function () {
	        var url = RouterUtil.createActivateFactorUrl(this.model.get('__provider__'), this.model.get('__factorType__'), 'activate');
	        this.options.appState.trigger('navigate', url);
	      });
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 641 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	/* eslint complexity: [2, 17], max-statements: [2, 32] */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(562)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, TimeUtil) {
	
	  var _ = Okta._;
	
	  var fn = {};
	
	  var factorData = {
	    'OKTA_VERIFY': {
	      label: 'factor.totpSoft.oktaVerify',
	      description: 'factor.totpSoft.description',
	      iconClassName: 'mfa-okta-verify',
	      sortOrder: 1
	    },
	    'OKTA_VERIFY_PUSH': {
	      label: 'factor.oktaVerifyPush',
	      description: 'factor.push.description',
	      iconClassName: 'mfa-okta-verify',
	      sortOrder: 1
	    },
	    'U2F': {
	      label: 'factor.u2f',
	      description: 'factor.u2f.description',
	      iconClassName: 'mfa-u2f',
	      sortOrder: 2
	    },
	    'WINDOWS_HELLO': {
	      label: 'factor.windowsHello',
	      description: 'factor.windowsHello.signin.description',
	      iconClassName: 'mfa-windows-hello',
	      sortOrder: 3
	    },
	    'YUBIKEY': {
	      label: 'factor.totpHard.yubikey',
	      description: 'factor.totpHard.yubikey.description',
	      iconClassName: 'mfa-yubikey',
	      sortOrder: 4
	    },
	    'GOOGLE_AUTH': {
	      label: 'factor.totpSoft.googleAuthenticator',
	      description: 'factor.totpSoft.description',
	      iconClassName: 'mfa-google-auth',
	      sortOrder: 5
	    },
	    'SMS': {
	      label: 'factor.sms',
	      description: 'factor.sms.description',
	      iconClassName: 'mfa-okta-sms',
	      sortOrder: 6
	    },
	    'CALL': {
	      label: 'factor.call',
	      description: 'factor.call.description',
	      iconClassName: 'mfa-okta-call',
	      sortOrder: 7
	    },
	    'EMAIL': {
	      label: 'factor.email',
	      description: '',
	      iconClassName: 'mfa-okta-email',
	      sortOrder: 8
	    },
	    'QUESTION': {
	      label: 'factor.securityQuestion',
	      description: 'factor.securityQuestion.description',
	      iconClassName: 'mfa-okta-security-question',
	      sortOrder: 9
	    },
	    'DUO': {
	      label: 'factor.duo',
	      description: 'factor.duo.description',
	      iconClassName: 'mfa-duo',
	      sortOrder: 10
	    },
	    'SYMANTEC_VIP': {
	      label: 'factor.totpHard.symantecVip',
	      description: 'factor.totpHard.description',
	      iconClassName: 'mfa-symantec',
	      sortOrder: 11
	    },
	    'RSA_SECURID': {
	      label: 'factor.totpHard.rsaSecurId',
	      description: 'factor.totpHard.description',
	      iconClassName: 'mfa-rsa',
	      sortOrder: 12
	    },
	    'ON_PREM': {
	      label: '',
	      description: 'factor.totpHard.description',
	      iconClassName: 'mfa-onprem',
	      sortOrder: 13
	    },
	    'PASSWORD': {
	      label: 'factor.password',
	      description: '',
	      iconClassName: 'mfa-okta-password',
	      sortOrder: 14
	    },
	    'GENERIC_SAML': {
	      label: '',
	      description: 'factor.customFactor.description',
	      iconClassName: 'mfa-custom-factor',
	      sortOrder: 15
	    }
	  };
	
	  fn.getFactorName = function (provider, factorType) {
	    if (provider === 'OKTA' && factorType === 'token:software:totp') {
	      return 'OKTA_VERIFY';
	    }
	    if (provider === 'OKTA' && factorType === 'push') {
	      return 'OKTA_VERIFY_PUSH';
	    }
	    if (provider === 'GOOGLE') {
	      return 'GOOGLE_AUTH';
	    }
	    if (provider === 'SYMANTEC' && factorType === 'token') {
	      return 'SYMANTEC_VIP';
	    }
	    if (provider === 'RSA' && factorType === 'token') {
	      return 'RSA_SECURID';
	    }
	    if (provider === 'DEL_OATH' && factorType === 'token') {
	      return 'ON_PREM';
	    }
	    if (provider === 'DUO' && factorType === 'web') {
	      return 'DUO';
	    }
	    if (provider === 'YUBICO' && factorType === 'token:hardware') {
	      return 'YUBIKEY';
	    }
	    if (provider === 'OKTA' && factorType === 'sms') {
	      return 'SMS';
	    }
	    if (provider === 'OKTA' && factorType === 'call') {
	      return 'CALL';
	    }
	    if (provider === 'OKTA' && factorType === 'question') {
	      return 'QUESTION';
	    }
	    if (provider === 'FIDO' && factorType === 'webauthn') {
	      return 'WINDOWS_HELLO';
	    }
	    if (provider === 'FIDO' && factorType === 'u2f') {
	      return 'U2F';
	    }
	    if (provider === 'OKTA' && factorType === 'email') {
	      return 'EMAIL';
	    }
	    if (provider === 'OKTA' && factorType === 'password') {
	      return 'PASSWORD';
	    }
	    if (provider === 'GENERIC_SAML' && factorType === 'assertion:saml2') {
	      return 'GENERIC_SAML';
	    }
	  };
	
	  fn.isOktaVerify = function (provider, factorType) {
	    return provider === 'OKTA' && (factorType === 'token:software:totp' || factorType === 'push');
	  };
	
	  fn.getFactorLabel = function (provider, factorType) {
	    var key = factorData[fn.getFactorName(provider, factorType)].label;
	    return Okta.loc(key, 'login');
	  };
	
	  fn.getFactorDescription = function (provider, factorType) {
	    var key = factorData[fn.getFactorName(provider, factorType)].description;
	    return Okta.loc(key, 'login');
	  };
	
	  fn.getFactorIconClassName = function (provider, factorType) {
	    return factorData[fn.getFactorName(provider, factorType)].iconClassName;
	  };
	
	  fn.getFactorSortOrder = function (provider, factorType) {
	    return factorData[fn.getFactorName(provider, factorType)].sortOrder;
	  };
	
	  fn.getRememberDeviceValue = function (appState) {
	    return appState && appState.get('rememberDeviceByDefault');
	  };
	
	  fn.getSecurityQuestionLabel = function (questionObj) {
	    var localizedQuestion = Okta.loc('security.' + questionObj.question);
	    return localizedQuestion.indexOf('L10N_ERROR') < 0 ? localizedQuestion : questionObj.questionText;
	  };
	
	  fn.getPasswordComplexityDescription = function (policy) {
	    var result = [];
	
	    var getPasswordAgeRequirement = function getPasswordAgeRequirement(displayableTime) {
	      var propertiesString;
	      switch (displayableTime.unit) {
	        case 'DAY':
	          propertiesString = 'password.complexity.minAgeDays';
	          break;
	        case 'HOUR':
	          propertiesString = 'password.complexity.minAgeHours';
	          break;
	        case 'MINUTE':
	          propertiesString = 'password.complexity.minAgeMinutes';
	      }
	      return Okta.loc(propertiesString, 'login', [displayableTime.time]);
	    };
	
	    var setExcludeAttributes = function setExcludeAttributes(policyComplexity) {
	      var excludeAttributes = policyComplexity.excludeAttributes;
	      policyComplexity.excludeFirstName = _.contains(excludeAttributes, 'firstName');
	      policyComplexity.excludeLastName = _.contains(excludeAttributes, 'lastName');
	      return _.omit(policyComplexity, 'excludeAttributes');
	    };
	
	    if (policy.complexity) {
	      var complexityFields = {
	        minLength: { i18n: 'password.complexity.length', args: true },
	        minLowerCase: { i18n: 'password.complexity.lowercase' },
	        minUpperCase: { i18n: 'password.complexity.uppercase' },
	        minNumber: { i18n: 'password.complexity.number' },
	        minSymbol: { i18n: 'password.complexity.symbol' },
	        excludeUsername: { i18n: 'password.complexity.no_username' },
	        excludeFirstName: { i18n: 'password.complexity.no_first_name' },
	        excludeLastName: { i18n: 'password.complexity.no_last_name' }
	      };
	
	      var policyComplexity = setExcludeAttributes(policy.complexity);
	
	      var requirements = _.map(policyComplexity, function (complexityValue, complexityType) {
	        if (complexityValue <= 0) {
	          // to skip 0 and -1
	          return;
	        }
	
	        var params = complexityFields[complexityType];
	        return params.args ? Okta.loc(params.i18n, 'login', [complexityValue]) : Okta.loc(params.i18n, 'login');
	      });
	
	      requirements = _.compact(requirements);
	
	      if (requirements.length) {
	        requirements = _.reduce(requirements, function (result, requirement) {
	          return result ? result + Okta.loc('password.complexity.list.element', 'login', [requirement]) : requirement;
	        });
	
	        result.push(Okta.loc('password.complexity.requirements', 'login', [requirements]));
	      }
	    }
	
	    if (policy.age && policy.age.historyCount > 0) {
	      result.push(Okta.loc('password.complexity.history', 'login', [policy.age.historyCount]));
	    }
	
	    if (policy.age && policy.age.minAgeMinutes > 0) {
	      var displayableTime = TimeUtil.getTimeInHighestRelevantUnit(policy.age.minAgeMinutes, 'MINUTE');
	      var minAgeDescription = getPasswordAgeRequirement(displayableTime);
	      result.push(minAgeDescription);
	    }
	
	    return result.join(' ');
	  };
	
	  return fn;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 642 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(643), __webpack_require__(592), __webpack_require__(581), __webpack_require__(644), __webpack_require__(645)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormType, Toolbar, FormUtil, BaseLoginController, BaseLoginModel) {
	
	  var _ = Okta._;
	
	  var SimpleForm = Okta.Form.extend({
	    layout: 'o-form-theme',
	    noCancelButton: true,
	    constructor: function constructor(options) {
	      Okta.Form.call(this, options);
	      _.each(_.result(this, 'formChildren') || [], function (child) {
	        switch (child.type) {
	          case FormType.INPUT:
	            this.addInput(_.extend({
	              label: false,
	              'label-top': true
	            }, child.viewOptions));
	            break;
	          case FormType.BUTTON:
	            this.add(Okta.createButton(_.extend({ model: this.model }, child.viewOptions)), child.addOptions);
	            FormUtil.applyShowWhen(this.last(), child.viewOptions && child.viewOptions.showWhen);
	            break;
	          case FormType.DIVIDER:
	            this.addDivider(child.viewOptions);
	            break;
	          case FormType.TOOLBAR:
	            this.add(Toolbar, { options: child.viewOptions });
	            FormUtil.applyShowWhen(this.last(), child.viewOptions && child.viewOptions.showWhen);
	            break;
	          case FormType.VIEW:
	            this.add(child.viewOptions.View, child.addOptions);
	            FormUtil.applyShowWhen(this.last(), child.viewOptions.showWhen);
	            break;
	          default:
	            throw new Error('Unrecognized child type: ' + child.type);
	        }
	      }, this);
	    }
	  });
	
	  return BaseLoginController.extend({
	
	    constructor: function constructor() {
	      var initialize = this.initialize;
	      this.initialize = function () {};
	
	      BaseLoginController.apply(this, arguments);
	
	      if (this.Model && this.Form) {
	        var Model = BaseLoginModel.extend(_.extend({
	          parse: function parse(attributes) {
	            this.settings = attributes.settings;
	            this.appState = attributes.appState;
	            return _.omit(attributes, ['settings', 'appState']);
	          }
	        }, _.result(this, 'Model')));
	        this.model = new Model({
	          settings: this.settings,
	          appState: this.options.appState
	        }, { parse: true });
	        var Form = SimpleForm.extend(_.result(this, 'Form', this));
	        this.form = new Form(this.toJSON());
	        this.add(this.form);
	      }
	
	      if (this.Footer) {
	        this.footer = new this.Footer(this.toJSON());
	        this.add(this.footer);
	      }
	
	      this.addListeners();
	      initialize.apply(this, arguments);
	    },
	
	    toJSON: function toJSON() {
	      var data = BaseLoginController.prototype.toJSON.apply(this, arguments);
	      return _.extend(_.pick(this.options, 'appState'), data);
	    },
	
	    back: function back() {
	      if (this.footer && this.footer.back) {
	        this.footer.back();
	      }
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 643 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	
	  // Syntactic sugar to provide some structure to SimpleForm inputs - Just
	  // wraps options with { type: type, viewOptions: viewOptions, addOptions: addOptions }
	
	  var INPUT = 'INPUT';
	  var BUTTON = 'BUTTON';
	  var DIVIDER = 'DIVIDER';
	  var TOOLBAR = 'TOOLBAR';
	  var VIEW = 'VIEW';
	
	  function wrap(type) {
	    return function (viewOptions, addOptions) {
	      return { type: type, viewOptions: viewOptions, addOptions: addOptions };
	    };
	  }
	
	  return {
	    Input: wrap(INPUT),
	    Button: wrap(BUTTON),
	    Divider: wrap(DIVIDER),
	    Toolbar: wrap(TOOLBAR),
	    View: wrap(VIEW),
	
	    INPUT: INPUT,
	    BUTTON: BUTTON,
	    DIVIDER: DIVIDER,
	    TOOLBAR: TOOLBAR,
	    VIEW: VIEW
	  };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 644 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(409)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Q) {
	  var _ = Okta._;
	
	  function getForm(controller) {
	    return _.find(controller.getChildren(), function (item) {
	      return item instanceof Okta.Form;
	    });
	  }
	
	  return Okta.Controller.extend({
	
	    // Ideally we should be attaching the listeners in the constructor, but because of the way
	    // we construct the FormController (this.model is generated after the BaseLoginController's
	    // constructor is called), this.model is undefined in when try to attach the events and
	    // therefore we don't listen to events for such forms. And changing the order in which we call
	    // the constructor doesn't help either (JS errors etc.). This at least guarantees that we
	    // are listening to the model events.
	    // Note - Figure out a way to call the constructor in the right order.
	    addListeners: function addListeners() {
	      // Events to enable/disable the primary button on the forms
	      this.listenTo(this.model, 'save', function () {
	        //disable the submit button on forms while making the request
	        //to prevent users from hitting rate limiting exceptions of
	        //1 per second on the auth api
	        var form = getForm(this);
	        var disableSubmitButton = form.disableSubmitButton;
	        if (disableSubmitButton && !form.disableSubmitButton()) {
	          return;
	        }
	        this.toggleButtonState(true);
	      });
	
	      this.listenTo(this.model, 'error', function () {
	        this.toggleButtonState(false);
	      });
	
	      this.addModelListeners(this.model);
	    },
	
	    addModelListeners: function addModelListeners(model) {
	      var setTransactionHandler = _.bind(function (transaction) {
	        this.options.appState.set('transaction', transaction);
	      }, this);
	      var transactionErrorHandler = _.bind(function (err) {
	        this.options.appState.set('transactionError', err);
	      }, this);
	
	      // Events to set the transaction attributes on the app state.
	      this.listenTo(model, 'setTransaction', setTransactionHandler);
	      this.listenTo(model, 'setTransactionError', transactionErrorHandler);
	
	      // For TOTP factor model
	      // TOTP model is special, its model will not be attached to a controller, but will
	      // tag along with the push factor model. We need to listen to the transaction
	      // changes on this as well (in case of the push+totp form).
	      var totpModel = model.get('backupFactor');
	      if (totpModel) {
	        this.listenTo(totpModel, 'setTransaction', setTransactionHandler);
	        this.listenTo(totpModel, 'setTransactionError', transactionErrorHandler);
	      }
	    },
	
	    // Override this method to delay switching to this screen until return
	    // promise is resolved. This is useful for cases like enrolling a security
	    // question, which requires an additional request to fetch the question
	    // list.
	    fetchInitialData: function fetchInitialData() {
	      return Q();
	    },
	
	    // Override this method to prevent route navigation. This is useful for
	    // intermediate status changes that do not trigger a full refresh of the
	    // page, like MFA_ENROLL_ACTIVATE and MFA_CHALLENGE.
	    trapAuthResponse: function trapAuthResponse() {
	      return false;
	    },
	
	    toJSON: function toJSON() {
	      var data = Okta.Controller.prototype.toJSON.apply(this, arguments);
	      return _.extend(_.pick(this.options, 'appState'), data);
	    },
	
	    toggleButtonState: function toggleButtonState(state) {
	      var button = this.$el.find('.button');
	      button.toggleClass('link-button-disabled', state).prop('disabled', state);
	    },
	
	    postRenderAnimation: function postRenderAnimation() {
	      // Event triggered after a page is rendered along with the classname to identify the page
	      this.trigger('pageRendered', { page: this.className });
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 645 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(409), __webpack_require__(615)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Q, Enums) {
	
	  var _ = Okta._;
	  var KNOWN_ERRORS = ['OAuthError', 'AuthSdkError', 'AuthPollStopError', 'AuthApiError'];
	
	  return Okta.Model.extend({
	    doTransaction: function doTransaction(fn, rethrow) {
	      var self = this;
	      return fn.call(this, this.appState.get('transaction')).then(function (trans) {
	        self.trigger('setTransaction', trans);
	        return trans;
	      }).fail(function (err) {
	        // Q may still consider AuthPollStopError to be unhandled
	        if (err.name === 'AuthPollStopError' || err.name === Enums.AUTH_STOP_POLL_INITIATION_ERROR) {
	          return;
	        }
	        self.trigger('setTransactionError', err);
	        self.trigger('error', self, err.xhr);
	        if (rethrow || _.indexOf(KNOWN_ERRORS, err.name) === -1) {
	          throw err;
	        }
	      });
	    },
	
	    manageTransaction: function manageTransaction(fn) {
	      var self = this,
	          res = fn.call(this, this.appState.get('transaction'), _.bind(this.setTransaction, this));
	
	      // If it's a promise, listen for failures
	      if (Q.isPromiseAlike(res)) {
	        return res.fail(function (err) {
	          if (err.name === 'AuthPollStopError' || err.name === Enums.AUTH_STOP_POLL_INITIATION_ERROR) {
	            return;
	          }
	          self.trigger('setTransactionError', err);
	          self.trigger('error', self, err.xhr);
	        });
	      }
	
	      return Q.resolve(res);
	    },
	
	    startTransaction: function startTransaction(fn) {
	      var self = this,
	          res = fn.call(this, this.settings.getAuthClient());
	
	      // If it's a promise, then chain to it
	      if (Q.isPromiseAlike(res)) {
	        return res.then(function (trans) {
	          self.trigger('setTransaction', trans);
	          return trans;
	        }).fail(function (err) {
	          self.trigger('setTransactionError', err);
	          self.trigger('error', self, err.xhr);
	          throw err;
	        });
	      }
	
	      return Q.resolve(res);
	    },
	
	    setTransaction: function setTransaction(trans) {
	      this.appState.set('transaction', trans);
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 646 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	/* eslint complexity: [2, 28],max-statements: [2, 30] */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(564), __webpack_require__(614), __webpack_require__(615), __webpack_require__(413), __webpack_require__(616), __webpack_require__(647)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Util, OAuth2Util, Enums, BrowserFeatures, Errors, ErrorCodes) {
	
	  var fn = {};
	
	  var verifyUrlTpl = Okta.tpl('signin/verify/{{provider}}/{{factorType}}');
	  var enrollFactorUrlTpl = Okta.tpl('signin/enroll/{{provider}}/{{factorType}}');
	  var activateFactorUrlTpl = Okta.tpl('signin/enroll-activate/{{provider}}/{{factorType}}{{#if step}}/{{step}}{{/if}}');
	  var recoveryUrlTpl = Okta.tpl('signin/recovery/{{recoveryToken}}');
	  var refreshUrlTpl = Okta.tpl('signin/refresh-auth-state{{#if token}}/{{token}}{{/if}}');
	  var sessionCookieRedirectTpl = Okta.tpl('{{baseUrl}}/login/sessionCookieRedirect?checkAccountSetupComplete=true' + '&token={{{token}}}&redirectUrl={{{redirectUrl}}}');
	
	  fn.createVerifyUrl = function (provider, factorType) {
	    return verifyUrlTpl({
	      provider: encodeURIComponent(provider.toLowerCase()),
	      factorType: encodeURIComponent(factorType)
	    });
	  };
	
	  fn.createEnrollFactorUrl = function (provider, factorType) {
	    return enrollFactorUrlTpl({
	      provider: encodeURIComponent(provider.toLowerCase()),
	      factorType: encodeURIComponent(factorType)
	    });
	  };
	
	  fn.createActivateFactorUrl = function (provider, factorType, step) {
	    return activateFactorUrlTpl({
	      provider: encodeURIComponent(provider.toLowerCase()),
	      factorType: encodeURIComponent(factorType),
	      step: step ? encodeURIComponent(step) : false
	    });
	  };
	
	  fn.createRecoveryUrl = function (recoveryToken) {
	    return recoveryUrlTpl({
	      recoveryToken: encodeURIComponent(recoveryToken)
	    });
	  };
	
	  fn.createRefreshUrl = function (stateToken) {
	    var token = stateToken ? encodeURIComponent(stateToken) : null;
	    return refreshUrlTpl({ token: token });
	  };
	
	  fn.routeAfterAuthStatusChange = function (router, err, res) {
	
	    // Global error handling for CORS enabled errors
	    if (err && err.xhr && BrowserFeatures.corsIsNotEnabled(err.xhr)) {
	      router.settings.callGlobalError(new Errors.UnsupportedBrowserError(Okta.loc('error.enabled.cors')));
	      return;
	    }
	
	    // Token has expired - no longer valid. Navigate back to primary auth.
	    if (err && err.errorCode === ErrorCodes.INVALID_TOKEN_EXCEPTION) {
	      router.appState.set('flashError', Okta.loc('error.expired.session'));
	      router.controller.state.set('navigateDir', Enums.DIRECTION_BACK);
	      router.navigate('', { trigger: true });
	      return;
	    }
	
	    // Other errors are handled by the function making the authClient request
	    if (err || !res || !res.status) {
	      return;
	    }
	
	    router.appState.setAuthResponse(res);
	
	    if (router.controller && router.controller.trapAuthResponse(res)) {
	      return;
	    }
	
	    fn.handleResponseStatus(router, err, res);
	  };
	
	  fn.handleResponseStatus = function (router, err, res) {
	    switch (res.status) {
	      case 'SUCCESS':
	        if (res.recoveryType === Enums.RECOVERY_TYPE_UNLOCK) {
	          router.navigate('signin/account-unlocked', { trigger: true });
	          return;
	        }
	
	        // If the desired end result object needs to have idToken (and not sessionToken),
	        // get the id token from session token before calling the global success function.
	        if (router.settings.get('oauth2Enabled')) {
	          OAuth2Util.getTokens(router.settings, { sessionToken: res.sessionToken }, router.controller);
	          return;
	        }
	
	        var successData = {
	          user: res._embedded.user,
	          type: res.type
	        };
	
	        if (res.relayState) {
	          successData.relayState = res.relayState;
	        }
	
	        if (res.type === Enums.SESSION_STEP_UP) {
	          var targetUrl = res._links && res._links.next && res._links.next.href;
	          successData.stepUp = {
	            url: targetUrl,
	            finish: function finish() {
	              Util.redirect(targetUrl);
	            }
	          };
	        } else {
	          // Add the type for now until the API returns it.
	          successData.type = Enums.SESSION_SSO;
	          successData.session = {
	            token: res.sessionToken,
	            setCookieAndRedirect: function setCookieAndRedirect(redirectUrl) {
	              Util.redirect(sessionCookieRedirectTpl({
	                baseUrl: router.settings.get('baseUrl'),
	                token: encodeURIComponent(res.sessionToken),
	                redirectUrl: encodeURIComponent(redirectUrl)
	              }));
	            }
	          };
	        }
	
	        router.settings.callGlobalSuccess(Enums.SUCCESS, successData);
	        return;
	      case 'CONSENT_REQUIRED':
	        if (router.settings.get('features.consent')) {
	          router.navigate('signin/consent', { trigger: true });
	        }
	        return;
	      case 'MFA_REQUIRED':
	        var factor = router.appState.get('factors').getDefaultFactor();
	        var url = fn.createVerifyUrl(factor.get('provider'), factor.get('factorType'));
	        router.navigate(url, { trigger: true });
	        return;
	      case 'MFA_CHALLENGE':
	        // Since we normally trap MFA_CHALLENGE, this will only get called on a
	        // page refresh. We need to return to MFA_REQUIRED to initialize the
	        // page correctly (i.e. factors dropdown, etc)
	        router.appState.get('transaction').prev().then(function (trans) {
	          router.appState.set('transaction', trans);
	        }).done();
	        return;
	      case 'MFA_ENROLL':
	        router.navigate('signin/enroll', { trigger: true });
	        return;
	      case 'MFA_ENROLL_ACTIVATE':
	        var activateUrl = fn.createActivateFactorUrl(router.appState.get('activatedFactorProvider'), router.appState.get('activatedFactorType'));
	        router.navigate(activateUrl, { trigger: true });
	        return;
	      case 'PASSWORD_WARN':
	      case 'PASSWORD_EXPIRED':
	        if (router.settings.get('features.customExpiredPassword') && !router.appState.get('isPwdManagedByOkta')) {
	          router.navigate('signin/custom-password-expired', { trigger: true });
	        } else {
	          router.navigate('signin/password-expired', { trigger: true });
	        }
	        return;
	      case 'RECOVERY_CHALLENGE':
	        // Will use this workaround (lowercasing response) until OKTA-69083 is resolved
	        var fromEmail = res.factorType.toLowerCase() === Enums.RECOVERY_FACTOR_TYPE_EMAIL.toLowerCase(),
	            isForgotPassword = res.recoveryType === Enums.RECOVERY_TYPE_PASSWORD,
	            isUnlock = res.recoveryType === Enums.RECOVERY_TYPE_UNLOCK;
	        if (isForgotPassword && fromEmail) {
	          router.navigate('signin/recovery-emailed', { trigger: true });
	        } else if (isUnlock && fromEmail) {
	          router.navigate('signin/unlock-emailed', { trigger: true });
	        } else {
	          router.navigate('signin/recovery-challenge', { trigger: true });
	        }
	        return;
	      case 'RECOVERY':
	        router.navigate('signin/recovery-question', { trigger: true });
	        return;
	      case 'PASSWORD_RESET':
	        router.navigate('signin/password-reset', { trigger: true });
	        return;
	      case 'LOCKED_OUT':
	        if (router.settings.get('features.selfServiceUnlock')) {
	          router.navigate('signin/unlock', { trigger: true });
	        } else {
	          router.controller.model.trigger('error', router.controller.model, {
	            responseJSON: {
	              errorCauses: [],
	              errorSummary: Okta.loc('error.auth.lockedOut', 'login')
	            }
	          });
	        }
	        return;
	      case 'UNAUTHENTICATED':
	        // Either we have factors and we are in passwordlessAuth mode
	        if (router.appState.get('promptForFactorInUnauthenticated')) {
	          var defaultFactor = router.appState.get('factors').getDefaultFactor();
	          var factorURL = fn.createVerifyUrl(defaultFactor.get('provider'), defaultFactor.get('factorType'));
	          router.navigate(factorURL, { trigger: true });
	          return;
	        }
	        // Or we don't have anything and we need to show the login page
	        router.navigate('', { trigger: true });
	        return;
	      default:
	        throw new Error('Unknown status: ' + res.status);
	    }
	  };
	
	  return fn;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 647 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(module.exports = {
	  INVALID_TOKEN_EXCEPTION: 'E0000011'
	});

/***/ },
/* 648 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(646), __webpack_require__(615)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, RouterUtil, Enums) {
	
	  return Okta.View.extend({
	    template: '\
	      <a href="#" class="link help js-back" data-se="back-link">\
	        {{i18n code="mfa.backToFactors" bundle="login"}}\
	      </a>\
	      <a href="#" class="link help goto js-goto" data-se="goto-link">\
	        {{i18n code="mfa.scanBarcode" bundle="login"}}\
	      </a>\
	    ',
	    className: 'auth-footer',
	    events: {
	      'click .js-back': function clickJsBack(e) {
	        e.preventDefault();
	        this.back();
	      },
	      'click .js-goto': function clickJsGoto(e) {
	        e.preventDefault();
	        // go to a different screen with current auth status:
	        // refresh the latest response
	        this.model.startTransaction(function (authClient) {
	          return authClient.tx.resume();
	        });
	      }
	    },
	    back: function back() {
	      this.state.set('navigateDir', Enums.DIRECTION_BACK);
	      if (this.options.appState.get('prevLink')) {
	        // Once we are in the MFA_ENROLL_ACTIVATE, we need to reset to the
	        // correct state. Fortunately, this means that the router will
	        // handle navigation once the request is finished.
	        this.model.doTransaction(function (transaction) {
	          return transaction.prev();
	        });
	      } else {
	        this.options.appState.trigger('navigate', 'signin/enroll');
	      }
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 649 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	//note: not including Okta here and explicitly including jquery and Handlebars
	//because we want to be explicit about which TextBox we are extending here
	//and want to avoid the cirucular dependency that occurs if we
	//include Okta
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(404), __webpack_require__(403), __webpack_require__(413), __webpack_require__(650), __webpack_require__(587)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, Handlebars, BrowserFeatures, TextBox) {
	
	  return TextBox.extend({
	    postRender: function postRender() {
	      if (this.options.type === 'number') {
	        var input = this.$('input');
	        input.attr({
	          pattern: '[0-9]*',
	          inputmode: 'numeric'
	        });
	      }
	      TextBox.prototype.postRender.apply(this, arguments);
	    },
	    // Override the focus() to ignore focus in IE. IE (8-11) has a known bug where
	    // the placeholder text disappears when the input field is focused.
	    focus: function focus() {
	      if (BrowserFeatures.isIE()) {
	        return;
	      }
	      return TextBox.prototype.focus.apply(this, arguments);
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 650 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	// Manually updated from courage 4.4.0-beta.7d33b21
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(404), __webpack_require__(529), __webpack_require__(596), __webpack_require__(557), __webpack_require__(607), __webpack_require__(587)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, TemplateUtil, BaseInput, Keys) {
	
	  var className = 'okta-form-input-field input-fix';
	
	  function hasTitleAndText(options) {
	    var title = options.title,
	        text = options.text;
	
	    return title && text && title !== text;
	  }
	
	  // options may be a string or an object.
	  function createQtipContent(options) {
	    if (hasTitleAndText(options)) {
	      return options;
	    }
	    return { text: options.text || options };
	  }
	
	  return BaseInput.extend({
	    template: TemplateUtil.tpl('\
	      {{#if params.innerTooltip}}\
	        <span class="input-tooltip icon form-help-16"></span>\
	      {{/if}}\
	      {{#if params.icon}}\
	        <span class="icon input-icon {{params.icon}}"></span>\
	      {{/if}}\
	      <input type="{{type}}" placeholder="{{placeholder}}" name="{{name}}" id="{{inputId}}"\
	       value="{{value}}" aria-label="{{placeholder}}" autocomplete="off"/>\
	      {{#if params.iconDivider}}\
	        <span class="input-icon-divider"></span>\
	      {{/if}}\
	      '),
	    /**
	    * @Override
	    */
	    events: {
	      'input input': 'update',
	      'change input': 'update',
	      'keydown input': 'update',
	      'keyup input': function keyupInput(e) {
	        if (Keys.isEnter(e)) {
	          this.model.trigger('form:save');
	        } else if (Keys.isEsc(e)) {
	          this.model.trigger('form:cancel');
	        }
	      }
	    },
	
	    constructor: function constructor() {
	      BaseInput.apply(this, arguments);
	      this.$el.addClass('o-form-control');
	    },
	
	    /**
	    * @Override
	    */
	    editMode: function editMode() {
	      this.$el.addClass(className);
	      BaseInput.prototype.editMode.apply(this, arguments);
	      this.$('input').placeholder();
	    },
	
	    /**
	    * @Override
	    */
	    readMode: function readMode() {
	      BaseInput.prototype.readMode.apply(this, arguments);
	      if (this.options.type == 'password') {
	        this.$el.text('********');
	      }
	      this.$el.removeClass(className);
	    },
	
	    /**
	    * @Override
	    */
	    val: function val() {
	      //IE will only read clear text pw if type="password" is explicitly in selector
	      var inputValue = this.$('input[type="' + this.options.type + '"]').val();
	
	      if (this.options.type !== 'password') {
	        inputValue = $.trim(inputValue);
	      }
	      return inputValue;
	    },
	
	    /**
	    * @Override
	    */
	    focus: function focus() {
	      return this.$('input').focus();
	    },
	
	    postRender: function postRender() {
	      var params = this.options.params,
	          content;
	
	      if (params && params.innerTooltip) {
	        content = createQtipContent(params.innerTooltip);
	        this.$('.input-tooltip').qtip({
	          content: content,
	          style: { classes: 'okta-tooltip qtip-custom qtip-shadow' },
	          position: {
	            my: 'bottom left',
	            // Note: qTip2 has a known issue calculating the tooltip offset when:
	            // 1. A container element has both:
	            //    a) position: relative/absolute
	            //    b) overlay: value other than 'visible'
	            // 2. The page is scrolled
	            //
	            // We set position:relative and overlay:auto on the body element,
	            // where both are required for:
	            // - Positioning the footer correctly
	            // - Displaying long pages in embedded browsers
	            //
	            // The original design called for a fixed position relative to the
	            // tooltip icon - this has been switched to "relative to mouse, and
	            // update position when mouse moves" because of this constraint.
	            target: 'mouse',
	            adjust: {
	              method: 'flip',
	              mouse: true,
	              y: -5,
	              x: 5
	            },
	            viewport: $('body')
	          }
	        });
	      }
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 651 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	/* eslint max-params: [2, 14], max-statements: [2, 18] */
	// BaseLoginRouter contains the more complicated router logic - rendering/
	// transition, etc. Most router changes should happen in LoginRouter (which is
	// responsible for adding new routes)
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(401), __webpack_require__(413), __webpack_require__(653), __webpack_require__(654), __webpack_require__(655), __webpack_require__(658), __webpack_require__(652), __webpack_require__(684), __webpack_require__(646), __webpack_require__(656), __webpack_require__(616), __webpack_require__(408), __webpack_require__(411)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Backbone, BrowserFeatures, RefreshAuthStateController, Settings, Header, SecurityBeacon, AuthContainer, AppState, RouterUtil, Animations, Errors, Bundles, Logger) {
	
	  var _ = Okta._,
	      $ = Okta.$;
	
	  function isStateLessRouteHandler(router, fn) {
	    return _.find(router.stateLessRouteHandlers, function (routeName) {
	      return fn === router[routeName];
	    });
	  }
	
	  function beaconIsAvailable(Beacon, settings) {
	    if (!Beacon) {
	      return false;
	    }
	    if (Beacon === SecurityBeacon) {
	      return settings.get('features.securityImage');
	    }
	    return true;
	  }
	
	  function loadLanguage(appState, i18n, assetBaseUrl, assetRewrite) {
	    var timeout = setTimeout(function () {
	      // Trigger a spinner if we're waiting on a request for a new language.
	      appState.trigger('loading', true);
	    }, 200);
	    return Bundles.loadLanguage(appState.get('languageCode'), i18n, {
	      baseUrl: assetBaseUrl,
	      rewrite: assetRewrite
	    }).then(function () {
	      clearTimeout(timeout);
	      appState.trigger('loading', false);
	    });
	  }
	
	  return Okta.Router.extend({
	    Events: Backbone.Events,
	
	    initialize: function initialize(options) {
	      // Create a default success and/or error handler if
	      // one is not provided.
	      if (!options.globalSuccessFn) {
	        options.globalSuccessFn = function () {};
	      }
	      if (!options.globalErrorFn) {
	        options.globalErrorFn = function (err) {
	          Logger.error(err);
	        };
	      }
	      this.settings = new Settings(_.omit(options, 'el', 'authClient'), { parse: true });
	      this.settings.setAuthClient(options.authClient);
	
	      if (!options.el) {
	        this.settings.callGlobalError(new Errors.ConfigError(Okta.loc('error.required.el')));
	      }
	
	      $('body > div').on('click', function () {
	        // OKTA-69769 Tooltip wont close on iPhone/iPad
	        // Registering a click handler on the first div
	        // allows a tap that falls outside the tooltip
	        // to be registered as a tap by iOS
	        // and then the open tooltip will lose focus and close.
	      });
	
	      this.appState = new AppState({
	        baseUrl: this.settings.get('baseUrl'),
	        settings: this.settings
	      }, { parse: true });
	
	      var wrapper = new AuthContainer({ appState: this.appState });
	      Okta.$(options.el).append(wrapper.render().$el);
	      this.el = '#okta-sign-in';
	
	      this.header = new Header({
	        el: this.el,
	        appState: this.appState,
	        settings: this.settings
	      });
	
	      this.listenTo(this.appState, 'change:transactionError', function (appState, err) {
	        RouterUtil.routeAfterAuthStatusChange(this, err);
	      });
	
	      this.listenTo(this.appState, 'change:transaction', function (appState, trans) {
	        RouterUtil.routeAfterAuthStatusChange(this, null, trans.data);
	      });
	
	      this.listenTo(this.appState, 'navigate', function (url) {
	        this.navigate(url, { trigger: true });
	      });
	    },
	
	    execute: function execute(cb, args) {
	      // Recovery flow with a token passed through widget settings
	      var recoveryToken = this.settings.get('recoveryToken');
	      if (recoveryToken) {
	        this.settings.unset('recoveryToken');
	        this.navigate(RouterUtil.createRecoveryUrl(recoveryToken), { trigger: true });
	        return;
	      }
	
	      // Refresh flow with a stateToken passed through widget settings
	      var stateToken = this.settings.get('stateToken');
	      if (stateToken) {
	        this.settings.unset('stateToken');
	        this.navigate(RouterUtil.createRefreshUrl(stateToken), { trigger: true });
	        return;
	      }
	
	      // Normal flow - we've either navigated to a stateless page, or are
	      // in the middle of an auth flow
	      var trans = this.appState.get('transaction');
	      if (trans && trans.data || isStateLessRouteHandler(this, cb)) {
	        cb.apply(this, args);
	        return;
	      }
	
	      // StateToken cookie exists on page load, and we are on a stateful url
	      if (this.settings.getAuthClient().tx.exists()) {
	        this.navigate(RouterUtil.createRefreshUrl(), { trigger: true });
	        return;
	      }
	
	      // We've hit a page that requires state, but have no stateToken - redirect
	      // back to primary auth
	      this.navigate('', { trigger: true });
	    },
	
	    // Overriding the default navigate method to allow the widget consumer
	    // to "turn off" routing - if features.router is false, the browser
	    // location bar will not update when the router navigates
	    navigate: function navigate(fragment, options) {
	      if (this.settings.get('features.router')) {
	        return Okta.Router.prototype.navigate.apply(this, arguments);
	      }
	      if (options && options.trigger) {
	        return Backbone.history.loadUrl(fragment);
	      }
	    },
	
	    render: function render(Controller, options) {
	      options || (options = {});
	
	      var Beacon = options.Beacon;
	      var controllerOptions = _.extend({ settings: this.settings, appState: this.appState }, _.omit(options, 'Beacon'));
	
	      // Since we have a wrapper view, render our wrapper and use its content
	      // element as our new el.
	      // Note: Render it here because we know dom is ready at this point
	      if (!this.header.rendered()) {
	        this.el = this.header.render().getContentEl();
	      }
	
	      // If we need to load a language (or apply custom i18n overrides), do
	      // this now and re-run render after it's finished.
	      if (!Bundles.isLoaded(this.appState.get('languageCode'))) {
	        return loadLanguage(this.appState, this.settings.get('i18n'), this.settings.get('assets.baseUrl'), this.settings.get('assets.rewrite')).then(_.bind(this.render, this, Controller, options)).done();
	      }
	
	      var oldController = this.controller;
	      this.controller = new Controller(controllerOptions);
	
	      // Bubble up all controller events
	      this.listenTo(this.controller, 'all', this.trigger);
	
	      // First run fetchInitialData, in case the next controller needs data
	      // before it's initial render. This will leave the current page in a
	      // loading state.
	      this.controller.fetchInitialData().then(_.bind(function () {
	
	        // Beacon transition occurs in parallel to page swap
	        if (!beaconIsAvailable(Beacon, this.settings)) {
	          Beacon = null;
	        }
	        this.header.setBeacon(Beacon, controllerOptions);
	
	        this.controller.render();
	
	        if (!oldController) {
	          this.el.append(this.controller.el);
	          this.controller.postRenderAnimation();
	          return;
	        }
	
	        return Animations.swapPages({
	          $parent: this.el,
	          $oldRoot: oldController.$el,
	          $newRoot: this.controller.$el,
	          dir: oldController.state.get('navigateDir'),
	          ctx: this,
	          success: function success() {
	            var flashError = this.appState.get('flashError'),
	                model = this.controller.model;
	            oldController.remove();
	            oldController.$el.remove();
	            this.controller.postRenderAnimation();
	            if (flashError) {
	              model.trigger('error', model, {
	                responseJSON: {
	                  errorSummary: flashError
	                }
	              });
	              this.appState.unset('flashError');
	            }
	          }
	        });
	      }, this)).fail(function () {
	        // OKTA-69665 - if an error occurs in fetchInitialData, we're left in
	        // a state with two active controllers. Therefore, we clean up the
	        // old one. Note: This explicitly handles the invalid token case -
	        // if we get some other type of error which doesn't force a redirect,
	        // we will probably be left in a bad state. I.e. old controller is
	        // dropped and new controller is not rendered.
	        if (oldController) {
	          oldController.remove();
	          oldController.$el.remove();
	        }
	      }).done();
	    },
	
	    start: function start() {
	      var pushState = false;
	      // Support for browser's back button.
	      if (window.addEventListener && this.settings.get('features.router')) {
	        window.addEventListener('popstate', _.bind(function (e) {
	          if (this.controller.back) {
	            e.preventDefault();
	            e.stopImmediatePropagation();
	            this.controller.back();
	          }
	        }, this));
	        pushState = BrowserFeatures.supportsPushState();
	      }
	      Okta.Router.prototype.start.call(this, { pushState: pushState });
	    },
	
	    hide: function hide() {
	      this.header.$el.hide();
	    },
	
	    show: function show() {
	      this.header.$el.show();
	    },
	
	    remove: function remove() {
	      this.controller.remove();
	      this.header.$el.remove();
	      Bundles.remove();
	      Backbone.history.stop();
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 652 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta) {
	  var CAN_REMOVE_BEACON_CLS = 'can-remove-beacon';
	  return Okta.View.extend({
	    className: 'auth-container main-container',
	    id: 'okta-sign-in',
	    attributes: { 'data-se': 'auth-container' },
	    initialize: function initialize(options) {
	      this.listenTo(options.appState, 'change:beaconType', function (model, type) {
	        this.$el.toggleClass(CAN_REMOVE_BEACON_CLS, type === 'security');
	      });
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 653 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(642)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormController) {
	
	  return FormController.extend({
	    className: 'refresh-auth-state',
	
	    Model: {},
	
	    Form: {
	      noButtonBar: true
	    },
	
	    preRender: function preRender() {
	      var token = this.options.token;
	      var appState = this.options.appState;
	      this.model.startTransaction(function (authClient) {
	        if (token) {
	          appState.trigger('loading', true);
	          return authClient.tx.resume({
	            stateToken: token
	          });
	        }
	
	        if (authClient.tx.exists()) {
	          appState.trigger('loading', true);
	          return authClient.tx.resume();
	        }
	
	        appState.trigger('navigate', '');
	      });
	    },
	
	    remove: function remove() {
	      this.options.appState.trigger('loading', false);
	      return FormController.prototype.remove.apply(this, arguments);
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 654 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	/*eslint complexity:[2, 8] */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(409), __webpack_require__(616), __webpack_require__(413), __webpack_require__(638), __webpack_require__(411), __webpack_require__(614), __webpack_require__(564), __webpack_require__(412)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Q, Errors, BrowserFeatures, Util, Logger, OAuth2Util, SharedUtil, config) {
	
	  var DEFAULT_LANGUAGE = 'en';
	
	  var supportedIdps = ['facebook', 'google', 'linkedin', 'microsoft'],
	      supportedResponseTypes = ['token', 'id_token', 'code'],
	      oauthRedirectTpl = Okta.tpl('{{origin}}');
	
	  var _ = Okta._,
	      $ = Okta.$,
	      ConfigError = Errors.ConfigError,
	      UnsupportedBrowserError = Errors.UnsupportedBrowserError;
	
	  var assetBaseUrlTpl = Okta.tpl('https://ok1static.oktacdn.com/assets/js/sdk/okta-signin-widget/{{version}}');
	
	  return Okta.Model.extend({
	
	    flat: true,
	    authClient: undefined,
	
	    local: {
	      'baseUrl': ['string', true],
	      'recoveryToken': ['string', false, undefined],
	      'stateToken': ['string', false, undefined],
	      'username': ['string', false],
	      'signOutLink': ['string', false],
	      'relayState': ['string', false],
	
	      // Function to transform the username before passing it to the API
	      // for Primary Auth, Forgot Password and Unlock Account.
	      'transformUsername': ['function', false],
	
	      // CALLBACKS
	      'globalSuccessFn': 'function',
	      'globalErrorFn': 'function',
	      'processCreds': 'function',
	
	      // IMAGES
	      'logo': 'string',
	      'logoText': ['string', false],
	      'helpSupportNumber': 'string',
	
	      // FEATURES
	      'features.router': ['boolean', true, false],
	      'features.securityImage': ['boolean', true, false],
	      'features.rememberMe': ['boolean', true, true],
	      'features.autoPush': ['boolean', true, false],
	      'features.smsRecovery': ['boolean', true, false],
	      'features.callRecovery': ['boolean', true, false],
	      'features.emailRecovery': ['boolean', false, true],
	      'features.windowsVerify': ['boolean', true, false],
	      'features.selfServiceUnlock': ['boolean', true, false],
	      'features.multiOptionalFactorEnroll': ['boolean', true, false],
	      'features.preventBrowserFromSavingOktaPassword': ['boolean', true, true],
	      'features.deviceFingerprinting': ['boolean', false, false],
	      'features.hideSignOutLinkInMFA': ['boolean', false, false],
	      'features.customExpiredPassword': ['boolean', true, false],
	      'features.registration': ['boolean', false, false],
	      'features.consent': ['boolean', false, false],
	      'features.idpDiscovery': ['boolean', false, false],
	      'features.passwordlessAuth': ['boolean', false, false],
	      'features.showPasswordToggleOnSignInPage': ['boolean', false, false],
	      'features.trackTypingPattern': ['boolean', false, false],
	
	      // I18N
	      'language': ['any', false], // Can be a string or a function
	      'i18n': ['object', false],
	
	      // ASSETS
	      'assets.baseUrl': ['string', false],
	      'assets.rewrite': {
	        type: 'function',
	        value: _.identity
	      },
	
	      // OAUTH2
	      'authScheme': ['string', false, 'OAUTH2'],
	      'authParams.display': {
	        type: 'string',
	        values: ['none', 'popup', 'page']
	      },
	
	      // Note: It shouldn't be necessary to override/pass in this property -
	      // it will be set correctly depending on what the value of display is
	      // and whether we are using Okta or a social IDP.
	      'authParams.responseMode': {
	        type: 'string',
	        values: ['query', 'fragment', 'form_post', 'okta_post_message']
	      },
	
	      // Can either be a string or an array, i.e.
	      // - Single value: 'id_token', 'token', or 'code'
	      // - Multiple values: ['id_token', 'token']
	      'authParams.responseType': ['any', false, 'id_token'],
	      'authParams.scopes': ['array', false],
	
	      'authParams.issuer': ['string', false],
	      'authParams.authorizeUrl': ['string', false],
	      'authParams.state': ['string', false],
	      'authParams.nonce': ['string', false],
	
	      'policyId': 'string',
	      'clientId': 'string',
	      'redirectUri': 'string',
	      'idps': ['array', false, []],
	      'idpDisplay': {
	        type: 'string',
	        values: ['PRIMARY', 'SECONDARY'],
	        value: 'SECONDARY'
	      },
	      'oAuthTimeout': ['number', false],
	
	      // HELP LINKS
	      'helpLinks.help': 'string',
	      'helpLinks.forgotPassword': 'string',
	      'helpLinks.unlock': 'string',
	      'helpLinks.custom': 'array',
	
	      //Custom Buttons
	      'customButtons': ['array', false, []],
	
	      //Registration
	      'registration.click': 'function',
	      'registration.parseSchema': 'function',
	      'registration.preSubmit': 'function',
	      'registration.postSubmit': 'function',
	
	      //Consent
	      'consent.cancel': 'function',
	
	      //IDP Discovery
	      'idpDiscovery.requestContext': 'string'
	    },
	
	    derived: {
	      supportedLanguages: {
	        deps: ['i18n'],
	        fn: function fn(i18n) {
	          // Developers can pass in their own languages
	          return _.union(config.supportedLanguages, _.keys(i18n));
	        },
	        cache: true
	      },
	      languageCode: {
	        deps: ['language', 'supportedLanguages'],
	        fn: function fn(language, supportedLanguages) {
	          var userLanguages = BrowserFeatures.getUserLanguages(),
	              preferred = _.clone(userLanguages),
	              supportedLowerCase = Util.toLower(supportedLanguages),
	              expanded;
	
	          // Any developer defined "language" takes highest priority:
	          // As a string, i.e. 'en', 'ja', 'zh-CN'
	          if (_.isString(language)) {
	            preferred.unshift(language);
	          }
	          // As a callback function, which is passed the list of supported
	          // languages and detected user languages. This function must return
	          // a languageCode, i.e. 'en', 'ja', 'zh-CN'
	          else if (_.isFunction(language)) {
	              preferred.unshift(language(supportedLanguages, userLanguages));
	            }
	
	          // Add english as the default, and expand to include any language
	          // codes that do not include region, dialect, etc.
	          preferred.push(DEFAULT_LANGUAGE);
	          expanded = Util.toLower(Util.expandLanguages(preferred));
	
	          // Perform a case insensitive search - this is necessary in the case
	          // of browsers like Safari
	          var i, supportedPos;
	          for (i = 0; i < expanded.length; i++) {
	            supportedPos = supportedLowerCase.indexOf(expanded[i]);
	            if (supportedPos > -1) {
	              return supportedLanguages[supportedPos];
	            }
	          }
	        }
	      },
	      oauth2Enabled: {
	        deps: ['clientId', 'authScheme', 'authParams.responseType'],
	        fn: function fn(clientId, authScheme, responseType) {
	          if (!clientId) {
	            return false;
	          }
	          if (authScheme.toLowerCase() !== 'oauth2') {
	            return false;
	          }
	          var responseTypes = _.isArray(responseType) ? responseType : [responseType];
	          return _.intersection(responseTypes, supportedResponseTypes).length > 0;
	        },
	        cache: true
	      },
	      // Redirect Uri to provide in the oauth API
	      oauthRedirectUri: {
	        deps: ['redirectUri'],
	        fn: function fn(redirectUri) {
	          if (redirectUri) {
	            return redirectUri;
	          }
	
	          var origin = window.location.origin;
	          // IE8
	          if (!origin) {
	            var href = window.location.href;
	            var path = window.location.pathname;
	            if (path !== '') {
	              origin = href.substring(0, href.lastIndexOf(path));
	            }
	          }
	
	          return oauthRedirectTpl({
	            origin: origin
	          });
	        }
	      },
	      // filters the idps passed into the widget to include only the ones we support.
	      configuredSocialIdps: {
	        deps: ['idps'],
	        fn: function fn(idps) {
	          return _.filter(idps, function (idp) {
	            return _.contains(supportedIdps, idp.type.toLowerCase());
	          });
	        },
	        cache: true
	      },
	      // social auth buttons order - 'above'/'below' the primary auth form (boolean)
	      socialAuthPositionTop: {
	        deps: ['configuredSocialIdps', 'idpDisplay'],
	        fn: function fn(configuredSocialIdps, idpDisplay) {
	          return !_.isEmpty(configuredSocialIdps) && idpDisplay.toUpperCase() === 'PRIMARY';
	        },
	        cache: true
	      },
	      // merges social auth and custom buttons into one array
	      configuredButtons: {
	        deps: ['configuredSocialIdps', 'customButtons'],
	        fn: function fn(configuredSocialIdps, customButtons) {
	          var self = this;
	          var buttonArray = [];
	          _.each(configuredSocialIdps, function (idp) {
	            var type = idp.type.toLowerCase();
	            var dataAttr = 'social-auth-' + type + '-button';
	            var socialAuthButton = {
	              id: idp.id,
	              type: idp.type,
	              dataAttr: dataAttr,
	              className: 'social-auth-button ' + dataAttr,
	              title: function title() {
	                return Okta.loc('socialauth.' + type + '.label');
	              },
	              click: function click(e) {
	                e.preventDefault();
	                if (self.get('oauth2Enabled')) {
	                  OAuth2Util.getTokens(self, { idp: idp.id });
	                } else {
	                  var baseUrl = self.get('baseUrl');
	                  var params = $.param({
	                    fromURI: self.get('relayState')
	                  });
	                  var targetUri = baseUrl + '/sso/idps/' + idp.id + '?' + params;
	                  SharedUtil.redirect(targetUri);
	                }
	              }
	            };
	            buttonArray.push(socialAuthButton);
	          });
	          if (_.isArray(customButtons)) {
	            _.each(customButtons, function (button) {
	              var customConfiguredButton = {
	                title: button.title,
	                className: button.className + ' default-custom-button',
	                click: button.click
	              };
	              buttonArray.push(customConfiguredButton);
	            });
	          }
	          return buttonArray;
	        },
	        cache: true
	      },
	      //checks if there are any configured buttons
	      hasConfiguredButtons: {
	        deps: ['configuredButtons'],
	        fn: function fn(configuredButtons) {
	          return !_.isEmpty(configuredButtons);
	        },
	        cache: true
	      }
	    },
	
	    initialize: function initialize(options) {
	      if (!options.baseUrl) {
	        this.callGlobalError(new ConfigError(Okta.loc('error.required.baseUrl')));
	      } else if (BrowserFeatures.corsIsNotSupported()) {
	        this.callGlobalError(new UnsupportedBrowserError(Okta.loc('error.unsupported.cors')));
	      }
	    },
	
	    setAcceptLanguageHeader: function setAcceptLanguageHeader(authClient) {
	      if (authClient && authClient.options && authClient.options.headers) {
	        authClient.options.headers['Accept-Language'] = this.get('languageCode');
	      }
	    },
	
	    setAuthClient: function setAuthClient(authClient) {
	      this.setAcceptLanguageHeader(authClient);
	      this.authClient = authClient;
	    },
	
	    getAuthClient: function getAuthClient() {
	      return this.authClient;
	    },
	
	    set: function set() {
	      try {
	        return Okta.Model.prototype.set.apply(this, arguments);
	      } catch (e) {
	        var message = e.message ? e.message : e;
	        this.callGlobalError(new ConfigError(message));
	      }
	    },
	
	    // Invokes the global success function. This should only be called on a
	    // terminal part of the code (i.e. authStatus SUCCESS or after sending
	    // a recovery email)
	    callGlobalSuccess: function callGlobalSuccess(status, data) {
	      // Defer this to ensure that our functions have rendered completely
	      // before invoking their function
	      var res = _.extend(data, { status: status });
	      _.defer(_.partial(this.get('globalSuccessFn'), res));
	    },
	
	    // Invokes the global error function. This should only be called on non
	    // recoverable errors (i.e. configuration errors, browser unsupported
	    // errors, etc)
	    callGlobalError: function callGlobalError(err) {
	      // Note: Must use "this.options.globalErrorFn" when they've passed invalid
	      // arguments - globalErrorFn will not have been set yet
	      var globalErrorFn = this.get('globalErrorFn') || this.options.globalErrorFn;
	      if (globalErrorFn) {
	        globalErrorFn(err);
	      } else {
	        // Only throw the error if they have not registered a globalErrorFn
	        throw err;
	      }
	    },
	
	    // Get the username by applying the transform function if it exists.
	    transformUsername: function transformUsername(username, operation) {
	      var transformFn = this.get('transformUsername');
	      if (transformFn && _.isFunction(transformFn)) {
	        return transformFn(username, operation);
	      }
	      return username;
	    },
	
	    processCreds: function processCreds(creds) {
	      var processCreds = this.get('processCreds');
	      return Q.Promise(function (resolve) {
	        if (!_.isFunction(processCreds)) {
	          resolve();
	        } else if (processCreds.length === 2) {
	          processCreds(creds, resolve);
	        } else {
	          processCreds(creds);
	          resolve();
	        }
	      });
	    },
	
	    parseSchema: function parseSchema(schema, onSuccess, onFailure) {
	      var parseSchema = this.get('registration.parseSchema');
	      //check for parseSchema callback
	      if (_.isFunction(parseSchema)) {
	        parseSchema(schema, function (schema) {
	          onSuccess(schema);
	        }, function (error) {
	          error = error || { 'errorSummary': Okta.loc('registration.default.callbackhook.error') };
	          error['callback'] = 'parseSchema';
	          onFailure(error);
	        });
	      } else {
	        //no callback
	        onSuccess(schema);
	      }
	    },
	
	    preSubmit: function preSubmit(postData, onSuccess, onFailure) {
	      var preSubmit = this.get('registration.preSubmit');
	      //check for preSubmit callback
	      if (_.isFunction(preSubmit)) {
	        preSubmit(postData, function (postData) {
	          onSuccess(postData);
	        }, function (error) {
	          error = error || { 'errorSummary': Okta.loc('registration.default.callbackhook.error') };
	          error['callback'] = 'preSubmit';
	          onFailure(error);
	        });
	      } else {
	        //no callback
	        onSuccess(postData);
	      }
	    },
	
	    postSubmit: function postSubmit(response, onSuccess, onFailure) {
	      var postSubmit = this.get('registration.postSubmit');
	      //check for postSubmit callback
	      if (_.isFunction(postSubmit)) {
	        postSubmit(response, function (response) {
	          onSuccess(response);
	        }, function (error) {
	          error = error || { 'errorSummary': Okta.loc('registration.default.callbackhook.error') };
	          error['callback'] = 'postSubmit';
	          onFailure(error);
	        });
	      } else {
	        //no callback
	        onSuccess(response);
	      }
	    },
	
	    // Use the parse function to transform config options to the standard
	    // settings we currently support. This is a good place to deprecate old
	    // option formats.
	    parse: function parse(options) {
	      if (options.authParams && options.authParams.scope) {
	        Logger.deprecate('Use "scopes" instead of "scope"');
	        options.authParams.scopes = options.authParams.scope;
	        delete options.authParams.scope;
	      }
	
	      if (options.labels || options.country) {
	        Logger.deprecate('Use "i18n" instead of "labels" and "country"');
	        var overrides = options.labels || {};
	        _.each(options.country, function (val, key) {
	          overrides['country.' + key] = val;
	        });
	        // Old behavior is to treat the override as a global override, so we
	        // need to add these overrides to each language
	        options.i18n = {};
	        _.each(config.supportedLanguages, function (language) {
	          options.i18n[language] = overrides;
	        });
	        delete options.labels;
	        delete options.country;
	      }
	
	      // Default the assets.baseUrl to the cdn, or remove any trailing slashes
	      if (!options.assets) {
	        options.assets = {};
	      }
	      var abu = options.assets.baseUrl;
	      if (!abu) {
	        options.assets.baseUrl = assetBaseUrlTpl({ version: config.version });
	      } else if (abu[abu.length - 1] === '/') {
	        options.assets.baseUrl = abu.substring(0, abu.length - 1);
	      }
	
	      return options;
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 655 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(656), __webpack_require__(657)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Animations, LoadingBeacon) {
	
	  var NO_BEACON_CLS = 'no-beacon';
	  var LOADING_BEACON_CLS = 'beacon-small beacon-loading';
	
	  function isLoadingBeacon(beacon) {
	    return beacon && beacon.equals(LoadingBeacon);
	  }
	
	  function removeBeacon(view) {
	    // There are some timing issues with removing beacons (i.e. the case of
	    // transitioning from loadingBeacon -> loadingBeacon)
	    if (!view.currentBeacon) {
	      return;
	    }
	    view.currentBeacon.remove();
	    view.currentBeacon = null;
	  }
	
	  function addBeacon(view, NextBeacon, selector, options) {
	    view.add(NextBeacon, {
	      selector: selector,
	      options: options
	    });
	    view.currentBeacon = view.first();
	  }
	
	  function typeOfTransition(currentBeacon, NextBeacon, options) {
	    if (!currentBeacon && !NextBeacon) {
	      return 'none';
	    }
	    // Show Loading beacon
	    if (!currentBeacon && options.loading) {
	      return 'load';
	    }
	    // Swap/Hide Loading beacon
	    if (currentBeacon && isLoadingBeacon(currentBeacon)) {
	      return NextBeacon ? 'swap' : 'unload';
	    }
	    if (currentBeacon && currentBeacon.equals(NextBeacon, options)) {
	      return 'same';
	    }
	    if (!currentBeacon && NextBeacon) {
	      return 'add';
	    }
	    if (currentBeacon && !NextBeacon) {
	      return 'remove';
	    }
	    if (currentBeacon instanceof NextBeacon) {
	      return 'fade';
	    }
	    // If none of the above
	    // then we are changing the type of beacon
	    // ex. from SecurityBeacon to FactorBeacon
	    return 'swap';
	  }
	
	  return Okta.View.extend({
	
	    currentBeacon: null,
	
	    template: '\
	      <div class="okta-sign-in-header auth-header">\
	        {{#if logo}}\
	        <img src="{{logo}}" class="auth-org-logo" alt="{{logoText}}"/>\
	        {{/if}}\
	        <div data-type="beacon-container" class="beacon-container"></div>\
	      </div>\
	      <div class="auth-content"><div class="auth-content-inner"></div></div>\
	    ',
	
	    // Attach a 'no-beacon' class if the security image feature
	    // is not passed in to prevent the beacon from jumping.
	    initialize: function initialize(options) {
	      if (!options.settings.get('features.securityImage')) {
	        this.$el.addClass(NO_BEACON_CLS);
	        // To show/hide the spinner when there is no security image,
	        // listen to the appState's loading/removeLoading events.
	        this.listenTo(options.appState, 'loading', this.setLoadingBeacon);
	        this.listenTo(options.appState, 'removeLoading', this.removeLoadingBeacon);
	      }
	    },
	
	    /* eslint complexity: 0 */
	    setBeacon: function setBeacon(NextBeacon, options) {
	      var selector = '[data-type="beacon-container"]',
	          container = this.$(selector),
	          transition = typeOfTransition(this.currentBeacon, NextBeacon, options),
	          self = this;
	
	      switch (transition) {
	        case 'none':
	          this.$el.addClass(NO_BEACON_CLS);
	          return;
	        case 'same':
	          return;
	        case 'add':
	          this.$el.removeClass(NO_BEACON_CLS);
	          addBeacon(this, NextBeacon, selector, options);
	          return Animations.explode(container);
	        case 'remove':
	          this.$el.addClass(NO_BEACON_CLS);
	          return Animations.implode(container).then(function () {
	            removeBeacon(self);
	          }).done();
	        case 'fade':
	          // Other transitions are performed on the beacon container,
	          // but this transition is on the content inside the beacon.
	          // For a SecurityBeacon the username change will update the
	          // AppState and trigger an transition to a new Becon
	          // Since there is no url change this method is not called.
	          // For a FactorBeacon a page refresh has occurred
	          // so we execute the beacon's own transition method.
	          if (!this.currentBeacon.fadeOut) {
	            throw new Error('The current beacon is missing the "fadeOut" method');
	          }
	          options.animate = true;
	          return this.currentBeacon.fadeOut().then(function () {
	            removeBeacon(self);
	            addBeacon(self, NextBeacon, selector, options);
	          }).done();
	        case 'swap':
	          return Animations.swapBeacons({
	            $el: container,
	            swap: function swap() {
	              var isLoading = isLoadingBeacon(self.currentBeacon);
	              // Order of these calls is important for -
	              // loader --> security/factor beacon swap.
	              removeBeacon(self);
	              if (isLoading) {
	                container.removeClass(LOADING_BEACON_CLS);
	                self.$el.removeClass(NO_BEACON_CLS);
	              }
	              addBeacon(self, NextBeacon, selector, options);
	            }
	          }).done();
	        case 'load':
	          // Show the loading beacon. Add a couple of classes
	          // before triggering the add beacon code.
	          container.addClass(LOADING_BEACON_CLS);
	          addBeacon(self, NextBeacon, selector, options);
	          return Animations.explode(container);
	        case 'unload':
	          // Hide the loading beacon.
	          return this.removeLoadingBeacon();
	        default:
	          throw new Error('the "' + transition + '" is not recognized');
	      }
	    },
	
	    // Show the loading beacon when the security image feature is not enabled.
	    setLoadingBeacon: function setLoadingBeacon(isLoading) {
	      if (!isLoading || isLoadingBeacon(this.currentBeacon)) {
	        return;
	      }
	      this.setBeacon(LoadingBeacon, { loading: true });
	    },
	
	    // Hide the beacon on primary auth failure. On primary auth success, setBeacon does this job.
	    removeLoadingBeacon: function removeLoadingBeacon() {
	      var self = this,
	          container = this.$('[data-type="beacon-container"]');
	
	      return Animations.implode(container).then(function () {
	        removeBeacon(self);
	        container.removeClass(LOADING_BEACON_CLS);
	      }).done();
	    },
	
	    getTemplateData: function getTemplateData() {
	      return this.settings.toJSON({ verbose: true });
	    },
	
	    getContentEl: function getContentEl() {
	      return this.$('.auth-content-inner');
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 656 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	/* eslint max-statements: [2, 15] */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(409), __webpack_require__(615)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Q, Enums) {
	
	  var SWAP_PAGE_TIME = 200;
	
	  var fn = {};
	
	  function zoom($el, start, finish) {
	    var deferred = Q.defer();
	    $el.animate({
	      'text-indent': 1
	    }, {
	      duration: 200,
	      easing: 'swing',
	      step: function step(now, fx) {
	        fx.start = start;
	        fx.end = finish;
	        $el.css('transform', 'scale(' + now + ', ' + now + ')');
	      },
	      always: function always() {
	        deferred.resolve($el);
	      }
	    });
	    return deferred.promise;
	  }
	
	  function rotate($el, start, finish) {
	    var deferred = Q.defer();
	    $el.animate({
	      'text-indent': 1
	    }, {
	      duration: 150,
	      easing: 'swing',
	      step: function step(now, fx) {
	        fx.start = start;
	        fx.end = finish;
	        $el.css('transform', 'rotate(' + now + 'deg)');
	      },
	      always: function always() {
	        deferred.resolve($el);
	      }
	    });
	    return deferred.promise;
	  }
	
	  // Note: It is necessary to pass in a success callback because we must
	  // remove the old dom node (and controller) in the same tick of the event
	  // loop. Waiting for "then" results in a glitchy animation.
	  fn.swapPages = function (options) {
	    var deferred = Q.defer();
	    var $parent = options.$parent;
	    var $oldRoot = options.$oldRoot;
	    var $newRoot = options.$newRoot;
	    var success = options.success;
	    var ctx = options.ctx;
	    var directionClassName = 'transition-from-right';
	
	    if (options.dir && options.dir === Enums.DIRECTION_BACK) {
	      directionClassName = 'transition-from-left';
	    }
	
	    $newRoot.addClass(directionClassName);
	    $parent.append($newRoot);
	
	    $parent.addClass('animation-container-overflow');
	    $newRoot.animate({ left: '0px', top: '0px', opacity: 1 }, SWAP_PAGE_TIME, function () {
	      $parent.removeClass('animation-container-overflow');
	      $newRoot.removeClass(directionClassName);
	      $newRoot.removeAttr('style');
	      success.call(ctx);
	      deferred.resolve();
	    });
	
	    $oldRoot.animate({ height: $newRoot.height(), opacity: 0 }, SWAP_PAGE_TIME * 0.8);
	
	    return deferred.promise;
	  };
	
	  fn.swapBeacons = function (options) {
	    var $el = options.$el,
	        swap = options.swap,
	        ctx = options.ctx;
	
	    return this.implode($el).then(function () {
	      swap.call(ctx);
	      return $el;
	    }).then(this.explode);
	  };
	
	  fn.explode = function ($el) {
	    return zoom($el, 0, 1); //zoom in
	  };
	
	  fn.implode = function ($el) {
	    return zoom($el, 1, 0); //zoom out
	  };
	
	  fn.radialProgressBar = function (options) {
	    var radialProgressBar = options.$el,
	        swap = options.swap,
	        circles = radialProgressBar.children();
	
	    return rotate(circles, 0, 180).then(function () {
	      radialProgressBar.css({ 'clip': 'auto' });
	    }).then(function () {
	      var leftHalf = circles.eq(0);
	      swap();
	      return rotate(leftHalf, 180, 360);
	    }).then(function () {
	      //reset values to initial state
	      radialProgressBar.css({ 'clip': 'rect(0px, 96px, 96px, 48px)' });
	      circles.css({
	        'transform': 'rotate(0deg)',
	        'text-indent': '1px'
	      });
	    });
	  };
	
	  return fn;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 657 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta) {
	
	  return Okta.View.extend({
	
	    template: '\
	      <div class="beacon-blank"/>\
	      <div class="bg-helper auth-beacon auth-beacon-security" data-se="loading-beacon">\
	      <div class="okta-sign-in-beacon-border auth-beacon-border js-auth-beacon-border"/>\
	      </div>\
	    ',
	
	    equals: function equals(Beacon) {
	      return Beacon && this instanceof Beacon;
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 658 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _regenerator = __webpack_require__(659);
	
	var _regenerator2 = _interopRequireDefault(_regenerator);
	
	var _asyncToGenerator2 = __webpack_require__(662);
	
	var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(656)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Animations) {
	  var updateSecurityImage = function () {
	    var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee($el, appState, animate) {
	      var image, border, hasBorder, hasAntiPhishing, radialProgressBar, host, duration;
	      return _regenerator2.default.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              image = $el.find('.auth-beacon-security'), border = $el.find('.js-auth-beacon-border'), hasBorder = !appState.get('isUndefinedUser'), hasAntiPhishing = appState.get('isNewUser'), radialProgressBar = $el.find('.radial-progress-bar'), host = appState.get('baseUrl').match(/https?:\/\/(.[^\/]+)/)[1], duration = 200;
	
	              if (animate) {
	                _context.next = 5;
	                break;
	              }
	
	              // Do not animate the security beacon
	              // This occurs when initializing the form
	              setBackgroundImage(image, appState);
	              border.toggleClass('auth-beacon-border', hasBorder);
	              return _context.abrupt('return');
	
	            case 5:
	
	              destroyAntiPhishingMessage(image);
	
	              // Animate loading the security beacon
	
	              if (hasBorder) {
	                _context.next = 10;
	                break;
	              }
	
	              // This occurrs when appState username is blank
	              // we do not yet know if the user is recognized
	              image.fadeOut(duration, function () {
	                setBackgroundImage(image, appState);
	                border.removeClass('auth-beacon-border');
	                image.fadeIn(duration);
	              });
	              _context.next = 15;
	              break;
	
	            case 10:
	              // Animate loading the security beacon with a loading bar for the border
	              // This occurrs when the username has been checked against Okta.
	              border.removeClass('auth-beacon-border');
	              _context.next = 13;
	              return Animations.radialProgressBar({
	                $el: radialProgressBar,
	                swap: function swap() {
	                  image.fadeOut(duration, function () {
	                    setBackgroundImage(image, appState);
	                    image.fadeIn(duration);
	                  });
	                }
	              });
	
	            case 13:
	              border.addClass('auth-beacon-border');
	              if (hasAntiPhishing) {
	                antiPhishingMessage(image, host);
	              }
	
	            case 15:
	            case 'end':
	              return _context.stop();
	          }
	        }
	      }, _callee, this);
	    }));
	
	    return function updateSecurityImage(_x, _x2, _x3) {
	      return _ref.apply(this, arguments);
	    };
	  }();
	
	  var _ = Okta._,
	      $ = Okta.$;
	
	  function setBackgroundImage(el, appState) {
	    // NOTE: The imgSrc is returned by the server so that every
	    // user has a unique image. However new and undefined user states
	    // are hard coded into the css and the value returned by the server
	    // is ignored.
	    var imgSrc = appState.get('securityImage'),
	        imgDescription = appState.get('securityImageDescription'),
	        isUndefinedUser = appState.get('isUndefinedUser'),
	        isNewUser = appState.get('isNewUser'),
	        isSecurityImage = !isUndefinedUser && !isNewUser;
	
	    el.css('background-image', '');
	    el.removeClass('new-user undefined-user');
	    if (isNewUser) {
	      el.addClass('new-user');
	      return;
	    }
	    if (isUndefinedUser) {
	      el.addClass('undefined-user');
	      return;
	    }
	    if (isSecurityImage) {
	      // TODO: Newer versions of qtip will remove aria-describedby on their own when destroy() is called.
	      el.removeAttr('aria-describedby');
	      el.find('.accessibility-text').text(imgDescription);
	      el.css('background-image', 'url(' + _.escape(imgSrc) + ')');
	      return;
	    }
	  }
	
	  function antiPhishingMessage(image, host) {
	    $(window).on('resize.securityBeaconQtip', _.debounce(function () {
	      if (image.is(':visible')) {
	        image.qtip('show');
	      }
	    }, 300));
	
	    // Show the message that the user has not logged in from this device before.
	    image.qtip({
	      prerender: true,
	      content: {
	        text: Okta.loc('primaryauth.newUser.tooltip', 'login', [_.escape(host)]),
	        button: Okta.loc('primaryauth.newUser.tooltip.close', 'login')
	      },
	      style: {
	        classes: 'okta-security-image-tooltip security-image-qtip qtip-custom qtip-shadow qtip-rounded',
	        tip: { height: 12, width: 16 }
	      },
	      position: {
	        my: 'top center',
	        at: 'center',
	        target: $('.auth-beacon-security'),
	        adjust: { method: 'flip', scroll: false, resize: true },
	        effect: false
	      },
	      hide: { event: false, fixed: true },
	      show: { event: false, delay: 200 },
	      events: {
	        move: function move(event, api) {
	          if (!api.elements.target.is(':visible')) {
	            // Have to hide it immediately, with no effect
	            api.set('hide.effect', false);
	            api.hide();
	            api.set('hide.effect', true);
	          }
	        }
	      }
	    });
	
	    image.qtip('toggle', image.is(':visible'));
	  }
	
	  function destroyAntiPhishingMessage(image) {
	    image.qtip('destroy');
	    $(window).off('resize.securityBeaconQtip');
	  }
	
	  return Okta.View.extend({
	
	    template: '\
	    <div class="beacon-blank">\
	      <div class="radial-progress-bar">\
	        <div class="circle left"></div>\
	        <div class="circle right"></div>\
	      </div>\
	    </div>\
	    <div aria-live="polite" role="image" class="bg-helper auth-beacon auth-beacon-security" data-se="security-beacon">\
	      <span class="accessibility-text"></span>\
	      <div class="okta-sign-in-beacon-border auth-beacon-border js-auth-beacon-border">\
	      </div>\
	    </div>\
	    ',
	    className: 'js-security-beacon',
	
	    initialize: function initialize(options) {
	      this.update = _.partial(updateSecurityImage, this.$el, options.appState);
	      this.listenTo(options.appState, 'change:securityImage', this.update);
	      this.listenTo(options.appState, 'loading', function (isLoading) {
	        this.$el.toggleClass('beacon-loading', isLoading);
	        this.removeAntiPhishingMessage();
	      });
	      this.options.appState.set('beaconType', 'security');
	
	      this.listenTo(options.appState, 'navigate', this.removeAntiPhishingMessage);
	    },
	
	    postRender: function postRender() {
	      this.update(false);
	    },
	
	    equals: function equals(Beacon) {
	      return Beacon && this instanceof Beacon;
	    },
	
	    removeAntiPhishingMessage: function removeAntiPhishingMessage() {
	      var image = this.$el.find('.auth-beacon-security');
	      image.qtip('destroy');
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 659 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(660);


/***/ },
/* 660 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	
	// This method of obtaining a reference to the global object needs to be
	// kept identical to the way it is obtained in runtime.js
	var g = (function() { return this })() || Function("return this")();
	
	// Use `getOwnPropertyNames` because not all browsers support calling
	// `hasOwnProperty` on the global `self` object in a worker. See #183.
	var hadRuntime = g.regeneratorRuntime &&
	  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;
	
	// Save the old regeneratorRuntime in case it needs to be restored later.
	var oldRuntime = hadRuntime && g.regeneratorRuntime;
	
	// Force reevalutation of runtime.js.
	g.regeneratorRuntime = undefined;
	
	module.exports = __webpack_require__(661);
	
	if (hadRuntime) {
	  // Restore the original runtime.
	  g.regeneratorRuntime = oldRuntime;
	} else {
	  // Remove the global property added by runtime.js.
	  try {
	    delete g.regeneratorRuntime;
	  } catch(e) {
	    g.regeneratorRuntime = undefined;
	  }
	}


/***/ },
/* 661 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	
	!(function(global) {
	  "use strict";
	
	  var Op = Object.prototype;
	  var hasOwn = Op.hasOwnProperty;
	  var undefined; // More compressible than void 0.
	  var $Symbol = typeof Symbol === "function" ? Symbol : {};
	  var iteratorSymbol = $Symbol.iterator || "@@iterator";
	  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
	
	  var inModule = typeof module === "object";
	  var runtime = global.regeneratorRuntime;
	  if (runtime) {
	    if (inModule) {
	      // If regeneratorRuntime is defined globally and we're in a module,
	      // make the exports object identical to regeneratorRuntime.
	      module.exports = runtime;
	    }
	    // Don't bother evaluating the rest of this file if the runtime was
	    // already defined globally.
	    return;
	  }
	
	  // Define the runtime globally (as expected by generated code) as either
	  // module.exports (if we're in a module) or a new, empty object.
	  runtime = global.regeneratorRuntime = inModule ? module.exports : {};
	
	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	    var generator = Object.create(protoGenerator.prototype);
	    var context = new Context(tryLocsList || []);
	
	    // The ._invoke method unifies the implementations of the .next,
	    // .throw, and .return methods.
	    generator._invoke = makeInvokeMethod(innerFn, self, context);
	
	    return generator;
	  }
	  runtime.wrap = wrap;
	
	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }
	
	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";
	
	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};
	
	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}
	
	  // This is a polyfill for %IteratorPrototype% for environments that
	  // don't natively support it.
	  var IteratorPrototype = {};
	  IteratorPrototype[iteratorSymbol] = function () {
	    return this;
	  };
	
	  var getProto = Object.getPrototypeOf;
	  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
	  if (NativeIteratorPrototype &&
	      NativeIteratorPrototype !== Op &&
	      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	    // This environment has a native %IteratorPrototype%; use it instead
	    // of the polyfill.
	    IteratorPrototype = NativeIteratorPrototype;
	  }
	
	  var Gp = GeneratorFunctionPrototype.prototype =
	    Generator.prototype = Object.create(IteratorPrototype);
	  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	  GeneratorFunctionPrototype.constructor = GeneratorFunction;
	  GeneratorFunctionPrototype[toStringTagSymbol] =
	    GeneratorFunction.displayName = "GeneratorFunction";
	
	  // Helper for defining the .next, .throw, and .return methods of the
	  // Iterator interface in terms of a single ._invoke method.
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function(method) {
	      prototype[method] = function(arg) {
	        return this._invoke(method, arg);
	      };
	    });
	  }
	
	  runtime.isGeneratorFunction = function(genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor
	      ? ctor === GeneratorFunction ||
	        // For the native GeneratorFunction constructor, the best we can
	        // do is to check its .name property.
	        (ctor.displayName || ctor.name) === "GeneratorFunction"
	      : false;
	  };
	
	  runtime.mark = function(genFun) {
	    if (Object.setPrototypeOf) {
	      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	    } else {
	      genFun.__proto__ = GeneratorFunctionPrototype;
	      if (!(toStringTagSymbol in genFun)) {
	        genFun[toStringTagSymbol] = "GeneratorFunction";
	      }
	    }
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };
	
	  // Within the body of any async function, `await x` is transformed to
	  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	  // `hasOwn.call(value, "__await")` to determine if the yielded value is
	  // meant to be awaited.
	  runtime.awrap = function(arg) {
	    return { __await: arg };
	  };
	
	  function AsyncIterator(generator) {
	    function invoke(method, arg, resolve, reject) {
	      var record = tryCatch(generator[method], generator, arg);
	      if (record.type === "throw") {
	        reject(record.arg);
	      } else {
	        var result = record.arg;
	        var value = result.value;
	        if (value &&
	            typeof value === "object" &&
	            hasOwn.call(value, "__await")) {
	          return Promise.resolve(value.__await).then(function(value) {
	            invoke("next", value, resolve, reject);
	          }, function(err) {
	            invoke("throw", err, resolve, reject);
	          });
	        }
	
	        return Promise.resolve(value).then(function(unwrapped) {
	          // When a yielded Promise is resolved, its final value becomes
	          // the .value of the Promise<{value,done}> result for the
	          // current iteration. If the Promise is rejected, however, the
	          // result for this iteration will be rejected with the same
	          // reason. Note that rejections of yielded Promises are not
	          // thrown back into the generator function, as is the case
	          // when an awaited Promise is rejected. This difference in
	          // behavior between yield and await is important, because it
	          // allows the consumer to decide what to do with the yielded
	          // rejection (swallow it and continue, manually .throw it back
	          // into the generator, abandon iteration, whatever). With
	          // await, by contrast, there is no opportunity to examine the
	          // rejection reason outside the generator function, so the
	          // only option is to throw it from the await expression, and
	          // let the generator function handle the exception.
	          result.value = unwrapped;
	          resolve(result);
	        }, reject);
	      }
	    }
	
	    var previousPromise;
	
	    function enqueue(method, arg) {
	      function callInvokeWithMethodAndArg() {
	        return new Promise(function(resolve, reject) {
	          invoke(method, arg, resolve, reject);
	        });
	      }
	
	      return previousPromise =
	        // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(
	          callInvokeWithMethodAndArg,
	          // Avoid propagating failures to Promises returned by later
	          // invocations of the iterator.
	          callInvokeWithMethodAndArg
	        ) : callInvokeWithMethodAndArg();
	    }
	
	    // Define the unified helper method that is used to implement .next,
	    // .throw, and .return (see defineIteratorMethods).
	    this._invoke = enqueue;
	  }
	
	  defineIteratorMethods(AsyncIterator.prototype);
	  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
	    return this;
	  };
	  runtime.AsyncIterator = AsyncIterator;
	
	  // Note that simple async functions are implemented on top of
	  // AsyncIterator objects; they just return a Promise for the value of
	  // the final result produced by the iterator.
	  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
	    var iter = new AsyncIterator(
	      wrap(innerFn, outerFn, self, tryLocsList)
	    );
	
	    return runtime.isGeneratorFunction(outerFn)
	      ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function(result) {
	          return result.done ? result.value : iter.next();
	        });
	  };
	
	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;
	
	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }
	
	      if (state === GenStateCompleted) {
	        if (method === "throw") {
	          throw arg;
	        }
	
	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }
	
	      context.method = method;
	      context.arg = arg;
	
	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          var delegateResult = maybeInvokeDelegate(delegate, context);
	          if (delegateResult) {
	            if (delegateResult === ContinueSentinel) continue;
	            return delegateResult;
	          }
	        }
	
	        if (context.method === "next") {
	          // Setting context._sent for legacy support of Babel's
	          // function.sent implementation.
	          context.sent = context._sent = context.arg;
	
	        } else if (context.method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw context.arg;
	          }
	
	          context.dispatchException(context.arg);
	
	        } else if (context.method === "return") {
	          context.abrupt("return", context.arg);
	        }
	
	        state = GenStateExecuting;
	
	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done
	            ? GenStateCompleted
	            : GenStateSuspendedYield;
	
	          if (record.arg === ContinueSentinel) {
	            continue;
	          }
	
	          return {
	            value: record.arg,
	            done: context.done
	          };
	
	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(context.arg) call above.
	          context.method = "throw";
	          context.arg = record.arg;
	        }
	      }
	    };
	  }
	
	  // Call delegate.iterator[context.method](context.arg) and handle the
	  // result, either by returning a { value, done } result from the
	  // delegate iterator, or by modifying context.method and context.arg,
	  // setting context.delegate to null, and returning the ContinueSentinel.
	  function maybeInvokeDelegate(delegate, context) {
	    var method = delegate.iterator[context.method];
	    if (method === undefined) {
	      // A .throw or .return when the delegate iterator has no .throw
	      // method always terminates the yield* loop.
	      context.delegate = null;
	
	      if (context.method === "throw") {
	        if (delegate.iterator.return) {
	          // If the delegate iterator has a return method, give it a
	          // chance to clean up.
	          context.method = "return";
	          context.arg = undefined;
	          maybeInvokeDelegate(delegate, context);
	
	          if (context.method === "throw") {
	            // If maybeInvokeDelegate(context) changed context.method from
	            // "return" to "throw", let that override the TypeError below.
	            return ContinueSentinel;
	          }
	        }
	
	        context.method = "throw";
	        context.arg = new TypeError(
	          "The iterator does not provide a 'throw' method");
	      }
	
	      return ContinueSentinel;
	    }
	
	    var record = tryCatch(method, delegate.iterator, context.arg);
	
	    if (record.type === "throw") {
	      context.method = "throw";
	      context.arg = record.arg;
	      context.delegate = null;
	      return ContinueSentinel;
	    }
	
	    var info = record.arg;
	
	    if (! info) {
	      context.method = "throw";
	      context.arg = new TypeError("iterator result is not an object");
	      context.delegate = null;
	      return ContinueSentinel;
	    }
	
	    if (info.done) {
	      // Assign the result of the finished delegate to the temporary
	      // variable specified by delegate.resultName (see delegateYield).
	      context[delegate.resultName] = info.value;
	
	      // Resume execution at the desired location (see delegateYield).
	      context.next = delegate.nextLoc;
	
	      // If context.method was "throw" but the delegate handled the
	      // exception, let the outer generator proceed normally. If
	      // context.method was "next", forget context.arg since it has been
	      // "consumed" by the delegate iterator. If context.method was
	      // "return", allow the original .return call to continue in the
	      // outer generator.
	      if (context.method !== "return") {
	        context.method = "next";
	        context.arg = undefined;
	      }
	
	    } else {
	      // Re-yield the result returned by the delegate method.
	      return info;
	    }
	
	    // The delegate iterator is finished, so forget it and continue with
	    // the outer generator.
	    context.delegate = null;
	    return ContinueSentinel;
	  }
	
	  // Define Generator.prototype.{next,throw,return} in terms of the
	  // unified ._invoke helper method.
	  defineIteratorMethods(Gp);
	
	  Gp[toStringTagSymbol] = "Generator";
	
	  // A Generator should always return itself as the iterator object when the
	  // @@iterator function is called on it. Some browsers' implementations of the
	  // iterator prototype chain incorrectly implement this, causing the Generator
	  // object to not be returned from this call. This ensures that doesn't happen.
	  // See https://github.com/facebook/regenerator/issues/274 for more details.
	  Gp[iteratorSymbol] = function() {
	    return this;
	  };
	
	  Gp.toString = function() {
	    return "[object Generator]";
	  };
	
	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };
	
	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }
	
	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }
	
	    this.tryEntries.push(entry);
	  }
	
	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }
	
	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset(true);
	  }
	
	  runtime.keys = function(object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();
	
	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }
	
	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };
	
	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }
	
	      if (typeof iterable.next === "function") {
	        return iterable;
	      }
	
	      if (!isNaN(iterable.length)) {
	        var i = -1, next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }
	
	          next.value = undefined;
	          next.done = true;
	
	          return next;
	        };
	
	        return next.next = next;
	      }
	    }
	
	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  runtime.values = values;
	
	  function doneResult() {
	    return { value: undefined, done: true };
	  }
	
	  Context.prototype = {
	    constructor: Context,
	
	    reset: function(skipTempReset) {
	      this.prev = 0;
	      this.next = 0;
	      // Resetting context._sent for legacy support of Babel's
	      // function.sent implementation.
	      this.sent = this._sent = undefined;
	      this.done = false;
	      this.delegate = null;
	
	      this.method = "next";
	      this.arg = undefined;
	
	      this.tryEntries.forEach(resetTryEntry);
	
	      if (!skipTempReset) {
	        for (var name in this) {
	          // Not sure about the optimal order of these conditions:
	          if (name.charAt(0) === "t" &&
	              hasOwn.call(this, name) &&
	              !isNaN(+name.slice(1))) {
	            this[name] = undefined;
	          }
	        }
	      }
	    },
	
	    stop: function() {
	      this.done = true;
	
	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }
	
	      return this.rval;
	    },
	
	    dispatchException: function(exception) {
	      if (this.done) {
	        throw exception;
	      }
	
	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;
	
	        if (caught) {
	          // If the dispatched exception was caught by a catch block,
	          // then let that catch block handle the exception normally.
	          context.method = "next";
	          context.arg = undefined;
	        }
	
	        return !! caught;
	      }
	
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;
	
	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }
	
	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");
	
	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }
	
	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }
	
	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }
	
	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },
	
	    abrupt: function(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev &&
	            hasOwn.call(entry, "finallyLoc") &&
	            this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }
	
	      if (finallyEntry &&
	          (type === "break" ||
	           type === "continue") &&
	          finallyEntry.tryLoc <= arg &&
	          arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }
	
	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;
	
	      if (finallyEntry) {
	        this.method = "next";
	        this.next = finallyEntry.finallyLoc;
	        return ContinueSentinel;
	      }
	
	      return this.complete(record);
	    },
	
	    complete: function(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }
	
	      if (record.type === "break" ||
	          record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = this.arg = record.arg;
	        this.method = "return";
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }
	
	      return ContinueSentinel;
	    },
	
	    finish: function(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },
	
	    "catch": function(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }
	
	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },
	
	    delegateYield: function(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };
	
	      if (this.method === "next") {
	        // Deliberately forget the last sent value so that we don't
	        // accidentally pass it on to the delegate.
	        this.arg = undefined;
	      }
	
	      return ContinueSentinel;
	    }
	  };
	})(
	  // In sloppy mode, unbound `this` refers to the global object, fallback to
	  // Function constructor if we're in global strict mode. That is sadly a form
	  // of indirect eval which violates Content Security Policy.
	  (function() { return this })() || Function("return this")()
	);


/***/ },
/* 662 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _promise = __webpack_require__(663);
	
	var _promise2 = _interopRequireDefault(_promise);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (fn) {
	  return function () {
	    var gen = fn.apply(this, arguments);
	    return new _promise2.default(function (resolve, reject) {
	      function step(key, arg) {
	        try {
	          var info = gen[key](arg);
	          var value = info.value;
	        } catch (error) {
	          reject(error);
	          return;
	        }
	
	        if (info.done) {
	          resolve(value);
	        } else {
	          return _promise2.default.resolve(value).then(function (value) {
	            step("next", value);
	          }, function (err) {
	            step("throw", err);
	          });
	        }
	      }
	
	      return step("next");
	    });
	  };
	};

/***/ },
/* 663 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(664), __esModule: true };

/***/ },
/* 664 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(398);
	__webpack_require__(337);
	__webpack_require__(381);
	__webpack_require__(665);
	__webpack_require__(682);
	__webpack_require__(683);
	module.exports = __webpack_require__(345).Promise;


/***/ },
/* 665 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY = __webpack_require__(342);
	var global = __webpack_require__(344);
	var ctx = __webpack_require__(346);
	var classof = __webpack_require__(666);
	var $export = __webpack_require__(343);
	var isObject = __webpack_require__(351);
	var aFunction = __webpack_require__(347);
	var anInstance = __webpack_require__(667);
	var forOf = __webpack_require__(668);
	var speciesConstructor = __webpack_require__(672);
	var task = __webpack_require__(673).set;
	var microtask = __webpack_require__(675)();
	var newPromiseCapabilityModule = __webpack_require__(676);
	var perform = __webpack_require__(677);
	var promiseResolve = __webpack_require__(678);
	var PROMISE = 'Promise';
	var TypeError = global.TypeError;
	var process = global.process;
	var $Promise = global[PROMISE];
	var isNode = classof(process) == 'process';
	var empty = function () { /* empty */ };
	var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
	var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;
	
	var USE_NATIVE = !!function () {
	  try {
	    // correct subclassing with @@species support
	    var promise = $Promise.resolve(1);
	    var FakePromise = (promise.constructor = {})[__webpack_require__(378)('species')] = function (exec) {
	      exec(empty, empty);
	    };
	    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
	  } catch (e) { /* empty */ }
	}();
	
	// helpers
	var isThenable = function (it) {
	  var then;
	  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};
	var notify = function (promise, isReject) {
	  if (promise._n) return;
	  promise._n = true;
	  var chain = promise._c;
	  microtask(function () {
	    var value = promise._v;
	    var ok = promise._s == 1;
	    var i = 0;
	    var run = function (reaction) {
	      var handler = ok ? reaction.ok : reaction.fail;
	      var resolve = reaction.resolve;
	      var reject = reaction.reject;
	      var domain = reaction.domain;
	      var result, then, exited;
	      try {
	        if (handler) {
	          if (!ok) {
	            if (promise._h == 2) onHandleUnhandled(promise);
	            promise._h = 1;
	          }
	          if (handler === true) result = value;
	          else {
	            if (domain) domain.enter();
	            result = handler(value); // may throw
	            if (domain) {
	              domain.exit();
	              exited = true;
	            }
	          }
	          if (result === reaction.promise) {
	            reject(TypeError('Promise-chain cycle'));
	          } else if (then = isThenable(result)) {
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch (e) {
	        if (domain && !exited) domain.exit();
	        reject(e);
	      }
	    };
	    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
	    promise._c = [];
	    promise._n = false;
	    if (isReject && !promise._h) onUnhandled(promise);
	  });
	};
	var onUnhandled = function (promise) {
	  task.call(global, function () {
	    var value = promise._v;
	    var unhandled = isUnhandled(promise);
	    var result, handler, console;
	    if (unhandled) {
	      result = perform(function () {
	        if (isNode) {
	          process.emit('unhandledRejection', value, promise);
	        } else if (handler = global.onunhandledrejection) {
	          handler({ promise: promise, reason: value });
	        } else if ((console = global.console) && console.error) {
	          console.error('Unhandled promise rejection', value);
	        }
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
	    } promise._a = undefined;
	    if (unhandled && result.e) throw result.v;
	  });
	};
	var isUnhandled = function (promise) {
	  return promise._h !== 1 && (promise._a || promise._c).length === 0;
	};
	var onHandleUnhandled = function (promise) {
	  task.call(global, function () {
	    var handler;
	    if (isNode) {
	      process.emit('rejectionHandled', promise);
	    } else if (handler = global.onrejectionhandled) {
	      handler({ promise: promise, reason: promise._v });
	    }
	  });
	};
	var $reject = function (value) {
	  var promise = this;
	  if (promise._d) return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  promise._v = value;
	  promise._s = 2;
	  if (!promise._a) promise._a = promise._c.slice();
	  notify(promise, true);
	};
	var $resolve = function (value) {
	  var promise = this;
	  var then;
	  if (promise._d) return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  try {
	    if (promise === value) throw TypeError("Promise can't be resolved itself");
	    if (then = isThenable(value)) {
	      microtask(function () {
	        var wrapper = { _w: promise, _d: false }; // wrap
	        try {
	          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
	        } catch (e) {
	          $reject.call(wrapper, e);
	        }
	      });
	    } else {
	      promise._v = value;
	      promise._s = 1;
	      notify(promise, false);
	    }
	  } catch (e) {
	    $reject.call({ _w: promise, _d: false }, e); // wrap
	  }
	};
	
	// constructor polyfill
	if (!USE_NATIVE) {
	  // 25.4.3.1 Promise(executor)
	  $Promise = function Promise(executor) {
	    anInstance(this, $Promise, PROMISE, '_h');
	    aFunction(executor);
	    Internal.call(this);
	    try {
	      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
	    } catch (err) {
	      $reject.call(this, err);
	    }
	  };
	  // eslint-disable-next-line no-unused-vars
	  Internal = function Promise(executor) {
	    this._c = [];             // <- awaiting reactions
	    this._a = undefined;      // <- checked in isUnhandled reactions
	    this._s = 0;              // <- state
	    this._d = false;          // <- done
	    this._v = undefined;      // <- value
	    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
	    this._n = false;          // <- notify
	  };
	  Internal.prototype = __webpack_require__(679)($Promise.prototype, {
	    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
	    then: function then(onFulfilled, onRejected) {
	      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
	      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail = typeof onRejected == 'function' && onRejected;
	      reaction.domain = isNode ? process.domain : undefined;
	      this._c.push(reaction);
	      if (this._a) this._a.push(reaction);
	      if (this._s) notify(this, false);
	      return reaction.promise;
	    },
	    // 25.4.5.1 Promise.prototype.catch(onRejected)
	    'catch': function (onRejected) {
	      return this.then(undefined, onRejected);
	    }
	  });
	  OwnPromiseCapability = function () {
	    var promise = new Internal();
	    this.promise = promise;
	    this.resolve = ctx($resolve, promise, 1);
	    this.reject = ctx($reject, promise, 1);
	  };
	  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
	    return C === $Promise || C === Wrapper
	      ? new OwnPromiseCapability(C)
	      : newGenericPromiseCapability(C);
	  };
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
	__webpack_require__(377)($Promise, PROMISE);
	__webpack_require__(680)(PROMISE);
	Wrapper = __webpack_require__(345)[PROMISE];
	
	// statics
	$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
	  // 25.4.4.5 Promise.reject(r)
	  reject: function reject(r) {
	    var capability = newPromiseCapability(this);
	    var $$reject = capability.reject;
	    $$reject(r);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
	  // 25.4.4.6 Promise.resolve(x)
	  resolve: function resolve(x) {
	    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
	  }
	});
	$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(681)(function (iter) {
	  $Promise.all(iter)['catch'](empty);
	})), PROMISE, {
	  // 25.4.4.1 Promise.all(iterable)
	  all: function all(iterable) {
	    var C = this;
	    var capability = newPromiseCapability(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = perform(function () {
	      var values = [];
	      var index = 0;
	      var remaining = 1;
	      forOf(iterable, false, function (promise) {
	        var $index = index++;
	        var alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        C.resolve(promise).then(function (value) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[$index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if (result.e) reject(result.v);
	    return capability.promise;
	  },
	  // 25.4.4.4 Promise.race(iterable)
	  race: function race(iterable) {
	    var C = this;
	    var capability = newPromiseCapability(C);
	    var reject = capability.reject;
	    var result = perform(function () {
	      forOf(iterable, false, function (promise) {
	        C.resolve(promise).then(capability.resolve, reject);
	      });
	    });
	    if (result.e) reject(result.v);
	    return capability.promise;
	  }
	});


/***/ },
/* 666 */
/***/ function(module, exports, __webpack_require__) {

	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(368);
	var TAG = __webpack_require__(378)('toStringTag');
	// ES3 wrong here
	var ARG = cof(function () { return arguments; }()) == 'Arguments';
	
	// fallback for IE11 Script Access Denied error
	var tryGet = function (it, key) {
	  try {
	    return it[key];
	  } catch (e) { /* empty */ }
	};
	
	module.exports = function (it) {
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};


/***/ },
/* 667 */
/***/ function(module, exports) {

	module.exports = function (it, Constructor, name, forbiddenField) {
	  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
	    throw TypeError(name + ': incorrect invocation!');
	  } return it;
	};


/***/ },
/* 668 */
/***/ function(module, exports, __webpack_require__) {

	var ctx = __webpack_require__(346);
	var call = __webpack_require__(669);
	var isArrayIter = __webpack_require__(670);
	var anObject = __webpack_require__(350);
	var toLength = __webpack_require__(370);
	var getIterFn = __webpack_require__(671);
	var BREAK = {};
	var RETURN = {};
	var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
	  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
	  var f = ctx(fn, that, entries ? 2 : 1);
	  var index = 0;
	  var length, step, iterator, result;
	  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
	  // fast case for arrays with default iterator
	  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
	    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	    if (result === BREAK || result === RETURN) return result;
	  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
	    result = call(iterator, f, step.value, entries);
	    if (result === BREAK || result === RETURN) return result;
	  }
	};
	exports.BREAK = BREAK;
	exports.RETURN = RETURN;


/***/ },
/* 669 */
/***/ function(module, exports, __webpack_require__) {

	// call something on iterator step with safe closing on error
	var anObject = __webpack_require__(350);
	module.exports = function (iterator, fn, value, entries) {
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch (e) {
	    var ret = iterator['return'];
	    if (ret !== undefined) anObject(ret.call(iterator));
	    throw e;
	  }
	};


/***/ },
/* 670 */
/***/ function(module, exports, __webpack_require__) {

	// check on default Array iterator
	var Iterators = __webpack_require__(360);
	var ITERATOR = __webpack_require__(378)('iterator');
	var ArrayProto = Array.prototype;
	
	module.exports = function (it) {
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};


/***/ },
/* 671 */
/***/ function(module, exports, __webpack_require__) {

	var classof = __webpack_require__(666);
	var ITERATOR = __webpack_require__(378)('iterator');
	var Iterators = __webpack_require__(360);
	module.exports = __webpack_require__(345).getIteratorMethod = function (it) {
	  if (it != undefined) return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};


/***/ },
/* 672 */
/***/ function(module, exports, __webpack_require__) {

	// 7.3.20 SpeciesConstructor(O, defaultConstructor)
	var anObject = __webpack_require__(350);
	var aFunction = __webpack_require__(347);
	var SPECIES = __webpack_require__(378)('species');
	module.exports = function (O, D) {
	  var C = anObject(O).constructor;
	  var S;
	  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
	};


/***/ },
/* 673 */
/***/ function(module, exports, __webpack_require__) {

	var ctx = __webpack_require__(346);
	var invoke = __webpack_require__(674);
	var html = __webpack_require__(376);
	var cel = __webpack_require__(355);
	var global = __webpack_require__(344);
	var process = global.process;
	var setTask = global.setImmediate;
	var clearTask = global.clearImmediate;
	var MessageChannel = global.MessageChannel;
	var Dispatch = global.Dispatch;
	var counter = 0;
	var queue = {};
	var ONREADYSTATECHANGE = 'onreadystatechange';
	var defer, channel, port;
	var run = function () {
	  var id = +this;
	  // eslint-disable-next-line no-prototype-builtins
	  if (queue.hasOwnProperty(id)) {
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};
	var listener = function (event) {
	  run.call(event.data);
	};
	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if (!setTask || !clearTask) {
	  setTask = function setImmediate(fn) {
	    var args = [];
	    var i = 1;
	    while (arguments.length > i) args.push(arguments[i++]);
	    queue[++counter] = function () {
	      // eslint-disable-next-line no-new-func
	      invoke(typeof fn == 'function' ? fn : Function(fn), args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clearTask = function clearImmediate(id) {
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if (__webpack_require__(368)(process) == 'process') {
	    defer = function (id) {
	      process.nextTick(ctx(run, id, 1));
	    };
	  // Sphere (JS game engine) Dispatch API
	  } else if (Dispatch && Dispatch.now) {
	    defer = function (id) {
	      Dispatch.now(ctx(run, id, 1));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  } else if (MessageChannel) {
	    channel = new MessageChannel();
	    port = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = ctx(port.postMessage, port, 1);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
	    defer = function (id) {
	      global.postMessage(id + '', '*');
	    };
	    global.addEventListener('message', listener, false);
	  // IE8-
	  } else if (ONREADYSTATECHANGE in cel('script')) {
	    defer = function (id) {
	      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
	        html.removeChild(this);
	        run.call(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function (id) {
	      setTimeout(ctx(run, id, 1), 0);
	    };
	  }
	}
	module.exports = {
	  set: setTask,
	  clear: clearTask
	};


/***/ },
/* 674 */
/***/ function(module, exports) {

	// fast apply, http://jsperf.lnkit.com/fast-apply/5
	module.exports = function (fn, args, that) {
	  var un = that === undefined;
	  switch (args.length) {
	    case 0: return un ? fn()
	                      : fn.call(that);
	    case 1: return un ? fn(args[0])
	                      : fn.call(that, args[0]);
	    case 2: return un ? fn(args[0], args[1])
	                      : fn.call(that, args[0], args[1]);
	    case 3: return un ? fn(args[0], args[1], args[2])
	                      : fn.call(that, args[0], args[1], args[2]);
	    case 4: return un ? fn(args[0], args[1], args[2], args[3])
	                      : fn.call(that, args[0], args[1], args[2], args[3]);
	  } return fn.apply(that, args);
	};


/***/ },
/* 675 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(344);
	var macrotask = __webpack_require__(673).set;
	var Observer = global.MutationObserver || global.WebKitMutationObserver;
	var process = global.process;
	var Promise = global.Promise;
	var isNode = __webpack_require__(368)(process) == 'process';
	
	module.exports = function () {
	  var head, last, notify;
	
	  var flush = function () {
	    var parent, fn;
	    if (isNode && (parent = process.domain)) parent.exit();
	    while (head) {
	      fn = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch (e) {
	        if (head) notify();
	        else last = undefined;
	        throw e;
	      }
	    } last = undefined;
	    if (parent) parent.enter();
	  };
	
	  // Node.js
	  if (isNode) {
	    notify = function () {
	      process.nextTick(flush);
	    };
	  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
	  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
	    var toggle = true;
	    var node = document.createTextNode('');
	    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
	    notify = function () {
	      node.data = toggle = !toggle;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if (Promise && Promise.resolve) {
	    var promise = Promise.resolve();
	    notify = function () {
	      promise.then(flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessag
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    notify = function () {
	      // strange IE + webpack dev server bug - use .call(global)
	      macrotask.call(global, flush);
	    };
	  }
	
	  return function (fn) {
	    var task = { fn: fn, next: undefined };
	    if (last) last.next = task;
	    if (!head) {
	      head = task;
	      notify();
	    } last = task;
	  };
	};


/***/ },
/* 676 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 25.4.1.5 NewPromiseCapability(C)
	var aFunction = __webpack_require__(347);
	
	function PromiseCapability(C) {
	  var resolve, reject;
	  this.promise = new C(function ($$resolve, $$reject) {
	    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject = $$reject;
	  });
	  this.resolve = aFunction(resolve);
	  this.reject = aFunction(reject);
	}
	
	module.exports.f = function (C) {
	  return new PromiseCapability(C);
	};


/***/ },
/* 677 */
/***/ function(module, exports) {

	module.exports = function (exec) {
	  try {
	    return { e: false, v: exec() };
	  } catch (e) {
	    return { e: true, v: e };
	  }
	};


/***/ },
/* 678 */
/***/ function(module, exports, __webpack_require__) {

	var anObject = __webpack_require__(350);
	var isObject = __webpack_require__(351);
	var newPromiseCapability = __webpack_require__(676);
	
	module.exports = function (C, x) {
	  anObject(C);
	  if (isObject(x) && x.constructor === C) return x;
	  var promiseCapability = newPromiseCapability.f(C);
	  var resolve = promiseCapability.resolve;
	  resolve(x);
	  return promiseCapability.promise;
	};


/***/ },
/* 679 */
/***/ function(module, exports, __webpack_require__) {

	var hide = __webpack_require__(348);
	module.exports = function (target, src, safe) {
	  for (var key in src) {
	    if (safe && target[key]) target[key] = src[key];
	    else hide(target, key, src[key]);
	  } return target;
	};


/***/ },
/* 680 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global = __webpack_require__(344);
	var core = __webpack_require__(345);
	var dP = __webpack_require__(349);
	var DESCRIPTORS = __webpack_require__(353);
	var SPECIES = __webpack_require__(378)('species');
	
	module.exports = function (KEY) {
	  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
	  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
	    configurable: true,
	    get: function () { return this; }
	  });
	};


/***/ },
/* 681 */
/***/ function(module, exports, __webpack_require__) {

	var ITERATOR = __webpack_require__(378)('iterator');
	var SAFE_CLOSING = false;
	
	try {
	  var riter = [7][ITERATOR]();
	  riter['return'] = function () { SAFE_CLOSING = true; };
	  // eslint-disable-next-line no-throw-literal
	  Array.from(riter, function () { throw 2; });
	} catch (e) { /* empty */ }
	
	module.exports = function (exec, skipClosing) {
	  if (!skipClosing && !SAFE_CLOSING) return false;
	  var safe = false;
	  try {
	    var arr = [7];
	    var iter = arr[ITERATOR]();
	    iter.next = function () { return { done: safe = true }; };
	    arr[ITERATOR] = function () { return iter; };
	    exec(arr);
	  } catch (e) { /* empty */ }
	  return safe;
	};


/***/ },
/* 682 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-promise-finally
	'use strict';
	var $export = __webpack_require__(343);
	var core = __webpack_require__(345);
	var global = __webpack_require__(344);
	var speciesConstructor = __webpack_require__(672);
	var promiseResolve = __webpack_require__(678);
	
	$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
	  var C = speciesConstructor(this, core.Promise || global.Promise);
	  var isFunction = typeof onFinally == 'function';
	  return this.then(
	    isFunction ? function (x) {
	      return promiseResolve(C, onFinally()).then(function () { return x; });
	    } : onFinally,
	    isFunction ? function (e) {
	      return promiseResolve(C, onFinally()).then(function () { throw e; });
	    } : onFinally
	  );
	} });


/***/ },
/* 683 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/tc39/proposal-promise-try
	var $export = __webpack_require__(343);
	var newPromiseCapability = __webpack_require__(676);
	var perform = __webpack_require__(677);
	
	$export($export.S, 'Promise', { 'try': function (callbackfn) {
	  var promiseCapability = newPromiseCapability.f(this);
	  var result = perform(callbackfn);
	  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
	  return promiseCapability.promise;
	} });


/***/ },
/* 684 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(409), __webpack_require__(685), __webpack_require__(413), __webpack_require__(616)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Q, Factor, BrowserFeatures, Errors) {
	
	  // Keep track of stateMachine with this special model. Some reasons to not
	  // keep it generic:
	  // 1. We know exactly what we're using appState for by requiring props
	  // 2. Can have some derived functions to help us translate the lastAuthRes
	
	  var _ = Okta._;
	  var $ = Okta.$;
	  var compile = Okta.Handlebars.compile;
	
	  var DEFAULT_APP_LOGO = '/img/logos/default.png';
	  var USER_NOT_SEEN_ON_DEVICE = '/img/security/unknown.png';
	  var UNDEFINED_USER = '/img/security/default.png';
	  var NEW_USER = '/img/security/unknown-device.png';
	  var NEW_USER_IMAGE_DESCRIPTION = '';
	  var UNDEFINED_USER_IMAGE_DESCRIPTION = '';
	  var UNKNOWN_IMAGE_DESCRIPTION = '';
	
	  var securityImageUrlTpl = compile('{{baseUrl}}/login/getimage?username={{username}}');
	
	  function getSecurityImage(baseUrl, username, deviceFingerprint) {
	    var url = securityImageUrlTpl({ baseUrl: baseUrl, username: username });
	
	    // When the username is empty, we want to show the default image.
	    if (_.isEmpty(username) || _.isUndefined(username)) {
	      return Q({
	        'securityImage': UNDEFINED_USER,
	        'securityImageDescription': UNDEFINED_USER_IMAGE_DESCRIPTION
	      });
	    }
	
	    var data = {
	      url: url,
	      dataType: 'json'
	    };
	    if (deviceFingerprint) {
	      data['headers'] = { 'X-Device-Fingerprint': deviceFingerprint };
	    }
	    return Q($.ajax(data)).then(function (res) {
	      if (res.pwdImg === USER_NOT_SEEN_ON_DEVICE) {
	        // When we get an unknown.png security image from OKTA,
	        // we want to show the unknown-device security image.
	        // We are mapping the server's img url to a new one because
	        // we still need to support the original login page.
	        return {
	          'securityImage': NEW_USER,
	          'securityImageDescription': NEW_USER_IMAGE_DESCRIPTION
	        };
	      }
	      return {
	        'securityImage': res.pwdImg,
	        'securityImageDescription': res.imageDescription || UNKNOWN_IMAGE_DESCRIPTION
	      };
	    });
	  }
	
	  function getMinutesString(factorLifetimeInMinutes) {
	    if (factorLifetimeInMinutes > 60 && factorLifetimeInMinutes <= 1440) {
	      var lifetimeInHours = factorLifetimeInMinutes / 60;
	      return Okta.loc('hours', 'login', [lifetimeInHours]);
	    } else if (factorLifetimeInMinutes > 1440) {
	      var lifetimeInDays = factorLifetimeInMinutes / 1440;
	      return Okta.loc('days', 'login', [lifetimeInDays]);
	    }
	    //Use minutes as the time unit by default
	    if (factorLifetimeInMinutes === 1) {
	      return Okta.loc('minutes.oneMinute', 'login');
	    }
	    return Okta.loc('minutes', 'login', [factorLifetimeInMinutes]);
	  }
	
	  return Okta.Model.extend({
	
	    initialize: function initialize() {
	      // Handle this in initialize (as opposed to a derived property) because
	      // the operation is asynchronous
	      if (this.settings.get('features.securityImage')) {
	        var self = this;
	        this.listenTo(this, 'change:username', function (model, username) {
	          getSecurityImage(this.get('baseUrl'), username, this.get('deviceFingerprint')).then(function (image) {
	            model.set('securityImage', image.securityImage);
	            model.set('securityImageDescription', image.securityImageDescription);
	            model.unset('deviceFingerprint'); //Fingerprint can only be used once
	          }).fail(function (jqXhr) {
	            // Only notify the consumer on a CORS error
	            if (BrowserFeatures.corsIsNotEnabled(jqXhr)) {
	              self.settings.callGlobalError(new Errors.UnsupportedBrowserError(Okta.loc('error.enabled.cors')));
	            } else {
	              throw jqXhr;
	            }
	          }).done();
	        });
	      }
	    },
	
	    local: {
	      baseUrl: 'string',
	      lastAuthResponse: ['object', true, {}],
	      transaction: 'object',
	      transactionError: 'object',
	      username: 'string',
	      factors: 'object',
	      policy: 'object',
	      securityImage: ['string', true, UNDEFINED_USER],
	      securityImageDescription: ['string', true, UNDEFINED_USER_IMAGE_DESCRIPTION],
	      userCountryCode: 'string',
	      userPhoneNumber: 'string',
	      factorActivationType: 'string',
	      flashError: 'object',
	      beaconType: 'string',
	      deviceFingerprint: 'string', // valid only once
	      typingPattern: 'string',
	      // Note: languageCode is special in that it is shared between Settings
	      // and AppState. Settings is the *configured* language, and is static.
	      // AppState is the dynamic language state - it can be changed via a
	      // language picker, etc.
	      languageCode: ['string', true],
	      disableUsername: ['boolean', false, false],
	      trapMfaRequiredResponse: ['boolean', false, false]
	    },
	
	    setAuthResponse: function setAuthResponse(res) {
	      // Because of MFA_CHALLENGE (i.e. DUO), we need to remember factors
	      // across auth responses. Not doing this, for example, results in being
	      // unable to switch away from the duo factor dropdown.
	      var self = this;
	      if (res._embedded && res._embedded.policy) {
	        this.set('policy', res._embedded.policy);
	      }
	      if (res._embedded && res._embedded.factors) {
	        var settings = this.settings;
	        var factors = _.map(res._embedded.factors, function (factor) {
	          factor.settings = settings;
	          factor.appState = self;
	          return factor;
	        });
	        this.set('factors', new Factor.Collection(factors, { parse: true }));
	      }
	      this.set('lastAuthResponse', res);
	    },
	
	    derived: {
	      'isSuccessResponse': {
	        deps: ['lastAuthResponse'],
	        fn: function fn(res) {
	          return res.status === 'SUCCESS';
	        }
	      },
	      'isMfaRequired': {
	        deps: ['lastAuthResponse'],
	        fn: function fn(res) {
	          return res.status === 'MFA_REQUIRED';
	        }
	      },
	      'isMfaEnroll': {
	        deps: ['lastAuthResponse'],
	        fn: function fn(res) {
	          return res.status === 'MFA_ENROLL';
	        }
	      },
	      'isMfaChallenge': {
	        deps: ['lastAuthResponse'],
	        fn: function fn(res) {
	          return res.status === 'MFA_CHALLENGE';
	        }
	      },
	      'isUnauthenticated': {
	        deps: ['lastAuthResponse'],
	        fn: function fn(res) {
	          return res.status === 'UNAUTHENTICATED';
	        }
	      },
	      'isMfaRejectedByUser': {
	        // MFA failures are usually error responses
	        // except in the case of Okta Push, when a
	        // user clicks 'deny' on his phone.
	        deps: ['lastAuthResponse'],
	        fn: function fn(res) {
	          return res.factorResult === 'REJECTED';
	        }
	      },
	      'isMfaTimeout': {
	        deps: ['lastAuthResponse'],
	        fn: function fn(res) {
	          return res.factorResult === 'TIMEOUT';
	        }
	      },
	      'isMfaEnrollActivate': {
	        deps: ['lastAuthResponse'],
	        fn: function fn(res) {
	          return res.status === 'MFA_ENROLL_ACTIVATE';
	        }
	      },
	      'isWaitingForActivation': {
	        deps: ['isMfaEnrollActivate', 'lastAuthResponse'],
	        fn: function fn(isMfaEnrollActivate, res) {
	          return isMfaEnrollActivate && res.factorResult === 'WAITING';
	        }
	      },
	      'hasMultipleFactorsAvailable': {
	        deps: ['lastAuthResponse', 'factors'],
	        fn: function fn(res, factors) {
	          if (res.status !== 'MFA_REQUIRED' && res.status !== 'MFA_CHALLENGE' && res.status !== 'UNAUTHENTICATED') {
	            return false;
	          }
	          return factors && factors.length > 1;
	        }
	      },
	      'promptForFactorInUnauthenticated': {
	        deps: ['lastAuthResponse', 'factors'],
	        fn: function fn(res, factors) {
	          if (res.status !== 'UNAUTHENTICATED') {
	            return false;
	          }
	          return factors && factors.length > 0;
	        }
	      },
	      'userId': {
	        deps: ['lastAuthResponse'],
	        fn: function fn(res) {
	          if (!res._embedded || !res._embedded.user) {
	            return null;
	          }
	          return res._embedded.user.id;
	        }
	      },
	      'isPwdExpiringSoon': {
	        deps: ['lastAuthResponse'],
	        fn: function fn(res) {
	          return res.status === 'PASSWORD_WARN';
	        }
	      },
	      'passwordExpireDays': {
	        deps: ['lastAuthResponse'],
	        fn: function fn(res) {
	          if (!res._embedded || !res._embedded.policy || !res._embedded.policy.expiration) {
	            return null;
	          }
	          return res._embedded.policy.expiration.passwordExpireDays;
	        }
	      },
	      'isPwdManagedByOkta': {
	        deps: ['lastAuthResponse'],
	        fn: function fn(res) {
	          if (!res._links || !res._links.next || !res._links.next.title) {
	            return true;
	          }
	          return false;
	        }
	      },
	      'passwordExpiredWebsiteName': {
	        deps: ['lastAuthResponse'],
	        fn: function fn(res) {
	          if (!res._links || !res._links.next || !res._links.next.title) {
	            return null;
	          }
	          return res._links.next.title;
	        }
	      },
	      'passwordExpiredLinkUrl': {
	        deps: ['lastAuthResponse'],
	        fn: function fn(res) {
	          if (!res._links || !res._links.next || !res._links.next.title || !res._links.next.href) {
	            return null;
	          }
	          return res._links.next.href;
	        }
	      },
	      'recoveryType': {
	        deps: ['lastAuthResponse'],
	        fn: function fn(res) {
	          return res.recoveryType;
	        }
	      },
	      'factorType': {
	        deps: ['lastAuthResponse'],
	        fn: function fn(res) {
	          return res.factorType;
	        }
	      },
	      'factor': {
	        deps: ['lastAuthResponse'],
	        fn: function fn(res) {
	          if (!res._embedded || !res._embedded.factor) {
	            return null;
	          }
	          return res._embedded.factor;
	        }
	      },
	      'activatedFactorId': {
	        deps: ['factor'],
	        fn: function fn(factor) {
	          return factor ? factor.id : null;
	        }
	      },
	      'activatedFactorType': {
	        deps: ['factor'],
	        fn: function fn(factor) {
	          return factor ? factor.factorType : null;
	        }
	      },
	      'activatedFactorProvider': {
	        deps: ['factor'],
	        fn: function fn(factor) {
	          return factor ? factor.provider : null;
	        }
	      },
	      'qrcode': {
	        deps: ['factor'],
	        fn: function fn(factor) {
	          try {
	            return factor._embedded.activation._links.qrcode.href;
	          } catch (err) {
	            return null;
	          }
	        }
	      },
	      'activationSendLinks': {
	        deps: ['factor'],
	        fn: function fn(factor) {
	          var sendLinks;
	          try {
	            sendLinks = factor._embedded.activation._links.send;
	          } catch (err) {
	            sendLinks = [];
	          }
	          return sendLinks;
	        }
	      },
	      'textActivationLinkUrl': {
	        deps: ['activationSendLinks'],
	        fn: function fn(activationSendLinks) {
	          var item = _.findWhere(activationSendLinks, { name: 'sms' });
	          return item ? item.href : null;
	        }
	      },
	      'emailActivationLinkUrl': {
	        deps: ['activationSendLinks'],
	        fn: function fn(activationSendLinks) {
	          var item = _.findWhere(activationSendLinks, { name: 'email' });
	          return item ? item.href : null;
	        }
	      },
	      'sharedSecret': {
	        deps: ['factor'],
	        fn: function fn(factor) {
	          try {
	            return factor._embedded.activation.sharedSecret;
	          } catch (err) {
	            return null;
	          }
	        }
	      },
	      'duoEnrollActivation': {
	        deps: ['factor'],
	        fn: function fn(factor) {
	          if (!factor || !factor._embedded || !factor._embedded.activation) {
	            return null;
	          }
	          return factor._embedded.activation;
	        }
	      },
	      'prevLink': {
	        deps: ['lastAuthResponse'],
	        fn: function fn(res) {
	          if (res._links && res._links.prev) {
	            return res._links.prev.href;
	          }
	          return null;
	        }
	      },
	      'user': {
	        deps: ['lastAuthResponse'],
	        fn: function fn(res) {
	          if (!res._embedded || !res._embedded.user) {
	            return null;
	          }
	          return res._embedded.user;
	        }
	      },
	      'recoveryQuestion': {
	        deps: ['user'],
	        fn: function fn(user) {
	          if (!user || !user.recovery_question) {
	            return null;
	          }
	          return user.recovery_question.question;
	        }
	      },
	      'userProfile': {
	        deps: ['user'],
	        fn: function fn(user) {
	          if (!user || !user.profile) {
	            return null;
	          }
	          return user.profile;
	        }
	      },
	      'userConsentName': {
	        deps: ['userProfile', 'username'],
	        fn: function fn(userProfile, username) {
	          if (!userProfile || _.isEmpty(userProfile.firstName)) {
	            return username;
	          }
	          if (_.isEmpty(userProfile.lastName)) {
	            return userProfile.firstName;
	          }
	          return userProfile.firstName + ' ' + userProfile.lastName.charAt(0) + '.';
	        }
	      },
	      'userEmail': {
	        deps: ['userProfile'],
	        fn: function fn(userProfile) {
	          if (!userProfile || !userProfile.login) {
	            return null;
	          }
	          return userProfile.login;
	        }
	      },
	      'userFullName': {
	        deps: ['userProfile'],
	        fn: function fn(userProfile) {
	          if (!userProfile || !userProfile.firstName && !userProfile.lastName) {
	            return '';
	          }
	          return userProfile.firstName + ' ' + userProfile.lastName;
	        }
	      },
	      'defaultAppLogo': {
	        deps: ['baseUrl'],
	        fn: function fn(baseUrl) {
	          return baseUrl + DEFAULT_APP_LOGO;
	        }
	      },
	      'expiresAt': {
	        deps: ['lastAuthResponse'],
	        fn: function fn(res) {
	          return res.expiresAt;
	        }
	      },
	      'target': {
	        deps: ['lastAuthResponse'],
	        fn: function fn(res) {
	          if (!res._embedded) {
	            return null;
	          }
	          return res._embedded.target;
	        }
	      },
	      'targetLabel': {
	        deps: ['target'],
	        fn: function fn(target) {
	          if (!target) {
	            return null;
	          }
	          return target.label;
	        }
	      },
	      'targetLogo': {
	        deps: ['target'],
	        fn: function fn(target) {
	          if (!target || !target._links) {
	            return null;
	          }
	          return target._links.logo;
	        }
	      },
	      'targetTermsOfService': {
	        deps: ['target'],
	        fn: function fn(target) {
	          if (!target || !target._links) {
	            return null;
	          }
	          return target._links['terms-of-service'];
	        }
	      },
	      'targetPrivacyPolicy': {
	        deps: ['target'],
	        fn: function fn(target) {
	          if (!target || !target._links) {
	            return null;
	          }
	          return target._links['privacy-policy'];
	        }
	      },
	      'targetClientURI': {
	        deps: ['target'],
	        fn: function fn(target) {
	          if (!target || !target._links) {
	            return null;
	          }
	          return target._links['client-uri'];
	        }
	      },
	      'scopes': {
	        deps: ['lastAuthResponse'],
	        fn: function fn(res) {
	          if (!res._embedded) {
	            return null;
	          }
	          return res._embedded.scopes;
	        }
	      },
	      'hasExistingPhones': {
	        deps: ['lastAuthResponse'],
	        fn: function fn(res) {
	          if (!res._embedded || !res._embedded.factors) {
	            return false;
	          }
	          var factors = res._embedded.factors;
	          var factor = _.findWhere(factors, { factorType: 'sms', provider: 'OKTA' });
	          if (!factor || !factor._embedded) {
	            return false;
	          }
	
	          return !!factor._embedded.phones.length;
	        }
	      },
	      'hasExistingPhonesForCall': {
	        deps: ['lastAuthResponse'],
	        fn: function fn(res) {
	          if (!res._embedded || !res._embedded.factors) {
	            return false;
	          }
	          var factors = res._embedded.factors;
	          var factor = _.findWhere(factors, { factorType: 'call', provider: 'OKTA' });
	          if (!factor || !factor._embedded) {
	            return false;
	          }
	
	          return !!factor._embedded.phones.length;
	        }
	      },
	      'isUndefinedUser': {
	        deps: ['securityImage'],
	        fn: function fn(securityImage) {
	          return securityImage === UNDEFINED_USER;
	        }
	      },
	      'isNewUser': {
	        deps: ['securityImage'],
	        fn: function fn(securityImage) {
	          return securityImage === NEW_USER;
	        }
	      },
	      'allowRememberDevice': {
	        deps: ['policy'],
	        fn: function fn(policy) {
	          return policy && policy.allowRememberDevice;
	        }
	      },
	      'rememberDeviceLabel': {
	        deps: ['policy'],
	        fn: function fn(policy) {
	          if (policy && policy.rememberDeviceLifetimeInMinutes > 0) {
	            var timeString = getMinutesString(policy.rememberDeviceLifetimeInMinutes);
	            return Okta.loc('rememberDevice.timebased', 'login', [timeString]);
	          } else if (policy && policy.rememberDeviceLifetimeInMinutes === 0) {
	            return Okta.loc('rememberDevice.devicebased', 'login');
	          }
	          return Okta.loc('rememberDevice', 'login');
	        }
	      },
	      'rememberDeviceByDefault': {
	        deps: ['policy'],
	        fn: function fn(policy) {
	          return policy && policy.rememberDeviceByDefault;
	        }
	      },
	      'factorsPolicyInfo': {
	        deps: ['policy'],
	        fn: function fn(policy) {
	          return policy && policy.factorsPolicyInfo ? policy.factorsPolicyInfo : null;
	        }
	      },
	      'verifyCustomFactorRedirectUrl': {
	        deps: ['lastAuthResponse'],
	        fn: function fn(res) {
	          if (!res._links || !res._links.next || res._links.next.name !== 'redirect' || !res._links.next.href) {
	            return null;
	          }
	          return res._links.next.href;
	        }
	      },
	      'enrollCustomFactorRedirectUrl': {
	        deps: ['lastAuthResponse'],
	        fn: function fn(res) {
	          if (!res._links || !res._links.next || res._links.next.name !== 'activate' || !res._links.next.href) {
	            return null;
	          }
	          return res._links.next.href;
	        }
	      }
	    },
	
	    parse: function parse(options) {
	      this.settings = options.settings;
	      return _.extend(_.omit(options, 'settings'), { languageCode: this.settings.get('languageCode') });
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 685 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(409), __webpack_require__(641), __webpack_require__(638), __webpack_require__(616), __webpack_require__(645)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Q, factorUtil, Util, Errors, BaseLoginModel) {
	  var _ = Okta._;
	
	  // Note: Keep-alive is set to 5 seconds - using 5 seconds here will result
	  // in network connection lost errors in Safari and IE.
	  var PUSH_INTERVAL = 6000;
	
	  var Factor = BaseLoginModel.extend({
	    extraProperties: true,
	    flat: false,
	
	    props: {
	      id: 'string',
	      factorType: {
	        type: 'string',
	        values: ['sms', 'call', 'email', 'token', 'token:software:totp', 'token:hardware', 'question', 'push', 'u2f', 'password', 'assertion:saml2']
	      },
	      provider: {
	        type: 'string',
	        values: ['OKTA', 'RSA', 'DEL_OATH', 'SYMANTEC', 'GOOGLE', 'YUBICO', 'FIDO', 'GENERIC_SAML']
	      },
	      enrollment: {
	        type: 'string',
	        values: ['OPTIONAL', 'REQUIRED']
	      },
	      status: {
	        type: 'string',
	        values: ['NOT_SETUP', 'ACTIVE']
	      },
	      profile: ['object'],
	      vendorName: 'string'
	    },
	
	    local: {
	      'answer': 'string',
	      'password': 'string',
	      'backupFactor': 'object',
	      'showAnswer': 'boolean',
	      'rememberDevice': 'boolean',
	      'autoPush': ['boolean', true, false]
	    },
	
	    derived: {
	      isOktaFactor: {
	        deps: ['provider'],
	        fn: function fn(provider) {
	          return provider === 'OKTA';
	        }
	      },
	      factorName: {
	        deps: ['provider', 'factorType'],
	        fn: factorUtil.getFactorName
	      },
	      factorLabel: {
	        deps: ['provider', 'factorType', 'vendorName'],
	        fn: function fn(provider, factorType, vendorName) {
	          if (provider === 'DEL_OATH' || provider === 'GENERIC_SAML') {
	            return vendorName;
	          }
	          return factorUtil.getFactorLabel(provider, factorType);
	        }
	      },
	      factorDescription: {
	        deps: ['provider', 'factorType'],
	        fn: factorUtil.getFactorDescription
	      },
	      sortOrder: {
	        deps: ['provider', 'factorType'],
	        fn: factorUtil.getFactorSortOrder
	      },
	      iconClassName: {
	        deps: ['provider', 'factorType'],
	        fn: factorUtil.getFactorIconClassName
	      },
	      securityQuestion: {
	        deps: ['profile', 'factorType'],
	        fn: function fn(profile, factorType) {
	          if (factorType !== 'question') {
	            return null;
	          }
	          return profile && factorUtil.getSecurityQuestionLabel(profile);
	        }
	      },
	      phoneNumber: {
	        deps: ['profile', 'factorType'],
	        fn: function fn(profile, factorType) {
	          if (_.contains(['sms', 'call'], factorType)) {
	            return profile && profile.phoneNumber;
	          }
	          return null;
	        }
	      },
	      email: {
	        deps: ['profile', 'factorType'],
	        fn: function fn(profile, factorType) {
	          if (factorType === 'email') {
	            return profile && profile.email;
	          }
	          return null;
	        }
	      },
	      deviceName: {
	        deps: ['profile', 'factorType'],
	        fn: function fn(profile, factorType) {
	          if (factorType !== 'push') {
	            return null;
	          }
	          return profile && profile.name;
	        }
	      },
	      enrolled: {
	        deps: ['status'],
	        fn: function fn(status) {
	          return status === 'ACTIVE';
	        }
	      },
	      required: {
	        deps: ['enrollment'],
	        fn: function fn(enrollment) {
	          return enrollment === 'REQUIRED';
	        }
	      },
	      canUseResend: {
	        deps: ['provider', 'factorType'],
	        fn: function fn(provider, factorType) {
	          // Only push, sms and call have resend links.
	          return provider === 'OKTA' && _.contains(['push', 'sms', 'call', 'email'], factorType);
	        }
	      },
	      isAnswerRequired: {
	        deps: ['factorType'],
	        fn: function fn(factorType) {
	          return _.contains(['sms', 'call', 'email', 'token', 'token:software:totp', 'question'], factorType);
	        }
	      }
	    },
	
	    parse: function parse(attributes) {
	      this.settings = attributes.settings;
	      this.appState = attributes.appState;
	      // set the initial value for remember device.
	      attributes.rememberDevice = factorUtil.getRememberDeviceValue(this.appState);
	      return _.omit(attributes, ['settings', 'appState']);
	    },
	
	    validate: function validate() {
	      if (this.get('isAnswerRequired') && !this.get('answer')) {
	        return { 'answer': Okta.loc('model.validation.field.blank') };
	      } else if (this.get('factorType') === 'password' && !this.get('password')) {
	        return { 'password': Okta.loc('error.password.required') };
	      }
	    },
	
	    /* eslint complexity: [2, 7] */
	    save: function save() {
	      var rememberDevice = !!this.get('rememberDevice');
	      // Set/Remove the remember device cookie based on the remember device input.
	      var self = this;
	
	      return this.manageTransaction(function (transaction, setTransaction) {
	        var data = {
	          rememberDevice: rememberDevice
	        };
	        if (this.get('factorType') === 'question') {
	          data.answer = this.get('answer');
	        } else if (this.get('factorType') === 'password') {
	          data.password = this.get('password');
	        } else {
	          data.passCode = this.get('answer');
	        }
	
	        if (this.pushFactorHasAutoPush()) {
	          data.autoPush = this.get('autoPush');
	        }
	
	        var promise;
	        // MFA_REQUIRED or UNAUTHENTICATED with factors (passwordlessAuth)
	        if (transaction.status === 'MFA_REQUIRED' || this.appState.get('promptForFactorInUnauthenticated')) {
	          var factor = _.findWhere(transaction.factors, {
	            id: this.get('id')
	          });
	          promise = factor.verify(data);
	        }
	
	        // MFA_CHALLENGE
	        else if (this.get('canUseResend') && !this.get('answer') && transaction.resend) {
	            var firstLink = transaction.data._links.resend[0];
	            promise = transaction.resend(firstLink.name);
	          } else {
	            promise = transaction.verify(data);
	          }
	        //the 'save' event here is triggered and used in the BaseLoginController
	        //to disable the primary button on the factor form
	        this.trigger('save');
	
	        return promise.then(function (trans) {
	          var options = {
	            'delay': PUSH_INTERVAL
	          };
	          setTransaction(trans);
	          // In Okta verify case we initiate poll.
	          if (trans.status === 'MFA_CHALLENGE' && trans.poll) {
	            var deferred = Q.defer();
	            var initiatePollTimout = Util.callAfterTimeout(deferred.resolve, PUSH_INTERVAL);
	            self.listenToOnce(self.options.appState, 'factorSwitched', function () {
	              clearTimeout(initiatePollTimout);
	              deferred.reject(new Errors.AuthStopPollInitiationError());
	            });
	            return deferred.promise.then(function () {
	              // Stop listening if factor was not switched before poll.
	              self.stopListening(self.options.appState, 'factorSwitched');
	              if (self.pushFactorHasAutoPush()) {
	                options.autoPush = function () {
	                  return self.get('autoPush');
	                };
	                options.rememberDevice = function () {
	                  return self.get('rememberDevice');
	                };
	              }
	              return trans.poll(options).then(function (trans) {
	                setTransaction(trans);
	              });
	            });
	          }
	        });
	      });
	    },
	
	    pushFactorHasAutoPush: function pushFactorHasAutoPush() {
	      return this.settings.get('features.autoPush') && this.get('factorType') === 'push';
	    }
	  });
	
	  var Factors = Okta.Collection.extend({
	
	    model: Factor,
	    comparator: 'sortOrder',
	
	    // One override necessary here - Okta Verify with Push is treated like
	    // one factor. In the beacon menu, there's only one option - only in the
	    // view can you choose to enable the other factor (which will be exposed
	    // by the backupFactor property)
	    parse: function parse(factors) {
	      // Keep a track of the last used factor, since
	      // we need it to determine the default factor.
	      this.lastUsedFactor = factors[0];
	
	      var oktaPushFactor = _.findWhere(factors, { provider: 'OKTA', factorType: 'push' });
	      if (!oktaPushFactor) {
	        return factors;
	      }
	      var totpFactor = _.findWhere(factors, { provider: 'OKTA', factorType: 'token:software:totp' });
	
	      var isTotpFirst = totpFactor === factors[0];
	
	      var parsedFactors = _.reduce(factors, function (memo, factor) {
	        var isOkta = factor.provider === 'OKTA';
	        var isOktaTotp = isOkta && factor.factorType === 'token:software:totp';
	        var isOktaPush = isOkta && factor.factorType === 'push';
	        var notEnrolled = factor.status !== 'ACTIVE';
	
	        var hideOktaTotp = isOktaTotp && (notEnrolled || oktaPushFactor.status === 'ACTIVE');
	        var hideOktaPush = isOktaPush && notEnrolled && totpFactor.status === 'ACTIVE';
	
	        if (hideOktaTotp || hideOktaPush) {
	          return memo;
	        }
	
	        if (isOktaPush) {
	          factor.backupFactor = new Factor(totpFactor, { parse: true });
	        }
	        memo.push(factor);
	        return memo;
	      }, []);
	
	      // Use push factor instead of TOTP, if TOTP is first in the list
	      // (since it is stored as backupFactor for push).
	      if (isTotpFirst) {
	        this.lastUsedFactor = oktaPushFactor;
	      }
	
	      return parsedFactors;
	    },
	
	    // Will need to update this to use HAL link to get last used factor:
	    // https://oktainc.atlassian.net/browse/OKTA-58380
	    // However, current code returns last used factor as first factor in list.
	    // Also, will need to add priority - i.e. if they do not have a last used
	    // factor, should try Okta Verify, then Okta SMS, etc.
	    getDefaultFactor: function getDefaultFactor() {
	      var factor = _.pick(this.lastUsedFactor, 'factorType', 'provider');
	      return this.findWhere(factor);
	    },
	
	    getFirstUnenrolledRequiredFactor: function getFirstUnenrolledRequiredFactor() {
	      return this.findWhere({ required: true, enrolled: false });
	    }
	
	  });
	
	  return {
	    Model: Factor,
	    Collection: Factors
	  };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 686 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(687), __webpack_require__(698), __webpack_require__(699), __webpack_require__(700), __webpack_require__(702), __webpack_require__(644), __webpack_require__(688)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, PrimaryAuthForm, CustomButtons, FooterRegistration, PrimaryAuthModel, Footer, BaseLoginController, DeviceFingerprint) {
	
	  var $ = Okta.$;
	
	  return BaseLoginController.extend({
	    className: 'primary-auth',
	
	    state: { enabled: true },
	
	    View: PrimaryAuthForm,
	
	    constructor: function constructor(options) {
	      options.appState.unset('username');
	
	      this.model = new PrimaryAuthModel({
	        multiOptionalFactorEnroll: options.settings.get('features.multiOptionalFactorEnroll'),
	        settings: options.settings,
	        appState: options.appState
	      }, { parse: true });
	
	      BaseLoginController.apply(this, arguments);
	
	      this.addListeners();
	
	      // If social auth is configured, 'socialAuthPositionTop' will determine
	      // the order in which the social auth and primary auth are shown on the screen.
	      if (options.settings.get('hasConfiguredButtons')) {
	        this.add(CustomButtons, { prepend: options.settings.get('socialAuthPositionTop') });
	      }
	
	      this.addFooter(options);
	
	      this.setUsername();
	    },
	
	    addFooter: function addFooter(options) {
	      this.add(new Footer(this.toJSON({ appState: options.appState })));
	
	      if (options.settings.get('features.registration')) {
	        this.add(new FooterRegistration({
	          settings: this.settings,
	          appState: options.appState
	        }));
	      }
	    },
	
	    setUsername: function setUsername() {
	      var username = this.model.get('username');
	      if (username) {
	        this.options.appState.set('username', username);
	      }
	    },
	
	    events: {
	      'focusout input[name=username]': function focusoutInputNameUsername() {
	        // Get DeviceFingerprint so we can use it for security image and for primary auth
	        if (this.settings.get('features.deviceFingerprinting')) {
	          var self = this;
	          DeviceFingerprint.generateDeviceFingerprint(this.settings.get('baseUrl'), this.$el).then(function (fingerprint) {
	            self.options.appState.set('deviceFingerprint', fingerprint);
	            self.options.appState.set('username', self.model.get('username'));
	          }).fail(function () {
	            // Keep going even if device fingerprint fails
	            self.options.appState.set('username', self.model.get('username'));
	          });
	        } else {
	          this.options.appState.set('username', this.model.get('username'));
	        }
	      },
	      'focusin input': function focusinInput(e) {
	        $(e.target.parentElement).addClass('focused-input');
	      },
	      'focusout input': function focusoutInput(e) {
	        $(e.target.parentElement).removeClass('focused-input');
	      },
	      'click .button-show': function clickButtonShow() {
	        this.trigger('passwordRevealed');
	      }
	    },
	
	    // This model and the AppState both have a username property.
	    // The controller updates the AppState's username when the user is
	    // done editing (on blur) or deletes the username (see below).
	    initialize: function initialize() {
	      this.options.appState.unset('deviceFingerprint');
	      this.listenTo(this.model, 'change:username', function (model, value) {
	        if (!value) {
	          // reset AppState to an undefined user.
	          this.options.appState.set('username', '');
	        }
	      });
	      this.listenTo(this.model, 'save', function () {
	        this.state.set('enabled', false);
	      });
	      this.listenTo(this.model, 'error', function () {
	        this.state.set('enabled', true);
	      });
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 687 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(649), __webpack_require__(688), __webpack_require__(689)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, TextBox, DeviceFingerprint, TypingUtil) {
	
	  var _ = Okta._;
	
	  return Okta.Form.extend({
	    className: 'primary-auth-form',
	    noCancelButton: true,
	    save: function save() {
	      if (this.settings.get('features.passwordlessAuth')) {
	        return Okta.loc('oform.next', 'login');
	      }
	      return Okta.loc('primaryauth.submit', 'login');
	    },
	    saveId: 'okta-signin-submit',
	    layout: 'o-form-theme',
	
	    // If socialAuth is configured, the title moves from the form to
	    // the top of the container (and is rendered in socialAuth).
	    title: function title() {
	      var formTitle = Okta.loc('primaryauth.title', 'login');
	      if (this.settings.get('socialAuthPositionTop')) {
	        formTitle = '';
	      }
	      return formTitle;
	    },
	
	    initialize: function initialize() {
	      var trackTypingPattern = this.settings.get('features.trackTypingPattern');
	      this.listenTo(this, 'save', function () {
	        if (trackTypingPattern) {
	          var typingPattern = TypingUtil.getTypingPattern();
	          this.options.appState.set('typingPattern', typingPattern);
	        }
	        var self = this;
	        var creds = {
	          username: this.model.get('username')
	        };
	        if (!this.settings.get('features.passwordlessAuth')) {
	          creds.password = this.model.get('password');
	        }
	        this.settings.processCreds(creds).then(function () {
	          if (!self.settings.get('features.deviceFingerprinting')) {
	            return;
	          }
	          return DeviceFingerprint.generateDeviceFingerprint(self.settings.get('baseUrl'), self.$el).then(function (fingerprint) {
	            self.options.appState.set('deviceFingerprint', fingerprint);
	          }).fail(function () {
	            // Keep going even if device fingerprint fails
	          });
	        }).then(_.bind(this.model.save, this.model));
	      });
	
	      this.stateEnableChange();
	    },
	
	    stateEnableChange: function stateEnableChange() {
	      this.listenTo(this.state, 'change:enabled', function (model, enable) {
	        if (enable) {
	          this.enable();
	        } else {
	          this.disable();
	        }
	      });
	    },
	
	    inputs: function inputs() {
	      var inputs = [];
	      inputs.push(this.getUsernameField());
	      if (!this.settings.get('features.passwordlessAuth')) {
	        inputs.push(this.getPasswordField());
	      }
	      if (this.settings.get('features.rememberMe')) {
	        inputs.push(this.getRemeberMeCheckbox());
	      }
	      return inputs;
	    },
	
	    getUsernameField: function getUsernameField() {
	      var userNameFieldObject = {
	        label: false,
	        'label-top': true,
	        placeholder: Okta.loc('primaryauth.username.placeholder', 'login'),
	        name: 'username',
	        input: TextBox,
	        inputId: 'okta-signin-username',
	        type: 'text',
	        disabled: this.options.appState.get('disableUsername'),
	        params: {
	          innerTooltip: {
	            title: Okta.loc('primaryauth.username.placeholder', 'login'),
	            text: Okta.loc('primaryauth.username.tooltip', 'login')
	          },
	          icon: 'person-16-gray'
	        }
	      };
	
	      if (this.settings.get('features.showPasswordToggleOnSignInPage')) {
	        userNameFieldObject.params.iconDivider = true;
	      }
	      return userNameFieldObject;
	    },
	
	    getPasswordField: function getPasswordField() {
	      var passwordFieldObject = {
	        label: false,
	        'label-top': true,
	        placeholder: Okta.loc('primaryauth.password.placeholder', 'login'),
	        name: 'password',
	        inputId: 'okta-signin-password',
	        validateOnlyIfDirty: true,
	        type: 'password',
	        params: {
	          innerTooltip: {
	            title: Okta.loc('primaryauth.password.placeholder', 'login'),
	            text: Okta.loc('primaryauth.password.tooltip', 'login')
	          },
	          icon: 'remote-lock-16'
	        }
	      };
	      if (this.settings.get('features.showPasswordToggleOnSignInPage')) {
	        passwordFieldObject.params.iconDivider = true;
	        passwordFieldObject.params.showPasswordToggle = true;
	      }
	      return passwordFieldObject;
	    },
	
	    getRemeberMeCheckbox: function getRemeberMeCheckbox() {
	      return {
	        label: false,
	        placeholder: Okta.loc('remember', 'login'),
	        name: 'remember',
	        type: 'checkbox',
	        'label-top': true,
	        className: 'margin-btm-0',
	        initialize: function initialize() {
	          this.listenTo(this.model, 'change:remember', function (model, val) {
	            // OKTA-98946: We normally re-render on changes to model values,
	            // but in this case we will manually update the checkbox due to
	            // iOS Safari and how it handles autofill - it will autofill the
	            // form anytime the dom elements are re-rendered, which prevents
	            // the user from editing their username.
	            this.$(':checkbox').prop('checked', val).trigger('updateState');
	          });
	        }
	      };
	    },
	
	    focus: function focus() {
	      if (!this.model.get('username')) {
	        this.getInputs().first().focus();
	      } else if (!this.settings.get('features.passwordlessAuth')) {
	        this.getInputs().toArray()[1].focus();
	      }
	      if (this.settings.get('features.trackTypingPattern')) {
	        TypingUtil.track('okta-signin-username');
	      }
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 688 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _stringify = __webpack_require__(406);
	
	var _stringify2 = _interopRequireDefault(_stringify);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	/* eslint complexity: [2, 8] */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(409), __webpack_require__(404)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Q, $) {
	
	  return {
	    getUserAgent: function getUserAgent() {
	      return navigator.userAgent;
	    },
	    isMessageFromCorrectSource: function isMessageFromCorrectSource($iframe, event) {
	      return event.source === $iframe[0].contentWindow;
	    },
	    generateDeviceFingerprint: function generateDeviceFingerprint(oktaDomainUrl, element) {
	      var userAgent = this.getUserAgent();
	      if (!userAgent) {
	        return Q.reject('user agent is not defined');
	      } else if (isWindowsPhone(userAgent)) {
	        return Q.reject('device fingerprint is not supported on Windows phones');
	      }
	
	      var deferred = Q.defer();
	      var self = this;
	
	      // Create iframe
	      var $iframe = $('<iframe>', {
	        style: 'display: none;'
	      });
	      $iframe.appendTo(element);
	
	      function isWindowsPhone(userAgent) {
	        return userAgent.match(/windows phone|iemobile|wpdesktop/i);
	      }
	
	      function removeIframe() {
	        $iframe.off();
	        $iframe.remove();
	        window.removeEventListener('message', onMessageReceivedFromOkta, false);
	      }
	
	      function handleError(reason) {
	        removeIframe();
	        deferred.reject(reason);
	      }
	
	      function onMessageReceivedFromOkta(event) {
	        if (!self.isMessageFromCorrectSource($iframe, event)) {
	          return;
	        }
	        if (!event || !event.data || event.origin != oktaDomainUrl) {
	          handleError('no data');
	          return;
	        }
	        try {
	          var message = JSON.parse(event.data);
	          if (message && message.type === 'FingerprintServiceReady') {
	            sendMessageToOkta({ type: 'GetFingerprint' });
	          } else if (message && message.type === 'FingerprintAvailable') {
	            removeIframe();
	            deferred.resolve(message.fingerprint);
	          } else {
	            handleError('no data');
	          }
	        } catch (error) {
	          //Ignore any errors since we could get other messages too
	        }
	      }
	
	      function sendMessageToOkta(message) {
	        var win = $iframe[0].contentWindow;
	        if (win) {
	          win.postMessage((0, _stringify2.default)(message), oktaDomainUrl);
	        }
	      }
	
	      // Attach listener
	      window.addEventListener('message', onMessageReceivedFromOkta, false);
	      // Load devicefingerprint page inside the iframe
	      $iframe.attr('src', oktaDomainUrl + '/auth/services/devicefingerprint');
	
	      return deferred.promise;
	    }
	  };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 689 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2018, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(690)], __WEBPACK_AMD_DEFINE_RESULT__ = function (TypingDNA) {
	  var tdna;
	  return {
	    track: function track(selectorId) {
	      try {
	        tdna = new TypingDNA();
	        tdna.addTarget(selectorId);
	        tdna.start();
	      } catch (e) {
	        // Issues in typing should not stop Primary auth.
	      }
	    },
	    getTypingPattern: function getTypingPattern() {
	      try {
	        return tdna.getTypingPattern({
	          type: 1
	        });
	      } catch (e) {
	        return null;
	      }
	    }
	  };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 690 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _slicedToArray2 = __webpack_require__(691);
	
	var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);
	
	var _typeof2 = __webpack_require__(334);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * TypingDNA - Typing Biometrics JavaScript API
	 * https://api.typingdna.com/scripts/typingdna.js
	 * https://typingdna.com/scripts/typingdna.js (alternative)
	 *
	 * @version 2.15
	 * @author Raul Popa
	 * @copyright SC TypingDNA SRL, http://typingdna.com
	 * @license http://www.apache.org/licenses/LICENSE-2.0
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * Typical usage:
	 * var tdna = new TypingDNA(); // creates a new TypingDNA object and starts recording
	 * var typingPattern = tdna.getTypingPattern({type=1, text="Hello5g21?*"});
	 * returns a type 1 typing pattern (and continues recording afterwards)
	 *
	 * Optional:
	 * tdna.stop(); // ends recording and clears history stack (returns recording flag: false)
	 * tdna.start(); // restarts the recording after a stop (returns recording flag: true)
	 * tdna.reset(); // restarts the recording anytime, clears history stack and starts from scratch (returns nothing)
	 * var typingPatternQuality = TypingDNA.getQuality(typingPattern); //returns the quality/strength of any typing pattern
	 * (there is no need to initialize the class to do pattern quality checking)
	 */
	
	/**
	 * Creates a single instance (or a reference) of the TypingDNA class
	 * @return {Object} Returns the single instance of the TypingDNA class.
	 * @example var tdna = new TypingDNA();
	 */
	module.exports = function TypingDNA() {
	  if (TypingDNA.initialized != true) {
	    TypingDNA.prototype.start = function () {
	      return TypingDNA.start.apply(this, arguments);
	    };
	    TypingDNA.prototype.stop = function () {
	      return TypingDNA.stop.apply(this, arguments);
	    };
	    TypingDNA.prototype.reset = function () {
	      return TypingDNA.reset.apply(this, arguments);
	    };
	    TypingDNA.prototype.addTarget = function () {
	      return TypingDNA.addTarget.apply(this, arguments);
	    };
	    TypingDNA.prototype.removeTarget = function () {
	      return TypingDNA.removeTarget.apply(this, arguments);
	    };
	    TypingDNA.prototype.getTypingPattern = function () {
	      return TypingDNA.getTypingPattern.apply(this, arguments);
	    };
	    TypingDNA.prototype.get = function () {
	      // still works but will be deprecated in favor of getTypignPattern()
	      return TypingDNA.get.apply(this, arguments);
	    };
	    TypingDNA.prototype.startDiagram = function () {
	      // deprecated in favor of start()
	      //return TypingDNA.startDiagram.apply(this, arguments);
	    };
	    TypingDNA.prototype.stopDiagram = function () {
	      // deprecated in favor of stop()
	      //return TypingDNA.stopDiagram.apply(this, arguments);
	    };
	    TypingDNA.prototype.getDiagram = function () {
	      // still works but will be deprecated in favor of getTypignPattern()
	      return TypingDNA.getDiagram.apply(this, arguments);
	    };
	    TypingDNA.prototype.getExtendedDiagram = function () {
	      // still works but will be deprecated in favor of getTypignPattern()
	      return TypingDNA.getExtendedDiagram.apply(this, arguments);
	    };
	    TypingDNA.prototype.getMouseDiagram = function () {
	      return TypingDNA.getMouseDiagram.apply(this, arguments);
	    };
	    TypingDNA.prototype.startMouse = function () {
	      return TypingDNA.startMouse.apply(this, arguments);
	    };
	    TypingDNA.prototype.stopMouse = function () {
	      return TypingDNA.stopMouse.apply(this, arguments);
	    };
	    TypingDNA.prototype.getQuality = function () {
	      return TypingDNA.getQuality.apply(this, arguments);
	    };
	    TypingDNA.prototype.getLength = function () {
	      return TypingDNA.getLength.apply(this, arguments);
	    };
	    TypingDNA.prototype.isMobile = function () {
	      return TypingDNA.isMobile.apply(this, arguments);
	    };
	    TypingDNA.prototype.getTextId = function () {
	      return TypingDNA.getTextId.apply(this, arguments);
	    };
	    TypingDNA.initialized = true;
	    TypingDNA.prototype.maxHistoryLength = TypingDNA.maxHistoryLength;
	    TypingDNA.prototype.defaultHistoryLength = TypingDNA.defaultHistoryLength;
	    TypingDNA.prototype.maxSeekTime = TypingDNA.maxSeekTime;
	    TypingDNA.prototype.maxPressTime = TypingDNA.maxPressTime;
	    TypingDNA.version = 2.15;
	    TypingDNA.flags = 0;
	    TypingDNA.instance = this;
	    TypingDNA.document = document;
	    TypingDNA.maxHistoryLength = 2000;
	    TypingDNA.maxSeekTime = 1500;
	    TypingDNA.maxPressTime = 300;
	    TypingDNA.defaultHistoryLength = 160;
	    TypingDNA.spKeyCodes = [8, 13, 32];
	    TypingDNA.spKeyCodesObj = {
	      8: 1,
	      13: 1,
	      32: 1
	    };
	    TypingDNA.keyCodes = [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 32, 222, 188, 190, 186, 187, 189, 191, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57];
	    TypingDNA.keyCodesObj = {};
	    for (var i in TypingDNA.keyCodes) {
	      TypingDNA.keyCodesObj[TypingDNA.keyCodes[i]] = 1;
	    }
	    TypingDNA.pt1 = TypingDNA.ut1 = new Date().getTime();
	    TypingDNA.wfk = [];
	    TypingDNA.sti = [];
	    TypingDNA.skt = [];
	    TypingDNA.recording = true;
	    TypingDNA.mouseRecording = true;
	    TypingDNA.mouseMoveRecording = false;
	    TypingDNA.spKeyRecording = true;
	    TypingDNA.diagramRecording = true;
	    TypingDNA.dwfk = [];
	    TypingDNA.dsti = [];
	    TypingDNA.dskt = [];
	    TypingDNA.drkc = [];
	    TypingDNA.dlastDownKey;
	    TypingDNA.prevKeyCode = 0;
	    TypingDNA.maxMoveDeltaTime = 600;
	    TypingDNA.maxScrollDeltaTime = 800;
	    TypingDNA.maxStopTime = 1500;
	    TypingDNA.maxClickTime = 600;
	    TypingDNA.maxMouseHistoryLength = 500;
	    TypingDNA.lastMouseMoveTime = TypingDNA.lastMouseDownTime = new Date().getTime();
	    TypingDNA.stopTimes = [];
	    TypingDNA.clickTimes = [];
	    TypingDNA.lastMouseStop = true;
	    TypingDNA.zl = 0.0000001;
	    TypingDNA.isAndroidChrome = false;
	    TypingDNA.ACLastTime = new Date().getTime();
	    TypingDNA.ACSeekTime = 0;
	    TypingDNA.ACPressTime = 0;
	    TypingDNA.ACLastCharCode = 0;
	    TypingDNA.ACLastKeyCode = 0;
	    TypingDNA.ACInputLengths = {
	      inputs: [],
	      lastLength: []
	    };
	    TypingDNA.ACPreviousKeyCode = 0;
	    TypingDNA.targetIds = [];
	    TypingDNA.lastTarget = "";
	    TypingDNA.lastTargetFound = false;
	    TypingDNA.replaceMissingKeys = true;
	    TypingDNA.replaceMissingKeysPerc = 7;
	
	    TypingDNA.keyDown = function (e) {
	      if (!TypingDNA.recording && !TypingDNA.diagramRecording) {
	        return;
	      }
	      if (!TypingDNA.isTarget(e.target.id)) {
	        return;
	      }
	      var keyCode = e.keyCode;
	      if (TypingDNA.wfk[keyCode] == 1 || TypingDNA.dwfk[keyCode] == 1) {
	        //return;
	      }
	      if (keyCode == 229 && TypingDNA.isMobile() && !TypingDNA.isAndroidChrome) {
	        TypingDNA.isAndroidChrome = true;
	
	        TypingDNA.ACSeekTime = new Date().getTime() - TypingDNA.ACLastTime;
	        TypingDNA.ACLastTime = new Date().getTime();
	
	        TypingDNA.document.removeEventListener("keydown", TypingDNA.keyDown);
	        TypingDNA.document.removeEventListener("keyup", TypingDNA.keyUp);
	        TypingDNA.document.removeEventListener("keypress", TypingDNA.keyPress);
	
	        // if android
	        TypingDNA.document.addEventListener("keydown", TypingDNA.ACKeyDown);
	        TypingDNA.document.addEventListener("keyup", TypingDNA.ACKeyUp);
	      } else {
	        var t0 = TypingDNA.pt1;
	        TypingDNA.pt1 = new Date().getTime();
	        var seekTotal = TypingDNA.pt1 - t0;
	        var startTime = TypingDNA.pt1;
	        if (TypingDNA.recording == true || TypingDNA.spKeyCodesObj[keyCode] && TypingDNA.spKeyRecording == true) {
	          if (!e.shiftKey || TypingDNA.isMobile()) {
	            TypingDNA.wfk[keyCode] = 1;
	            TypingDNA.skt[keyCode] = seekTotal;
	            TypingDNA.sti[keyCode] = startTime;
	          }
	        }
	        if (TypingDNA.diagramRecording == true) {
	          TypingDNA.dwfk[keyCode] = 1;
	          TypingDNA.dskt[keyCode] = seekTotal;
	          TypingDNA.dsti[keyCode] = startTime;
	          TypingDNA.dlastDownKey = keyCode;
	        }
	      }
	    };
	
	    TypingDNA.keyPress = function (e) {
	      if (!TypingDNA.recording && !TypingDNA.diagramRecording) {
	        return;
	      }
	      if (!TypingDNA.isTarget(e.target.id)) {
	        return;
	      }
	      if (TypingDNA.diagramRecording == true) {
	        var keyCode = TypingDNA.dlastDownKey;
	        TypingDNA.drkc[keyCode] = e.charCode;
	      }
	    };
	
	    TypingDNA.keyUp = function (e) {
	      if (!TypingDNA.recording && !TypingDNA.diagramRecording) {
	        return;
	      }
	      if (!TypingDNA.isTarget(e.target.id)) {
	        return;
	      }
	      var ut = new Date().getTime();
	      var keyCode = e.keyCode;
	      if (TypingDNA.recording == true || TypingDNA.spKeyCodesObj[keyCode] && TypingDNA.spKeyRecording == true) {
	        if (!e.shiftKey || TypingDNA.isMobile()) {
	          if (TypingDNA.wfk[keyCode] == 1) {
	            var pressTime = ut - TypingDNA.sti[keyCode];
	            var seekTime = TypingDNA.skt[keyCode];
	            var arr = [keyCode, seekTime, pressTime, TypingDNA.prevKeyCode, ut, e.target.id];
	            TypingDNA.history.add(arr);
	            TypingDNA.prevKeyCode = keyCode;
	          }
	        }
	        TypingDNA.wfk[keyCode] = 0;
	      }
	      if (TypingDNA.diagramRecording == true) {
	        if (TypingDNA.drkc[keyCode] != undefined && TypingDNA.drkc[keyCode] != 0) {
	          if (TypingDNA.dwfk[keyCode] == 1) {
	            var pressTime = ut - TypingDNA.dsti[keyCode];
	            var seekTime = TypingDNA.dskt[keyCode];
	            var realKeyCode = TypingDNA.drkc[keyCode];
	            var arrD = [keyCode, seekTime, pressTime, realKeyCode, ut, e.target.id];
	            TypingDNA.history.addDiagram(arrD);
	          }
	        }
	        TypingDNA.dwfk[keyCode] = 0;
	      }
	    };
	
	    TypingDNA.mouseScroll = function (e) {
	      if (TypingDNA.mouseRecording == true) {
	        if (TypingDNA.mouseMoveRecording == true) {
	          if (TypingDNA.mouse.scrollStarted == true) {
	            var currentTime = new Date().getTime();
	            TypingDNA.mouse.scrollTimes.push(currentTime);
	            TypingDNA.mouse.scrollTopArr.push(TypingDNA.document.body.scrollTop);
	            clearInterval(TypingDNA.scrollInterval);
	            TypingDNA.scrollInterval = setInterval(TypingDNA.mouse.checkScroll, TypingDNA.maxScrollDeltaTime);
	          } else {
	            TypingDNA.mouse.scrollStarted = true;
	          }
	        }
	      }
	    };
	
	    TypingDNA.mouseMove = function (e) {
	      if (TypingDNA.mouseRecording == true) {
	        var currentTime = new Date().getTime();
	        if (TypingDNA.mouseMoveRecording == true) {
	          if (TypingDNA.mouse.started == true) {
	            TypingDNA.mouse.times.push(currentTime);
	            TypingDNA.mouse.xPositions.push(e.screenX);
	            TypingDNA.mouse.yPositions.push(e.screenY);
	            clearInterval(TypingDNA.moveInterval);
	            TypingDNA.moveInterval = setInterval(TypingDNA.mouse.checkMove, TypingDNA.maxMoveDeltaTime);
	          } else {
	            TypingDNA.mouse.started = true;
	          }
	        }
	        TypingDNA.lastMouseMoveTime = currentTime;
	      }
	    };
	
	    TypingDNA.mouseDown = function (e) {
	      if (TypingDNA.mouseRecording == true) {
	        TypingDNA.mouse.checkMove();
	        TypingDNA.mouse.checkScroll();
	        if (e.which == 1) {
	          TypingDNA.lastMouseDownTime = new Date().getTime();
	          var stopTime = TypingDNA.lastMouseDownTime - TypingDNA.lastMouseMoveTime;
	          if (stopTime < TypingDNA.maxStopTime && TypingDNA.lastMouseStop == false) {
	            TypingDNA.stopTimes.push(stopTime);
	            if (TypingDNA.mouseMoveRecording == true) {
	              var eventType = 3;
	              var arr = [eventType, stopTime];
	              TypingDNA.mouse.history.add(arr);
	              TypingDNA.lastMouseStop = true;
	            }
	          }
	        }
	      }
	    };
	
	    TypingDNA.mouseUp = function (e) {
	      if (TypingDNA.mouseRecording == true) {
	        if (e.which == 1) {
	          var clickTime = new Date().getTime() - TypingDNA.lastMouseDownTime;
	          if (clickTime < TypingDNA.maxClickTime && TypingDNA.lastMouseDownTime > TypingDNA.lastMouseMoveTime) {
	            TypingDNA.clickTimes.push(clickTime);
	            if (TypingDNA.mouseMoveRecording == true) {
	              var eventType = 4;
	              var arr = [eventType, clickTime];
	              TypingDNA.mouse.history.add(arr);
	            }
	          }
	        }
	      }
	    };
	
	    TypingDNA.ACKeyDown = function (e) {
	      if (!TypingDNA.recording && !TypingDNA.diagramRecording) {
	        return;
	      }
	      TypingDNA.ACSeekTime = new Date().getTime() - TypingDNA.ACLastTime;
	      TypingDNA.ACLastTime = new Date().getTime();
	      if (!TypingDNA.isTarget(e.target.id)) {
	        return;
	      }
	      if (TypingDNA.ACInputLengths.inputs.indexOf(e.target) === -1) {
	        TypingDNA.ACInputLengths.inputs.push(e.target);
	        TypingDNA.ACInputLengths.lastLength.push(0);
	      }
	    };
	
	    TypingDNA.ACKeyUp = function (e) {
	      if (!TypingDNA.recording && !TypingDNA.diagramRecording) {
	        return;
	      }
	      TypingDNA.ACPressTime = new Date().getTime() - TypingDNA.ACLastTime;
	      TypingDNA.ACLastTime = new Date().getTime();
	      if (!TypingDNA.isTarget(e.target.id)) {
	        return;
	      }
	      var keyCode = e.keyCode;
	      var targetIndex = TypingDNA.ACInputLengths.inputs.indexOf(e.target);
	      if (targetIndex === -1) {
	        TypingDNA.ACInputLengths.inputs.push(e.target);
	        TypingDNA.ACInputLengths.lastLength.push(0);
	        targetIndex = TypingDNA.ACInputLengths.inputs.indexOf(e.target);
	      }
	      if (keyCode == 229 && e.target.value.length >= TypingDNA.ACInputLengths.lastLength[targetIndex]) {
	        var char = e.target.value.substr(e.target.selectionStart - 1 || 0, 1);
	        keyCode = char.toUpperCase().charCodeAt(0);
	        TypingDNA.ACLastCharCode = char.charCodeAt(0);
	        TypingDNA.ACLastKeyCode = char.toUpperCase().charCodeAt(0);
	      }
	      TypingDNA.ACInputLengths.lastLength[targetIndex] = e.target.value.length;
	      var arr = [keyCode, TypingDNA.ACSeekTime, TypingDNA.ACPressTime, TypingDNA.ACPreviousKeyCode, TypingDNA.ACLastTime];
	      TypingDNA.history.add(arr);
	      TypingDNA.ACPreviousKeyCode = keyCode;
	      if (TypingDNA.diagramRecording == true) {
	        var arrD = [keyCode, TypingDNA.ACSeekTime, TypingDNA.ACPressTime, TypingDNA.ACLastCharCode];
	        TypingDNA.history.addDiagram(arrD);
	      }
	    };
	
	    TypingDNA.isTarget = function (target) {
	      if (TypingDNA.lastTarget == target && TypingDNA.lastTargetFound) {
	        return true;
	      } else {
	        var targetLength = TypingDNA.targetIds.length;
	        var targetFound = false;
	        if (targetLength > 0) {
	          for (var i = 0; i < targetLength; i++) {
	            if (TypingDNA.targetIds[i] == target) {
	              targetFound = true;
	              break;
	            }
	          }
	          TypingDNA.lastTarget = target;
	          TypingDNA.lastTargetFound = targetFound;
	          return targetFound;
	        } else {
	          TypingDNA.lastTarget = target;
	          TypingDNA.lastTargetFound = true;
	          return true;
	        }
	      }
	    };
	
	    if (TypingDNA.document.addEventListener) {
	      TypingDNA.document.addEventListener("keydown", TypingDNA.keyDown);
	      TypingDNA.document.addEventListener("keyup", TypingDNA.keyUp);
	      TypingDNA.document.addEventListener("keypress", TypingDNA.keyPress);
	      TypingDNA.document.addEventListener("mousemove", TypingDNA.mouseMove);
	      TypingDNA.document.addEventListener("mousedown", TypingDNA.mouseDown);
	      TypingDNA.document.addEventListener("mouseup", TypingDNA.mouseUp);
	      TypingDNA.document.addEventListener("scroll", TypingDNA.mouseScroll);
	    } else if (TypingDNA.document.attachEvent) {
	      TypingDNA.document.attachEvent("onkeydown", TypingDNA.keyDown);
	      TypingDNA.document.attachEvent("onkeyup", TypingDNA.keyUp);
	      TypingDNA.document.attachEvent("onkeypress", TypingDNA.keyPress);
	      TypingDNA.document.attachEvent("onmousemove", TypingDNA.mouseMove);
	      TypingDNA.document.attachEvent("onmousedown", TypingDNA.mouseDown);
	      TypingDNA.document.attachEvent("onmouseup", TypingDNA.mouseUp);
	      TypingDNA.document.attachEvent("onscroll", TypingDNA.mouseScroll);
	    } else {
	      console.log("browser not supported");
	    }
	
	    TypingDNA.mouse = {};
	    TypingDNA.mouse.times = [];
	    TypingDNA.mouse.xPositions = [];
	    TypingDNA.mouse.yPositions = [];
	    TypingDNA.mouse.scrollTimes = [];
	    TypingDNA.mouse.scrollTopArr = [];
	    TypingDNA.mouse.history = {};
	    TypingDNA.mouse.history.stack = [];
	
	    TypingDNA.mouse.getDistance = function (a, b) {
	      return Math.sqrt(a * a + b * b);
	    };
	
	    TypingDNA.mouse.getTotalDistance = function (xPositions, yPositions) {
	      var totalDistance = 0;
	      var length = xPositions.length;
	      for (i = 1; i < length - 1; i++) {
	        var a = xPositions[i] - xPositions[i - 1];
	        var b = yPositions[i] - yPositions[i - 1];
	        totalDistance += TypingDNA.mouse.getDistance(a, b);
	      }
	      return totalDistance;
	    };
	
	    TypingDNA.mouse.getAngle = function (xPosDelta, yPosDelta) {
	      var angle = 0;
	      var leftRight = xPosDelta >= 0; // 1 if left, 0 if right
	      var downUp = yPosDelta < 0; // 1 if down, 0 if up
	      if (leftRight) {
	        if (downUp) {
	          angle = 180 + Math.round(Math.atan(Math.abs(xPosDelta) / (Math.abs(yPosDelta) + 0.0000001)) / 0.01745329251); // 0.01745329251 = pi/180
	        } else {
	          angle = 270 + (90 - Math.round(Math.atan(Math.abs(xPosDelta) / (Math.abs(yPosDelta) + 0.0000001)) / 0.01745329251));
	        }
	      } else {
	        if (downUp) {
	          angle = 90 + (90 - Math.round(Math.atan(Math.abs(xPosDelta) / (Math.abs(yPosDelta) + 0.0000001)) / 0.01745329251));
	        } else {
	          angle = Math.round(Math.atan(Math.abs(xPosDelta) / (Math.abs(yPosDelta) + 0.0000001)) / 0.01745329251);
	        }
	      }
	      return angle;
	    };
	
	    TypingDNA.mouse.recordMoveAction = function () {
	      var length = TypingDNA.mouse.times.length;
	      if (length < 3) {
	        return;
	      }
	      var deltaTime = TypingDNA.mouse.times[length - 1] - TypingDNA.mouse.times[0];
	      var xPosDelta = TypingDNA.mouse.xPositions[length - 1] - TypingDNA.mouse.xPositions[0];
	      var yPosDelta = TypingDNA.mouse.yPositions[length - 1] - TypingDNA.mouse.yPositions[0];
	      var directDistance = Math.round(TypingDNA.mouse.getDistance(xPosDelta, yPosDelta));
	      var totalDistance = Math.round(TypingDNA.mouse.getTotalDistance(TypingDNA.mouse.xPositions, TypingDNA.mouse.yPositions));
	      var ratioDistance = Math.round(totalDistance * 100 / directDistance);
	      var speed = Math.round(directDistance * 100 / deltaTime);
	      var angle = TypingDNA.mouse.getAngle(xPosDelta, yPosDelta);
	      var eventType = 1;
	      var arr = [eventType, deltaTime, directDistance, speed, angle, ratioDistance];
	      for (i in arr) {
	        if (isNaN(arr[i])) {
	          return;
	        }
	      }
	      TypingDNA.mouse.history.add(arr);
	      TypingDNA.lastMouseStop = false;
	    };
	
	    TypingDNA.mouse.recordScrollAction = function () {
	      var length = TypingDNA.mouse.scrollTimes.length;
	      if (length < 2) {
	        return;
	      }
	      var deltaTime = TypingDNA.mouse.scrollTimes[length - 1] - TypingDNA.mouse.scrollTimes[0];
	      var directDistance = TypingDNA.mouse.scrollTopArr[length - 1] - TypingDNA.mouse.scrollTopArr[0];
	      var speed = Math.round(directDistance * 100 / deltaTime);
	      var eventType = 2;
	      var arr = [eventType, deltaTime, directDistance, speed];
	      for (i in arr) {
	        if (isNaN(arr[i]) && !isFinite(arr[i])) {
	          return;
	        }
	      }
	      TypingDNA.mouse.history.add(arr);
	    };
	
	    TypingDNA.mouse.history.add = function (arr) {
	      this.stack.push(arr);
	      if (this.stack.length > TypingDNA.maxMouseHistoryLength) {
	        this.stack.shift();
	      }
	    };
	
	    TypingDNA.mouse.history.getDiagram = function () {
	      var mouseDiagram = this.stack.join("|");
	      return [String(TypingDNA.isMobile()) + "," + String(TypingDNA.version), mouseDiagram].join("|");
	    };
	
	    TypingDNA.mouse.clearLastMove = function () {
	      TypingDNA.mouse.times = [];
	      TypingDNA.mouse.xPositions = [];
	      TypingDNA.mouse.yPositions = [];
	    };
	
	    TypingDNA.mouse.checkMove = function () {
	      clearInterval(TypingDNA.moveInterval);
	      if (TypingDNA.mouse.started == true) {
	        TypingDNA.mouse.started = false;
	        TypingDNA.mouse.recordMoveAction();
	        TypingDNA.mouse.clearLastMove();
	      }
	    };
	
	    TypingDNA.mouse.clearLastScroll = function () {
	      TypingDNA.mouse.scrollTimes = [];
	      TypingDNA.mouse.scrollTopArr = [];
	    };
	
	    TypingDNA.mouse.checkScroll = function () {
	      clearInterval(TypingDNA.scrollInterval);
	      if (TypingDNA.mouse.scrollStarted == true) {
	        TypingDNA.mouse.scrollStarted = false;
	        TypingDNA.mouse.recordScrollAction();
	        TypingDNA.mouse.clearLastScroll();
	      }
	    };
	
	    /**
	     * Adds a target to the targetIds array.
	     */
	    TypingDNA.addTarget = function (target) {
	      var targetLength = TypingDNA.targetIds.length;
	      var targetFound = false;
	      if (targetLength > 0) {
	        for (var i = 0; i < targetLength; i++) {
	          if (TypingDNA.targetIds[i] == target) {
	            targetFound = true;
	            break;
	          }
	        }
	        if (!targetFound) {
	          TypingDNA.targetIds.push(target);
	        }
	      } else {
	        TypingDNA.targetIds.push(target);
	      }
	    };
	
	    /**
	     * Adds a target to the targetIds array.
	     */
	    TypingDNA.removeTarget = function (target) {
	      var targetLength = TypingDNA.targetIds.length;
	      if (targetLength > 0) {
	        for (var i = 0; i < targetLength; i++) {
	          if (TypingDNA.targetIds[i] == target) {
	            TypingDNA.targetIds.splice(i, 1);
	            break;
	          }
	        }
	      }
	    };
	
	    /**
	     * Resets the history stack
	     */
	    TypingDNA.reset = function (all) {
	      TypingDNA.history.stack = [];
	      TypingDNA.history.stackDiagram = [];
	      TypingDNA.clickTimes = [];
	      TypingDNA.stopTimes = [];
	      TypingDNA.ACInputLengths = {
	        inputs: [],
	        lastLength: []
	      };
	      if (all == true) {
	        TypingDNA.mouse.history.stack = [];
	      }
	    };
	
	    /**
	     * Automatically called at initilization. It starts the recording of keystrokes.
	     */
	    TypingDNA.start = function () {
	      TypingDNA.diagramRecording = true;
	      return TypingDNA.recording = true;
	    };
	
	    /**
	     * Ends the recording of further keystrokes. To restart recording afterwards you can
	     * either call TypingDNA.start() or create a new TypingDNA object again, not recommended.
	     */
	    TypingDNA.stop = function () {
	      TypingDNA.diagramRecording = false;
	      return TypingDNA.recording = false;
	    };
	
	    /**
	     * Starts the recording of mouse activity.
	     */
	    TypingDNA.startMouse = function () {
	      return TypingDNA.mouseRecording = TypingDNA.mouseMoveRecording = true;
	    };
	
	    /**
	     * Stops the recording of mouse activity.
	     */
	    TypingDNA.stopMouse = function () {
	      return TypingDNA.mouseRecording = TypingDNA.mouseMoveRecording = false;
	    };
	
	    /**
	     * This is the main function that outputs the typing pattern as a String
	     * {type:Number, text:String, textId:Number, length: Number, targetId:String, caseSensitive:Boolean}
	     * @param {Object} obj an object with the following properties
	     * * * @param {String} type 0 for anytext pattern, 1 for sametext pattern (also called diagram pattern)
	     * * * and 2 for extended pattern (most versatile, can replace both anytext and sametext patterns)
	     * * * @param {Number} length (Optional) the length of the text in the history for which you want
	     * * * the typing pattern. length is ignored when text or targetId is set (or both).
	     * * * @param {String} text  (Only for type 1 and type 2) a typed string that you want the typing pattern for
	     * * * @param {Number} textId (Optional, only for type 1 and type 2) a personalized id for the typed text
	     * * * @param {String} targetId (Optional) specifies if pattern is obtain only from text typed in a certain target
	     * * * @param {Boolean} caseSensitive (Optional, default: false) Used if you pass a text for type 1 or type 2
	     * * * DEPRECATED * * * in favor of type = 2 * * *
	     * * * @param {Boolean} extended (Only for type 1) specifies if full information about what was typed is produced,
	     * * * including the actual key pressed, if false, only the order of pressed keys is kept (no actual content)
	     * @return {String} A typing pattern in string form
	     * @example var typingPattern = tdna.getTypingPattern({type=0, length=180});
	     * @example var typingPattern = tdna.getTypingPattern({type=1, text="Hello5g21?*"});
	     * @example var typingPattern = tdna.getTypingPattern({type=2, text="example@mail.com"});
	     */
	    TypingDNA.getTypingPattern = function (obj) {
	      if ((typeof obj === "undefined" ? "undefined" : (0, _typeof3.default)(obj)) === 'object') {
	        switch (obj.type) {
	          case 0:
	            return TypingDNA.get(obj.length, obj.targetId);
	            break;
	          case 1:
	            var str = obj.text != undefined ? obj.text : obj.length;
	            return TypingDNA.history.getDiagram(obj.extended, str, obj.textId, obj.targetId, obj.caseSensitive);
	            break;
	          case 2:
	            var str = obj.text != undefined ? obj.text : obj.length;
	            return TypingDNA.history.getDiagram(true, str, obj.textId, obj.targetId, obj.caseSensitive);
	            break;
	          default:
	            return TypingDNA.get(obj.length);
	            break;
	        }
	      } else {
	        return TypingDNA.get();
	      }
	    };
	
	    TypingDNA.getDiagram = function (str, textId) {
	      return TypingDNA.history.getDiagram(false, str, textId, undefined, false);
	    };
	
	    TypingDNA.getExtendedDiagram = function (str, textId) {
	      return TypingDNA.history.getDiagram(true, str, textId, undefined, false);
	    };
	
	    TypingDNA.getMouseDiagram = function () {
	      return TypingDNA.mouse.history.getDiagram();
	    };
	
	    TypingDNA.get = function (length, targetId) {
	      var historyTotalLength = TypingDNA.history.stack.length;
	      if (length == undefined || length == 0) {
	        length = TypingDNA.defaultHistoryLength;
	      }
	      if (length > historyTotalLength) {
	        length = historyTotalLength;
	      }
	      var obj = {};
	
	      var _TypingDNA$history$ge = TypingDNA.history.get(length, "", targetId);
	
	      var _TypingDNA$history$ge2 = (0, _slicedToArray3.default)(_TypingDNA$history$ge, 2);
	
	      obj.arr = _TypingDNA$history$ge2[0];
	      targetLength = _TypingDNA$history$ge2[1];
	
	      if (targetId != undefined && targetId != "") {
	        length = targetLength;
	      }
	      var zl = TypingDNA.zl;
	      var histRev = length;
	      var histSktF = TypingDNA.math.fo(TypingDNA.history.get(length, "seek", targetId));
	      var histPrtF = TypingDNA.math.fo(TypingDNA.history.get(length, "press", targetId));
	      var pressHistMean = Math.round(TypingDNA.math.avg(histPrtF));
	      var seekHistMean = Math.round(TypingDNA.math.avg(histSktF));
	      var pressHistSD = Math.round(TypingDNA.math.sd(histPrtF));
	      var seekHistSD = Math.round(TypingDNA.math.sd(histSktF));
	      var charMeanTime = seekHistMean + pressHistMean;
	      var pressRatio = TypingDNA.math.rd((pressHistMean + zl) / (charMeanTime + zl), 4);
	      var seekToPressRatio = TypingDNA.math.rd((1 - pressRatio) / pressRatio, 4);
	      var pressSDToPressRatio = TypingDNA.math.rd((pressHistSD + zl) / (pressHistMean + zl), 4);
	      var seekSDToPressRatio = TypingDNA.math.rd((seekHistSD + zl) / (pressHistMean + zl), 4);
	      var cpm = Math.round(6E4 / (charMeanTime + zl));
	      if (histRev == 0) {
	        cpm = 0;
	      }
	      for (var i in obj.arr) {
	        var rev = obj.arr[i][1].length;
	        var seekMean = 0;
	        var pressMean = 0;
	        var postMean = 0;
	        var seekSD = 0;
	        var pressSD = 0;
	        var postSD = 0;
	        switch (obj.arr[i][0].length) {
	          case 0:
	            break;
	          case 1:
	            var seekMean = TypingDNA.math.rd((obj.arr[i][0][0] + zl) / (seekHistMean + zl), 4);
	            break;
	          default:
	            var arr = TypingDNA.math.fo(obj.arr[i][0]);
	            seekMean = TypingDNA.math.rd((TypingDNA.math.avg(arr) + zl) / (seekHistMean + zl), 4);
	            seekSD = TypingDNA.math.rd((TypingDNA.math.sd(arr) + zl) / (seekHistSD + zl), 4);
	        }
	        switch (obj.arr[i][1].length) {
	          case 0:
	            break;
	          case 1:
	            var pressMean = TypingDNA.math.rd((obj.arr[i][1][0] + zl) / (pressHistMean + zl), 4);
	            break;
	          default:
	            var arr = TypingDNA.math.fo(obj.arr[i][1]);
	            pressMean = TypingDNA.math.rd((TypingDNA.math.avg(arr) + zl) / (pressHistMean + zl), 4);
	            pressSD = TypingDNA.math.rd((TypingDNA.math.sd(arr) + zl) / (pressHistSD + zl), 4);
	        }
	        switch (obj.arr[i][2].length) {
	          case 0:
	            break;
	          case 1:
	            var postMean = TypingDNA.math.rd((obj.arr[i][2][0] + zl) / (seekHistMean + zl), 4);
	            break;
	          default:
	            var arr = TypingDNA.math.fo(obj.arr[i][2]);
	            postMean = TypingDNA.math.rd((TypingDNA.math.avg(arr) + zl) / (seekHistMean + zl), 4);
	            postSD = TypingDNA.math.rd((TypingDNA.math.sd(arr) + zl) / (seekHistSD + zl), 4);
	        }
	        delete obj.arr[i][2];
	        delete obj.arr[i][1];
	        delete obj.arr[i][0];
	        obj.arr[i][0] = rev;
	        obj.arr[i][1] = seekMean;
	        obj.arr[i][2] = pressMean;
	        obj.arr[i][3] = postMean;
	        obj.arr[i][4] = seekSD;
	        obj.arr[i][5] = pressSD;
	        obj.arr[i][6] = postSD;
	      }
	      var arr = [];
	      TypingDNA.apu(arr, histRev);
	      TypingDNA.apu(arr, cpm);
	      TypingDNA.apu(arr, charMeanTime);
	      TypingDNA.apu(arr, pressRatio);
	      TypingDNA.apu(arr, seekToPressRatio);
	      TypingDNA.apu(arr, pressSDToPressRatio);
	      TypingDNA.apu(arr, seekSDToPressRatio);
	      TypingDNA.apu(arr, pressHistMean);
	      TypingDNA.apu(arr, seekHistMean);
	      TypingDNA.apu(arr, pressHistSD);
	      TypingDNA.apu(arr, seekHistSD);
	      for (var c = 0; c <= 6; c++) {
	        for (var i = 0; i < 44; i++) {
	          var keyCode = TypingDNA.keyCodes[i];
	          var val = obj.arr[keyCode][c];
	          if (val == 0 && c > 0) {
	            val = 1;
	          }
	          TypingDNA.apu(arr, val);
	        }
	      }
	      TypingDNA.apu(arr, TypingDNA.isMobile());
	      TypingDNA.apu(arr, TypingDNA.version);
	      TypingDNA.apu(arr, TypingDNA.flags);
	      arr.push(TypingDNA.history.getSpecialKeys());
	      return arr.join(",");
	    };
	
	    TypingDNA.apu = function (arr, val) {
	      "NaN" == String(val) && (val = 0);
	      arr.push(val);
	    };
	
	    TypingDNA.math = {};
	
	    TypingDNA.math.rd = function (val, dec) {
	      return Number(val.toFixed(dec));
	    };
	
	    TypingDNA.math.avg = function (arr) {
	      var len = arr.length;
	      if (len > 0) {
	        var sum = 0;
	        for (var i = 0; i < len; i++) {
	          sum += arr[i];
	        }
	        return this.rd(sum / len, 4);
	      } else {
	        return 0;
	      }
	    };
	
	    TypingDNA.math.sd = function (arr) {
	      var len = arr.length;
	      if (len < 2) {
	        return 0;
	      } else {
	        var sumVS = 0;
	        var mean = this.avg(arr);
	        for (var i = 0; i < len; i++) {
	          sumVS += (arr[i] - mean) * (arr[i] - mean);
	        }
	        var sd = Math.sqrt(sumVS / len);
	        return sd;
	      }
	    };
	
	    TypingDNA.math.fo = function (arr) {
	      if (arr.length > 1) {
	        var values = arr.concat();
	        var len = arr.length;
	        values.sort(function (a, b) {
	          return a - b;
	        });
	        var asd = this.sd(values);
	        var aMean = values[Math.ceil(arr.length / 2)];
	        var multiplier = 2;
	        var maxVal = aMean + multiplier * asd;
	        var minVal = aMean - multiplier * asd;
	        if (len < 20) {
	          minVal = 0;
	        }
	        var fVal = [];
	        for (var i = 0; i < len; i++) {
	          var tempval = values[i];
	          if (tempval < maxVal && tempval > minVal) {
	            fVal.push(tempval);
	          }
	        }
	        return fVal;
	      } else {
	        return arr;
	      }
	    };
	
	    // Calculate a 32 bit FNV-1a hash
	    TypingDNA.math.fnv1aHash = function (str) {
	      if (str == undefined && typeof str !== 'string') {
	        return 0;
	      }
	      str = str.toLowerCase();
	      var i, l;
	      var hval = 0x721b5ad4;
	      for (i = 0, l = str.length; i < l; i++) {
	        hval ^= str.charCodeAt(i);
	        hval += (hval << 1) + (hval << 4) + (hval << 7) + (hval << 8) + (hval << 24);
	      }
	      return hval >>> 0;
	    };
	
	    TypingDNA.history = {};
	    TypingDNA.history.stack = [];
	    TypingDNA.history.stackDiagram = [];
	
	    TypingDNA.history.add = function (arr) {
	      this.stack.push(arr);
	      if (this.stack.length > TypingDNA.maxHistoryLength) {
	        this.stack.shift();
	      }
	    };
	
	    TypingDNA.history.addDiagram = function (arr) {
	      this.stackDiagram.push(arr);
	    };
	
	    TypingDNA.history.getDiagram = function (extended, str, textId, targetId, caseSensitive) {
	      var caseSensitive = caseSensitive != undefined ? caseSensitive : str == undefined || str == "";
	      var returnArr = [];
	      var diagramType = extended == true ? 1 : 0;
	      var stackDiagram = this.stackDiagram;
	      if (targetId != undefined && targetId != "" && stackDiagram.length > 0) {
	        stackDiagram = TypingDNA.sliceStackByTargetId(stackDiagram, targetId);
	        if (str == undefined || str == "") {
	          var element = TypingDNA.document.getElementById(targetId);
	          if (element != null) {
	            str = element.value;
	          }
	        }
	      } else {
	        var targetLength = TypingDNA.targetIds.length;
	        if (str == undefined || str == "") {
	          if (targetLength > 0) {
	            str = "";
	            for (var i = 0; i < targetLength; i++) {
	              var element = TypingDNA.document.getElementById(TypingDNA.targetIds[i]);
	              if (element != null) {
	                str += element.value;
	              }
	            }
	          } else {
	            if (!extended) {
	              console.log("Please use extended pattern OR provide a fixed string param OR use the addTarget method.");
	            }
	          }
	        }
	      }
	      var missingCount = 0;
	      var diagramHistoryLength = stackDiagram.length;
	      var strLength = diagramHistoryLength;
	      if (typeof str === 'string') {
	        strLength = str.length;
	      } else if (typeof str === 'number' && str < diagramHistoryLength) {
	        strLength = str;
	      }
	      var returnTextId = 0;
	      if (textId != undefined) {
	        if (isNaN(parseInt(textId))) {
	          returnTextId = TypingDNA.math.fnv1aHash(textId);
	        } else {
	          returnTextId = parseInt(textId);
	        }
	      } else {
	        if (typeof str === 'string') {
	          returnTextId = TypingDNA.math.fnv1aHash(str);
	        }
	      }
	      returnArr.push([TypingDNA.isMobile(), TypingDNA.version, TypingDNA.flags, diagramType, strLength, returnTextId, TypingDNA.history.getSpecialKeys()]);
	      if (str != undefined && str.length > 0 && typeof str === 'string') {
	        var strLower = str.toLowerCase();
	        var strUpper = str.toUpperCase();
	        var lastFoundPos = [];
	        var lastPos = 0;
	        var strUpperCharCode;
	        var currentSensitiveCharCode;
	        for (var i = 0; i < str.length; i++) {
	          var currentCharCode = str.charCodeAt(i);
	          if (!caseSensitive) {
	            strUpperCharCode = strUpper.charCodeAt(i);
	            currentSensitiveCharCode = strUpperCharCode != currentCharCode ? strUpperCharCode : strLower.charCodeAt(i);
	          }
	          var startPos = lastPos;
	          var finishPos = diagramHistoryLength;
	          var found = false;
	          while (found == false) {
	            for (var j = startPos; j < finishPos; j++) {
	              var arr = stackDiagram[j];
	              var charCode = arr[3];
	              if (charCode == currentCharCode || !caseSensitive && charCode == currentSensitiveCharCode) {
	                found = true;
	                if (j == lastPos) {
	                  lastPos++;
	                  lastFoundPos = [];
	                } else {
	                  lastFoundPos.push(j);
	                  var len = lastFoundPos.length;
	                  if (len > 1 && lastFoundPos[len - 1] == lastFoundPos[len - 2] + 1) {
	                    lastPos = j + 1;
	                    lastFoundPos = [];
	                  }
	                }
	                var keyCode = arr[0];
	                var seekTime = arr[1];
	                var pressTime = arr[2];
	                if (extended) {
	                  returnArr.push([charCode, seekTime, pressTime, keyCode]);
	                } else {
	                  returnArr.push([seekTime, pressTime]);
	                }
	                break;
	              }
	            }
	            if (found == false) {
	              if (startPos != 0) {
	                startPos = 0;
	                finishPos = lastPos;
	              } else {
	                found = true;
	                if (TypingDNA.replaceMissingKeys) {
	                  missingCount++;
	                  if ((0, _typeof3.default)(TypingDNA.savedMissingAvgValues) !== 'object' || TypingDNA.savedMissingAvgValues.historyLength != diagramHistoryLength) {
	                    var histSktF = TypingDNA.math.fo(TypingDNA.history.get(0, "seek"));
	                    var histPrtF = TypingDNA.math.fo(TypingDNA.history.get(0, "press"));
	                    var seekTime = Math.round(TypingDNA.math.avg(histSktF));
	                    var pressTime = Math.round(TypingDNA.math.avg(histPrtF));
	                    TypingDNA.savedMissingAvgValues = {
	                      seekTime: seekTime,
	                      pressTime: pressTime,
	                      historyLength: diagramHistoryLength
	                    };
	                  } else {
	                    var seekTime = TypingDNA.savedMissingAvgValues.seekTime;
	                    var pressTime = TypingDNA.savedMissingAvgValues.pressTime;
	                  }
	                  var missing = 1;
	                  if (extended) {
	                    returnArr.push([currentCharCode, seekTime, pressTime, currentCharCode, missing]);
	                  } else {
	                    returnArr.push([seekTime, pressTime, missing]);
	                  }
	                  break;
	                }
	              }
	            }
	          }
	          if (TypingDNA.replaceMissingKeysPerc < missingCount * 100 / strLength) {
	            return null;
	          }
	        }
	      } else {
	        var startCount = 0;
	        if (typeof str === 'number') {
	          startCount = diagramHistoryLength - str;
	        }
	        if (startCount < 0) {
	          startCount = 0;
	        }
	        for (var i = startCount; i < diagramHistoryLength; i++) {
	          var arr = stackDiagram[i];
	          var keyCode = arr[0];
	          var seekTime = arr[1];
	          var pressTime = arr[2];
	          if (extended) {
	            var charCode = arr[3];
	            returnArr.push([charCode, seekTime, pressTime, keyCode]);
	          } else {
	            returnArr.push([seekTime, pressTime]);
	          }
	        }
	      }
	      return returnArr.join("|");
	    };
	
	    TypingDNA.sliceStackByTargetId = function (stack, targetId) {
	      var length = stack.length;
	      var newStack = [];
	      for (i = 0; i < length; i++) {
	        var arr = stack[i];
	        if (arr[5] == targetId) {
	          newStack.push(arr);
	        }
	      }
	      return newStack;
	    };
	
	    TypingDNA.history.get = function (length, type, targetId) {
	      var stack = this.stack;
	      if (targetId != undefined && targetId != "" && stack.length > 0) {
	        stack = TypingDNA.sliceStackByTargetId(stack, targetId);
	      }
	      var historyTotalLength = stack.length;
	      if (length == 0 || length == undefined) {
	        length = TypingDNA.defaultHistoryLength;
	      }
	      if (length > historyTotalLength) {
	        length = historyTotalLength;
	      }
	      switch (type) {
	        case "seek":
	          var seekArr = [];
	          for (i = 1; i <= length; i++) {
	            var seekTime = stack[historyTotalLength - i][1];
	            if (seekTime <= TypingDNA.maxSeekTime) {
	              seekArr.push(seekTime);
	            }
	          };
	          return seekArr;
	          break;
	        case "press":
	          var pressArr = [];
	          for (i = 1; i <= length; i++) {
	            var pressTime = stack[historyTotalLength - i][2];
	            if (pressTime <= TypingDNA.maxPressTime) {
	              pressArr.push(pressTime);
	            }
	          };
	          return pressArr;
	          break;
	        default:
	          var historyStackObj = {};
	          for (var i in TypingDNA.keyCodes) {
	            historyStackObj[TypingDNA.keyCodes[i]] = [[], [], []];
	          }
	          for (i = 1; i <= length; i++) {
	            var arr = stack[historyTotalLength - i];
	            var keyCode = arr[0];
	            var seekTime = arr[1];
	            var pressTime = arr[2];
	            var prevKeyCode = arr[3];
	            if (TypingDNA.keyCodesObj[keyCode]) {
	              if (seekTime <= TypingDNA.maxSeekTime) {
	                historyStackObj[keyCode][0].push(seekTime);
	                if (prevKeyCode != 0 && TypingDNA.keyCodesObj[prevKeyCode]) {
	                  historyStackObj[prevKeyCode][2].push(seekTime);
	                }
	              }
	              if (pressTime <= TypingDNA.maxPressTime) {
	                historyStackObj[keyCode][1].push(pressTime);
	              }
	            }
	          };
	          return [historyStackObj, length];
	      }
	    };
	
	    TypingDNA.history.getSpecialKeys = function () {
	      var returnArr = [];
	      var length = this.stack.length;
	      var historyStackObj = {};
	      for (var i in TypingDNA.spKeyCodes) {
	        historyStackObj[TypingDNA.spKeyCodes[i]] = [[]];
	      }
	      for (i = 1; i <= length; i++) {
	        var arr = this.stack[length - i];
	        if (TypingDNA.spKeyCodesObj[arr[0]]) {
	          var keyCode = arr[0];
	          var pressTime = arr[2];
	          if (pressTime <= TypingDNA.maxPressTime) {
	            historyStackObj[keyCode][0].push(pressTime);
	          }
	        }
	      }
	      for (var i in TypingDNA.spKeyCodes) {
	        var arr = TypingDNA.math.fo(historyStackObj[TypingDNA.spKeyCodes[i]][0]);
	        var arrLen = arr.length;
	        returnArr.push(arrLen);
	        if (arrLen > 1) {
	          returnArr.push(Math.round(TypingDNA.math.avg(arr)));
	          returnArr.push(Math.round(TypingDNA.math.sd(arr)));
	        } else if (arrLen == 1) {
	          returnArr.push([arr[0], -1]);
	        } else {
	          returnArr.push([-1, -1]);
	        }
	      }
	      var clicksArrLen = TypingDNA.clickTimes.length;
	      returnArr.push(clicksArrLen);
	      if (clicksArrLen > 1) {
	        returnArr.push(Math.round(TypingDNA.math.avg(TypingDNA.clickTimes)));
	        returnArr.push(Math.round(TypingDNA.math.sd(TypingDNA.clickTimes)));
	      } else if (clicksArrLen == 1) {
	        returnArr.push(TypingDNA.clickTimes[0], -1);
	      } else {
	        returnArr.push([-1, -1]);
	      }
	      var stopArrLen = TypingDNA.stopTimes.length;
	      returnArr.push(stopArrLen);
	      if (stopArrLen > 1) {
	        returnArr.push(Math.round(TypingDNA.math.avg(TypingDNA.stopTimes)));
	        returnArr.push(Math.round(TypingDNA.math.sd(TypingDNA.stopTimes)));
	      } else if (stopArrLen == 1) {
	        returnArr.push(TypingDNA.stopTimes[0], -1);
	      } else {
	        returnArr.push([-1, -1]);
	      }
	      return returnArr;
	    };
	
	    /**
	     * Checks the quality of a typing pattern, how well it is revelated, how useful the
	     * information will be for matching applications. It returns a value between 0 and 1.
	     * Values over 0.3 are acceptable, however a value over 0.7 shows good pattern strength.
	     * @param  {String} typingPattern The typing pattern string returned by the get() function.
	     * @return {Number} A real number between 0 and 1. A close to 1 value means a stronger pattern.
	     * @example var quality = tdna.getQuality(typingPattern);
	     */
	    TypingDNA.getQuality = function (typingPattern) {
	      var obj = typingPattern.split(",");
	      for (i = 0; i < obj.length; i++) {
	        obj[i] = Number(obj[i]);
	      }
	      var totalEvents = obj[0];
	      var acc = rec = avgAcc = 0;
	      var avg = TypingDNA.math.avg(obj);
	      var revs = obj.slice(11, 55);
	      for (var i in revs) {
	        rec += Number(revs[i] > 0);
	        acc += Number(revs[i] > 4);
	        avgAcc += Number(revs[i] > avg);
	      }
	      var tReturn = Math.sqrt(rec * acc * avgAcc) / 80;
	      return tReturn > 1 ? 1 : tReturn;
	    };
	
	    /**
	     * Checks the validity of a typing pattern if recorded on mobile.
	     * @param  {String} typingPattern The typing pattern string returned by the get() function.
	     * @return {Number} A real number between 0 and 1. A number larger than 0.7 usually means a valid pattern.
	     * @example var quality = tdna.checkMobileValidity(typingPattern);
	     */
	    TypingDNA.checkMobileValidity = function (typingPattern) {
	      var obj = typingPattern.split(",");
	      var totalEvents = obj[0];
	      if (totalEvents == 0) {
	        return 0;
	      }
	      var rec = 0;
	      var revs = obj.slice(11, 55);
	      for (var i in revs) {
	        rec += Number(revs[i]);
	      }
	      return rec / totalEvents;
	    };
	
	    TypingDNA.getLength = function (typingPattern) {
	      return Number(typingPattern.split(",")[1]);
	    };
	
	    TypingDNA.isMobile = function () {
	      if (TypingDNA.mobile != undefined) {
	        return TypingDNA.mobile;
	      } else {
	        var check = 0;
	        (function (a) {
	          if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) {
	            check = 1;
	          }
	        })(navigator.userAgent || navigator.vendor || window.opera);
	        TypingDNA.mobile = check;
	        return check;
	      }
	    };
	
	    TypingDNA.getTextId = function (str) {
	      return TypingDNA.math.fnv1aHash(str);
	    };
	  } else {
	    // TypingDNA is a static class, currently doesn't support actual multiple instances (Singleton implementation)
	    return TypingDNA.instance;
	  }
	};

/***/ },
/* 691 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _isIterable2 = __webpack_require__(692);
	
	var _isIterable3 = _interopRequireDefault(_isIterable2);
	
	var _getIterator2 = __webpack_require__(695);
	
	var _getIterator3 = _interopRequireDefault(_getIterator2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function () {
	  function sliceIterator(arr, i) {
	    var _arr = [];
	    var _n = true;
	    var _d = false;
	    var _e = undefined;
	
	    try {
	      for (var _i = (0, _getIterator3.default)(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {
	        _arr.push(_s.value);
	
	        if (i && _arr.length === i) break;
	      }
	    } catch (err) {
	      _d = true;
	      _e = err;
	    } finally {
	      try {
	        if (!_n && _i["return"]) _i["return"]();
	      } finally {
	        if (_d) throw _e;
	      }
	    }
	
	    return _arr;
	  }
	
	  return function (arr, i) {
	    if (Array.isArray(arr)) {
	      return arr;
	    } else if ((0, _isIterable3.default)(Object(arr))) {
	      return sliceIterator(arr, i);
	    } else {
	      throw new TypeError("Invalid attempt to destructure non-iterable instance");
	    }
	  };
	}();

/***/ },
/* 692 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(693), __esModule: true };

/***/ },
/* 693 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(381);
	__webpack_require__(337);
	module.exports = __webpack_require__(694);


/***/ },
/* 694 */
/***/ function(module, exports, __webpack_require__) {

	var classof = __webpack_require__(666);
	var ITERATOR = __webpack_require__(378)('iterator');
	var Iterators = __webpack_require__(360);
	module.exports = __webpack_require__(345).isIterable = function (it) {
	  var O = Object(it);
	  return O[ITERATOR] !== undefined
	    || '@@iterator' in O
	    // eslint-disable-next-line no-prototype-builtins
	    || Iterators.hasOwnProperty(classof(O));
	};


/***/ },
/* 695 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(696), __esModule: true };

/***/ },
/* 696 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(381);
	__webpack_require__(337);
	module.exports = __webpack_require__(697);


/***/ },
/* 697 */
/***/ function(module, exports, __webpack_require__) {

	var anObject = __webpack_require__(350);
	var get = __webpack_require__(671);
	module.exports = __webpack_require__(345).getIterator = function (it) {
	  var iterFn = get(it);
	  if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');
	  return anObject(iterFn.call(it));
	};


/***/ },
/* 698 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta) {
	
	  var _ = Okta._;
	
	  var dividerTpl = Okta.tpl('<div class="auth-divider">\
	      <span class="auth-divider-text">{{text}}</span>\
	    </div>');
	  var formTitleTpl = Okta.tpl('<h2 data-se="o-form-head" class="okta-form-title o-form-head">{{title}}</h2>');
	
	  return Okta.View.extend({
	
	    className: 'primary-auth-container',
	
	    children: function children() {
	      var children = [],
	          buttons = this.settings.get('configuredButtons'),
	          divider = dividerTpl({ text: Okta.loc('socialauth.divider.text', 'login') });
	
	      _.each(buttons, function (button) {
	        children.push(this._createButton(button));
	      }, this);
	
	      // If the social auth buttons have to be above the Okta form, the title moves from
	      // primary auth form to the social auth (above the buttons) and the divider goes below
	      // the buttons (in between social auth and primary auth). If social auth needs to go below
	      // Okta form, just add the divider at the top of the social auth container. The title still
	      // lives in primary auth form.
	      if (this.settings.get('socialAuthPositionTop')) {
	        children.unshift(formTitleTpl({ title: Okta.loc('primaryauth.title', 'login') }));
	        // Divider between Primary Auth and the Social Auth
	        children.push(divider);
	      } else {
	        children.unshift(divider);
	      }
	
	      return children;
	    },
	
	    _createButton: function _createButton(options) {
	      return Okta.createButton({
	        attributes: {
	          'data-se': options.dataAttr
	        },
	        className: options.className,
	        title: options.title,
	        click: options.click
	      });
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 699 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2016-2017, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta) {
	
	  return Okta.View.extend({
	    template: '\
	        <div class="content-container">\
	          <span class="registration-label">{{label}}</span>\
	          <a title="{{text}}" aria-label="{{text}}" class="registration-link" href="#">{{text}}</a>\
	        </div>\
	        ',
	    className: 'registration-container',
	
	    events: {
	      'click a.registration-link': 'handleClickEvent'
	    },
	
	    handleClickEvent: function handleClickEvent(e) {
	      e.preventDefault();
	      var clickHandler = this.settings.get('registration.click');
	      if (clickHandler) {
	        clickHandler();
	      } else {
	        this.options.appState.trigger('navigate', 'signin/register');
	      }
	    },
	
	    getTemplateData: function getTemplateData() {
	      var templateData = {
	        label: Okta.loc('registration.signup.label', 'login'),
	        text: Okta.loc('registration.signup.text', 'login')
	      };
	      return templateData;
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 700 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(645), __webpack_require__(701), __webpack_require__(615)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, BaseLoginModel, CookieUtil, Enums) {
	
	  var _ = Okta._;
	
	  return BaseLoginModel.extend({
	
	    props: function props() {
	      var cookieUsername = CookieUtil.getCookieUsername(),
	          properties = this.getUsernameAndRemember(cookieUsername);
	
	      var props = {
	        username: {
	          type: 'string',
	          validate: function validate(value) {
	            if (_.isEmpty(value)) {
	              return Okta.loc('error.username.required', 'login');
	            }
	          },
	          value: properties.username
	        },
	        lastUsername: ['string', false, cookieUsername],
	        context: ['object', false],
	        remember: ['boolean', true, properties.remember],
	        multiOptionalFactorEnroll: ['boolean', true]
	      };
	      if (!(this.settings && this.settings.get('features.passwordlessAuth'))) {
	        props.password = {
	          type: 'string',
	          validate: function validate(value) {
	            if (_.isEmpty(value)) {
	              return Okta.loc('error.password.required', 'login');
	            }
	          }
	        };
	      }
	      return props;
	    },
	
	    getUsernameAndRemember: function getUsernameAndRemember(cookieUsername) {
	      var settingsUsername = this.settings && this.settings.get('username'),
	          rememberMeEnabled = this.settings && this.settings.get('features.rememberMe'),
	          remember = false,
	          username;
	
	      if (settingsUsername) {
	        username = settingsUsername;
	        remember = rememberMeEnabled && username === cookieUsername;
	      } else if (rememberMeEnabled && cookieUsername) {
	        // Only respect the cookie if the feature is enabled.
	        // Allows us to force prompting when necessary, e.g. SAML ForceAuthn
	        username = cookieUsername;
	        remember = true;
	      }
	
	      return {
	        username: username,
	        remember: remember
	      };
	    },
	
	    constructor: function constructor(options) {
	      this.settings = options && options.settings;
	      this.appState = options && options.appState;
	      Okta.Model.apply(this, arguments);
	      this.listenTo(this, 'change:username', function (model, username) {
	        this.set({ remember: username === this.get('lastUsername') });
	      });
	    },
	    parse: function parse(options) {
	      return _.omit(options, ['settings', 'appState']);
	    },
	
	    save: function save() {
	      var username = this.settings.transformUsername(this.get('username'), Enums.PRIMARY_AUTH),
	          remember = this.get('remember'),
	          lastUsername = this.get('lastUsername');
	
	      this.setUsernameCookie(username, remember, lastUsername);
	
	      //the 'save' event here is triggered and used in the BaseLoginController
	      //to disable the primary button on the primary auth form
	      this.trigger('save');
	
	      this.appState.trigger('loading', true);
	
	      var signInArgs = this.getSignInArgs(username);
	
	      var primaryAuthPromise;
	
	      if (this.appState.get('isUnauthenticated') && !this.settings.get('features.passwordlessAuth')) {
	        primaryAuthPromise = this.doTransaction(function (transaction) {
	          var authClient = this.appState.settings.authClient;
	          return this.doPrimaryAuth(authClient, signInArgs, transaction.authenticate);
	        });
	      } else {
	        primaryAuthPromise = this.startTransaction(function (authClient) {
	          return this.doPrimaryAuth(authClient, signInArgs, _.bind(authClient.signIn, authClient));
	        });
	      }
	
	      return primaryAuthPromise.fail(_.bind(function () {
	        this.trigger('error');
	        // Specific event handled by the Header for the case where the security image is not
	        // enabled and we want to show a spinner. (Triggered only here and handled only by Header).
	        this.appState.trigger('removeLoading');
	        CookieUtil.removeUsernameCookie();
	      }, this)).fin(_.bind(function () {
	        this.appState.trigger('loading', false);
	      }, this));
	    },
	
	    getSignInArgs: function getSignInArgs(username) {
	      var multiOptionalFactorEnroll = this.get('multiOptionalFactorEnroll');
	      var signInArgs = {
	        username: username,
	        options: {
	          warnBeforePasswordExpired: true,
	          multiOptionalFactorEnroll: multiOptionalFactorEnroll
	        }
	      };
	      if (!this.settings.get('features.passwordlessAuth')) {
	        signInArgs.password = this.get('password');
	      }
	      return signInArgs;
	    },
	
	    setUsernameCookie: function setUsernameCookie(username, remember, lastUsername) {
	      // Do not modify the cookie when feature is disabled, relevant for SAML ForceAuthn prompts
	      if (this.settings.get('features.rememberMe')) {
	        // Only delete the cookie if its owner says so. This allows other
	        // users to log in on a one-off basis.
	        if (!remember && lastUsername === username) {
	          CookieUtil.removeUsernameCookie();
	        } else if (remember) {
	          CookieUtil.setUsernameCookie(username);
	        }
	      }
	    },
	
	    doPrimaryAuth: function doPrimaryAuth(authClient, signInArgs, func) {
	      var deviceFingerprintEnabled = this.settings.get('features.deviceFingerprinting'),
	          typingPatternEnabled = this.settings.get('features.trackTypingPattern');
	
	      // Add the custom header for fingerprint, typing pattern if needed, and then remove it afterwards
	      // Since we only need to send it for primary auth
	      if (deviceFingerprintEnabled) {
	        authClient.options.headers['X-Device-Fingerprint'] = this.appState.get('deviceFingerprint');
	      }
	      if (typingPatternEnabled) {
	        authClient.options.headers['X-Typing-Pattern'] = this.appState.get('typingPattern');
	      }
	      var self = this;
	      return func(signInArgs).fin(function () {
	        if (deviceFingerprintEnabled) {
	          delete authClient.options.headers['X-Device-Fingerprint'];
	          self.appState.unset('deviceFingerprint'); //Fingerprint can only be used once
	        }
	        if (typingPatternEnabled) {
	          delete authClient.options.headers['X-Typing-Pattern'];
	          self.appState.unset('typingPattern');
	        }
	      });
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 701 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta) {
	  var Cookie = Okta.internal.util.Cookie;
	  var LAST_USERNAME_COOKIE_NAME = 'ln';
	  var DAYS_SAVE_REMEMBER = 365;
	
	  var fn = {};
	
	  fn.getCookieUsername = function () {
	    return Cookie.getCookie(LAST_USERNAME_COOKIE_NAME);
	  };
	
	  fn.setUsernameCookie = function (username) {
	    Cookie.setCookie(LAST_USERNAME_COOKIE_NAME, username, {
	      expires: DAYS_SAVE_REMEMBER,
	      path: '/'
	    });
	  };
	
	  fn.removeUsernameCookie = function () {
	    Cookie.removeCookie(LAST_USERNAME_COOKIE_NAME, { path: '/' });
	  };
	
	  return fn;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 702 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(564)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Util) {
	
	  var compile = Okta.Handlebars.compile;
	  var _ = Okta._;
	
	  return Okta.View.extend({
	    template: '\
	      <a href="#" data-se="needhelp" class="link help js-help">\
	      {{i18n code="needhelp" bundle="login"}}\
	      </a>\
	      <ul class="help-links js-help-links">\
	        <li>\
	        <a href="#" data-se="forgot-password" class="link js-forgot-password">\
	        {{i18n code="forgotpassword" bundle="login"}}\
	        </a>\
	        </li>\
	        {{#if features.selfServiceUnlock}}\
	          <li>\
	          <a href="#" data-se="unlock" class="link js-unlock">\
	          {{i18n code="unlockaccount" bundle="login"}}\
	          </a>\
	          </li>\
	        {{/if}}\
	        {{#each helpLinks.custom}}\
	          <li>\
	          <a href="{{href}}" class="link js-custom" {{#if target}}target="{{target}}"{{/if}}>{{text}}</a>\
	          </li>\
	        {{/each}}\
	        <li>\
	        <a href="{{helpLinkUrl}}" data-se="help-link" class="link js-help-link" target="_blank">\
	        {{i18n code="help" bundle="login"}}\
	        </a>\
	        </li>\
	      </ul>\
	    ',
	    className: 'auth-footer',
	
	    initialize: function initialize() {
	      this.listenTo(this.state, 'change:enabled', function (model, enable) {
	        this.$(':link').toggleClass('o-form-disabled', !enable);
	      });
	    },
	
	    getTemplateData: function getTemplateData() {
	      var helpLinkUrl;
	      var customHelpPage = this.settings.get('helpLinks.help');
	      if (customHelpPage) {
	        helpLinkUrl = customHelpPage;
	      } else {
	        helpLinkUrl = compile('{{baseUrl}}/help/login')({ baseUrl: this.settings.get('baseUrl') });
	      }
	      return _.extend(this.settings.toJSON({ verbose: true }), { helpLinkUrl: helpLinkUrl });
	    },
	    postRender: function postRender() {
	      this.$('.js-help-links').hide();
	    },
	    toggleLinks: function toggleLinks(e) {
	      e.preventDefault();
	      this.$('.js-help-links').slideToggle(200);
	    },
	    events: {
	      'click .js-help': function clickJsHelp(e) {
	        e.preventDefault();
	        if (!this.state.get('enabled')) {
	          return;
	        }
	
	        this.toggleLinks(e);
	      },
	      'click .js-forgot-password': function clickJsForgotPassword(e) {
	        e.preventDefault();
	        if (!this.state.get('enabled')) {
	          return;
	        }
	
	        var customResetPasswordPage = this.settings.get('helpLinks.forgotPassword');
	        if (customResetPasswordPage) {
	          Util.redirect(customResetPasswordPage);
	        } else {
	          this.options.appState.trigger('navigate', 'signin/forgot-password');
	        }
	      },
	      'click .js-unlock': function clickJsUnlock(e) {
	        e.preventDefault();
	        if (!this.state.get('enabled')) {
	          return;
	        }
	
	        var customUnlockPage = this.settings.get('helpLinks.unlock');
	        if (customUnlockPage) {
	          Util.redirect(customUnlockPage);
	        } else {
	          this.options.appState.trigger('navigate', 'signin/unlock');
	        }
	      }
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 703 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	/* eslint camelcase: 0 */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(704), __webpack_require__(409), __webpack_require__(641), __webpack_require__(642), __webpack_require__(615), __webpack_require__(643), __webpack_require__(705)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Duo, Q, FactorUtil, FormController, Enums, FormType, FooterSignout) {
	
	  var $ = Okta.$,
	      _ = Okta._;
	
	  return FormController.extend({
	
	    className: 'mfa-verify-duo duo-form',
	
	    Model: {
	      props: {
	        host: 'string',
	        signature: 'string',
	        postAction: 'string',
	        factorId: 'string',
	        stateToken: 'string',
	        rememberDevice: 'boolean'
	      },
	
	      initialize: function initialize() {
	        var rememberDevice = FactorUtil.getRememberDeviceValue(this.appState);
	        // set the initial value for remember device (Cannot do this while defining the
	        // local property because this.settings would not be initialized there yet).
	        this.set('rememberDevice', rememberDevice);
	      },
	
	      getInitOptions: function getInitOptions() {
	        var rememberDevice = !!this.get('rememberDevice');
	        return this.doTransaction(function (transaction) {
	          var data = {
	            rememberDevice: rememberDevice
	          };
	          var factor = _.findWhere(transaction.factors, {
	            provider: 'DUO',
	            factorType: 'web'
	          });
	          return factor.verify(data).fail(function (err) {
	            // Clean up the cookie on failure.
	            throw err;
	          });
	        });
	      },
	
	      verify: function verify(signedResponse) {
	        // Note: We should be doing this in OktaAuth! Fix when it's updated.
	        var url = this.get('postAction'),
	            factorId = this.get('factorId'),
	            self = this,
	            data = {
	          id: factorId,
	          stateToken: this.get('stateToken'),
	          sig_response: signedResponse
	        };
	        // We don't actually use authClient.post() here (unlike all the other cases in the
	        // sign-in widget) since the endpoint is wired to accept serialized form post instead
	        // of a JSON post ($.post() is different from authClient.post() in that in $.post(),
	        // jquery decides the Content-Type instead of it being a JSON type). Enroll/Verify DUO
	        // are the only two places where we actually do this.
	        // NOTE - If we ever decide to change this, we should test this very carefully.
	        var rememberDevice = this.get('rememberDevice');
	        return Q($.post(url, data)).then(function () {
	          return self.doTransaction(function (transaction) {
	            var data;
	            if (rememberDevice) {
	              data = { rememberDevice: rememberDevice };
	            }
	            return transaction.poll(data);
	          });
	        }).fail(function (err) {
	          self.trigger('error', self, err.xhr);
	        });
	      }
	    },
	
	    Form: {
	      autoSave: true,
	      noButtonBar: true,
	      title: _.partial(Okta.loc, 'factor.duo'),
	      attributes: { 'data-se': 'factor-duo' },
	
	      postRender: function postRender() {
	        this.add('<iframe frameborder="0" title="' + this.title() + '"></iframe>');
	        if (this.options.appState.get('allowRememberDevice')) {
	          this.addInput({
	            label: false,
	            'label-top': true,
	            placeholder: this.options.appState.get('rememberDeviceLabel'),
	            className: 'margin-btm-0',
	            name: 'rememberDevice',
	            type: 'checkbox'
	          });
	        }
	        Duo.init({
	          'host': this.model.get('host'),
	          'sig_request': this.model.get('signature'),
	          'iframe': this.$('iframe').get(0),
	          'post_action': _.bind(this.model.verify, this.model)
	        });
	      }
	    },
	
	    Footer: FooterSignout,
	
	    fetchInitialData: function fetchInitialData() {
	      var self = this;
	      return this.model.getInitOptions().then(function (trans) {
	        var res = trans.data;
	        if (!res._embedded || !res._embedded.factor || !res._embedded.factor._embedded || !res._embedded.factor._embedded.verification) {
	          throw new Error('Response does not have duo verification options');
	        }
	        var verification = res._embedded.factor._embedded.verification;
	        self.model.set({
	          host: verification.host,
	          signature: verification.signature,
	          postAction: verification._links.complete.href,
	          factorId: res._embedded.factor.id,
	          stateToken: res.stateToken
	        });
	      });
	    },
	
	    trapAuthResponse: function trapAuthResponse() {
	      if (this.options.appState.get('isMfaChallenge')) {
	        return true;
	      }
	    },
	
	    back: function back() {
	      // Empty function on verify controllers to prevent users
	      // from navigating back during 'verify' using the browser's
	      // back button. The URL will still change, but the view will not
	      // More details in OKTA-135060.
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 704 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof2 = __webpack_require__(334);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Duo Web SDK v2
	 * Copyright 2017, Duo Security
	 */
	
	(function (root, factory) {
	    /*eslint-disable */
	    if (true) {
	        // AMD. Register as an anonymous module.
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	        /*eslint-enable */
	    } else if ((typeof module === 'undefined' ? 'undefined' : (0, _typeof3.default)(module)) === 'object' && module.exports) {
	        // Node. Does not work with strict CommonJS, but
	        // only CommonJS-like environments that support module.exports,
	        // like Node.
	        module.exports = factory();
	    } else {
	        // Browser globals (root is window)
	        var Duo = factory();
	        // If the Javascript was loaded via a script tag, attempt to autoload
	        // the frame.
	        Duo._onReady(Duo.init);
	
	        // Attach Duo to the `window` object
	        root.Duo = Duo;
	    }
	})(undefined, function () {
	    var DUO_MESSAGE_FORMAT = /^(?:AUTH|ENROLL)+\|[A-Za-z0-9\+\/=]+\|[A-Za-z0-9\+\/=]+$/;
	    var DUO_ERROR_FORMAT = /^ERR\|[\w\s\.\(\)]+$/;
	    var DUO_OPEN_WINDOW_FORMAT = /^DUO_OPEN_WINDOW\|/;
	    var VALID_OPEN_WINDOW_DOMAINS = ['duo.com', 'duosecurity.com', 'duomobile.s3-us-west-1.amazonaws.com'];
	
	    var iframeId = 'duo_iframe',
	        postAction = '',
	        postArgument = 'sig_response',
	        host,
	        sigRequest,
	        duoSig,
	        appSig,
	        iframe,
	        submitCallback;
	
	    function throwError(message, url) {
	        throw new Error('Duo Web SDK error: ' + message + (url ? '\n' + 'See ' + url + ' for more information' : ''));
	    }
	
	    function hyphenize(str) {
	        return str.replace(/([a-z])([A-Z])/, '$1-$2').toLowerCase();
	    }
	
	    // cross-browser data attributes
	    function getDataAttribute(element, name) {
	        if ('dataset' in element) {
	            return element.dataset[name];
	        } else {
	            return element.getAttribute('data-' + hyphenize(name));
	        }
	    }
	
	    // cross-browser event binding/unbinding
	    function on(context, event, fallbackEvent, callback) {
	        if ('addEventListener' in window) {
	            context.addEventListener(event, callback, false);
	        } else {
	            context.attachEvent(fallbackEvent, callback);
	        }
	    }
	
	    function off(context, event, fallbackEvent, callback) {
	        if ('removeEventListener' in window) {
	            context.removeEventListener(event, callback, false);
	        } else {
	            context.detachEvent(fallbackEvent, callback);
	        }
	    }
	
	    function onReady(callback) {
	        on(document, 'DOMContentLoaded', 'onreadystatechange', callback);
	    }
	
	    function offReady(callback) {
	        off(document, 'DOMContentLoaded', 'onreadystatechange', callback);
	    }
	
	    function onMessage(callback) {
	        on(window, 'message', 'onmessage', callback);
	    }
	
	    function offMessage(callback) {
	        off(window, 'message', 'onmessage', callback);
	    }
	
	    /**
	     * Parse the sig_request parameter, throwing errors if the token contains
	     * a server error or if the token is invalid.
	     *
	     * @param {String} sig Request token
	     */
	    function parseSigRequest(sig) {
	        if (!sig) {
	            // nothing to do
	            return;
	        }
	
	        // see if the token contains an error, throwing it if it does
	        if (sig.indexOf('ERR|') === 0) {
	            throwError(sig.split('|')[1]);
	        }
	
	        // validate the token
	        if (sig.indexOf(':') === -1 || sig.split(':').length !== 2) {
	            throwError('Duo was given a bad token.  This might indicate a configuration ' + 'problem with one of Duo\'s client libraries.', 'https://www.duosecurity.com/docs/duoweb#first-steps');
	        }
	
	        var sigParts = sig.split(':');
	
	        // hang on to the token, and the parsed duo and app sigs
	        sigRequest = sig;
	        duoSig = sigParts[0];
	        appSig = sigParts[1];
	
	        return {
	            sigRequest: sig,
	            duoSig: sigParts[0],
	            appSig: sigParts[1]
	        };
	    }
	
	    /**
	     * This function is set up to run when the DOM is ready, if the iframe was
	     * not available during `init`.
	     */
	    function onDOMReady() {
	        iframe = document.getElementById(iframeId);
	
	        if (!iframe) {
	            throw new Error('This page does not contain an iframe for Duo to use.' + 'Add an element like <iframe id="duo_iframe"></iframe> ' + 'to this page.  ' + 'See https://www.duosecurity.com/docs/duoweb#3.-show-the-iframe ' + 'for more information.');
	        }
	
	        // we've got an iframe, away we go!
	        ready();
	
	        // always clean up after yourself
	        offReady(onDOMReady);
	    }
	
	    /**
	     * Validate that a MessageEvent came from the Duo service, and that it
	     * is a properly formatted payload.
	     *
	     * The Google Chrome sign-in page injects some JS into pages that also
	     * make use of postMessage, so we need to do additional validation above
	     * and beyond the origin.
	     *
	     * @param {MessageEvent} event Message received via postMessage
	     */
	    function isDuoMessage(event) {
	        return Boolean(event.origin === 'https://' + host && typeof event.data === 'string' && (event.data.match(DUO_MESSAGE_FORMAT) || event.data.match(DUO_ERROR_FORMAT) || event.data.match(DUO_OPEN_WINDOW_FORMAT)));
	    }
	
	    /**
	     * Validate the request token and prepare for the iframe to become ready.
	     *
	     * All options below can be passed into an options hash to `Duo.init`, or
	     * specified on the iframe using `data-` attributes.
	     *
	     * Options specified using the options hash will take precedence over
	     * `data-` attributes.
	     *
	     * Example using options hash:
	     * ```javascript
	     * Duo.init({
	     *     iframe: "some_other_id",
	     *     host: "api-main.duo.test",
	     *     sig_request: "...",
	     *     post_action: "/auth",
	     *     post_argument: "resp"
	     * });
	     * ```
	     *
	     * Example using `data-` attributes:
	     * ```
	     * <iframe id="duo_iframe"
	     *         data-host="api-main.duo.test"
	     *         data-sig-request="..."
	     *         data-post-action="/auth"
	     *         data-post-argument="resp"
	     *         >
	     * </iframe>
	     * ```
	     *
	     * @param {Object} options
	     * @param {String} options.iframe                         The iframe, or id of an iframe to set up
	     * @param {String} options.host                           Hostname
	     * @param {String} options.sig_request                    Request token
	     * @param {String} [options.post_action='']               URL to POST back to after successful auth
	     * @param {String} [options.post_argument='sig_response'] Parameter name to use for response token
	     * @param {Function} [options.submit_callback]            If provided, duo will not submit the form instead execute
	     *                                                        the callback function with reference to the "duo_form" form object
	     *                                                        submit_callback can be used to prevent the webpage from reloading.
	     */
	    function init(options) {
	        if (options) {
	            if (options.host) {
	                host = options.host;
	            }
	
	            if (options.sig_request) {
	                parseSigRequest(options.sig_request);
	            }
	
	            if (options.post_action) {
	                postAction = options.post_action;
	            }
	
	            if (options.post_argument) {
	                postArgument = options.post_argument;
	            }
	
	            if (options.iframe) {
	                if (options.iframe.tagName) {
	                    iframe = options.iframe;
	                } else if (typeof options.iframe === 'string') {
	                    iframeId = options.iframe;
	                }
	            }
	
	            if (typeof options.submit_callback === 'function') {
	                submitCallback = options.submit_callback;
	            }
	        }
	
	        // if we were given an iframe, no need to wait for the rest of the DOM
	        if (iframe) {
	            ready();
	        } else {
	            // try to find the iframe in the DOM
	            iframe = document.getElementById(iframeId);
	
	            // iframe is in the DOM, away we go!
	            if (iframe) {
	                ready();
	            } else {
	                // wait until the DOM is ready, then try again
	                onReady(onDOMReady);
	            }
	        }
	
	        // always clean up after yourself!
	        offReady(init);
	    }
	
	    /**
	     * This function is called when a message was received from another domain
	     * using the `postMessage` API.  Check that the event came from the Duo
	     * service domain, and that the message is a properly formatted payload,
	     * then perform the post back to the primary service.
	     *
	     * @param event Event object (contains origin and data)
	     */
	    function onReceivedMessage(event) {
	        if (isDuoMessage(event)) {
	            if (event.data.match(DUO_OPEN_WINDOW_FORMAT)) {
	                var url = event.data.substring("DUO_OPEN_WINDOW|".length);
	                if (isValidUrlToOpen(url)) {
	                    // Open the URL that comes after the DUO_WINDOW_OPEN token.
	                    window.open(url, "_self");
	                }
	            } else {
	                // the event came from duo, do the post back
	                doPostBack(event.data);
	
	                // always clean up after yourself!
	                offMessage(onReceivedMessage);
	            }
	        }
	    }
	
	    /**
	     * Validate that this passed in URL is one that we will actually allow to
	     * be opened.
	     * @param url String URL that the message poster wants to open
	     * @returns {boolean} true if we allow this url to be opened in the window
	     */
	    function isValidUrlToOpen(url) {
	        if (!url) {
	            return false;
	        }
	
	        var parser = document.createElement('a');
	        parser.href = url;
	
	        if (parser.protocol === "duotrustedendpoints:") {
	            return true;
	        } else if (parser.protocol !== "https:") {
	            return false;
	        }
	
	        for (var i = 0; i < VALID_OPEN_WINDOW_DOMAINS.length; i++) {
	            if (parser.hostname.endsWith("." + VALID_OPEN_WINDOW_DOMAINS[i]) || parser.hostname === VALID_OPEN_WINDOW_DOMAINS[i]) {
	                return true;
	            }
	        }
	        return false;
	    }
	
	    /**
	     * Point the iframe at Duo, then wait for it to postMessage back to us.
	     */
	    function ready() {
	        if (!host) {
	            host = getDataAttribute(iframe, 'host');
	
	            if (!host) {
	                throwError('No API hostname is given for Duo to use.  Be sure to pass ' + 'a `host` parameter to Duo.init, or through the `data-host` ' + 'attribute on the iframe element.', 'https://www.duosecurity.com/docs/duoweb#3.-show-the-iframe');
	            }
	        }
	
	        if (!duoSig || !appSig) {
	            parseSigRequest(getDataAttribute(iframe, 'sigRequest'));
	
	            if (!duoSig || !appSig) {
	                throwError('No valid signed request is given.  Be sure to give the ' + '`sig_request` parameter to Duo.init, or use the ' + '`data-sig-request` attribute on the iframe element.', 'https://www.duosecurity.com/docs/duoweb#3.-show-the-iframe');
	            }
	        }
	
	        // if postAction/Argument are defaults, see if they are specified
	        // as data attributes on the iframe
	        if (postAction === '') {
	            postAction = getDataAttribute(iframe, 'postAction') || postAction;
	        }
	
	        if (postArgument === 'sig_response') {
	            postArgument = getDataAttribute(iframe, 'postArgument') || postArgument;
	        }
	
	        // point the iframe at Duo
	        iframe.src = ['https://', host, '/frame/web/v1/auth?tx=', duoSig, '&parent=', encodeURIComponent(document.location.href), '&v=2.6'].join('');
	
	        // listen for the 'message' event
	        onMessage(onReceivedMessage);
	    }
	
	    /**
	     * We received a postMessage from Duo.  POST back to the primary service
	     * with the response token, and any additional user-supplied parameters
	     * given in form#duo_form.
	     */
	    // function doPostBack(response) {
	    //     // create a hidden input to contain the response token
	    //     var input = document.createElement('input');
	    //     input.type = 'hidden';
	    //     input.name = postArgument;
	    //     input.value = response + ':' + appSig;
	    // 
	    //     // user may supply their own form with additional inputs
	    //     var form = document.getElementById('duo_form');
	    // 
	    //     // if the form doesn't exist, create one
	    //     if (!form) {
	    //         form = document.createElement('form');
	    // 
	    //         // insert the new form after the iframe
	    //         iframe.parentElement.insertBefore(form, iframe.nextSibling);
	    //     }
	    // 
	    //     // make sure we are actually posting to the right place
	    //     form.method = 'POST';
	    //     form.action = postAction;
	    // 
	    //     // add the response token input to the form
	    //     form.appendChild(input);
	    // 
	    //     // away we go!
	    //     if (typeof submitCallback === "function") {
	    //         submitCallback.call(null, form);
	    //     } else {
	    //         form.submit();
	    //     }
	    // }
	
	    // OKTA: Overriding their doPostBack logic because we want to submit this
	    // through ajax, not a postBack
	    function doPostBack(response) {
	        postAction(response + ':' + appSig);
	    }
	
	    return {
	        init: init,
	        _onReady: onReady,
	        _parseSigRequest: parseSigRequest,
	        _isDuoMessage: isDuoMessage,
	        _doPostBack: doPostBack
	    };
	});

/***/ },
/* 705 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(615), __webpack_require__(564)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Enums, Util) {
	
	  var _ = Okta._;
	
	  return Okta.View.extend({
	    template: '\
	      <a href="#" class="link {{linkClassName}}" data-se="signout-link">\
	        {{linkText}}\
	      </a>\
	    ',
	    className: 'auth-footer clearfix',
	    events: {
	      'click a': function clickA(e) {
	        e.preventDefault();
	        var self = this;
	        this.model.doTransaction(function (transaction) {
	          return transaction.cancel();
	        }).then(function () {
	          if (self.settings.get('signOutLink')) {
	            Util.redirect(self.settings.get('signOutLink'));
	          } else {
	            self.state.set('navigateDir', Enums.DIRECTION_BACK);
	            self.options.appState.trigger('navigate', '');
	          }
	        });
	      }
	    },
	    getTemplateData: function getTemplateData() {
	      return {
	        linkClassName: _.isUndefined(this.options.linkClassName) ? 'goto' : this.options.linkClassName,
	        linkText: this.options.linkText || Okta.loc('signout', 'login')
	      };
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 706 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	/* eslint complexity: [2, 15], max-params: [2, 12] */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(710), __webpack_require__(644), __webpack_require__(701), __webpack_require__(708), __webpack_require__(709), __webpack_require__(707), __webpack_require__(711), __webpack_require__(712), __webpack_require__(713), __webpack_require__(714), __webpack_require__(705)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Checkbox, BaseLoginController, CookieUtil, TOTPForm, YubikeyForm, SecurityQuestionForm, PassCodeForm, PushForm, PasswordForm, InlineTOTPForm, FooterSignout) {
	
	  return BaseLoginController.extend({
	    className: 'mfa-verify',
	
	    initialize: function initialize(options) {
	      var factors = options.appState.get('factors');
	      var factorType = options.factorType;
	      var provider = options.provider;
	
	      var View;
	      switch (factorType) {
	        case 'question':
	          View = SecurityQuestionForm;
	          break;
	        case 'sms':
	        case 'call':
	        case 'email':
	          View = PassCodeForm;
	          break;
	        case 'token':
	        case 'token:software:totp':
	          View = TOTPForm;
	          break;
	        case 'token:hardware':
	          View = YubikeyForm;
	          break;
	        case 'push':
	          View = PushForm;
	          break;
	        case 'password':
	          View = PasswordForm;
	          break;
	        default:
	          throw new Error('Unrecognized factor type');
	      }
	
	      this.model = factors.findWhere({ provider: provider, factorType: factorType });
	      if (!this.model) {
	        // TODO: recover from this more gracefully - probably to redirect
	        // to default factor
	        throw new Error('Unrecognized factor/provider');
	      }
	
	      this.addListeners();
	      this.add(new View(this.toJSON()));
	
	      // Okta Push is different from the other factors - it has a backup
	      // totp factor that can be chosen with the InlineTOTPForm
	      if (factorType === 'push' && this.model.get('isOktaFactor')) {
	        this.add(InlineTOTPForm, {
	          options: { model: this.model.get('backupFactor') }
	        });
	
	        if (this.settings.get('features.autoPush')) {
	          this.add(Checkbox, {
	            options: {
	              model: this.model,
	              name: 'autoPush',
	              placeholder: Okta.loc('autoPush', 'login'),
	              label: false,
	              'label-top': false,
	              className: 'margin-btm-0'
	            }
	          });
	        }
	
	        // Remember Device checkbox resides outside of the Push and TOTP forms.
	        if (this.options.appState.get('allowRememberDevice')) {
	          this.add(Checkbox, {
	            options: {
	              model: this.model,
	              name: 'rememberDevice',
	              placeholder: this.options.appState.get('rememberDeviceLabel'),
	              label: false,
	              'label-top': true,
	              className: 'margin-btm-0'
	            }
	          });
	        }
	        // Set the rememberDevice on the TOTP factor since it is stored as backupFactor.
	        this.listenTo(this.model, 'change:rememberDevice', function (model, rememberDevice) {
	          model.get('backupFactor').set('rememberDevice', rememberDevice);
	        });
	      }
	
	      if (!this.settings.get('features.hideSignOutLinkInMFA')) {
	        this.add(new FooterSignout(this.toJSON()));
	      }
	    },
	
	    trapAuthResponse: function trapAuthResponse() {
	      if (this.options.appState.get('isMfaRequired') && this.options.appState.get('trapMfaRequiredResponse') || this.options.appState.get('isMfaChallenge')) {
	        this.options.appState.set('trapMfaRequiredResponse', false);
	        return true;
	      }
	      return false;
	    },
	
	    back: function back() {
	      // Empty function on verify controllers to prevent users
	      // from navigating back during 'verify' using the browser's
	      // back button. The URL will still change, but the view will not
	      // More details in OKTA-135060.
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 707 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta) {
	
	  var _ = Okta._;
	
	  return Okta.Form.extend({
	    className: 'mfa-verify-question',
	    autoSave: true,
	    noCancelButton: true,
	    save: _.partial(Okta.loc, 'mfa.challenge.verify', 'login'),
	    scrollOnError: false,
	    layout: 'o-form-theme',
	    attributes: { 'data-se': 'factor-question' },
	
	    initialize: function initialize() {
	      this.title = this.model.get('factorLabel');
	
	      this.addInput({
	        label: this.model.get('securityQuestion'),
	        'label-top': true,
	        placeholder: Okta.loc('mfa.challenge.answer.placeholder', 'login'),
	        className: 'auth-passcode',
	        name: 'answer',
	        type: 'password',
	        params: {
	          showPasswordToggle: true
	        }
	      });
	
	      if (this.options.appState.get('allowRememberDevice')) {
	        this.addInput({
	          label: false,
	          'label-top': true,
	          placeholder: this.options.appState.get('rememberDeviceLabel'),
	          className: 'margin-btm-0',
	          name: 'rememberDevice',
	          type: 'checkbox'
	        });
	      }
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 708 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(649)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, TextBox) {
	
	  var _ = Okta._;
	
	  return Okta.Form.extend({
	    className: 'mfa-verify-totp',
	    autoSave: true,
	    noCancelButton: true,
	    save: _.partial(Okta.loc, 'mfa.challenge.verify', 'login'),
	    scrollOnError: false,
	    layout: 'o-form-theme',
	    attributes: { 'data-se': 'factor-totp' },
	
	    initialize: function initialize() {
	      var factorName = this.model.get('factorLabel');
	      var maskPasswordField = this.model.get('provider') === 'RSA' || this.model.get('provider') === 'DEL_OATH';
	
	      this.title = factorName;
	      this.subtitle = Okta.loc('mfa.challenge.title', 'login', [factorName]);
	
	      this.addInput({
	        label: false,
	        'label-top': true,
	        placeholder: Okta.loc('mfa.challenge.enterCode.placeholder', 'login'),
	        className: 'o-form-fieldset o-form-label-top auth-passcode',
	        name: 'answer',
	        input: TextBox,
	        type: maskPasswordField ? 'password' : 'tel'
	      });
	
	      if (this.options.appState.get('allowRememberDevice')) {
	        this.addInput({
	          label: false,
	          'label-top': true,
	          placeholder: this.options.appState.get('rememberDeviceLabel'),
	          className: 'margin-btm-0',
	          name: 'rememberDevice',
	          type: 'checkbox'
	        });
	      }
	
	      if (this.model.get('provider') === 'RSA' || this.model.get('provider') === 'DEL_OATH') {
	        this.listenTo(this.model, 'error', _.bind(function (source, error) {
	          if (error && error.status === 409) {
	            // 409 means we are in change pin, so we should clear out answer input
	            this.$('.auth-passcode input').val('');
	            this.$('.auth-passcode input').trigger('change');
	            this.$('.auth-passcode input').focus();
	          }
	        }, this));
	      }
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 709 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(649)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, TextBox) {
	
	  var _ = Okta._;
	
	  return Okta.Form.extend({
	    className: 'mfa-verify-yubikey',
	    autoSave: true,
	    noCancelButton: true,
	    save: _.partial(Okta.loc, 'mfa.challenge.verify', 'login'),
	    scrollOnError: false,
	    layout: 'o-form-theme',
	    attributes: { 'data-se': 'factor-yubikey' },
	
	    initialize: function initialize() {
	      var factorName = this.model.get('factorLabel');
	
	      this.title = factorName;
	      this.subtitle = Okta.loc('factor.totpHard.yubikey.description', 'login');
	
	      this.addInput({
	        label: false,
	        'label-top': true,
	        className: 'o-form-fieldset o-form-label-top auth-passcode',
	        name: 'answer',
	        input: TextBox,
	        type: 'password',
	        placeholder: Okta.loc('factor.totpHard.yubikey.placeholder', 'login')
	      });
	
	      if (this.options.appState.get('allowRememberDevice')) {
	        this.addInput({
	          label: false,
	          'label-top': true,
	          className: 'margin-btm-0',
	          placeholder: this.options.appState.get('rememberDeviceLabel'),
	          name: 'rememberDevice',
	          type: 'checkbox'
	        });
	      }
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 710 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(557), __webpack_require__(529), __webpack_require__(596), __webpack_require__(610)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, Keys, TemplateUtil, BaseInput) {
	
	  var template = TemplateUtil.tpl('\
	    <input type="checkbox" name="{{name}}" id="{{inputId}}"/>\
	    <label for="{{inputId}}" data-se-for-name="{{name}}">{{placeholder}}</label>\
	  ');
	
	  return BaseInput.extend({
	    template: template,
	    /**
	    * @Override
	    */
	    events: {
	      'change :checkbox': 'update',
	      'keyup': function keyup(e) {
	        if (Keys.isSpaceBar(e)) {
	          this.$(':checkbox').click();
	        } else if (Keys.isEnter(e)) {
	          this.model.trigger('form:save');
	        }
	      }
	    },
	
	    /**
	    * @Override
	    */
	    editMode: function editMode() {
	      var placeholder = _.resultCtx(this.options, 'placeholder', this);
	      if (placeholder === '') {
	        placeholder = _.resultCtx(this.options, 'label', this);
	      } else if (placeholder === false) {
	        placeholder = '';
	      }
	
	      this.$el.html(this.template(_.extend(_.omit(this.options, 'placeholder'), { placeholder: placeholder })));
	      var $input = this.$(':checkbox');
	      $input.prop('checked', this.getModelValue() || false);
	
	      this.$('input').customInput();
	      this.model.trigger('form:resize');
	
	      return this;
	    },
	
	    /**
	     * @Override
	    */
	    readMode: function readMode() {
	      this.editMode();
	      this.$(':checkbox').prop('disabled', true);
	      return this;
	    },
	
	    /**
	    * @Override
	    */
	    val: function val() {
	      return this.$(':checkbox').prop('checked');
	    },
	
	    /**
	    * @Override
	    */
	    focus: function focus() {
	      return this.$(':checkbox').focus();
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 711 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	/* eslint complexity: [2, 7] */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(409), __webpack_require__(649)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Q, TextBox) {
	
	  var subtitleTpl = Okta.Handlebars.compile('({{subtitle}})');
	  var _ = Okta._;
	  var API_RATE_LIMIT = 30000; //milliseconds
	
	  function getFormAndButtonDetails(factorType) {
	    switch (factorType) {
	      case 'sms':
	        return {
	          buttonDataSe: 'sms-send-code',
	          buttonClassName: 'sms-request-button',
	          formSubmit: Okta.loc('mfa.sendCode', 'login'),
	          formRetry: Okta.loc('mfa.resendCode', 'login'),
	          formSubmitted: Okta.loc('mfa.sent', 'login'),
	          subtitle: subtitleTpl({ subtitle: this.model.get('phoneNumber') })
	        };
	      case 'call':
	        return {
	          buttonDataSe: 'make-call',
	          buttonClassName: 'call-request-button',
	          formSubmit: Okta.loc('mfa.call', 'login'),
	          formRetry: Okta.loc('mfa.redial', 'login'),
	          formSubmitted: Okta.loc('mfa.calling', 'login'),
	          subtitle: subtitleTpl({ subtitle: this.model.get('phoneNumber') })
	        };
	      case 'email':
	        return {
	          buttonDataSe: 'email-send-code',
	          buttonClassName: 'email-request-button',
	          formSubmit: Okta.loc('mfa.sendEmail', 'login'),
	          formRetry: Okta.loc('mfa.resendEmail', 'login'),
	          formSubmitted: Okta.loc('mfa.sent', 'login'),
	          subtitle: subtitleTpl({ subtitle: this.model.get('email') })
	        };
	      default:
	        return {
	          buttonDataSe: '',
	          buttonClassName: '',
	          formSubmit: '',
	          formRetry: '',
	          formSubmitted: ''
	        };
	    }
	  }
	
	  return Okta.Form.extend({
	    className: 'mfa-verify-passcode',
	    autoSave: true,
	    noCancelButton: true,
	    save: _.partial(Okta.loc, 'mfa.challenge.verify', 'login'),
	    scrollOnError: false,
	    layout: 'o-form-theme',
	
	    disableSubmitButton: function disableSubmitButton() {
	      return this.model.appState.get('isMfaChallenge') && this.model.get('answer');
	    },
	
	    initialize: function initialize() {
	      var form = this;
	      this.title = this.model.get('factorLabel');
	
	      var factorType = this.model.get('factorType');
	      var formAndButtonDetails = getFormAndButtonDetails.call(this, factorType);
	      this.$el.attr('data-se', 'factor-' + factorType);
	
	      this.subtitle = formAndButtonDetails.subtitle;
	      this.listenTo(this.model, 'error', function () {
	        this.clearErrors();
	      });
	      this.add(Okta.createButton({
	        attributes: { 'data-se': formAndButtonDetails.buttonDataSe },
	        className: 'button ' + formAndButtonDetails.buttonClassName,
	        title: formAndButtonDetails.formSubmit,
	        click: function click() {
	          form.clearErrors();
	          this.disable();
	          this.options.title = formAndButtonDetails.formSubmitted;
	          this.render();
	          // To send an OTP to the device, make the same request but use
	          // an empty passCode
	          this.model.set('answer', '');
	          this.model.save().then(function () {
	            // render and focus on the passcode input field.
	            form.getInputs().first().render().focus();
	            return Q.delay(API_RATE_LIMIT);
	          }).then(_.bind(function () {
	            this.options.title = formAndButtonDetails.formRetry;
	            this.enable();
	            this.render();
	          }, this));
	        }
	      }));
	      this.addInput({
	        label: false,
	        'label-top': true,
	        placeholder: Okta.loc('mfa.challenge.enterCode.placeholder', 'login'),
	        className: 'o-form-fieldset o-form-label-top auth-passcode',
	        name: 'answer',
	        input: TextBox,
	        type: 'tel'
	      });
	      if (this.options.appState.get('allowRememberDevice')) {
	        this.addInput({
	          label: false,
	          'label-top': true,
	          placeholder: this.options.appState.get('rememberDeviceLabel'),
	          className: 'margin-btm-0',
	          name: 'rememberDevice',
	          type: 'checkbox'
	        });
	      }
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 712 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(701), __webpack_require__(638)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, CookieUtil, Util) {
	
	  var _ = Okta._;
	  // deviceName is escaped on BaseForm (see BaseForm's template)
	  var titleTpl = Okta.Handlebars.compile('{{factorName}} ({{{deviceName}}})');
	  var WARNING_TIMEOUT = 30000; //milliseconds
	  var warningTemplate = '<div class="okta-form-infobox-warning infobox infobox-warning">\
	                           <span class="icon warning-16"></span>\
	                           <p>{{warning}}</p>\
	                         </div>';
	
	  return Okta.Form.extend({
	    className: 'mfa-verify-push',
	    autoSave: true,
	    noCancelButton: true,
	    save: _.partial(Okta.loc, 'oktaverify.send', 'login'),
	    scrollOnError: false,
	    layout: 'o-form-theme',
	    attributes: { 'data-se': 'factor-push' },
	    events: {
	      submit: 'submit'
	    },
	
	    initialize: function initialize() {
	      this.enabled = true;
	      this.listenTo(this.options.appState, 'change:isMfaRejectedByUser', function (state, isMfaRejectedByUser) {
	        this.setSubmitState(isMfaRejectedByUser);
	        if (isMfaRejectedByUser) {
	          this.showError(Okta.loc('oktaverify.rejected', 'login'));
	        }
	      });
	      this.listenTo(this.options.appState, 'change:isMfaTimeout', function (state, isMfaTimeout) {
	        this.setSubmitState(isMfaTimeout);
	        if (isMfaTimeout) {
	          this.showError(Okta.loc('oktaverify.timeout', 'login'));
	        }
	      });
	      this.listenTo(this.options.appState, 'change:isMfaRequired', function (state, isMfaRequired) {
	        if (isMfaRequired) {
	          this.clearErrors();
	          this.clearWarnings();
	        }
	      });
	      this.title = titleTpl({
	        factorName: this.model.get('factorLabel'),
	        deviceName: this.model.get('deviceName')
	      });
	    },
	    setSubmitState: function setSubmitState(ableToSubmit) {
	      var button = this.$el.find('.button');
	      this.enabled = ableToSubmit;
	      if (ableToSubmit) {
	        button.removeClass('link-button-disabled');
	        button.prop('value', Okta.loc('oktaverify.send', 'login'));
	        button.prop('disabled', false);
	      } else {
	        button.addClass('link-button-disabled');
	        button.prop('value', Okta.loc('oktaverify.sent', 'login'));
	        button.prop('disabled', true);
	      }
	    },
	    submit: function submit(e) {
	      if (e !== undefined) {
	        e.preventDefault();
	      }
	      if (this.enabled) {
	        this.setSubmitState(false);
	        this.doSave();
	      }
	    },
	    postRender: function postRender() {
	      var factorsPolicyInfo = this.options.appState.get('factorsPolicyInfo');
	      var id = this.model.get('id');
	      var isAutoPushEnabled = this.settings.get('features.autoPush') && factorsPolicyInfo && factorsPolicyInfo[id] ? factorsPolicyInfo[id]['autoPushEnabled'] : false;
	
	      if (isAutoPushEnabled) {
	        this.model.set('autoPush', true);
	        // bind after $el has been rendered, and trigger push once DOM is fully loaded
	        _.defer(_.bind(this.submit, this));
	      }
	    },
	    doSave: function doSave() {
	      var warningTimeout;
	      this.clearErrors();
	      this.clearWarnings();
	      if (this.model.isValid()) {
	        this.listenToOnce(this.model, 'error', function () {
	          this.setSubmitState(true);
	          this.clearWarnings();
	          clearTimeout(warningTimeout);
	        });
	        this.trigger('save', this.model);
	        warningTimeout = Util.callAfterTimeout(_.bind(function () {
	          this.showWarning(Okta.loc('oktaverify.warning', 'login'));
	        }, this), WARNING_TIMEOUT);
	      }
	    },
	    showError: function showError(msg) {
	      this.clearWarnings();
	      this.model.trigger('error', this.model, { responseJSON: { errorSummary: msg } });
	    },
	    showWarning: function showWarning(msg) {
	      this.clearWarnings();
	      this.add(warningTemplate, '.o-form-error-container', { options: { warning: msg } });
	    },
	    clearWarnings: function clearWarnings() {
	      this.$('.okta-form-infobox-warning').remove();
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 713 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2016-2017, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta) {
	
	  var _ = Okta._;
	
	  return Okta.Form.extend({
	    className: 'mfa-verify-password',
	    autoSave: true,
	    noCancelButton: true,
	    save: _.partial(Okta.loc, 'mfa.challenge.verify', 'login'),
	    scrollOnError: false,
	    layout: 'o-form-theme',
	    attributes: { 'data-se': 'factor-password' },
	
	    initialize: function initialize() {
	      this.title = this.model.get('factorLabel');
	
	      this.addInput({
	        label: false,
	        'label-top': true,
	        placeholder: Okta.loc('mfa.challenge.password.placeholder', 'login'),
	        className: 'auth-passcode',
	        name: 'password',
	        type: 'password',
	        params: {
	          showPasswordToggle: true
	        }
	      });
	
	      if (this.options.appState.get('allowRememberDevice')) {
	        this.addInput({
	          label: false,
	          'label-top': true,
	          placeholder: this.options.appState.get('rememberDeviceLabel'),
	          className: 'margin-btm-0',
	          name: 'rememberDevice',
	          type: 'checkbox'
	        });
	      }
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 714 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(649)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, TextBox) {
	
	  function addInlineTotp(form) {
	    form.addDivider();
	    form.addInput({
	      label: false,
	      'label-top': true,
	      placeholder: Okta.loc('mfa.challenge.enterCode.placeholder', 'login'),
	      className: 'o-form-fieldset o-form-label-top inline-input auth-passcode',
	      name: 'answer',
	      input: TextBox,
	      type: 'tel'
	    });
	    form.add(Okta.createButton({
	      attributes: { 'data-se': 'inline-totp-verify' },
	      className: 'button inline-totp-verify',
	      title: Okta.loc('mfa.challenge.verify', 'login'),
	      click: function click() {
	        if (!form.isValid()) {
	          return;
	        }
	        form.model.manageTransaction(function (transaction, setTransaction) {
	          // This is the case where we enter the TOTP code and verify while there is an
	          // active Push request (or polling) running. We need to invoke previous() on authClient
	          // and then call model.save(). If not, we would still be in MFA_CHALLENGE state and
	          // verify would result in a wrong request (push verify instead of a TOTP verify).
	          if (transaction.status === 'MFA_CHALLENGE' && transaction.prev) {
	            form.options.appState.set('trapMfaRequiredResponse', true);
	            return transaction.prev().then(function (trans) {
	              setTransaction(trans);
	              form.model.save();
	            });
	          } else {
	            // Push is not active and we enter the code to verify.
	            form.model.save();
	          }
	        });
	      }
	    }));
	    form.at(1).focus();
	  }
	
	  return Okta.Form.extend({
	    autoSave: true,
	    noButtonBar: true,
	    scrollOnError: false,
	    layout: 'o-form-theme',
	
	    className: 'mfa-verify-totp-inline',
	
	    attributes: { 'data-se': 'factor-inline-totp' },
	
	    initialize: function initialize() {
	      var form = this;
	      this.listenTo(this.model, 'error', function () {
	        this.clearErrors();
	      });
	      this.add(Okta.createButton({
	        className: 'link',
	        attributes: { 'data-se': 'inline-totp-add' },
	        title: Okta.loc('mfa.challenge.orEnterCode', 'login'),
	        click: function click() {
	          this.remove();
	          addInlineTotp(form);
	        }
	      }));
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 715 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(642), __webpack_require__(643), __webpack_require__(716), __webpack_require__(721), __webpack_require__(705), __webpack_require__(722)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormController, FormType, webauthn, Spinner, FooterSignout, HtmlErrorMessageView) {
	
	  var _ = Okta._;
	
	  return FormController.extend({
	    className: 'mfa-verify verify-windows-hello',
	    Model: {
	      local: {
	        __autoTriggered__: 'boolean'
	      },
	
	      save: function save() {
	        if (!webauthn.isAvailable()) {
	          return;
	        }
	
	        this.trigger('request');
	        var model = this;
	
	        return this.doTransaction(function (transaction) {
	          var factor = _.findWhere(transaction.factors, {
	            factorType: 'webauthn',
	            provider: 'FIDO'
	          });
	
	          return factor.verify().then(function (verifyData) {
	            var factorData = verifyData.factor;
	
	            return webauthn.getAssertion(factorData.challenge.nonce, [{ id: factorData.profile.credentialId }]).then(function (assertion) {
	              return factor.verify({
	                authenticatorData: assertion.authenticatorData,
	                clientData: assertion.clientData,
	                signatureData: assertion.signature
	              });
	            }).then(function (data) {
	              model.trigger('sync');
	              model.trigger('signIn');
	              return data;
	            }).fail(function (error) {
	              switch (error.message) {
	                case 'AbortError':
	                case 'NotFoundError':
	                case 'NotSupportedError':
	                  model.trigger('abort', error.message);
	                  return transaction;
	              }
	
	              throw error;
	            });
	          });
	        });
	      }
	    },
	
	    Form: {
	      autoSave: true,
	      hasSavingState: false,
	      title: _.partial(Okta.loc, 'factor.windowsHello', 'login'),
	      subtitle: function subtitle() {
	        return webauthn.isAvailable() ? Okta.loc('verify.windowsHello.subtitle', 'login') : '';
	      },
	      save: _.partial(Okta.loc, 'verify.windowsHello.save', 'login'),
	
	      customSavingState: {
	        stop: 'abort'
	      },
	
	      modelEvents: function modelEvents() {
	        if (!webauthn.isAvailable()) {
	          return {};
	        }
	
	        return {
	          'request': '_startEnrollment',
	          'error': '_stopEnrollment',
	          'abort': '_stopEnrollment',
	          'signIn': '_successEnrollment'
	        };
	      },
	
	      noButtonBar: function noButtonBar() {
	        return !webauthn.isAvailable();
	      },
	
	      formChildren: function formChildren() {
	        var result = [];
	        if (!webauthn.isAvailable()) {
	          result.push(FormType.View({ View: new HtmlErrorMessageView({ message: Okta.loc('enroll.windowsHello.error.notWindows', 'login') }) }, { selector: '.o-form-error-container' }));
	        }
	
	        result.push(FormType.View({ View: new Spinner({ model: this.model, visible: false }) }));
	
	        return result;
	      },
	
	      postRender: function postRender() {
	        if (this.options.appState.get('factors').length === 1 && !this.model.get('__autoTriggered__')) {
	          this.model.set('__autoTriggered__', true);
	          this.model.save();
	        }
	      },
	
	      _startEnrollment: function _startEnrollment() {
	        this.subtitle = Okta.loc('verify.windowsHello.subtitle.loading', 'login');
	
	        this.model.trigger('spinner:show');
	        this._resetErrorMessage();
	
	        this.render();
	        this.$('.o-form-button-bar').addClass('hide');
	      },
	
	      _stopEnrollment: function _stopEnrollment(errorMessage) {
	        this.subtitle = Okta.loc('verify.windowsHello.subtitle', 'login');
	
	        this.model.trigger('spinner:hide');
	        this.$('.o-form-button-bar').removeClass('hide');
	
	        var message;
	        switch (errorMessage) {
	          case 'NotFoundError':
	            message = this.options.appState.get('factors').length > 1 ? Okta.loc('verify.windowsHello.error.notFound.selectAnother', 'login') : Okta.loc('verify.windowsHello.error.notFound', 'login');
	            break;
	
	          case 'NotSupportedError':
	            message = Okta.loc('enroll.windowsHello.error.notConfiguredHtml', 'login');
	            break;
	        }
	
	        this._resetErrorMessage();
	
	        if (message) {
	          var messageView = new HtmlErrorMessageView({
	            message: message
	          });
	
	          this.$('.o-form-error-container').addClass('o-form-has-errors');
	          this.add(messageView, { selector: '.o-form-error-container' });
	          this._errorMessageView = this.last();
	        }
	
	        this.render();
	      },
	
	      _successEnrollment: function _successEnrollment() {
	        this.subtitle = Okta.loc('verify.windowsHello.subtitle.signingIn', 'login');
	        this.render();
	        this.$('.o-form-button-bar').addClass('hide');
	      },
	
	      _resetErrorMessage: function _resetErrorMessage() {
	        this._errorMessageView && this._errorMessageView.remove();
	        this._errorMessageView = undefined;
	        this.clearErrors();
	      }
	    },
	
	    back: function back() {
	      // Empty function on verify controllers to prevent users
	      // from navigating back during 'verify' using the browser's
	      // back button. The URL will still change, but the view will not
	      // More details in OKTA-135060.
	    },
	
	    Footer: FooterSignout
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 716 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _freeze = __webpack_require__(717);
	
	var _freeze2 = _interopRequireDefault(_freeze);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	/* globals JSON */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(409)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Q) {
	
	  function adaptToOkta(promise) {
	    return new Q(promise);
	  }
	
	  function makeCredential(accountInfo, cryptoParams, challenge) {
	    cryptoParams = cryptoParams.map(function (param) {
	      return { type: 'FIDO_2_0', algorithm: param.algorithm };
	    });
	
	    var promise = window.msCredentials.makeCredential(accountInfo, cryptoParams, challenge).then(function (cred) {
	      return (0, _freeze2.default)({
	        credential: { id: cred.id },
	        publicKey: JSON.parse(cred.publicKey),
	        attestation: cred.attestation
	      });
	    });
	
	    return adaptToOkta(promise);
	  }
	
	  function getAssertion(challenge, allowList) {
	    var accept = allowList.map(function (item) {
	      return { type: 'FIDO_2_0', id: item.id };
	    });
	    var filters = { accept: accept };
	
	    var promise = window.msCredentials.getAssertion(challenge, filters).then(function (attestation) {
	      var signature = attestation.signature;
	      return (0, _freeze2.default)({
	        credential: { id: attestation.id },
	        clientData: signature.clientData,
	        authenticatorData: signature.authnrData,
	        signature: signature.signature
	      });
	    });
	
	    return adaptToOkta(promise);
	  }
	
	  return {
	    makeCredential: makeCredential,
	    getAssertion: getAssertion,
	    isAvailable: function isAvailable() {
	      return window.hasOwnProperty('msCredentials');
	    }
	  };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 717 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(718), __esModule: true };

/***/ },
/* 718 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(719);
	module.exports = __webpack_require__(345).Object.freeze;


/***/ },
/* 719 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.5 Object.freeze(O)
	var isObject = __webpack_require__(351);
	var meta = __webpack_require__(389).onFreeze;
	
	__webpack_require__(720)('freeze', function ($freeze) {
	  return function freeze(it) {
	    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
	  };
	});


/***/ },
/* 720 */
/***/ function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(343);
	var core = __webpack_require__(345);
	var fails = __webpack_require__(354);
	module.exports = function (KEY, exec) {
	  var fn = (core.Object || {})[KEY] || Object[KEY];
	  var exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
	};


/***/ },
/* 721 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta) {
	
	  return Okta.View.extend({
	    className: 'okta-waiting-spinner',
	    attributes: {
	      'data-se': 'o-form-okta-waiting-spinner'
	    },
	    modelEvents: {
	      'spinner:show': 'show',
	      'spinner:hide': 'hide'
	    },
	
	    initialize: function initialize(options) {
	      if (options && options.visible === false) {
	        this.hide();
	      }
	    },
	
	    show: function show() {
	      this.$el.removeClass('hide');
	    },
	
	    hide: function hide() {
	      this.$el.addClass('hide');
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 722 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(528)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, BaseView) {
	
	  // Have to be unescaped for the html in enroll.windowsHello.error.notConfiguredHtml
	  var template = '\
	    <span class="icon error-24"></span>\
	    <h4><strong>{{{message}}}</strong></h4>\
	  ';
	
	  return BaseView.extend({
	    template: template,
	    className: 'okta-infobox-error infobox infobox-error infobox-md margin-btm-25',
	    attributes: {
	      'data-se': 'o-form-error-html'
	    },
	
	    message: '',
	
	    initialize: function initialize(options) {
	      if (options && options.message) {
	        this.message = options.message;
	      }
	    },
	
	    getTemplateData: function getTemplateData() {
	      return {
	        message: this.message
	      };
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 723 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	/* global u2f */
	/* eslint complexity:[2, 9] */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(642), __webpack_require__(643), __webpack_require__(705), __webpack_require__(409), __webpack_require__(641), __webpack_require__(722), __webpack_require__(724)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormController, FormType, FooterSignout, Q, FactorUtil, HtmlErrorMessageView) {
	
	  var _ = Okta._;
	
	  function getErrorMessageKeyByCode(errorCode, isOneFactor) {
	    switch (errorCode) {
	      case 1:
	        // OTHER_ERROR
	        return isOneFactor ? 'u2f.error.other.oneFactor' : 'u2f.error.other';
	      case 2: // BAD_REQUEST
	      case 3:
	        // CONFIGURATION_UNSUPPORTED
	        return isOneFactor ? 'u2f.error.badRequest.oneFactor' : 'u2f.error.badRequest';
	      case 4:
	        // DEVICE_INELIGIBLE
	        return isOneFactor ? 'u2f.error.unsupported.oneFactor' : 'u2f.error.unsupported';
	      case 5:
	        // TIMEOUT
	        return 'u2f.error.timeout';
	    }
	  }
	
	  return FormController.extend({
	    className: 'mfa-verify verify-u2f',
	    Model: {
	      props: {
	        rememberDevice: 'boolean'
	      },
	
	      initialize: function initialize() {
	        var rememberDevice = FactorUtil.getRememberDeviceValue(this.appState);
	        // set the initial value for remember device (Cannot do this while defining the
	        // local property because this.settings would not be initialized there yet).
	        this.set('rememberDevice', rememberDevice);
	      },
	
	      save: function save() {
	        this.trigger('request');
	
	        return this.doTransaction(function (transaction) {
	          var factor = _.findWhere(transaction.factors, {
	            factorType: 'u2f',
	            provider: 'FIDO'
	          });
	          var self = this;
	          return factor.verify().then(function (transaction) {
	            var factorData = transaction.factor;
	            var appId = factorData.profile.appId;
	            var registeredKeys = [{ version: factorData.profile.version, keyHandle: factorData.profile.credentialId }];
	            self.trigger('request');
	
	            var deferred = Q.defer();
	            u2f.sign(appId, factorData.challenge.nonce, registeredKeys, function (data) {
	              self.trigger('errors:clear');
	              if (data.errorCode && data.errorCode !== 0) {
	                var isOneFactor = self.options.appState.get('factors').length === 1;
	                deferred.reject({ xhr: { responseJSON: { errorSummary: Okta.loc(getErrorMessageKeyByCode(data.errorCode, isOneFactor), 'login') } } });
	              } else {
	                var rememberDevice = !!self.get('rememberDevice');
	                return factor.verify({
	                  clientData: data.clientData,
	                  signatureData: data.signatureData,
	                  rememberDevice: rememberDevice
	                }).then(deferred.resolve);
	              }
	            });
	            return deferred.promise;
	          });
	        });
	      }
	    },
	
	    Form: {
	      autoSave: true,
	      hasSavingState: false,
	      title: _.partial(Okta.loc, 'factor.u2f', 'login'),
	      className: 'verify-u2f-form',
	      noCancelButton: true,
	      save: _.partial(Okta.loc, 'verify.u2f.retry', 'login'),
	      noButtonBar: function noButtonBar() {
	        return !window.hasOwnProperty('u2f');
	      },
	      modelEvents: {
	        'request': '_startEnrollment',
	        'error': '_stopEnrollment'
	      },
	
	      formChildren: function formChildren() {
	        var result = [];
	
	        if (!window.hasOwnProperty('u2f')) {
	          var errorMessageKey = 'u2f.error.factorNotSupported';
	          if (this.options.appState.get('factors').length === 1) {
	            errorMessageKey = 'u2f.error.factorNotSupported.oneFactor';
	          }
	          result.push(FormType.View({ View: new HtmlErrorMessageView({ message: Okta.loc(errorMessageKey, 'login') }) }, { selector: '.o-form-error-container' }));
	        } else {
	          result.push(FormType.View({
	            View: '\
	            <div class="u2f-verify-text">\
	              <p>{{i18n code="verify.u2f.instructions" bundle="login"}}</p>\
	              <p>{{i18n code="verify.u2f.instructionsBluetooth" bundle="login"}}</p>\
	              <div data-se="u2f-waiting" class="okta-waiting-spinner"></div>\
	            </div>'
	          }));
	        }
	
	        if (this.options.appState.get('allowRememberDevice')) {
	          result.push(FormType.Input({
	            label: false,
	            'label-top': true,
	            placeholder: this.options.appState.get('rememberDeviceLabel'),
	            className: 'margin-btm-0',
	            name: 'rememberDevice',
	            type: 'checkbox'
	          }));
	        }
	
	        return result;
	      },
	
	      postRender: function postRender() {
	        _.defer(_.bind(function () {
	          if (window.hasOwnProperty('u2f')) {
	            this.model.save();
	          } else {
	            this.$('[data-se="u2f-waiting"]').addClass('hide');
	          }
	        }, this));
	      },
	
	      _startEnrollment: function _startEnrollment() {
	        this.$('.okta-waiting-spinner').removeClass('hide');
	        this.$('.o-form-button-bar').hide();
	      },
	
	      _stopEnrollment: function _stopEnrollment() {
	        this.$('.okta-waiting-spinner').addClass('hide');
	        this.$('.o-form-button-bar').show();
	      }
	    },
	
	    back: function back() {
	      // Empty function on verify controllers to prevent users
	      // from navigating back during 'verify' using the browser's
	      // back button. The URL will still change, but the view will not
	      // More details in OKTA-135060.
	    },
	
	    Footer: FooterSignout
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 724 */
/***/ function(module, exports) {

	
	//Copyright 2014-2015 Google Inc. All rights reserved.
	
	//Use of this source code is governed by a BSD-style
	//license that can be found in the LICENSE file or at
	//https://developers.google.com/open-source/licenses/bsd
	
	/**
	 * @fileoverview The U2F api.
	 */
	'use strict';
	
	(function (){
	  if ('u2f' in window || !('chrome' in window)) {
	    return;
	  }
	
	  /** Namespace for the U2F api.
	   * @type {Object}
	   */
	  var u2f = window.u2f = {};
	
	  /**
	   * FIDO U2F Javascript API Version
	   * @number
	   */
	  var js_api_version;
	
	  /**
	   * The U2F extension id
	   * @const {string}
	   */
	  // The Chrome packaged app extension ID.
	  // Uncomment this if you want to deploy a server instance that uses
	  // the package Chrome app and does not require installing the U2F Chrome extension.
	   u2f.EXTENSION_ID = 'kmendfapggjehodndflmmgagdbamhnfd';
	  // The U2F Chrome extension ID.
	  // Uncomment this if you want to deploy a server instance that uses
	  // the U2F Chrome extension to authenticate.
	  // u2f.EXTENSION_ID = 'pfboblefjcgdjicmnffhdgionmgcdmne';
	
	
	  /**
	   * Message types for messsages to/from the extension
	   * @const
	   * @enum {string}
	   */
	  u2f.MessageTypes = {
	      'U2F_REGISTER_REQUEST': 'u2f_register_request',
	      'U2F_REGISTER_RESPONSE': 'u2f_register_response',
	      'U2F_SIGN_REQUEST': 'u2f_sign_request',
	      'U2F_SIGN_RESPONSE': 'u2f_sign_response',
	      'U2F_GET_API_VERSION_REQUEST': 'u2f_get_api_version_request',
	      'U2F_GET_API_VERSION_RESPONSE': 'u2f_get_api_version_response'
	  };
	
	
	  /**
	   * Response status codes
	   * @const
	   * @enum {number}
	   */
	  u2f.ErrorCodes = {
	      'OK': 0,
	      'OTHER_ERROR': 1,
	      'BAD_REQUEST': 2,
	      'CONFIGURATION_UNSUPPORTED': 3,
	      'DEVICE_INELIGIBLE': 4,
	      'TIMEOUT': 5
	  };
	
	
	  /**
	   * A message for registration requests
	   * @typedef {{
	   *   type: u2f.MessageTypes,
	   *   appId: ?string,
	   *   timeoutSeconds: ?number,
	   *   requestId: ?number
	   * }}
	   */
	  u2f.U2fRequest;
	
	
	  /**
	   * A message for registration responses
	   * @typedef {{
	   *   type: u2f.MessageTypes,
	   *   responseData: (u2f.Error | u2f.RegisterResponse | u2f.SignResponse),
	   *   requestId: ?number
	   * }}
	   */
	  u2f.U2fResponse;
	
	
	  /**
	   * An error object for responses
	   * @typedef {{
	   *   errorCode: u2f.ErrorCodes,
	   *   errorMessage: ?string
	   * }}
	   */
	  u2f.Error;
	
	  /**
	   * Data object for a single sign request.
	   * @typedef {enum {BLUETOOTH_RADIO, BLUETOOTH_LOW_ENERGY, USB, NFC}}
	   */
	  u2f.Transport;
	
	
	  /**
	   * Data object for a single sign request.
	   * @typedef {Array<u2f.Transport>}
	   */
	  u2f.Transports;
	
	  /**
	   * Data object for a single sign request.
	   * @typedef {{
	   *   version: string,
	   *   challenge: string,
	   *   keyHandle: string,
	   *   appId: string
	   * }}
	   */
	  u2f.SignRequest;
	
	
	  /**
	   * Data object for a sign response.
	   * @typedef {{
	   *   keyHandle: string,
	   *   signatureData: string,
	   *   clientData: string
	   * }}
	   */
	  u2f.SignResponse;
	
	
	  /**
	   * Data object for a registration request.
	   * @typedef {{
	   *   version: string,
	   *   challenge: string
	   * }}
	   */
	  u2f.RegisterRequest;
	
	
	  /**
	   * Data object for a registration response.
	   * @typedef {{
	   *   version: string,
	   *   keyHandle: string,
	   *   transports: Transports,
	   *   appId: string
	   * }}
	   */
	  u2f.RegisterResponse;
	
	
	  /**
	   * Data object for a registered key.
	   * @typedef {{
	   *   version: string,
	   *   keyHandle: string,
	   *   transports: ?Transports,
	   *   appId: ?string
	   * }}
	   */
	  u2f.RegisteredKey;
	
	
	  /**
	   * Data object for a get API register response.
	   * @typedef {{
	   *   js_api_version: number
	   * }}
	   */
	  u2f.GetJsApiVersionResponse;
	
	
	  //Low level MessagePort API support
	
	  /**
	   * Sets up a MessagePort to the U2F extension using the
	   * available mechanisms.
	   * @param {function((MessagePort|u2f.WrappedChromeRuntimePort_))} callback
	   */
	  u2f.getMessagePort = function(callback) {
	    if (typeof chrome != 'undefined' && chrome.runtime) {
	      // The actual message here does not matter, but we need to get a reply
	      // for the callback to run. Thus, send an empty signature request
	      // in order to get a failure response.
	      var msg = {
	          type: u2f.MessageTypes.U2F_SIGN_REQUEST,
	          signRequests: []
	      };
	      chrome.runtime.sendMessage(u2f.EXTENSION_ID, msg, function() {
	        if (!chrome.runtime.lastError) {
	          // We are on a whitelisted origin and can talk directly
	          // with the extension.
	          u2f.getChromeRuntimePort_(callback);
	        } else {
	          // chrome.runtime was available, but we couldn't message
	          // the extension directly, use iframe
	          u2f.getIframePort_(callback);
	        }
	      });
	    } else if (u2f.isAndroidChrome_()) {
	      u2f.getAuthenticatorPort_(callback);
	    } else if (u2f.isIosChrome_()) {
	      u2f.getIosPort_(callback);
	    } else {
	      // chrome.runtime was not available at all, which is normal
	      // when this origin doesn't have access to any extensions.
	      u2f.getIframePort_(callback);
	    }
	  };
	
	  /**
	   * Detect chrome running on android based on the browser's useragent.
	   * @private
	   */
	  u2f.isAndroidChrome_ = function() {
	    var userAgent = navigator.userAgent;
	    return userAgent.indexOf('Chrome') != -1 &&
	    userAgent.indexOf('Android') != -1;
	  };
	
	  /**
	   * Detect chrome running on iOS based on the browser's platform.
	   * @private
	   */
	  u2f.isIosChrome_ = function() {
	    return $.inArray(navigator.platform, ["iPhone", "iPad", "iPod"]) > -1;
	  };
	
	  /**
	   * Connects directly to the extension via chrome.runtime.connect.
	   * @param {function(u2f.WrappedChromeRuntimePort_)} callback
	   * @private
	   */
	  u2f.getChromeRuntimePort_ = function(callback) {
	    var port = chrome.runtime.connect(u2f.EXTENSION_ID,
	        {'includeTlsChannelId': true});
	    setTimeout(function() {
	      callback(new u2f.WrappedChromeRuntimePort_(port));
	    }, 0);
	  };
	
	  /**
	   * Return a 'port' abstraction to the Authenticator app.
	   * @param {function(u2f.WrappedAuthenticatorPort_)} callback
	   * @private
	   */
	  u2f.getAuthenticatorPort_ = function(callback) {
	    setTimeout(function() {
	      callback(new u2f.WrappedAuthenticatorPort_());
	    }, 0);
	  };
	
	  /**
	   * Return a 'port' abstraction to the iOS client app.
	   * @param {function(u2f.WrappedIosPort_)} callback
	   * @private
	   */
	  u2f.getIosPort_ = function(callback) {
	    setTimeout(function() {
	      callback(new u2f.WrappedIosPort_());
	    }, 0);
	  };
	
	  /**
	   * A wrapper for chrome.runtime.Port that is compatible with MessagePort.
	   * @param {Port} port
	   * @constructor
	   * @private
	   */
	  u2f.WrappedChromeRuntimePort_ = function(port) {
	    this.port_ = port;
	  };
	
	  /**
	   * Format and return a sign request compliant with the JS API version supported by the extension.
	   * @param {Array<u2f.SignRequest>} signRequests
	   * @param {number} timeoutSeconds
	   * @param {number} reqId
	   * @return {Object}
	   */
	  u2f.formatSignRequest_ =
	    function(appId, challenge, registeredKeys, timeoutSeconds, reqId) {
	    if (js_api_version === undefined || js_api_version < 1.1) {
	      // Adapt request to the 1.0 JS API
	      var signRequests = [];
	      for (var i = 0; i < registeredKeys.length; i++) {
	        signRequests[i] = {
	            version: registeredKeys[i].version,
	            challenge: challenge,
	            keyHandle: registeredKeys[i].keyHandle,
	            appId: appId
	        };
	      }
	      return {
	        type: u2f.MessageTypes.U2F_SIGN_REQUEST,
	        signRequests: signRequests,
	        timeoutSeconds: timeoutSeconds,
	        requestId: reqId
	      };
	    }
	    // JS 1.1 API
	    return {
	      type: u2f.MessageTypes.U2F_SIGN_REQUEST,
	      appId: appId,
	      challenge: challenge,
	      registeredKeys: registeredKeys,
	      timeoutSeconds: timeoutSeconds,
	      requestId: reqId
	    };
	  };
	
	  /**
	   * Format and return a register request compliant with the JS API version supported by the extension..
	   * @param {Array<u2f.SignRequest>} signRequests
	   * @param {Array<u2f.RegisterRequest>} signRequests
	   * @param {number} timeoutSeconds
	   * @param {number} reqId
	   * @return {Object}
	   */
	  u2f.formatRegisterRequest_ =
	    function(appId, registeredKeys, registerRequests, timeoutSeconds, reqId) {
	    if (js_api_version === undefined || js_api_version < 1.1) {
	      // Adapt request to the 1.0 JS API
	      for (var i = 0; i < registerRequests.length; i++) {
	        registerRequests[i].appId = appId;
	      }
	      var signRequests = [];
	      for (var i = 0; i < registeredKeys.length; i++) {
	        signRequests[i] = {
	            version: registeredKeys[i].version,
	            challenge: registerRequests[0],
	            keyHandle: registeredKeys[i].keyHandle,
	            appId: appId
	        };
	      }
	      return {
	        type: u2f.MessageTypes.U2F_REGISTER_REQUEST,
	        signRequests: signRequests,
	        registerRequests: registerRequests,
	        timeoutSeconds: timeoutSeconds,
	        requestId: reqId
	      };
	    }
	    // JS 1.1 API
	    return {
	      type: u2f.MessageTypes.U2F_REGISTER_REQUEST,
	      appId: appId,
	      registerRequests: registerRequests,
	      registeredKeys: registeredKeys,
	      timeoutSeconds: timeoutSeconds,
	      requestId: reqId
	    };
	  };
	
	
	  /**
	   * Posts a message on the underlying channel.
	   * @param {Object} message
	   */
	  u2f.WrappedChromeRuntimePort_.prototype.postMessage = function(message) {
	    this.port_.postMessage(message);
	  };
	
	
	  /**
	   * Emulates the HTML 5 addEventListener interface. Works only for the
	   * onmessage event, which is hooked up to the chrome.runtime.Port.onMessage.
	   * @param {string} eventName
	   * @param {function({data: Object})} handler
	   */
	  u2f.WrappedChromeRuntimePort_.prototype.addEventListener =
	      function(eventName, handler) {
	    var name = eventName.toLowerCase();
	    if (name == 'message' || name == 'onmessage') {
	      this.port_.onMessage.addListener(function(message) {
	        // Emulate a minimal MessageEvent object
	        handler({'data': message});
	      });
	    } else {
	      console.error('WrappedChromeRuntimePort only supports onMessage');
	    }
	  };
	
	  /**
	   * Wrap the Authenticator app with a MessagePort interface.
	   * @constructor
	   * @private
	   */
	  u2f.WrappedAuthenticatorPort_ = function() {
	    this.requestId_ = -1;
	    this.requestObject_ = null;
	  }
	
	  /**
	   * Launch the Authenticator intent.
	   * @param {Object} message
	   */
	  u2f.WrappedAuthenticatorPort_.prototype.postMessage = function(message) {
	    var intentUrl =
	      u2f.WrappedAuthenticatorPort_.INTENT_URL_BASE_ +
	      ';S.request=' + encodeURIComponent(JSON.stringify(message)) +
	      ';end';
	    document.location = intentUrl;
	  };
	
	  /**
	   * Tells what type of port this is.
	   * @return {String} port type
	   */
	  u2f.WrappedAuthenticatorPort_.prototype.getPortType = function() {
	    return "WrappedAuthenticatorPort_";
	  };
	
	
	  /**
	   * Emulates the HTML 5 addEventListener interface.
	   * @param {string} eventName
	   * @param {function({data: Object})} handler
	   */
	  u2f.WrappedAuthenticatorPort_.prototype.addEventListener = function(eventName, handler) {
	    var name = eventName.toLowerCase();
	    if (name == 'message') {
	      var self = this;
	      /* Register a callback to that executes when
	       * chrome injects the response. */
	      window.addEventListener(
	          'message', self.onRequestUpdate_.bind(self, handler), false);
	    } else {
	      console.error('WrappedAuthenticatorPort only supports message');
	    }
	  };
	
	  /**
	   * Callback invoked  when a response is received from the Authenticator.
	   * @param function({data: Object}) callback
	   * @param {Object} message message Object
	   */
	  u2f.WrappedAuthenticatorPort_.prototype.onRequestUpdate_ =
	      function(callback, message) {
	    var messageObject = JSON.parse(message.data);
	    var intentUrl = messageObject['intentURL'];
	
	    var errorCode = messageObject['errorCode'];
	    var responseObject = null;
	    if (messageObject.hasOwnProperty('data')) {
	      responseObject = /** @type {Object} */ (
	          JSON.parse(messageObject['data']));
	    }
	
	    callback({'data': responseObject});
	  };
	
	  /**
	   * Base URL for intents to Authenticator.
	   * @const
	   * @private
	   */
	  u2f.WrappedAuthenticatorPort_.INTENT_URL_BASE_ =
	    'intent:#Intent;action=com.google.android.apps.authenticator.AUTHENTICATE';
	
	  /**
	   * Wrap the iOS client app with a MessagePort interface.
	   * @constructor
	   * @private
	   */
	  u2f.WrappedIosPort_ = function() {};
	
	  /**
	   * Launch the iOS client app request
	   * @param {Object} message
	   */
	  u2f.WrappedIosPort_.prototype.postMessage = function(message) {
	    var str = JSON.stringify(message);
	    var url = "u2f://auth?" + encodeURI(str);
	    location.replace(url);
	  };
	
	  /**
	   * Tells what type of port this is.
	   * @return {String} port type
	   */
	  u2f.WrappedIosPort_.prototype.getPortType = function() {
	    return "WrappedIosPort_";
	  };
	
	  /**
	   * Emulates the HTML 5 addEventListener interface.
	   * @param {string} eventName
	   * @param {function({data: Object})} handler
	   */
	  u2f.WrappedIosPort_.prototype.addEventListener = function(eventName, handler) {
	    var name = eventName.toLowerCase();
	    if (name !== 'message') {
	      console.error('WrappedIosPort only supports message');
	    }
	  };
	
	  /**
	   * Sets up an embedded trampoline iframe, sourced from the extension.
	   * @param {function(MessagePort)} callback
	   * @private
	   */
	  u2f.getIframePort_ = function(callback) {
	    // Create the iframe
	    var iframeOrigin = 'chrome-extension://' + u2f.EXTENSION_ID;
	    var iframe = document.createElement('iframe');
	    iframe.src = iframeOrigin + '/u2f-comms.html';
	    iframe.setAttribute('style', 'display:none');
	    document.body.appendChild(iframe);
	
	    var channel = new MessageChannel();
	    var ready = function(message) {
	      if (message.data == 'ready') {
	        channel.port1.removeEventListener('message', ready);
	        callback(channel.port1);
	      } else {
	        console.error('First event on iframe port was not "ready"');
	      }
	    };
	    channel.port1.addEventListener('message', ready);
	    channel.port1.start();
	
	    iframe.addEventListener('load', function() {
	      // Deliver the port to the iframe and initialize
	      iframe.contentWindow.postMessage('init', iframeOrigin, [channel.port2]);
	    });
	  };
	
	
	  //High-level JS API
	
	  /**
	   * Default extension response timeout in seconds.
	   * @const
	   */
	  u2f.EXTENSION_TIMEOUT_SEC = 30;
	
	  /**
	   * A singleton instance for a MessagePort to the extension.
	   * @type {MessagePort|u2f.WrappedChromeRuntimePort_}
	   * @private
	   */
	  u2f.port_ = null;
	
	  /**
	   * Callbacks waiting for a port
	   * @type {Array<function((MessagePort|u2f.WrappedChromeRuntimePort_))>}
	   * @private
	   */
	  u2f.waitingForPort_ = [];
	
	  /**
	   * A counter for requestIds.
	   * @type {number}
	   * @private
	   */
	  u2f.reqCounter_ = 0;
	
	  /**
	   * A map from requestIds to client callbacks
	   * @type {Object.<number,(function((u2f.Error|u2f.RegisterResponse))
	   *                       |function((u2f.Error|u2f.SignResponse)))>}
	   * @private
	   */
	  u2f.callbackMap_ = {};
	
	  /**
	   * Creates or retrieves the MessagePort singleton to use.
	   * @param {function((MessagePort|u2f.WrappedChromeRuntimePort_))} callback
	   * @private
	   */
	  u2f.getPortSingleton_ = function(callback) {
	    if (u2f.port_) {
	      callback(u2f.port_);
	    } else {
	      if (u2f.waitingForPort_.length == 0) {
	        u2f.getMessagePort(function(port) {
	          u2f.port_ = port;
	          u2f.port_.addEventListener('message',
	              /** @type {function(Event)} */ (u2f.responseHandler_));
	
	          // Careful, here be async callbacks. Maybe.
	          while (u2f.waitingForPort_.length)
	            u2f.waitingForPort_.shift()(u2f.port_);
	        });
	      }
	      u2f.waitingForPort_.push(callback);
	    }
	  };
	
	  /**
	   * Handles response messages from the extension.
	   * @param {MessageEvent.<u2f.Response>} message
	   * @private
	   */
	  u2f.responseHandler_ = function(message) {
	    var response = message.data;
	    var reqId = response['requestId'];
	    if (!reqId || !u2f.callbackMap_[reqId]) {
	      console.error('Unknown or missing requestId in response.');
	      return;
	    }
	    var cb = u2f.callbackMap_[reqId];
	    delete u2f.callbackMap_[reqId];
	    cb(response['responseData']);
	  };
	
	  /**
	   * Dispatches an array of sign requests to available U2F tokens.
	   * If the JS API version supported by the extension is unknown, it first sends a
	   * message to the extension to find out the supported API version and then it sends
	   * the sign request.
	   * @param {string=} appId
	   * @param {string=} challenge
	   * @param {Array<u2f.RegisteredKey>} registeredKeys
	   * @param {function((u2f.Error|u2f.SignResponse))} callback
	   * @param {number=} opt_timeoutSeconds
	   */
	  u2f.sign = function(appId, challenge, registeredKeys, callback, opt_timeoutSeconds) {
	    if (js_api_version === undefined) {
	      // Send a message to get the extension to JS API version, then send the actual sign request.
	      u2f.getApiVersion(
	          function (response) {
	            js_api_version = response['js_api_version'] === undefined ? 0 : response['js_api_version'];
	            console.log("Extension JS API Version: ", js_api_version);
	            u2f.sendSignRequest(appId, challenge, registeredKeys, callback, opt_timeoutSeconds);
	          });
	    } else {
	      // We know the JS API version. Send the actual sign request in the supported API version.
	      u2f.sendSignRequest(appId, challenge, registeredKeys, callback, opt_timeoutSeconds);
	    }
	  };
	
	  /**
	   * Dispatches an array of sign requests to available U2F tokens.
	   * @param {string=} appId
	   * @param {string=} challenge
	   * @param {Array<u2f.RegisteredKey>} registeredKeys
	   * @param {function((u2f.Error|u2f.SignResponse))} callback
	   * @param {number=} opt_timeoutSeconds
	   */
	  u2f.sendSignRequest = function(appId, challenge, registeredKeys, callback, opt_timeoutSeconds) {
	    u2f.getPortSingleton_(function(port) {
	      var reqId = ++u2f.reqCounter_;
	      u2f.callbackMap_[reqId] = callback;
	      var timeoutSeconds = (typeof opt_timeoutSeconds !== 'undefined' ?
	          opt_timeoutSeconds : u2f.EXTENSION_TIMEOUT_SEC);
	      var req = u2f.formatSignRequest_(appId, challenge, registeredKeys, timeoutSeconds, reqId);
	      port.postMessage(req);
	    });
	  };
	
	  /**
	   * Dispatches register requests to available U2F tokens. An array of sign
	   * requests identifies already registered tokens.
	   * If the JS API version supported by the extension is unknown, it first sends a
	   * message to the extension to find out the supported API version and then it sends
	   * the register request.
	   * @param {string=} appId
	   * @param {Array<u2f.RegisterRequest>} registerRequests
	   * @param {Array<u2f.RegisteredKey>} registeredKeys
	   * @param {function((u2f.Error|u2f.RegisterResponse))} callback
	   * @param {number=} opt_timeoutSeconds
	   */
	  u2f.register = function(appId, registerRequests, registeredKeys, callback, opt_timeoutSeconds) {
	    if (js_api_version === undefined) {
	      // Send a message to get the extension to JS API version, then send the actual register request.
	      u2f.getApiVersion(
	          function (response) {
	            js_api_version = response['js_api_version'] === undefined ? 0: response['js_api_version'];
	            console.log("Extension JS API Version: ", js_api_version);
	            u2f.sendRegisterRequest(appId, registerRequests, registeredKeys,
	                callback, opt_timeoutSeconds);
	          });
	    } else {
	      // We know the JS API version. Send the actual register request in the supported API version.
	      u2f.sendRegisterRequest(appId, registerRequests, registeredKeys,
	          callback, opt_timeoutSeconds);
	    }
	  };
	
	  /**
	   * Dispatches register requests to available U2F tokens. An array of sign
	   * requests identifies already registered tokens.
	   * @param {string=} appId
	   * @param {Array<u2f.RegisterRequest>} registerRequests
	   * @param {Array<u2f.RegisteredKey>} registeredKeys
	   * @param {function((u2f.Error|u2f.RegisterResponse))} callback
	   * @param {number=} opt_timeoutSeconds
	   */
	  u2f.sendRegisterRequest = function(appId, registerRequests, registeredKeys, callback, opt_timeoutSeconds) {
	    u2f.getPortSingleton_(function(port) {
	      var reqId = ++u2f.reqCounter_;
	      u2f.callbackMap_[reqId] = callback;
	      var timeoutSeconds = (typeof opt_timeoutSeconds !== 'undefined' ?
	          opt_timeoutSeconds : u2f.EXTENSION_TIMEOUT_SEC);
	      var req = u2f.formatRegisterRequest_(
	          appId, registeredKeys, registerRequests, timeoutSeconds, reqId);
	      port.postMessage(req);
	    });
	  };
	
	
	  /**
	   * Dispatches a message to the extension to find out the supported
	   * JS API version.
	   * If the user is on a mobile phone and is thus using Google Authenticator instead
	   * of the Chrome extension, don't send the request and simply return 0.
	   * @param {function((u2f.Error|u2f.GetJsApiVersionResponse))} callback
	   * @param {number=} opt_timeoutSeconds
	   */
	  u2f.getApiVersion = function(callback, opt_timeoutSeconds) {
	   u2f.getPortSingleton_(function(port) {
	     // If we are using Android Google Authenticator or iOS client app,
	     // do not fire an intent to ask which JS API version to use.
	     if (port.getPortType) {
	       var apiVersion;
	       switch (port.getPortType()) {
	         case 'WrappedIosPort_':
	         case 'WrappedAuthenticatorPort_':
	           apiVersion = 1.1;
	           break;
	
	         default:
	           apiVersion = 0;
	           break;
	       }
	       callback({ 'js_api_version': apiVersion });
	       return;
	     }
	      var reqId = ++u2f.reqCounter_;
	      u2f.callbackMap_[reqId] = callback;
	      var req = {
	        type: u2f.MessageTypes.U2F_GET_API_VERSION_REQUEST,
	        timeoutSeconds: (typeof opt_timeoutSeconds !== 'undefined' ?
	            opt_timeoutSeconds : u2f.EXTENSION_TIMEOUT_SEC),
	        requestId: reqId
	      };
	      port.postMessage(req);
	    });
	  };
	})();


/***/ },
/* 725 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2018-2019, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(642), __webpack_require__(705), __webpack_require__(641), __webpack_require__(564)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormController, FooterSignout, FactorUtil, Util) {
	
	  var _ = Okta._;
	
	  return FormController.extend({
	
	    className: 'verify-custom-factor custom-factor-form',
	
	    Model: {
	      props: {
	        rememberDevice: 'boolean'
	      },
	
	      initialize: function initialize() {
	        var rememberDevice = FactorUtil.getRememberDeviceValue(this.appState);
	        // set the initial value for remember device (Cannot do this while defining the
	        // local property because this.settings would not be initialized there yet).
	        this.set('rememberDevice', rememberDevice);
	      },
	
	      save: function save() {
	        var rememberDevice = !!this.get('rememberDevice');
	        return this.manageTransaction(function (transaction, setTransaction) {
	          var data = {
	            rememberDevice: rememberDevice
	          };
	          var factor = _.findWhere(transaction.factors, {
	            provider: 'GENERIC_SAML',
	            factorType: 'assertion:saml2'
	          });
	          var self = this;
	          return factor.verify(data).then(function (trans) {
	            setTransaction(trans);
	            var url = self.appState.get('verifyCustomFactorRedirectUrl');
	            if (url !== null) {
	              Util.redirect(url);
	            }
	          }).fail(function (err) {
	            throw err;
	          });
	        });
	      }
	    },
	
	    Form: function Form() {
	      var factors = this.options.appState.get('factors');
	      var factor = factors.findWhere({
	        factorType: 'assertion:saml2',
	        provider: 'GENERIC_SAML'
	      });
	      var vendorName = factor.get('vendorName');
	      var saveText = Okta.loc('mfa.challenge.verify', 'login');
	      var subtitle = Okta.loc('verify.customFactor.subtitle', 'login', [vendorName]);
	      return {
	        autoSave: true,
	        title: vendorName,
	        save: saveText,
	        subtitle: subtitle,
	        attributes: { 'data-se': 'factor-custom' },
	        initialize: function initialize() {
	          if (this.options.appState.get('allowRememberDevice')) {
	            this.addInput({
	              label: false,
	              'label-top': true,
	              placeholder: this.options.appState.get('rememberDeviceLabel'),
	              className: 'margin-btm-0',
	              name: 'rememberDevice',
	              type: 'checkbox'
	            });
	          }
	        }
	      };
	    },
	
	    Footer: FooterSignout,
	
	    trapAuthResponse: function trapAuthResponse() {
	      if (this.options.appState.get('isMfaChallenge')) {
	        return true;
	      }
	    },
	
	    back: function back() {
	      // Empty function on verify controllers to prevent users
	      // from navigating back during 'verify' using the browser's
	      // back button. The URL will still change, but the view will not
	      // More details in OKTA-135060.
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 726 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	/* eslint complexity: [2, 9], max-params: [2, 11] */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(642), __webpack_require__(615), __webpack_require__(646), __webpack_require__(592), __webpack_require__(727), __webpack_require__(728)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormController, Enums, RouterUtil, Toolbar, FactorList, RequiredFactorList) {
	
	  var _ = Okta._;
	
	  return FormController.extend({
	    className: 'enroll-choices',
	    state: {
	      pageType: null
	    },
	
	    Model: {},
	
	    Form: {
	      noCancelButton: true,
	
	      title: _.partial(Okta.loc, 'enroll.choices.title', 'login'),
	
	      noButtonBar: function noButtonBar() {
	        return this.state.get('pageType') === Enums.ALL_OPTIONAL_NONE_ENROLLED;
	      },
	
	      subtitle: function subtitle() {
	        switch (this.state.get('pageType')) {
	          case Enums.ALL_OPTIONAL_SOME_ENROLLED:
	          case Enums.HAS_REQUIRED_ALL_REQUIRED_ENROLLED:
	            return Okta.loc('enroll.choices.optional', 'login');
	          default:
	            return Okta.loc('enroll.choices.description', 'login');
	        }
	      },
	
	      save: function save() {
	        switch (this.state.get('pageType')) {
	          case Enums.ALL_OPTIONAL_SOME_ENROLLED:
	          case Enums.HAS_REQUIRED_ALL_REQUIRED_ENROLLED:
	            return Okta.loc('enroll.choices.submit.finish', 'login');
	          case Enums.HAS_REQUIRED_NONE_ENROLLED:
	            return Okta.loc('enroll.choices.submit.configure', 'login');
	          case Enums.HAS_REQUIRED_SOME_REQUIRED_ENROLLED:
	            return Okta.loc('enroll.choices.submit.next', 'login');
	          default:
	            return '';
	        }
	      },
	
	      initialize: function initialize(options) {
	        this.listenTo(this, 'save', function () {
	          var current;
	          switch (this.state.get('pageType')) {
	            case Enums.HAS_REQUIRED_NONE_ENROLLED:
	            case Enums.HAS_REQUIRED_SOME_REQUIRED_ENROLLED:
	              current = options.appState.get('factors').getFirstUnenrolledRequiredFactor();
	              options.appState.trigger('navigate', RouterUtil.createEnrollFactorUrl(current.get('provider'), current.get('factorType')));
	              break;
	            default:
	              return this.model.doTransaction(function (transaction) {
	                return transaction.skip();
	              });
	          }
	        });
	      },
	
	      preRender: function preRender() {
	        var factors = this.options.appState.get('factors');
	        switch (this.state.get('pageType')) {
	          case Enums.HAS_REQUIRED_NONE_ENROLLED:
	          case Enums.HAS_REQUIRED_SOME_REQUIRED_ENROLLED:
	            this.add(new RequiredFactorList({
	              minimize: true,
	              collection: new Okta.Collection(factors.where({ required: true })),
	              appState: this.options.appState
	            }));
	            break;
	          case Enums.HAS_REQUIRED_ALL_REQUIRED_ENROLLED:
	          case Enums.ALL_OPTIONAL_SOME_ENROLLED:
	          case Enums.ALL_OPTIONAL_NONE_ENROLLED:
	            var enrolled = factors.where({ enrolled: true }),
	                notEnrolled = factors.where({ enrolled: false }),
	                notEnrolledListTitle;
	            if (enrolled.length > 0) {
	              notEnrolledListTitle = Okta.loc('enroll.choices.list.optional', 'login');
	              this.add(new FactorList({
	                listTitle: Okta.loc('enroll.choices.list.enrolled', 'login'),
	                minimize: true,
	                collection: new Okta.Collection(enrolled),
	                appState: this.options.appState
	              }));
	            }
	            this.add(new FactorList({
	              listTitle: notEnrolledListTitle,
	              collection: new Okta.Collection(notEnrolled),
	              appState: this.options.appState
	            }));
	            break;
	        }
	      }
	
	    },
	
	    initialize: function initialize(options) {
	      var numRequiredEnrolled = 0,
	          numRequiredNotEnrolled = 0,
	          numOptionalEnrolled = 0,
	          numOptionalNotEnrolled = 0,
	          hasRequired,
	          pageType;
	
	      options.appState.get('factors').each(function (factor) {
	        var required = factor.get('required'),
	            enrolled = factor.get('enrolled');
	        if (required && enrolled) {
	          numRequiredEnrolled++;
	        } else if (required && !enrolled) {
	          numRequiredNotEnrolled++;
	        } else if (!required && enrolled) {
	          numOptionalEnrolled++;
	        } else if (!required && !enrolled) {
	          numOptionalNotEnrolled++;
	        }
	      });
	
	      hasRequired = numRequiredEnrolled > 0 || numRequiredNotEnrolled > 0;
	
	      // There are 5 possible states this screen can be in:
	
	      // 1. Has required, but none have been enrolled. Wizard start page.
	      if (hasRequired && numRequiredEnrolled === 0) {
	        pageType = Enums.HAS_REQUIRED_NONE_ENROLLED;
	      }
	
	      // 2. Has required, and have enrolled at least one. The page layout
	      //    to configure the remaining required factors.
	      else if (hasRequired && numRequiredNotEnrolled > 0) {
	          pageType = Enums.HAS_REQUIRED_SOME_REQUIRED_ENROLLED;
	        }
	
	        // 3. Has required, and finished enrolling all required factors. The
	        //    page layout you see to configure any optional factors or skip.
	        else if (hasRequired && numOptionalNotEnrolled > 0) {
	            pageType = Enums.HAS_REQUIRED_ALL_REQUIRED_ENROLLED;
	          }
	
	          // 4. Factors are all optional, no factors enrolled.
	          else if (numOptionalEnrolled === 0 && numOptionalNotEnrolled > 0) {
	              pageType = Enums.ALL_OPTIONAL_NONE_ENROLLED;
	            }
	
	            // 5. Factors are all optional, some factors have already been
	            //    enrolled (can either enroll more or skip).
	            else if (numOptionalNotEnrolled > 0) {
	                pageType = Enums.ALL_OPTIONAL_SOME_ENROLLED;
	              }
	
	              // 6. Factors are all optional, all factors have already been
	              //    enrolled, among them there is OktaVerify with Push enrolled as totp
	              //    (API return OktaVerify push factor as unenrolled in this case and as we always merge
	              //    push and totp in UI so we redirect to skip link here).
	              else {
	                  this.model.doTransaction(function (transaction) {
	                    return transaction.skip();
	                  });
	                }
	
	      this.state.set('pageType', pageType);
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 727 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(646)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, RouterUtil) {
	
	  var _ = Okta._;
	
	  var FactorRow = Okta.View.extend({
	    className: 'enroll-factor-row clearfix',
	
	    template: '\
	      <div class="enroll-factor-icon-container">\
	        <div class="factor-icon enroll-factor-icon {{iconClassName}}">\
	        </div>\
	      </div>\
	      <div class="enroll-factor-description">\
	        <h3 class="enroll-factor-label">{{factorLabel}}</h3>\
	        {{#if factorDescription}}\
	          <p>{{factorDescription}}</p>\
	        {{/if}}\
	        <div class="enroll-factor-button"></div>\
	      </div>\
	    ',
	
	    attributes: function attributes() {
	      return { 'data-se': this.model.get('factorName') };
	    },
	
	    children: function children() {
	      if (this.model.get('enrolled')) {
	        return [['<span class="icon success-16-green"></span>', '.enroll-factor-label']];
	      } else if (this.model.get('enrollment') === 'REQUIRED') {
	        return [['<span class="icon success-16-gray"></span>', '.enroll-factor-label']];
	      }
	
	      return [[Okta.createButton({
	        className: 'button',
	        title: Okta.loc('enroll.choices.setup', 'login'),
	        click: function click() {
	          this.options.appState.trigger('navigate', RouterUtil.createEnrollFactorUrl(this.model.get('provider'), this.model.get('factorType')));
	        }
	      }), '.enroll-factor-button']];
	    },
	
	    minimize: function minimize() {
	      this.$el.addClass('enroll-factor-row-min');
	    },
	
	    maximize: function maximize() {
	      this.$el.removeClass('enroll-factor-row-min');
	    }
	  });
	
	  return Okta.ListView.extend({
	
	    className: 'enroll-factor-list',
	
	    item: FactorRow,
	
	    itemSelector: '.list-content',
	
	    template: '\
	      {{#if listSubtitle}}\
	        <div class="list-subtitle">{{listSubtitle}}</div>\
	      {{/if}}\
	      {{#if listTitle}}\
	        <div class="list-title">{{listTitle}}</div>\
	      {{/if}}\
	      <div class="list-content"></div>\
	    ',
	
	    getTemplateData: function getTemplateData() {
	      var json = Okta.ListView.prototype.getTemplateData.call(this);
	      _.extend(json, this);
	      return json;
	    },
	
	    postRender: function postRender() {
	      if (this.options.minimize) {
	        this.invoke('minimize');
	      }
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 728 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(727)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FactorList) {
	
	  var _ = Okta._;
	
	  return FactorList.extend({
	
	    listTitle: _.partial(Okta.loc, 'enroll.choices.list.setup', 'login'),
	
	    className: function className() {
	      return FactorList.prototype.className + ' enroll-required-factor-list';
	    },
	
	    initialize: function initialize() {
	      var numRequired = this.collection.length,
	          numCompleted = this.collection.where({ enrolled: true }).length,
	          currentStep = numCompleted + 1;
	      this.listSubtitle = Okta.loc('enroll.choices.step', 'login', [currentStep, numRequired]);
	    },
	
	    postRender: function postRender() {
	      var currentModel, currentRow;
	      FactorList.prototype.postRender.apply(this, arguments);
	      currentModel = this.options.appState.get('factors').getFirstUnenrolledRequiredFactor();
	      currentRow = this.find(function (view) {
	        return view.model === currentModel;
	      });
	      currentRow.maximize();
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 729 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	/* eslint camelcase: 0*/
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(704), __webpack_require__(409), __webpack_require__(642), __webpack_require__(730)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Duo, Q, FormController, Footer) {
	
	  var $ = Okta.$,
	      _ = Okta._;
	
	  return FormController.extend({
	
	    className: 'enroll-duo duo-form',
	
	    Model: {
	      props: {
	        host: 'string',
	        signature: 'string',
	        postAction: 'string',
	        factorId: 'string',
	        stateToken: 'string'
	      },
	
	      getInitOptions: function getInitOptions() {
	        return this.doTransaction(function (transaction) {
	          var factor = _.findWhere(transaction.factors, {
	            factorType: 'web',
	            provider: 'DUO'
	          });
	          return factor.enroll();
	        });
	      },
	
	      activate: function activate(signedResponse) {
	        // Note: We should be doing this in OktaAuth! Fix when it's updated.
	        var url = this.get('postAction'),
	            factorId = this.get('factorId'),
	            self = this,
	            data = {
	          id: factorId,
	          stateToken: this.get('stateToken'),
	          sig_response: signedResponse
	        };
	        // We don't actually use authClient.post() here (unlike all the other cases in the
	        // sign-in widget) since the endpoint is wired to accept serialized form post instead
	        // of a JSON post ($.post() is different from authClient.post() in that in $.post(),
	        // jquery decides the Content-Type instead of it being a JSON type). Enroll/Verify DUO
	        // are the only two places where we actually do this.
	        // NOTE - If we ever decide to change this, we should test this very carefully.
	        return Q($.post(url, data)).then(function () {
	          return self.doTransaction(function (transaction) {
	            return transaction.poll();
	          });
	        }).fail(function (err) {
	          self.trigger('error', self, err.xhr);
	        });
	      }
	    },
	
	    Form: {
	      autoSave: true,
	      noButtonBar: true,
	      title: _.partial(Okta.loc, 'enroll.duo.title', 'login'),
	
	      postRender: function postRender() {
	        this.add('<iframe frameborder="0" title="' + this.title() + '"></iframe>');
	        Duo.init({
	          'host': this.model.get('host'),
	          'sig_request': this.model.get('signature'),
	          'iframe': this.$('iframe').get(0),
	          'post_action': _.bind(this.model.activate, this.model)
	        });
	      }
	    },
	
	    Footer: Footer,
	
	    fetchInitialData: function fetchInitialData() {
	      var self = this;
	      return this.model.getInitOptions(this.options.appState).then(function (trans) {
	        var res = trans.data;
	        if (!res || !res._embedded || !res._embedded.factor || !res._embedded.factor._embedded || !res._embedded.factor._embedded.activation) {
	          throw new Error('Response does not have duo activation options');
	        }
	
	        var factor = res._embedded.factor;
	        var activation = factor._embedded.activation;
	        self.model.set({
	          host: activation.host,
	          signature: activation.signature,
	          postAction: activation._links.complete.href,
	          factorId: factor.id,
	          stateToken: res.stateToken
	        });
	      });
	    },
	
	    trapAuthResponse: function trapAuthResponse() {
	      if (this.options.appState.get('isMfaEnrollActivate')) {
	        return true;
	      }
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 730 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(615)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Enums) {
	
	  return Okta.View.extend({
	    template: '\
	      <a href="#" class="link help js-back" data-se="back-link">\
	        {{i18n code="mfa.backToFactors" bundle="login"}}\
	      </a>\
	    ',
	    className: 'auth-footer',
	    events: {
	      'click .js-back': function clickJsBack(e) {
	        e.preventDefault();
	        this.back();
	      }
	    },
	
	    back: function back() {
	      this.state.set('navigateDir', Enums.DIRECTION_BACK);
	      if (this.options.appState.get('prevLink')) {
	        // Once we are in the MFA_ENROLL_ACTIVATE, we need to reset to the
	        // correct state. Fortunately, this means that the router will
	        // handle navigation once the request is finished.
	        this.model.doTransaction(function (transaction) {
	          return transaction.prev();
	        });
	      } else {
	        this.options.appState.trigger('navigate', 'signin/enroll');
	      }
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 731 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(642), __webpack_require__(641), __webpack_require__(730), __webpack_require__(649)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormController, FactorUtil, Footer, TextBox) {
	
	  var _ = Okta._;
	
	  return FormController.extend({
	    className: 'enroll-question',
	    Model: {
	      props: {
	        question: 'string',
	        answer: ['string', true]
	      },
	      local: {
	        securityQuestions: 'object'
	      },
	      save: function save() {
	        return this.doTransaction(function (transaction) {
	          var factor = _.findWhere(transaction.factors, {
	            factorType: 'question',
	            provider: 'OKTA'
	          });
	          return factor.enroll({
	            profile: {
	              question: this.get('question'),
	              answer: this.get('answer')
	            }
	          });
	        });
	      }
	    },
	
	    Form: {
	      autoSave: true,
	      title: _.partial(Okta.loc, 'enroll.securityQuestion.setup', 'login'),
	      inputs: function inputs() {
	        return [{
	          label: false,
	          'label-top': true,
	          name: 'question',
	          type: 'select',
	          wide: true,
	          options: function options() {
	            return this.model.get('securityQuestions');
	          },
	          params: {
	            searchThreshold: 25
	          }
	        }, {
	          label: false,
	          'label-top': true,
	          placeholder: Okta.loc('mfa.challenge.answer.placeholder', 'login'),
	          className: 'o-form-fieldset o-form-label-top auth-passcode',
	          name: 'answer',
	          input: TextBox,
	          type: 'text',
	          params: {
	            innerTooltip: Okta.loc('mfa.challenge.answer.tooltip', 'login')
	          }
	        }];
	      }
	    },
	
	    Footer: Footer,
	
	    fetchInitialData: function fetchInitialData() {
	      var self = this;
	      return this.model.manageTransaction(function (transaction) {
	        var factor = _.findWhere(transaction.factors, {
	          factorType: 'question',
	          provider: 'OKTA'
	        });
	        return factor.questions();
	      }).then(function (questionsRes) {
	        var questions = {};
	        _.each(questionsRes, function (question) {
	          questions[question.question] = FactorUtil.getSecurityQuestionLabel(question);
	        });
	        self.model.set('securityQuestions', questions);
	      });
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 732 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(642), __webpack_require__(643), __webpack_require__(716), __webpack_require__(721), __webpack_require__(730), __webpack_require__(722)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormController, FormType, webauthn, Spinner, Footer, HtmlErrorMessageView) {
	
	  var _ = Okta._;
	
	  return FormController.extend({
	    className: 'enroll-windows-hello',
	    Model: {
	      local: {
	        __isEnrolled__: 'boolean'
	      },
	
	      save: function save() {
	        if (!webauthn.isAvailable()) {
	          return;
	        }
	
	        this.trigger('request');
	
	        if (this.get('__isEnrolled__')) {
	          return this.activate();
	        }
	
	        return this.doTransaction(function (transaction) {
	          return this._enroll(transaction);
	        });
	      },
	
	      _enroll: function _enroll(transaction) {
	        var factor = _.findWhere(transaction.factors, {
	          factorType: 'webauthn',
	          provider: 'FIDO'
	        });
	
	        return factor.enroll();
	      },
	
	      activate: function activate() {
	        this.set('__isEnrolled__', true);
	
	        return this.doTransaction(function (transaction) {
	          var activation = transaction.factor.activation;
	          var user = transaction.user;
	          var model = this;
	
	          var accountInfo = {
	            rpDisplayName: activation.rpDisplayName,
	            userDisplayName: user.profile.displayName,
	            accountName: user.profile.login,
	            userId: user.id
	          };
	          var cryptoParams = [{
	            algorithm: activation.algorithm
	          }];
	          var challenge = activation.nonce;
	
	          return webauthn.makeCredential(accountInfo, cryptoParams, challenge).then(function (creds) {
	            return transaction.activate({
	              credentialId: creds.credential.id,
	              publicKey: creds.publicKey,
	              attestation: null
	            });
	          }).fail(function (error) {
	            switch (error.message) {
	              case 'AbortError':
	              case 'NotFoundError':
	              case 'NotSupportedError':
	                model.trigger('abort', error.message);
	                return transaction;
	            }
	
	            throw error;
	          });
	        });
	      }
	    },
	
	    Form: {
	      autoSave: true,
	      hasSavingState: false,
	      title: _.partial(Okta.loc, 'enroll.windowsHello.title', 'login'),
	      subtitle: function subtitle() {
	        return webauthn.isAvailable() ? Okta.loc('enroll.windowsHello.subtitle', 'login') : '';
	      },
	      save: _.partial(Okta.loc, 'enroll.windowsHello.save', 'login'),
	
	      customSavingState: {
	        stop: 'abort'
	      },
	
	      modelEvents: function modelEvents() {
	        if (!webauthn.isAvailable()) {
	          return {};
	        }
	
	        return {
	          'request': '_startEnrollment',
	          'error': '_stopEnrollment',
	          'abort': '_stopEnrollment'
	        };
	      },
	
	      noButtonBar: function noButtonBar() {
	        return !webauthn.isAvailable();
	      },
	
	      formChildren: function formChildren() {
	        var result = [];
	
	        if (!webauthn.isAvailable()) {
	          result.push(FormType.View({ View: new HtmlErrorMessageView({ message: Okta.loc('enroll.windowsHello.error.notWindows', 'login') }) }, { selector: '.o-form-error-container' }));
	        }
	
	        result.push(FormType.View({ View: new Spinner({ model: this.model, visible: false }) }));
	
	        return result;
	      },
	
	      _startEnrollment: function _startEnrollment() {
	        this.subtitle = Okta.loc('enroll.windowsHello.subtitle.loading', 'login');
	
	        this.model.trigger('spinner:show');
	        this._resetErrorMessage();
	
	        this.render();
	        this.$('.o-form-button-bar').addClass('hide');
	      },
	
	      _stopEnrollment: function _stopEnrollment(errorMessage) {
	        this.subtitle = Okta.loc('enroll.windowsHello.subtitle', 'login');
	
	        this.model.trigger('spinner:hide');
	        this.$('.o-form-button-bar').removeClass('hide');
	
	        var message;
	        switch (errorMessage) {
	          case 'NotSupportedError':
	            message = Okta.loc('enroll.windowsHello.error.notConfiguredHtml', 'login');
	            break;
	        }
	
	        this._resetErrorMessage();
	
	        if (message) {
	          var messageView = new HtmlErrorMessageView({
	            message: message
	          });
	
	          this.$('.o-form-error-container').addClass('o-form-has-errors');
	          this.add(messageView, { selector: '.o-form-error-container' });
	          this._errorMessageView = this.last();
	        }
	
	        this.render();
	      },
	
	      _resetErrorMessage: function _resetErrorMessage() {
	        this._errorMessageView && this._errorMessageView.remove();
	        this._errorMessageView = undefined;
	        this.clearErrors();
	      }
	    },
	
	    Footer: Footer,
	
	    trapAuthResponse: function trapAuthResponse() {
	      if (this.options.appState.get('isMfaEnrollActivate')) {
	        this.model.activate();
	        return true;
	      }
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 733 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	/* eslint complexity: [2, 8] */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(642), __webpack_require__(730), __webpack_require__(734), __webpack_require__(649), __webpack_require__(735), __webpack_require__(643), __webpack_require__(557)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormController, Footer, PhoneTextBox, TextBox, CountryUtil, FormType, Keys) {
	
	  var _ = Okta._;
	  var API_RATE_LIMIT = 30000; //milliseconds
	
	  var factorIdIsDefined = {
	    factorId: function factorId(val) {
	      return !_.isUndefined(val);
	    }
	  };
	
	  function isCallFactor(factorType) {
	    return factorType === 'call';
	  }
	
	  function getClassName(factorType) {
	    return isCallFactor(factorType) ? 'enroll-call' : 'enroll-sms';
	  }
	
	  function sendCode(e) {
	    if (Keys.isEnter(e)) {
	      e.stopPropagation();
	      e.preventDefault();
	      if (e.type === 'keyup' && e.data && e.data.model) {
	        e.data.model.sendCode();
	      }
	    }
	  }
	
	  return FormController.extend({
	    className: function className() {
	      return getClassName(this.options.factorType);
	    },
	    Model: {
	      props: {
	        countryCode: ['string', true, 'US'],
	        phoneNumber: ['string', true],
	        phoneExtension: ['string', false],
	        lastEnrolledPhoneNumber: 'string',
	        passCode: ['string', true],
	        factorId: 'string'
	      },
	      local: {
	        hasExistingPhones: 'boolean',
	        trapEnrollment: 'boolean',
	        ableToResend: 'boolean',
	        factorType: 'string',
	        skipPhoneValidation: 'boolean'
	      },
	      derived: {
	        countryCallingCode: {
	          deps: ['countryCode'],
	          fn: function fn(countryCode) {
	            return '+' + CountryUtil.getCallingCodeForCountry(countryCode);
	          }
	        },
	        fullPhoneNumber: {
	          deps: ['countryCallingCode', 'phoneNumber'],
	          fn: function fn(countryCallingCode, phoneNumber) {
	            return phoneNumber ? countryCallingCode + phoneNumber : '';
	          }
	        },
	        enrolled: {
	          deps: ['lastEnrolledPhoneNumber', 'fullPhoneNumber'],
	          fn: function fn(lastEnrolled, current) {
	            return lastEnrolled === current;
	          }
	        }
	      },
	      limitResending: function limitResending() {
	        this.set({ ableToResend: false });
	        _.delay(_.bind(this.set, this), API_RATE_LIMIT, { ableToResend: true });
	      },
	      sendCode: function sendCode() {
	        var self = this;
	        var phoneNumber = this.get('fullPhoneNumber');
	        var phoneExtension = this.get('phoneExtension');
	
	        self.trigger('errors:clear');
	
	        if (!phoneNumber.length) {
	          self.trigger('invalid', self, { 'phoneNumber': 'model.validation.field.blank' });
	          return;
	        }
	
	        return this.doTransaction(function (transaction) {
	          var isMfaEnroll = transaction.status === 'MFA_ENROLL';
	          var profileData = {
	            phoneNumber: phoneNumber,
	            updatePhone: isMfaEnroll ? self.get('hasExistingPhones') : true
	          };
	          if (isCallFactor(self.get('factorType'))) {
	            profileData['phoneExtension'] = phoneExtension;
	          }
	
	          if (self.get('skipPhoneValidation')) {
	            profileData['validatePhone'] = false;
	          }
	
	          var doEnroll = function doEnroll(trans) {
	            var factor = _.findWhere(trans.factors, {
	              factorType: self.get('factorType'),
	              provider: 'OKTA'
	            });
	            return factor.enroll({
	              profile: profileData
	            }).fail(function (error) {
	              if (error.errorCode === 'E0000098') {
	                // E0000098: "This phone number is invalid."
	                self.set('skipPhoneValidation', true);
	                error.xhr.responseJSON.errorSummary = Okta.loc('enroll.sms.try_again', 'login');
	              }
	              throw error;
	            });
	          };
	
	          if (isMfaEnroll) {
	            return doEnroll(transaction);
	          } else {
	            // We must transition to MfaEnroll before updating the phone number
	            self.set('trapEnrollment', true);
	            return transaction.prev().then(doEnroll).then(function (trans) {
	              self.set('trapEnrollment', false);
	              return trans;
	            });
	          }
	          // Rethrow errors so we can change state
	          // AFTER setting the new transaction
	        }, true).then(function () {
	          self.set('lastEnrolledPhoneNumber', phoneNumber);
	          self.limitResending();
	        }).fail(function () {
	          self.set('ableToResend', true);
	          self.set('trapEnrollment', false);
	        });
	      },
	      resendCode: function resendCode() {
	        this.trigger('errors:clear');
	        this.limitResending();
	        return this.doTransaction(function (transaction) {
	          return transaction.resend(this.get('factorType'));
	        });
	      },
	      save: function save() {
	        return this.doTransaction(function (transaction) {
	          return transaction.activate({
	            passCode: this.get('passCode')
	          });
	        });
	      }
	    },
	
	    Form: function Form() {
	      var factorType = this.options.factorType;
	      var isCall = isCallFactor(factorType);
	
	      var formTitle = Okta.loc(isCall ? 'enroll.call.setup' : 'enroll.sms.setup', 'login');
	      var formSubmit = Okta.loc(isCall ? 'mfa.call' : 'mfa.sendCode', 'login');
	      var formRetry = Okta.loc(isCall ? 'mfa.redial' : 'mfa.resendCode', 'login');
	      var formSubmitted = Okta.loc(isCall ? 'mfa.calling' : 'mfa.sent', 'login');
	
	      var numberFieldClassName = isCall ? 'enroll-call-phone' : 'enroll-sms-phone';
	      var buttonClassName = isCall ? 'call-request-button' : 'sms-request-button';
	
	      var formChildren = [FormType.Input({
	        name: 'countryCode',
	        type: 'select',
	        wide: true,
	        options: CountryUtil.getCountries()
	      }), FormType.Input({
	        placeholder: Okta.loc('mfa.phoneNumber.placeholder', 'login'),
	        className: numberFieldClassName,
	        name: 'phoneNumber',
	        input: PhoneTextBox,
	        type: 'text',
	        render: function render() {
	          this.$('input[name="phoneNumber"]').off('keydown keyup', sendCode).keydown(sendCode).keyup({ model: this.model }, sendCode);
	        }
	      })];
	      if (isCall) {
	        formChildren.push(FormType.Input({
	          placeholder: Okta.loc('mfa.phoneNumber.ext.placeholder', 'login'),
	          className: 'enroll-call-extension',
	          name: 'phoneExtension',
	          input: TextBox,
	          type: 'text'
	        }));
	      }
	      formChildren.push(FormType.Button({
	        title: formSubmit,
	        attributes: { 'data-se': buttonClassName },
	        className: 'button button-primary js-enroll-phone ' + buttonClassName,
	        click: function click() {
	          this.model.sendCode();
	        }
	      }), FormType.Button({
	        title: formRetry,
	        attributes: { 'data-se': buttonClassName },
	        className: 'button js-enroll-phone ' + buttonClassName,
	        click: function click() {
	          this.model.resendCode();
	        },
	        initialize: function initialize() {
	          this.$el.css({ display: 'none' });
	          this.listenTo(this.model, 'change:ableToResend', function (model, ableToResend) {
	            if (ableToResend) {
	              this.options.title = formRetry;
	              this.enable();
	            } else {
	              this.options.title = formSubmitted;
	              this.disable();
	            }
	            this.render();
	          });
	        }
	      }), FormType.Divider({
	        showWhen: factorIdIsDefined
	      }), FormType.Input({
	        placeholder: Okta.loc('mfa.challenge.enterCode.placeholder', 'login'),
	        name: 'passCode',
	        input: TextBox,
	        type: 'tel',
	        params: {
	          innerTooltip: Okta.loc('mfa.challenge.enterCode.tooltip', 'login')
	        },
	        showWhen: factorIdIsDefined
	      }), FormType.Toolbar({
	        noCancelButton: true,
	        save: Okta.loc('mfa.challenge.verify', 'login'),
	        showWhen: factorIdIsDefined
	      }));
	
	      return {
	        title: formTitle,
	        noButtonBar: true,
	        autoSave: true,
	        className: getClassName(factorType),
	        initialize: function initialize() {
	          this.listenTo(this.model, 'error errors:clear', function () {
	            this.clearErrors();
	          });
	          this.listenTo(this.model, 'change:enrolled', function () {
	            this.$('.js-enroll-phone').toggle();
	          });
	        },
	        formChildren: formChildren
	      };
	    },
	
	    Footer: Footer,
	
	    trapAuthResponse: function trapAuthResponse() {
	      if (this.options.appState.get('isMfaEnrollActivate')) {
	        this.model.set('factorId', this.options.appState.get('activatedFactorId'));
	        return true;
	      }
	      if (this.options.appState.get('isMfaEnroll') && this.model.get('trapEnrollment')) {
	        return true;
	      }
	    },
	
	    initialize: function initialize() {
	      if (isCallFactor(this.options.factorType)) {
	        this.model.set('hasExistingPhones', this.options.appState.get('hasExistingPhonesForCall'));
	      } else {
	        this.model.set('hasExistingPhones', this.options.appState.get('hasExistingPhones'));
	      }
	      this.model.set('factorType', this.options.factorType);
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 734 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(650)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, TextBox) {
	
	  var _ = Okta._;
	
	  return TextBox.extend({
	
	    template: Okta.Handlebars.compile('\
	      <span class="okta-form-label-inline o-form-label-inline">{{countryCallingCode}}</span>\
	      <span class="okta-form-input-field input-fix o-form-control">\
	        <input type="{{type}}" placeholder="{{placeholder}}" name="{{name}}" \
	          id="{{inputId}}" value="{{value}}" autocomplete="off"/>\
	      </span>\
	    '),
	
	    initialize: function initialize() {
	      this.listenTo(this.model, 'change:countryCallingCode', function () {
	        this.$('.o-form-label-inline').text(this.model.get('countryCallingCode'));
	      });
	    },
	
	    preRender: function preRender() {
	      this.options.countryCallingCode = this.model.get('countryCallingCode');
	    },
	
	    postRender: function postRender() {
	      // This is a hack - once inputGroups are done, get rid of it!!
	      this.$el.removeClass('input-fix o-form-control');
	      _.defer(_.bind(function () {
	        this.$el.parent().addClass('o-form-input-group');
	      }, this));
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 735 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(408), __webpack_require__(736)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, bundles, countryCallingCodes) {
	
	  var fn = {};
	
	  // () => [{ countryCode: countryName }], sorted by countryName
	  fn.getCountries = function () {
	    // HM, BV, and TF do not have phone prefixes, so don't give the
	    // user the option to choose these countries. FYI it appears that these
	    // countries do not have calling codes because they are ~~uninhabited~~
	    var countries = _.omit(bundles.country, 'HM', 'BV', 'TF');
	
	    // Sort it; figure out if there is a better way to do this (best would
	    // be to sort it in the properties file!!)
	    var collection = _.map(countries, function (name, code) {
	      return { name: name, code: code };
	    });
	    collection = _.sortBy(collection, 'name');
	    var sorted = {};
	    _.each(collection, function (country) {
	      sorted[country.code] = country.name;
	    });
	
	    return sorted;
	  };
	
	  fn.getCallingCodeForCountry = function (countryCode) {
	    return countryCallingCodes[countryCode];
	  };
	
	  return fn;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 736 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(module.exports = { "US": "1", "AG": "1", "AI": "1", "AS": "1", "BB": "1", "BM": "1", "BS": "1", "CA": "1", "DM": "1", "DO": "1", "GD": "1", "GU": "1", "JM": "1", "KN": "1", "KY": "1", "LC": "1", "MP": "1", "MS": "1", "PR": "1", "SX": "1", "TC": "1", "TT": "1", "VC": "1", "VG": "1", "VI": "1", "RU": "7", "KZ": "7", "EG": "20", "ZA": "27", "GR": "30", "NL": "31", "BE": "32", "FR": "33", "ES": "34", "HU": "36", "IT": "39", "RO": "40", "CH": "41", "AT": "43", "GB": "44", "GG": "44", "IM": "44", "JE": "44", "DK": "45", "SE": "46", "NO": "47", "SJ": "47", "PL": "48", "DE": "49", "PE": "51", "MX": "52", "CU": "53", "AR": "54", "BR": "55", "CL": "56", "CO": "57", "VE": "58", "MY": "60", "AU": "61", "CC": "61", "CX": "61", "ID": "62", "PH": "63", "NZ": "64", "SG": "65", "TH": "66", "JP": "81", "KR": "82", "VN": "84", "CN": "86", "TR": "90", "IN": "91", "PK": "92", "AF": "93", "LK": "94", "MM": "95", "IR": "98", "SS": "211", "MA": "212", "EH": "212", "DZ": "213", "TN": "216", "LY": "218", "GM": "220", "SN": "221", "MR": "222", "ML": "223", "GN": "224", "CI": "225", "BF": "226", "NE": "227", "TG": "228", "BJ": "229", "MU": "230", "LR": "231", "SL": "232", "GH": "233", "NG": "234", "TD": "235", "CF": "236", "CM": "237", "CV": "238", "ST": "239", "GQ": "240", "GA": "241", "CG": "242", "CD": "243", "AO": "244", "GW": "245", "IO": "246", "AC": "247", "SC": "248", "SD": "249", "RW": "250", "ET": "251", "SO": "252", "DJ": "253", "KE": "254", "TZ": "255", "UG": "256", "BI": "257", "MZ": "258", "ZM": "260", "MG": "261", "RE": "262", "YT": "262", "ZW": "263", "NA": "264", "MW": "265", "LS": "266", "BW": "267", "SZ": "268", "KM": "269", "SH": "290", "TA": "290", "ER": "291", "AW": "297", "FO": "298", "GL": "299", "GI": "350", "PT": "351", "LU": "352", "IE": "353", "IS": "354", "AL": "355", "MT": "356", "CY": "357", "FI": "358", "AX": "358", "BG": "359", "LT": "370", "LV": "371", "EE": "372", "MD": "373", "AM": "374", "BY": "375", "AD": "376", "MC": "377", "SM": "378", "VA": "379", "UA": "380", "RS": "381", "ME": "382", "HR": "385", "SI": "386", "BA": "387", "MK": "389", "CZ": "420", "SK": "421", "LI": "423", "FK": "500", "BZ": "501", "GT": "502", "SV": "503", "HN": "504", "NI": "505", "CR": "506", "PA": "507", "PM": "508", "HT": "509", "GP": "590", "BL": "590", "MF": "590", "BO": "591", "GY": "592", "EC": "593", "GF": "594", "PY": "595", "MQ": "596", "SR": "597", "UY": "598", "CW": "599", "BQ": "599", "TL": "670", "NF": "672", "BN": "673", "NR": "674", "PG": "675", "TO": "676", "SB": "677", "VU": "678", "FJ": "679", "PW": "680", "WF": "681", "CK": "682", "NU": "683", "WS": "685", "KI": "686", "NC": "687", "TV": "688", "PF": "689", "TK": "690", "FM": "691", "MH": "692", "001": "979", "KP": "850", "HK": "852", "MO": "853", "KH": "855", "LA": "856", "BD": "880", "TW": "886", "MV": "960", "LB": "961", "JO": "962", "SY": "963", "IQ": "964", "KW": "965", "SA": "966", "YE": "967", "OM": "968", "PS": "970", "AE": "971", "IL": "972", "BH": "973", "QA": "974", "BT": "975", "MN": "976", "NP": "977", "TJ": "992", "TM": "993", "AZ": "994", "GE": "995", "KG": "996", "UZ": "998", "GS": 500, "PN": 64, "AQ": 672, "UM": 1, "AN": 599 });

/***/ },
/* 737 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(643), __webpack_require__(642), __webpack_require__(730), __webpack_require__(649)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormType, FormController, Footer, TextBox) {
	
	  var _ = Okta._;
	
	  function isRSA(provider) {
	    return provider === 'RSA';
	  }
	
	  function getClassName(provider) {
	    return isRSA(provider) ? 'enroll-rsa' : 'enroll-onprem';
	  }
	
	  return FormController.extend({
	    className: function className() {
	      return getClassName(this.options.provider);
	    },
	    Model: function Model() {
	      var provider = this.options.provider;
	      var factors = this.options.appState.get('factors');
	      var factor = factors.findWhere(_.pick(this.options, 'provider', 'factorType'));
	      var profile = factor.get('profile');
	      var credentialId = profile && profile.credentialId ? profile.credentialId : '';
	      return {
	        props: {
	          credentialId: ['string', true, credentialId],
	          passCode: ['string', true],
	          factorId: 'string'
	        },
	        save: function save() {
	          return this.doTransaction(function (transaction) {
	            var factor = _.findWhere(transaction.factors, {
	              factorType: 'token',
	              provider: provider
	            });
	            return factor.enroll({
	              passCode: this.get('passCode'),
	              profile: { credentialId: this.get('credentialId') }
	            });
	          });
	        }
	      };
	    },
	
	    Form: function Form() {
	      var provider = this.options.provider;
	      var factors = this.options.appState.get('factors');
	      var factor = factors.findWhere(_.pick(this.options, 'provider', 'factorType'));
	      var vendorName = factor.get('vendorName');
	      var title = isRSA(provider) ? Okta.loc('factor.totpHard.rsaSecurId', 'login') : vendorName;
	
	      return {
	        title: title,
	        noButtonBar: true,
	        autoSave: true,
	        className: getClassName(provider),
	        initialize: function initialize() {
	          this.listenTo(this.model, 'error', _.bind(function (source, error) {
	            if (error && error.status === 409) {
	              // 409 means we are in change pin, so we should clear out answer input
	              this.$('.o-form-input-name-passCode input').val('');
	              this.$('.o-form-input-name-passCode input').trigger('change');
	              this.$('.o-form-input-name-passCode input').focus();
	            }
	          }, this));
	        },
	        formChildren: [FormType.Input({
	          name: 'credentialId',
	          input: TextBox,
	          type: 'text',
	          placeholder: Okta.loc('enroll.onprem.username.placeholder', 'login', [vendorName]),
	          params: {
	            innerTooltip: Okta.loc('enroll.onprem.username.tooltip', 'login', [_.escape(vendorName)])
	          }
	        }), FormType.Input({
	          name: 'passCode',
	          input: TextBox,
	          type: 'password',
	          placeholder: Okta.loc('enroll.onprem.passcode.placeholder', 'login', [vendorName]),
	          params: {
	            innerTooltip: Okta.loc('enroll.onprem.passcode.tooltip', 'login', [_.escape(vendorName)])
	          }
	        }), FormType.Toolbar({
	          noCancelButton: true,
	          save: Okta.loc('mfa.challenge.verify', 'login')
	        })]
	      };
	    },
	
	    Footer: Footer
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 738 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(643), __webpack_require__(642), __webpack_require__(730), __webpack_require__(649)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormType, FormController, Footer, TextBox) {
	
	  var _ = Okta._;
	
	  return FormController.extend({
	    className: 'enroll-symantec',
	    Model: {
	      props: {
	        credentialId: ['string', true],
	        passCode: ['string', true],
	        nextPassCode: ['string', true],
	        factorId: 'string'
	      },
	      save: function save() {
	        return this.doTransaction(function (transaction) {
	
	          var factor = _.findWhere(transaction.factors, {
	            factorType: 'token',
	            provider: 'SYMANTEC'
	          });
	          return factor.enroll({
	            passCode: this.get('passCode'),
	            nextPassCode: this.get('nextPassCode'),
	            profile: { credentialId: this.get('credentialId') }
	          });
	        });
	      }
	    },
	
	    Form: {
	      title: _.partial(Okta.loc, 'factor.totpHard.symantecVip', 'login'),
	      subtitle: _.partial(Okta.loc, 'enroll.symantecVip.subtitle', 'login'),
	      noButtonBar: true,
	      autoSave: true,
	      className: 'enroll-symantec',
	      formChildren: function formChildren() {
	        return [FormType.Input({
	          name: 'credentialId',
	          input: TextBox,
	          type: 'text',
	          placeholder: Okta.loc('enroll.symantecVip.credentialId.placeholder', 'login'),
	          params: {
	            innerTooltip: Okta.loc('enroll.symantecVip.credentialId.tooltip', 'login')
	          }
	        }), FormType.Input({
	          name: 'passCode',
	          input: TextBox,
	          type: 'text',
	          placeholder: Okta.loc('enroll.symantecVip.passcode1.placeholder', 'login'),
	          params: {
	            innerTooltip: Okta.loc('enroll.symantecVip.passcode1.tooltip', 'login')
	          }
	        }), FormType.Input({
	          name: 'nextPassCode',
	          input: TextBox,
	          type: 'text',
	          placeholder: Okta.loc('enroll.symantecVip.passcode2.placeholder', 'login'),
	          params: {
	            innerTooltip: Okta.loc('enroll.symantecVip.passcode2.tooltip', 'login')
	          }
	        }), FormType.Toolbar({
	          noCancelButton: true,
	          save: Okta.loc('mfa.challenge.verify', 'login')
	        })];
	      }
	    },
	
	    Footer: Footer
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 739 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(643), __webpack_require__(642), __webpack_require__(730), __webpack_require__(649)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormType, FormController, Footer, TextBox) {
	
	  var _ = Okta._;
	
	  return FormController.extend({
	    className: 'enroll-yubikey',
	    Model: {
	      props: {
	        passCode: ['string', true],
	        factorId: 'string'
	      },
	      save: function save() {
	        return this.doTransaction(function (transaction) {
	          var factor = _.findWhere(transaction.factors, {
	            factorType: 'token:hardware',
	            provider: 'YUBICO'
	          });
	          return factor.enroll({
	            passCode: this.get('passCode')
	          });
	        });
	      }
	    },
	
	    Form: {
	      title: _.partial(Okta.loc, 'enroll.yubikey.title', 'login'),
	      subtitle: _.partial(Okta.loc, 'enroll.yubikey.subtitle', 'login'),
	      noCancelButton: true,
	      save: _.partial(Okta.loc, 'mfa.challenge.verify', 'login'),
	      autoSave: true,
	      className: 'enroll-yubikey',
	      formChildren: [FormType.View({
	        View: '<div class="yubikey-demo" data-type="yubikey-example"></div>'
	      }), FormType.Input({
	        name: 'passCode',
	        input: TextBox,
	        type: 'password'
	      })]
	    },
	
	    Footer: Footer
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 740 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(641), __webpack_require__(642), __webpack_require__(643), __webpack_require__(646), __webpack_require__(741), __webpack_require__(742), __webpack_require__(730)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FactorUtil, FormController, FormType, RouterUtil, StoreLinks, BarcodeView, Footer) {
	
	  var _ = Okta._;
	
	  var showWhenDeviceTypeSelected = {
	    '__deviceType__': function __deviceType__(val) {
	      return val !== undefined;
	    }
	  };
	
	  var AppDownloadInstructionsView = Okta.View.extend({
	    attributes: { 'data-se': 'app-download-instructions' },
	    className: 'app-download-instructions',
	    template: '\
	      <p class="instructions-title">{{title}}</p>\
	      <span class="app-logo {{appIcon}}"></span>\
	      <p class="instructions">{{{appStoreLinkText}}}</p>\
	    ',
	    initialize: function initialize() {
	      this.listenTo(this.model, 'change:__deviceType__', this.render);
	    },
	    getTemplateData: function getTemplateData() {
	      var appStoreLink, appIcon, appStoreName;
	      var factorName = FactorUtil.getFactorLabel(this.model.get('__provider__'), this.model.get('__factorType__'));
	      appStoreName = StoreLinks.STORE[this.model.get('__deviceType__')];
	      if (this.model.get('__provider__') === 'GOOGLE') {
	        appStoreLink = StoreLinks.GOOGLE[this.model.get('__deviceType__')];
	        appIcon = 'google-auth-38';
	      } else {
	        appStoreLink = StoreLinks.OKTA[this.model.get('__deviceType__')];
	        appIcon = 'okta-verify-38';
	      }
	      return {
	        title: Okta.loc('enroll.totp.installApp', 'login', [factorName]),
	        appStoreLinkText: Okta.loc('enroll.totp.downloadApp', 'login', [appStoreLink, factorName, appStoreName]),
	        appIcon: appIcon
	      };
	    }
	  });
	
	  var EnrollTotpController = FormController.extend({
	    className: 'enroll-totp',
	    Model: function Model() {
	      return {
	        local: {
	          '__deviceType__': 'string',
	          '__factorType__': ['string', false, this.options.factorType],
	          '__provider__': ['string', false, this.options.provider]
	        },
	        save: function save() {
	          return this.doTransaction(function (transaction) {
	            var factor = _.findWhere(transaction.factors, {
	              factorType: this.get('__factorType__'),
	              provider: this.get('__provider__')
	            });
	            return factor.enroll();
	          });
	        }
	      };
	    },
	
	    Form: {
	      title: function title() {
	        var factorName = FactorUtil.getFactorLabel(this.model.get('__provider__'), this.model.get('__factorType__'));
	        return Okta.loc('enroll.totp.title', 'login', [factorName]);
	      },
	      subtitle: _.partial(Okta.loc, 'enroll.totp.selectDevice', 'login'),
	      autoSave: true,
	      noButtonBar: true,
	      attributes: { 'data-se': 'step-device-type' },
	
	      formChildren: function formChildren() {
	        var inputOptions = {
	          APPLE: '',
	          ANDROID: ''
	        };
	        if (this.settings.get('features.windowsVerify') && this.model.get('__provider__') === 'OKTA') {
	          inputOptions.WINDOWS = '';
	        } else if (this.model.get('__provider__') === 'GOOGLE') {
	          inputOptions.BLACKBERRY = '';
	        }
	
	        var children = [FormType.Input({
	          name: '__deviceType__',
	          type: 'radio',
	          options: inputOptions,
	          className: 'device-type-input'
	        }), FormType.Divider({ showWhen: showWhenDeviceTypeSelected }), FormType.View({
	          View: AppDownloadInstructionsView,
	          showWhen: showWhenDeviceTypeSelected
	        }), FormType.Toolbar({
	          noCancelButton: true,
	          save: Okta.loc('oform.next', 'login'),
	          showWhen: showWhenDeviceTypeSelected
	        })];
	
	        return children;
	      }
	    },
	
	    Footer: Footer
	
	  });
	
	  return EnrollTotpController;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 741 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(module.exports = {
	  OKTA: {
	    APPLE: 'https://itunes.apple.com/us/app/okta-verify/id490179405',
	    ANDROID: 'https://play.google.com/store/apps/details?id=com.okta.android.auth',
	    WINDOWS: 'http://www.windowsphone.com/en-us/store/app/okta-verify/9df0e2c4-7301-411f-80e5-62fcf6679666'
	  },
	  GOOGLE: {
	    APPLE: 'https://itunes.apple.com/us/app/google-authenticator/id388497605',
	    ANDROID: 'https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2',
	    BLACKBERRY: 'https://support.google.com/accounts/answer/1066447'
	  },
	  STORE: {
	    APPLE: 'App Store',
	    ANDROID: 'Google Play Store',
	    WINDOWS: 'Windows Store',
	    BLACKBERRY: 'Blackberry World Store'
	  }
	});

/***/ },
/* 742 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(641), __webpack_require__(646)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FactorUtil, RouterUtil) {
	
	  var _ = Okta._;
	
	  return Okta.View.extend({
	    className: 'scan-instructions clearfix',
	    template: '\
	      <div class="scan-instructions-details-wrapper">\
	          <div class="scan-instructions-details">\
	              <p>{{instructions}}</p>\
	          </div>\
	      </div>\
	      <div class="scan-instructions-qrcode-wrapper">\
	          <div class="qrcode-wrap">\
	              <img data-se="qrcode" class="qrcode-image" src="{{qrcode}}">\
	              <div data-se="qrcode-success" class="qrcode-success"></div>\
	              <div data-se="qrcode-error" class="qrcode-error"></div>\
	          </div>\
	          <a href="#" data-type="manual-setup" data-se="manual-setup" class="link manual-setup">\
	            {{i18n code="enroll.totp.cannotScan" bundle="login"}}\
	          </a>\
	          <a href="#" data-type="refresh-qrcode" data-se="refresh-qrcode" class="link refresh-qrcode">\
	            {{i18n code="enroll.totp.refreshBarcode" bundle="login"}}\
	          </a>\
	      </div>\
	    ',
	
	    events: {
	      'click [data-type="manual-setup"]': function clickDataTypeManualSetup(e) {
	        e.preventDefault();
	        var url = RouterUtil.createActivateFactorUrl(this.model.get('__provider__'), this.model.get('__factorType__'), 'manual');
	        this.options.appState.trigger('navigate', url);
	      },
	      'click [data-type="refresh-qrcode"]': function clickDataTypeRefreshQrcode(e) {
	        e.preventDefault();
	        this.model.trigger('errors:clear');
	
	        var self = this;
	        this.model.doTransaction(function (transaction) {
	          if (this.appState.get('isWaitingForActivation')) {
	            return transaction.poll();
	          } else {
	            return transaction.activate();
	          }
	        }).then(function (trans) {
	          var res = trans.data;
	          if (res.status === 'MFA_ENROLL_ACTIVATE' && res.factorResult === 'WAITING') {
	            // defer the render here to have a lastResponse set in AppState
	            // so that we get new QRcode rendered
	            _.defer(_.bind(self.render, self));
	          }
	        });
	      }
	    },
	
	    initialize: function initialize() {
	      this.listenTo(this.options.appState, 'change:lastAuthResponse', function () {
	        if (this.options.appState.get('isMfaEnrollActivate')) {
	          this.$el.toggleClass('qrcode-expired', !this.options.appState.get('isWaitingForActivation'));
	        } else if (this.options.appState.get('isSuccessResponse')) {
	          this.$el.addClass('qrcode-success');
	        }
	      });
	      this.listenTo(this.model, 'error', function () {
	        if (this.options.appState.get('isMfaEnrollActivate')) {
	          this.$el.toggleClass('qrcode-expired', true);
	        }
	      });
	    },
	
	    getTemplateData: function getTemplateData() {
	      var factorName = FactorUtil.getFactorLabel(this.model.get('__provider__'), this.model.get('__factorType__'));
	      var instructions;
	      if (this.model.get('__provider__') === 'GOOGLE') {
	        instructions = Okta.loc('enroll.totp.setupGoogleAuthApp', 'login', [factorName]);
	      } else {
	        instructions = Okta.loc('enroll.totp.setupApp', 'login', [factorName]);
	      }
	      return {
	        instructions: instructions,
	        qrcode: this.options.appState.get('qrcode')
	      };
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 743 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	/* global u2f */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(643), __webpack_require__(642), __webpack_require__(730), __webpack_require__(409), __webpack_require__(722), __webpack_require__(724)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormType, FormController, Footer, Q, HtmlErrorMessageView) {
	
	  var _ = Okta._;
	
	  function getErrorMessageKeyByCode(errorCode) {
	    switch (errorCode) {
	      default:
	      case 1:
	        return 'u2f.error.other';
	      case 2:
	      case 3:
	        return 'u2f.error.badRequest';
	      case 4:
	        return 'u2f.error.unsupported';
	      case 5:
	        return 'u2f.error.timeout';
	    }
	  }
	
	  return FormController.extend({
	    className: 'enroll-u2f',
	    Model: {
	      local: {
	        '__enrolled__': 'boolean'
	      },
	
	      save: function save() {
	        this.trigger('request');
	
	        if (this.get('__enrolled__')) {
	          return this.activate();
	        }
	
	        return this.doTransaction(function (transaction) {
	          var factor = _.findWhere(transaction.factors, {
	            factorType: 'u2f',
	            provider: 'FIDO'
	          });
	          return factor.enroll();
	        });
	      },
	
	      activate: function activate() {
	        this.set('__enrolled__', true);
	        this.trigger('errors:clear');
	
	        return this.doTransaction(function (transaction) {
	          var activation = transaction.factor.activation;
	          var appId = activation.appId;
	          var registerRequests = [{
	            version: activation.version,
	            challenge: activation.nonce
	          }];
	          var self = this;
	          var deferred = Q.defer();
	          u2f.register(appId, registerRequests, [], function (data) {
	            self.trigger('errors:clear');
	            if (data.errorCode && data.errorCode !== 0) {
	              deferred.reject({
	                xhr: { responseJSON: { errorSummary: Okta.loc(getErrorMessageKeyByCode(data.errorCode), 'login') } }
	              });
	            } else {
	              deferred.resolve(transaction.activate({
	                registrationData: data.registrationData,
	                version: data.version,
	                challenge: data.challenge,
	                clientData: data.clientData
	              }));
	            }
	          });
	          return deferred.promise;
	        });
	      }
	    },
	
	    Form: {
	      title: _.partial(Okta.loc, 'enroll.u2f.title', 'login'),
	      save: _.partial(Okta.loc, 'enroll.u2f.save', 'login'),
	      noCancelButton: true,
	      hasSavingState: false,
	      autoSave: true,
	      className: 'enroll-u2f-form',
	      noButtonBar: function noButtonBar() {
	        return !window.hasOwnProperty('u2f');
	      },
	      modelEvents: {
	        'request': '_startEnrollment',
	        'error': '_stopEnrollment'
	      },
	      formChildren: function formChildren() {
	        var result = [];
	
	        if (!window.hasOwnProperty('u2f')) {
	          var errorMessageKey = 'u2f.error.factorNotSupported';
	          if (this.options.appState.get('factors').length === 1) {
	            errorMessageKey = 'u2f.error.factorNotSupported.oneFactor';
	          }
	          result.push(FormType.View({ View: new HtmlErrorMessageView({ message: Okta.loc(errorMessageKey, 'login') }) }, { selector: '.o-form-error-container' }));
	        } else {
	          //There is html in enroll.u2f.general2 in our properties file, reason why is unescaped
	          result.push(FormType.View({
	            View: '<div class="u2f-instructions"><ol>\
	          <li>{{{i18n code="enroll.u2f.general2" bundle="login"}}}</li>\
	          <li>{{i18n code="enroll.u2f.general3" bundle="login"}}</li>\
	          </ol></div>'
	          }));
	
	          result.push(FormType.View({
	            View: '\
	          <div class="u2f-enroll-text hide">\
	            <p>{{i18n code="enroll.u2f.instructions" bundle="login"}}</p>\
	            <p>{{i18n code="enroll.u2f.instructionsBluetooth" bundle="login"}}</p>\
	            <div data-se="u2f-devices" class="u2f-devices-images">\
	              <div class="u2f-usb"></div>\
	              <div class="u2f-bluetooth"></div>\
	            </div>\
	            <div data-se="u2f-waiting" class="okta-waiting-spinner"></div>\
	          </div>'
	          }));
	        }
	
	        return result;
	      },
	
	      _startEnrollment: function _startEnrollment() {
	        this.$('.u2f-instructions').addClass('hide');
	        this.$('.u2f-enroll-text').removeClass('hide');
	        this.$('.o-form-button-bar').hide();
	      },
	
	      _stopEnrollment: function _stopEnrollment() {
	        this.$('.u2f-instructions').removeClass('hide');
	        this.$('.u2f-enroll-text').addClass('hide');
	        this.$('.o-form-button-bar').show();
	      }
	    },
	
	    Footer: Footer,
	
	    trapAuthResponse: function trapAuthResponse() {
	      if (this.options.appState.get('isMfaEnrollActivate')) {
	        this.model.activate();
	        return true;
	      }
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 744 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2018-2019, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(642), __webpack_require__(730), __webpack_require__(564)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormController, Footer, Util) {
	
	  var _ = Okta._;
	
	  return FormController.extend({
	    className: 'enroll-custom-factor',
	    Model: {
	      save: function save() {
	        return this.manageTransaction(function (transaction, setTransaction) {
	          var factor = _.findWhere(transaction.factors, {
	            provider: 'GENERIC_SAML',
	            factorType: 'assertion:saml2'
	          });
	          var self = this;
	          return factor.enroll().then(function (trans) {
	            setTransaction(trans);
	            var url = self.appState.get('enrollCustomFactorRedirectUrl');
	            if (url !== null) {
	              Util.redirect(url);
	            }
	          }).fail(function (err) {
	            throw err;
	          });
	        });
	      }
	    },
	
	    Form: function Form() {
	      var factors = this.options.appState.get('factors');
	      var factor = factors.findWhere({
	        factorType: 'assertion:saml2',
	        provider: 'GENERIC_SAML'
	      });
	      var vendorName = factor.get('vendorName');
	      var subtitle = Okta.loc('enroll.customFactor.subtitle', 'login', [vendorName]);
	      var saveText = Okta.loc('enroll.customFactor.save', 'login');
	      return {
	        autoSave: true,
	        title: vendorName,
	        subtitle: subtitle,
	        save: saveText
	      };
	    },
	
	    trapAuthResponse: function trapAuthResponse() {
	      if (this.options.appState.get('isMfaEnrollActivate')) {
	        return true;
	      }
	    },
	
	    Footer: Footer
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 745 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(641), __webpack_require__(642), __webpack_require__(643), __webpack_require__(646), __webpack_require__(742), __webpack_require__(730)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FactorUtil, FormController, FormType, RouterUtil, BarcodeView, Footer) {
	
	  var _ = Okta._;
	
	  return FormController.extend({
	    className: 'barcode-totp',
	    Model: function Model() {
	      return {
	        local: {
	          '__factorType__': ['string', false, this.options.factorType],
	          '__provider__': ['string', false, this.options.provider]
	        }
	      };
	    },
	
	    Form: {
	      title: function title() {
	        var factorName = FactorUtil.getFactorLabel(this.model.get('__provider__'), this.model.get('__factorType__'));
	        return Okta.loc('enroll.totp.title', 'login', [factorName]);
	      },
	      subtitle: _.partial(Okta.loc, 'mfa.scanBarcode', 'login'),
	      save: _.partial(Okta.loc, 'oform.next', 'login'),
	      noCancelButton: true,
	      attributes: { 'data-se': 'step-scan' },
	      className: 'barcode-scan',
	
	      formChildren: [FormType.View({ View: BarcodeView })]
	    },
	
	    Footer: Footer,
	
	    initialize: function initialize() {
	      this.listenTo(this.form, 'save', function () {
	        var url = RouterUtil.createActivateFactorUrl(this.model.get('__provider__'), this.model.get('__factorType__'), 'activate');
	        this.options.appState.trigger('navigate', url);
	      });
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 746 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(641), __webpack_require__(642), __webpack_require__(643), __webpack_require__(646), __webpack_require__(742), __webpack_require__(730)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FactorUtil, FormController, FormType, RouterUtil, BarcodeView, Footer) {
	
	  var _ = Okta._;
	
	  // Note: Keep-alive is set to 5 seconds - using 5 seconds here will result
	  // in network connection lost errors in Safari and IE.
	  var PUSH_INTERVAL = 6000;
	
	  return FormController.extend({
	    className: 'barcode-push',
	    Model: function Model() {
	      return {
	        local: {
	          '__factorType__': ['string', false, this.options.factorType],
	          '__provider__': ['string', false, this.options.provider]
	        }
	      };
	    },
	
	    Form: {
	      title: function title() {
	        var factorName = FactorUtil.getFactorLabel(this.model.get('__provider__'), this.model.get('__factorType__'));
	        return Okta.loc('enroll.totp.title', 'login', [factorName]);
	      },
	      subtitle: _.partial(Okta.loc, 'mfa.scanBarcode', 'login'),
	      noButtonBar: true,
	      attributes: { 'data-se': 'step-scan' },
	      className: 'barcode-scan',
	      initialize: function initialize() {
	        this.listenTo(this.model, 'error errors:clear', function () {
	          this.clearErrors();
	        });
	      },
	
	      formChildren: [FormType.View({ View: BarcodeView })]
	    },
	
	    Footer: Footer,
	
	    initialize: function initialize() {
	      this.pollForEnrollment();
	    },
	
	    pollForEnrollment: function pollForEnrollment() {
	      return this.model.doTransaction(function (transaction) {
	        return transaction.poll(PUSH_INTERVAL);
	      });
	    },
	
	    trapAuthResponse: function trapAuthResponse() {
	      if (this.options.appState.get('isMfaEnrollActivate')) {
	        return true;
	      }
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 747 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(642), __webpack_require__(748), __webpack_require__(730)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormController, EnterPasscodeForm, Footer) {
	
	  return FormController.extend({
	    className: 'activate-totp',
	    Model: function Model() {
	      return {
	        props: {
	          factorId: ['string', true, this.options.appState.get('activatedFactorId')],
	          passCode: ['string', true]
	        },
	        local: {
	          '__factorType__': ['string', false, this.options.factorType],
	          '__provider__': ['string', false, this.options.provider]
	        },
	        save: function save() {
	          return this.doTransaction(function (transaction) {
	            return transaction.activate({
	              passCode: this.get('passCode')
	            });
	          });
	        }
	      };
	    },
	
	    Form: EnterPasscodeForm,
	
	    Footer: Footer
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 748 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(641), __webpack_require__(643), __webpack_require__(649)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FactorUtil, FormType, TextBox) {
	
	  var _ = Okta._;
	
	  var form = {
	    title: function title() {
	      var factorName = FactorUtil.getFactorLabel(this.model.get('__provider__'), this.model.get('__factorType__'));
	      return Okta.loc('enroll.totp.title', 'login', [factorName]);
	    },
	    subtitle: _.partial(Okta.loc, 'enroll.totp.enterCode', 'login'),
	    autoSave: true,
	    noButtonBar: true,
	    attributes: { 'data-se': 'step-sendcode' },
	
	    formChildren: function formChildren() {
	      return [FormType.Input({
	        name: 'passCode',
	        input: TextBox,
	        type: 'tel',
	        placeholder: Okta.loc('mfa.challenge.enterCode.placeholder', 'login'),
	        params: {
	          innerTooltip: Okta.loc('mfa.challenge.enterCode.tooltip', 'login')
	        }
	      }), FormType.Toolbar({
	        noCancelButton: true,
	        save: Okta.loc('oform.verify', 'login')
	      })];
	    }
	  };
	
	  return form;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 749 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2017, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(686), __webpack_require__(700), __webpack_require__(750), __webpack_require__(751), __webpack_require__(702), __webpack_require__(644)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, PrimaryAuthController, PrimaryAuthModel, IDPDiscoveryForm, IDPDiscoveryModel, Footer, BaseLoginController) {
	
	  return PrimaryAuthController.extend({
	    className: 'idp-discovery',
	
	    View: IDPDiscoveryForm,
	
	    constructor: function constructor(options) {
	      options.appState.unset('username');
	
	      this.model = new IDPDiscoveryModel({
	        requestContext: options.settings.get('idpDiscovery.requestContext'),
	        settings: options.settings,
	        appState: options.appState
	      }, { parse: true });
	
	      BaseLoginController.apply(this, arguments);
	
	      this.addListeners();
	
	      this.addFooter(options);
	
	      this.setUsername();
	    },
	
	    initialize: function initialize() {
	      PrimaryAuthController.prototype.initialize.apply(this);
	
	      this.listenTo(this.model, 'goToPrimaryAuth', function () {
	        this.settings.set('username', this.model.get('username'));
	        if (this.settings.get('features.passwordlessAuth')) {
	          var primaryAuthModel = new PrimaryAuthModel({
	            username: this.model.get('username'),
	            multiOptionalFactorEnroll: this.options.settings.get('features.multiOptionalFactorEnroll'),
	            settings: this.options.settings,
	            appState: this.options.appState
	          }, { parse: true });
	          // Events to set the transaction attributes on the app state.
	          this.addModelListeners(primaryAuthModel);
	          // Make the primary auth request
	          primaryAuthModel.save();
	        } else {
	          this.options.appState.set('disableUsername', true);
	          this.options.appState.trigger('navigate', 'signin');
	        }
	      });
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 750 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2017, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(687)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, PrimaryAuthForm) {
	
	  var _ = Okta._;
	
	  return PrimaryAuthForm.extend({
	    className: 'idp-discovery-form',
	    save: function save() {
	      return Okta.loc('oform.next', 'login');
	    },
	    saveId: 'idp-discovery-submit',
	
	    initialize: function initialize() {
	      this.listenTo(this, 'save', _.bind(this.model.save, this.model));
	      this.stateEnableChange();
	    },
	
	    inputs: function inputs() {
	      var inputs = [];
	      var usernameProps = {
	        inputId: 'idp-discovery-username',
	        placeholder: Okta.loc('primaryauth.username.placeholder', 'login'),
	        disabled: false,
	        params: {
	          icon: 'person-16-gray'
	        }
	      };
	      inputs.push(_.extend(this.getUsernameField(), usernameProps));
	      if (this.settings.get('features.rememberMe')) {
	        inputs.push(this.getRemeberMeCheckbox());
	      }
	      return inputs;
	    },
	
	    focus: function focus() {
	      if (!this.model.get('username')) {
	        this.getInputs().first().focus();
	      } else if (this.getInputs().toArray()[1]) {
	        this.getInputs().toArray()[1].focus();
	      }
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 751 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2017, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(700), __webpack_require__(701), __webpack_require__(615), __webpack_require__(564)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, PrimaryAuthModel, CookieUtil, Enums, Util) {
	
	  var _ = Okta._;
	
	  return PrimaryAuthModel.extend({
	
	    props: function props() {
	      var cookieUsername = CookieUtil.getCookieUsername(),
	          properties = this.getUsernameAndRemember(cookieUsername);
	
	      return {
	        username: ['string', true, properties.username],
	        lastUsername: ['string', false, cookieUsername],
	        context: ['object', false],
	        remember: ['boolean', true, properties.remember]
	      };
	    },
	
	    local: {},
	
	    save: function save() {
	      var username = this.settings.transformUsername(this.get('username'), Enums.IDP_DISCOVERY),
	          remember = this.get('remember'),
	          lastUsername = this.get('lastUsername'),
	          resource = 'okta:acct:' + username,
	          requestContext = this.get('requestContext');
	
	      this.setUsernameCookie(username, remember, lastUsername);
	
	      //the 'save' event here is triggered and used in the BaseLoginController
	      //to disable the primary button
	      this.trigger('save');
	
	      this.appState.trigger('loading', true);
	
	      var webfingerArgs = {
	        resource: resource,
	        requestContext: requestContext
	      };
	
	      var authClient = this.appState.settings.authClient;
	
	      authClient.webfinger(webfingerArgs).then(_.bind(function (res) {
	        if (res) {
	          if (res.links && res.links[0] && res.links[0].properties['okta:idp:type'] === 'OKTA') {
	            this.trigger('goToPrimaryAuth');
	          } else {
	            var successData = {
	              idpDiscovery: {
	                redirectToIdp: function redirectToIdp(redirectUrl) {
	                  if (res.links && res.links[0] && res.links[0].href) {
	                    var queryParams = { fromURI: redirectUrl };
	                    if (res.links[0].properties && res.links[0].properties['okta:idp:type'] === 'SAML2') {
	                      queryParams['login_hint'] = username;
	                    }
	                    var url = res.links[0].href + Util.getUrlQueryString(queryParams);
	                    Util.redirect(url);
	                  }
	                }
	              }
	            };
	            this.settings.callGlobalSuccess(Enums.IDP_DISCOVERY, successData);
	          }
	        }
	      }, this)).fail(_.bind(function () {
	        this.trigger('error');
	        // Specific event handled by the Header for the case where the security image is not
	        // enabled and we want to show a spinner. (Triggered only here and handled only by Header).
	        this.appState.trigger('removeLoading');
	        CookieUtil.removeUsernameCookie();
	      }, this)).fin(_.bind(function () {
	        this.appState.trigger('loading', false);
	      }, this));
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 752 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(735), __webpack_require__(641), __webpack_require__(642), __webpack_require__(643), __webpack_require__(646), __webpack_require__(753), __webpack_require__(734), __webpack_require__(649)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, CountryUtil, FactorUtil, FormController, FormType, RouterUtil, Footer, PhoneTextBox, TextBox) {
	
	  var _ = Okta._;
	
	  function goToFactorActivation(view, step) {
	    var url = RouterUtil.createActivateFactorUrl(view.options.appState.get('activatedFactorProvider'), view.options.appState.get('activatedFactorType'), step);
	    view.options.appState.trigger('navigate', url);
	  }
	
	  function setStateValues(view) {
	    var userPhoneNumber, userCountryCode;
	    if (view.model.get('activationType') === 'SMS') {
	      userCountryCode = view.model.get('countryCode');
	      userPhoneNumber = view.model.get('phoneNumber');
	    }
	    view.options.appState.set({
	      factorActivationType: view.model.get('activationType'),
	      userCountryCode: userCountryCode,
	      userPhoneNumber: userPhoneNumber
	    });
	  }
	
	  function enrollFactor(view, factorType) {
	    return view.model.doTransaction(function (transaction) {
	      return transaction.prev().then(function (trans) {
	        var factor = _.findWhere(trans.factors, {
	          factorType: factorType,
	          provider: 'OKTA'
	        });
	        return factor.enroll();
	      }).then(function (trans) {
	        var textActivationLinkUrl,
	            emailActivationLinkUrl,
	            sharedSecret,
	            res = trans.data;
	
	        if (res && res._embedded && res._embedded.factor && res._embedded.factor._embedded && res._embedded.factor._embedded.activation) {
	
	          var factor = res._embedded.factor;
	
	          // Shared secret
	          sharedSecret = factor._embedded.activation.sharedSecret;
	
	          if (factor._embedded.activation._links && factor._embedded.activation._links.send) {
	
	            var activationSendLinks = factor._embedded.activation._links.send;
	
	            // SMS activation url
	            var smsItem = _.findWhere(activationSendLinks, { name: 'sms' });
	            textActivationLinkUrl = smsItem ? smsItem.href : null;
	
	            // Email activation url
	            var emailItem = _.findWhere(activationSendLinks, { name: 'email' });
	            emailActivationLinkUrl = emailItem ? emailItem.href : null;
	          }
	        }
	
	        view.model.set({
	          'SMS': textActivationLinkUrl,
	          'EMAIL': emailActivationLinkUrl,
	          'sharedSecret': sharedSecret
	        });
	
	        return trans;
	      });
	    });
	  }
	
	  return FormController.extend({
	    className: 'enroll-manual-push',
	    Model: function Model() {
	      return {
	        local: {
	          activationType: ['string', true, this.options.appState.get('factorActivationType') || 'SMS'],
	          countryCode: ['string', false, 'US'],
	          phoneNumber: 'string',
	          'SMS': ['string', false, this.options.appState.get('textActivationLinkUrl')],
	          'EMAIL': ['string', false, this.options.appState.get('emailActivationLinkUrl')],
	          'sharedSecret': ['string', false, this.options.appState.get('sharedSecret')],
	          '__factorType__': ['string', false, this.options.factorType],
	          '__provider__': ['string', false, this.options.provider]
	        },
	        derived: {
	          countryCallingCode: {
	            deps: ['countryCode'],
	            fn: function fn(countryCode) {
	              return '+' + CountryUtil.getCallingCodeForCountry(countryCode);
	            }
	          },
	          fullPhoneNumber: {
	            deps: ['countryCallingCode', 'phoneNumber'],
	            fn: function fn(countryCallingCode, phoneNumber) {
	              return countryCallingCode + phoneNumber;
	            }
	          }
	        }
	      };
	    },
	
	    Form: {
	      title: function title() {
	        var factorName = FactorUtil.getFactorLabel(this.model.get('__provider__'), this.model.get('__factorType__'));
	        return Okta.loc('enroll.totp.title', 'login', [factorName]);
	      },
	      subtitle: _.partial(Okta.loc, 'enroll.totp.cannotScanBarcode', 'login'),
	      noButtonBar: true,
	      attributes: { 'data-se': 'step-manual-setup' },
	
	      formChildren: function formChildren() {
	        var children = [FormType.Input({
	          name: 'activationType',
	          type: 'select',
	          wide: true,
	          options: {
	            SMS: Okta.loc('enroll.totp.sendSms', 'login'),
	            EMAIL: Okta.loc('enroll.totp.sendEmail', 'login'),
	            MANUAL: Okta.loc('enroll.totp.setupManually', 'login')
	          }
	        }), FormType.Input({
	          name: 'countryCode',
	          type: 'select',
	          wide: true,
	          options: CountryUtil.getCountries(),
	          showWhen: { activationType: 'SMS' }
	        }), FormType.Input({
	          placeholder: Okta.loc('mfa.phoneNumber.placeholder', 'login'),
	          className: 'enroll-sms-phone',
	          name: 'phoneNumber',
	          input: PhoneTextBox,
	          type: 'text',
	          showWhen: { activationType: 'SMS' }
	        }), FormType.View({
	          View: '\
	              <p class="okta-form-subtitle o-form-explain text-align-c">\
	                {{i18n code="enroll.totp.sharedSecretInstructions" bundle="login"}}\
	              </p>\
	            ',
	          showWhen: { activationType: 'MANUAL' }
	        }), FormType.Input({
	          name: 'sharedSecret',
	          input: TextBox,
	          type: 'text',
	          disabled: true,
	          showWhen: { activationType: 'MANUAL' },
	          initialize: function initialize() {
	            this.listenTo(this.model, 'change:sharedSecret', this.render);
	          }
	        }), FormType.View({
	          View: '<div data-type="next-button-wrap"></div>',
	          showWhen: { activationType: 'MANUAL' }
	        }), FormType.Button({
	          title: Okta.loc('oform.next', 'login'),
	          className: 'button button-primary button-wide button-next',
	          attributes: { 'data-se': 'next-button' },
	          click: _.bind(function () {
	            setStateValues(this);
	            goToFactorActivation(this, 'passcode');
	          }, this)
	        }, '[data-type="next-button-wrap"]'), FormType.Toolbar({
	          noCancelButton: true,
	          save: Okta.loc('oform.send', 'login'),
	          showWhen: {
	            activationType: function activationType(val) {
	              return val === 'SMS' || val === 'EMAIL';
	            }
	          }
	        })];
	        return children;
	      }
	    },
	
	    Footer: Footer,
	
	    initialize: function initialize() {
	      this.setInitialModel();
	      // Move this logic to a model when AuthClient supports sending email and sms
	      this.listenTo(this.form, 'save', function () {
	        var self = this;
	        this.model.doTransaction(function (transaction) {
	          var activationType = this.get('activationType').toLowerCase(),
	              opts = {};
	
	          if (activationType === 'sms') {
	            opts.profile = { phoneNumber: this.get('fullPhoneNumber') };
	          }
	
	          return transaction.factor.activation.send(activationType, opts).then(function (trans) {
	            setStateValues(self);
	            // Note: Need to defer because OktaAuth calls our router success
	            // handler on the next tick - if we immediately called, appState would
	            // still be populated with the last response
	            _.defer(function () {
	              goToFactorActivation(self, 'sent');
	            });
	            return trans;
	          });
	        });
	      });
	
	      this.listenTo(this.model, 'change:activationType', function (model, value) {
	        this.form.clearErrors();
	        if (value === 'MANUAL' && this.options.appState.get('activatedFactorType') !== 'token:software:totp') {
	          enrollFactor(this, 'token:software:totp');
	        } else if (this.options.appState.get('activatedFactorType') !== 'push') {
	          enrollFactor(this, 'push');
	        }
	      });
	    },
	
	    setInitialModel: function setInitialModel() {
	      if (this.options.appState.get('factorActivationType') === 'SMS') {
	        this.model.set({
	          countryCode: this.options.appState.get('userCountryCode') || 'US',
	          phoneNumber: this.options.appState.get('userPhoneNumber')
	        });
	      }
	    },
	
	    trapAuthResponse: function trapAuthResponse() {
	      if (this.options.appState.get('isMfaEnrollActivate') || this.options.appState.get('isMfaEnroll')) {
	        return true;
	      }
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 753 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(646)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, RouterUtil) {
	
	  var _ = Okta._;
	
	  function goToFactorActivation(appState) {
	    var url = RouterUtil.createActivateFactorUrl(appState.get('activatedFactorProvider'), appState.get('activatedFactorType'));
	    appState.trigger('navigate', url);
	  }
	
	  return Okta.View.extend({
	    template: '\
	      <a href="#" class="link help js-back" data-se="back-link">\
	        {{i18n code="mfa.backToFactors" bundle="login"}}\
	      </a>\
	      <a href="#" class="link help goto js-goto" data-se="goto-link">\
	        {{i18n code="mfa.scanBarcode" bundle="login"}}\
	      </a>\
	    ',
	    className: 'auth-footer',
	    events: {
	      'click .js-back': function clickJsBack(e) {
	        e.preventDefault();
	        this.back();
	      },
	      'click .js-goto': function clickJsGoto(e) {
	        e.preventDefault();
	        var goToFactor = _.partial(goToFactorActivation, this.options.appState);
	        this.options.appState.unset('factorActivationType');
	        if (this.options.appState.get('activatedFactorType') !== 'push') {
	          this.model.doTransaction(function (transaction) {
	            return transaction.prev().then(function (trans) {
	              var factor = _.findWhere(trans.factors, {
	                factorType: 'push',
	                provider: 'OKTA'
	              });
	              return factor.enroll();
	            });
	          }).then(goToFactor);
	        } else {
	          this.model.startTransaction(function (authClient) {
	            return authClient.tx.resume();
	          }).then(function () {
	            // Sets to trigger on a tick after the appState has been set.
	            // This is due to calling the globalSuccessFn in a callback
	            setTimeout(goToFactor);
	          });
	        }
	      }
	    },
	    back: function back() {
	      var self = this;
	      self.options.appState.unset('factorActivationType');
	      if (self.options.appState.get('prevLink')) {
	        this.model.doTransaction(function (transaction) {
	          return transaction.prev();
	        }).then(function () {
	          // we trap 'MFA_ENROLL' response that's why we need to trigger navigation from here
	          self.options.appState.trigger('navigate', 'signin/enroll');
	        });
	      } else {
	        self.options.appState.trigger('navigate', 'signin/enroll');
	      }
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 754 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(735), __webpack_require__(642), __webpack_require__(643), __webpack_require__(646)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, CountryUtil, FormController, FormType, RouterUtil) {
	
	  var _ = Okta._;
	
	  // Note: Keep-alive is set to 5 seconds - using 5 seconds here will result
	  // in network connection lost errors in Safari and IE.
	  var PUSH_INTERVAL = 6000;
	
	  var Footer = Okta.View.extend({
	    template: '\
	      <a href="#" class="link help js-back" data-se="back-link">\
	        {{i18n code="oform.back" bundle="login"}}\
	      </a>\
	    ',
	    className: 'auth-footer',
	    events: {
	      'click .js-back': function clickJsBack(e) {
	        e.preventDefault();
	        this.back();
	      }
	    },
	    back: function back() {
	      var url = RouterUtil.createActivateFactorUrl(this.options.appState.get('activatedFactorProvider'), this.options.appState.get('activatedFactorType'), 'manual');
	      this.options.appState.trigger('navigate', url);
	    }
	  });
	
	  var emailSentForm = {
	    title: _.partial(Okta.loc, 'enroll.totp.enrollViaEmail.title', 'login'),
	    noButtonBar: true,
	    attributes: { 'data-se': 'sent-email-activation-link' },
	    formChildren: [FormType.View({
	      View: Okta.View.extend({
	        template: '\
	            <p>{{i18n code="enroll.totp.enrollViaEmail.msg" bundle="login"}}</p>\
	            <p class="email-address">{{email}}</p>\
	          ',
	        getTemplateData: function getTemplateData() {
	          return { email: this.options.appState.get('userEmail') };
	        }
	      })
	    })]
	  };
	
	  var smsSentForm = {
	    title: _.partial(Okta.loc, 'enroll.totp.enrollViaSms.title', 'login'),
	    noButtonBar: true,
	    attributes: { 'data-se': 'sent-sms-activation-link' },
	    formChildren: [FormType.View({
	      View: Okta.View.extend({
	        template: '\
	            <p>{{i18n code="enroll.totp.enrollViaSms.msg" bundle="login"}}</p>\
	            <p class="phone-number">{{phoneNumber}}</p>\
	          ',
	        getTemplateData: function getTemplateData() {
	          return { phoneNumber: this.model.get('fullPhoneNumber') };
	        }
	      })
	    })]
	  };
	
	  return FormController.extend({
	    className: 'enroll-activation-link-sent',
	    Model: function Model() {
	      return {
	        local: {
	          countryCode: ['string', false, this.options.appState.get('userCountryCode')],
	          phoneNumber: ['string', false, this.options.appState.get('userPhoneNumber')],
	          '__factorType__': ['string', false, this.options.factorType],
	          '__provider__': ['string', false, this.options.provider]
	        },
	        derived: {
	          countryCallingCode: {
	            deps: ['countryCode'],
	            fn: function fn(countryCode) {
	              return '+' + CountryUtil.getCallingCodeForCountry(countryCode);
	            }
	          },
	          fullPhoneNumber: {
	            deps: ['countryCallingCode', 'phoneNumber'],
	            fn: function fn(countryCallingCode, phoneNumber) {
	              return countryCallingCode + phoneNumber;
	            }
	          }
	        }
	      };
	    },
	
	    Form: function Form() {
	      var activationType = this.options.appState.get('factorActivationType');
	      switch (activationType) {
	        case 'SMS':
	          return smsSentForm;
	        case 'EMAIL':
	          return emailSentForm;
	        default:
	          throw new Error('Unknown activation option: ' + activationType);
	      }
	    },
	
	    Footer: Footer,
	
	    initialize: function initialize() {
	      this.pollForEnrollment();
	    },
	
	    remove: function remove() {
	      return FormController.prototype.remove.apply(this, arguments);
	    },
	
	    pollForEnrollment: function pollForEnrollment() {
	      return this.model.doTransaction(function (transaction) {
	        return transaction.poll(PUSH_INTERVAL);
	      });
	    },
	
	    trapAuthResponse: function trapAuthResponse() {
	      if (this.options.appState.get('isWaitingForActivation')) {
	        this.pollForEnrollment();
	        return true;
	      }
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 755 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(642), __webpack_require__(646), __webpack_require__(748)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormController, RouterUtil, EnterPasscodeForm) {
	
	  var Footer = Okta.View.extend({
	    template: '\
	      <a href="#" class="link help js-back" data-se="back-link">\
	        {{i18n code="oform.back" bundle="login"}}\
	      </a>\
	    ',
	    className: 'auth-footer',
	    events: {
	      'click .js-back': function clickJsBack(e) {
	        e.preventDefault();
	        this.back();
	      }
	    },
	    back: function back() {
	      var url = RouterUtil.createActivateFactorUrl(this.options.appState.get('activatedFactorProvider'), 'push', 'manual');
	      this.options.appState.trigger('navigate', url);
	    }
	  });
	
	  return FormController.extend({
	    className: 'activate-push',
	    Model: function Model() {
	      return {
	        props: {
	          factorId: ['string', true, this.options.appState.get('activatedFactorId')],
	          passCode: ['string', true]
	        },
	        local: {
	          '__factorType__': ['string', false, this.options.factorType],
	          '__provider__': ['string', false, this.options.provider]
	        },
	        save: function save() {
	          return this.doTransaction(function (transaction) {
	            return transaction.activate({
	              passCode: this.get('passCode')
	            });
	          });
	        }
	      };
	    },
	
	    Form: EnterPasscodeForm,
	
	    Footer: Footer
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 756 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(642), __webpack_require__(615), __webpack_require__(643), __webpack_require__(757), __webpack_require__(641), __webpack_require__(758), __webpack_require__(649)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormController, Enums, FormType, ValidationUtil, FactorUtil, Footer, TextBox) {
	
	  var _ = Okta._;
	
	  return FormController.extend({
	    className: 'password-expired',
	    Model: {
	      props: {
	        oldPassword: ['string', true],
	        newPassword: ['string', true],
	        confirmPassword: ['string', true]
	      },
	      validate: function validate() {
	        return ValidationUtil.validatePasswordMatch(this);
	      },
	      save: function save() {
	        return this.doTransaction(function (transaction) {
	          return transaction.changePassword({
	            oldPassword: this.get('oldPassword'),
	            newPassword: this.get('newPassword')
	          });
	        });
	      }
	    },
	    Form: {
	      save: _.partial(Okta.loc, 'password.expired.submit', 'login'),
	      title: function title() {
	        var expiringSoon = this.options.appState.get('isPwdExpiringSoon'),
	            numDays = this.options.appState.get('passwordExpireDays');
	        if (expiringSoon && numDays > 0) {
	          return Okta.loc('password.expiring.title', 'login', [numDays]);
	        } else if (expiringSoon && numDays === 0) {
	          return Okta.loc('password.expiring.today', 'login');
	        } else if (expiringSoon) {
	          return Okta.loc('password.expiring.soon', 'login');
	        } else {
	          return Okta.loc('password.expired.title', 'login');
	        }
	      },
	      subtitle: function subtitle() {
	        if (this.options.appState.get('isPwdExpiringSoon')) {
	          return Okta.loc('password.expiring.subtitle', 'login');
	        }
	
	        var policy = this.options.appState.get('policy');
	        if (!policy) {
	          return;
	        }
	
	        return FactorUtil.getPasswordComplexityDescription(policy);
	      },
	      formChildren: function formChildren() {
	        return [FormType.Input({
	          'label-top': true,
	          label: false,
	          placeholder: Okta.loc('password.oldPassword.placeholder', 'login'),
	          name: 'oldPassword',
	          input: TextBox,
	          type: 'password',
	          params: {
	            innerTooltip: Okta.loc('password.oldPassword.tooltip', 'login'),
	            icon: 'credentials-16'
	          }
	        }), FormType.Divider(), FormType.Input({
	          'label-top': true,
	          label: false,
	          placeholder: Okta.loc('password.newPassword.placeholder', 'login'),
	          name: 'newPassword',
	          input: TextBox,
	          type: 'password',
	          params: {
	            innerTooltip: Okta.loc('password.newPassword.tooltip', 'login'),
	            icon: 'credentials-16'
	          }
	        }), FormType.Input({
	          'label-top': true,
	          label: false,
	          placeholder: Okta.loc('password.confirmPassword.placeholder', 'login'),
	          name: 'confirmPassword',
	          input: TextBox,
	          type: 'password',
	          params: {
	            innerTooltip: Okta.loc('password.confirmPassword.tooltip', 'login'),
	            icon: 'credentials-16'
	          }
	        })];
	      }
	    },
	    Footer: Footer,
	
	    initialize: function initialize() {
	      this.listenTo(this.form, 'save', function () {
	        var creds = {
	          username: this.options.appState.get('userEmail'),
	          password: this.model.get('newPassword')
	        };
	        this.settings.processCreds(creds).then(_.bind(this.model.save, this.model));
	      });
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 757 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta) {
	
	  var fn = {};
	
	  // Validate the 'username' field on the model.
	  fn.validateUsername = function (model) {
	    var username = model.get('username');
	    if (username && username.length > 256) {
	      return {
	        username: Okta.loc('model.validation.field.username', 'login')
	      };
	    }
	  };
	
	  // Validate that the 'newPassword' and 'confirmPassword' fields on the model are a match.
	  fn.validatePasswordMatch = function (model) {
	    if (model.get('newPassword') !== model.get('confirmPassword')) {
	      return {
	        confirmPassword: Okta.loc('password.error.match', 'login')
	      };
	    }
	  };
	
	  return fn;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 758 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2017, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(615), __webpack_require__(564)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Enums, Util) {
	
	  return Okta.View.extend({
	    template: '\
	      {{#if passwordWarn}}\
	        <a href="#" class="link help js-skip" data-se="skip-link">\
	          {{i18n code="password.expiring.later" bundle="login"}}\
	        </a>\
	      {{/if}}\
	      <a href="#" class="link help goto js-signout" data-se="signout-link">{{i18n code="signout" bundle="login"}}</a>\
	    ',
	    className: 'auth-footer clearfix',
	    events: {
	      'click .js-signout': function clickJsSignout(e) {
	        e.preventDefault();
	        var self = this;
	        this.model.doTransaction(function (transaction) {
	          return transaction.cancel();
	        }).then(function () {
	          if (self.settings.get('signOutLink')) {
	            Util.redirect(self.settings.get('signOutLink'));
	          } else {
	            self.state.set('navigateDir', Enums.DIRECTION_BACK);
	            self.options.appState.trigger('navigate', '');
	          }
	        });
	      },
	      'click .js-skip': function clickJsSkip(e) {
	        e.preventDefault();
	        this.model.doTransaction(function (transaction) {
	          return transaction.skip();
	        });
	      }
	    },
	    getTemplateData: function getTemplateData() {
	      return { passwordWarn: this.options.appState.get('isPwdExpiringSoon') };
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 759 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2017, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(642), __webpack_require__(643), __webpack_require__(758), __webpack_require__(564)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormController, FormType, Footer, Util) {
	
	  var _ = Okta._;
	
	  return FormController.extend({
	    className: 'custom-password-expired',
	    Model: {},
	    Form: {
	      noButtonBar: true,
	      title: function title() {
	        var expiringSoon = this.options.appState.get('isPwdExpiringSoon'),
	            numDays = this.options.appState.get('passwordExpireDays');
	        if (expiringSoon && numDays > 0) {
	          return Okta.loc('password.expiring.title', 'login', [numDays]);
	        } else if (expiringSoon && numDays === 0) {
	          return Okta.loc('password.expiring.today', 'login');
	        } else if (expiringSoon) {
	          return Okta.loc('password.expiring.soon', 'login');
	        } else {
	          return Okta.loc('password.expired.title', 'login');
	        }
	      },
	      subtitle: function subtitle() {
	        if (this.options.appState.get('isPwdExpiringSoon')) {
	          return Okta.loc('password.expiring.subtitle', 'login') + ' ' + Okta.loc('password.expired.custom.subtitle', 'login');
	        }
	
	        return Okta.loc('password.expired.custom.subtitle', 'login');
	      },
	      formChildren: function formChildren() {
	        return [FormType.Button({
	          title: _.partial(Okta.loc, 'password.expired.custom.submit', 'login', [this.options.appState.get('passwordExpiredWebsiteName')]),
	          className: 'button button-primary button-wide',
	          attributes: { 'data-se': 'custom-button' },
	          click: function click() {
	            Util.redirect(this.options.appState.get('passwordExpiredLinkUrl'));
	          }
	        })];
	      }
	    },
	    Footer: Footer
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 760 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(642), __webpack_require__(615), __webpack_require__(643), __webpack_require__(757), __webpack_require__(638), __webpack_require__(761), __webpack_require__(649)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormController, Enums, FormType, ValidationUtil, Util, ContactSupport, TextBox) {
	
	  var _ = Okta._;
	  var noFactorsError = '<div class="okta-form-infobox-error infobox infobox-error" role="alert">\
	    <span class="icon error-16"></span>\
	    <p>{{i18n code="password.forgot.noFactorsEnabled" bundle="login"}}</p>\
	  </div>';
	
	  var Footer = Okta.View.extend({
	    template: '\
	      <a href="#" class="link help js-back" data-se="back-link">\
	        {{i18n code="goback" bundle="login"}}\
	      </a>\
	      {{#if helpSupportNumber}}\
	      <a href="#" class="link goto js-contact-support">\
	        {{i18n code="mfa.noAccessToEmail" bundle="login"}}\
	      </a>\
	      {{/if}}\
	    ',
	    className: 'auth-footer',
	    events: {
	      'click .js-back': function clickJsBack(e) {
	        e.preventDefault();
	        this.back();
	      },
	      'click .js-contact-support': function clickJsContactSupport(e) {
	        e.preventDefault();
	        this.state.trigger('contactSupport');
	        this.$('.js-contact-support').hide();
	      }
	    },
	    getTemplateData: function getTemplateData() {
	      return this.settings.pick('helpSupportNumber');
	    },
	    back: function back() {
	      this.state.set('navigateDir', Enums.DIRECTION_BACK);
	      this.options.appState.trigger('navigate', '');
	    }
	  });
	
	  return FormController.extend({
	    className: 'forgot-password',
	    Model: {
	      props: {
	        username: ['string', true],
	        factorType: ['string', true]
	      },
	      validate: function validate() {
	        return ValidationUtil.validateUsername(this);
	      },
	      save: function save() {
	        var self = this;
	        var relayState = this.settings.get('relayState');
	        this.startTransaction(function (authClient) {
	          return authClient.forgotPassword({
	            username: self.settings.transformUsername(self.get('username'), Enums.FORGOT_PASSWORD),
	            factorType: self.get('factorType'),
	            relayState: relayState
	          });
	        }).fail(function () {
	          //need empty fail handler on model to display errors on form
	        });
	      }
	    },
	    Form: {
	      noButtonBar: true,
	      title: _.partial(Okta.loc, 'password.reset', 'login'),
	      formChildren: function formChildren() {
	        /*eslint complexity: [2, 9] max-statements: [2, 23] */
	        var smsEnabled = this.settings.get('features.smsRecovery');
	        var callEnabled = this.settings.get('features.callRecovery');
	        var emailEnabled = this.settings.get('features.emailRecovery');
	        var noFactorsEnabled = !(smsEnabled || callEnabled || emailEnabled);
	        var formChildren = [];
	
	        if (noFactorsEnabled) {
	          this.add(noFactorsError, '.o-form-error-container');
	        } else {
	          formChildren.push(FormType.Input({
	            placeholder: Okta.loc('password.forgot.email.or.username.placeholder', 'login'),
	            name: 'username',
	            input: TextBox,
	            type: 'text',
	            params: {
	              innerTooltip: Okta.loc('password.forgot.email.or.username.tooltip', 'login'),
	              icon: 'person-16-gray'
	            }
	          }));
	          if (smsEnabled || callEnabled) {
	            formChildren.push(FormType.View({
	              View: Okta.View.extend({
	                template: '\
	                  <p class="mobile-recovery-hint">\
	                    {{i18n code="recovery.mobile.hint" bundle="login" arguments="mobileFactors"}}\
	                  </p>',
	                getTemplateData: function getTemplateData() {
	                  var mobileFactors;
	                  if (smsEnabled && callEnabled) {
	                    mobileFactors = Okta.loc('recovery.smsOrCall');
	                  } else if (callEnabled) {
	                    mobileFactors = Okta.loc('recovery.call');
	                  } else {
	                    mobileFactors = Okta.loc('recovery.sms');
	                  }
	                  return { mobileFactors: mobileFactors };
	                }
	              })
	            }));
	          }
	          if (smsEnabled) {
	            this.$el.addClass('forgot-password-sms-enabled');
	            formChildren.push(this.createRecoveryFactorButton('sms-button', 'password.forgot.sendText', Enums.RECOVERY_FACTOR_TYPE_SMS, this));
	            this.setDefaultFactorType(Enums.RECOVERY_FACTOR_TYPE_SMS);
	          }
	          if (callEnabled) {
	            this.$el.addClass('forgot-password-call-enabled');
	            formChildren.push(this.createRecoveryFactorButton('call-button', 'password.forgot.call', Enums.RECOVERY_FACTOR_TYPE_CALL, this));
	            this.setDefaultFactorType(Enums.RECOVERY_FACTOR_TYPE_CALL);
	          }
	          if (emailEnabled) {
	            this.$el.addClass('forgot-password-email-enabled');
	            formChildren.push(this.createRecoveryFactorButton('email-button', 'password.forgot.sendEmail', Enums.RECOVERY_FACTOR_TYPE_EMAIL, this));
	            this.setDefaultFactorType(Enums.RECOVERY_FACTOR_TYPE_EMAIL);
	          }
	        }
	
	        return formChildren;
	      },
	      initialize: function initialize() {
	
	        this.listenTo(this.state, 'contactSupport', function () {
	          this.add(ContactSupport, '.o-form-error-container');
	        });
	
	        this.listenTo(this, 'save', function () {
	          this.options.appState.set('username', this.model.get('username'));
	          this.model.save();
	        });
	      },
	      setDefaultFactorType: function setDefaultFactorType(factorType) {
	        if (_.isEmpty(this.model.get('factorType'))) {
	          this.model.set('factorType', factorType);
	        }
	      },
	      createRecoveryFactorButton: function createRecoveryFactorButton(className, labelCode, factorType, form) {
	        return FormType.Button({
	          attributes: { 'data-se': className },
	          className: 'button button-primary button-wide ' + className,
	          title: Okta.loc(labelCode, 'login'),
	          click: function click() {
	            form.clearErrors();
	            if (this.model.isValid()) {
	              this.model.set('factorType', factorType);
	              form.trigger('save', this.model);
	            }
	          }
	        });
	      }
	    },
	    Footer: Footer,
	
	    initialize: function initialize() {
	      this.options.appState.unset('username');
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 761 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta) {
	
	  return Okta.View.extend({
	    template: '\
	      <div class="infobox">\
	        <span class="icon info-16"></span>\
	        <p>{{i18n code="contact.support" bundle="login" arguments="helpSupportNumber"}}</p>\
	      </div>',
	    className: 'contact-support',
	
	    getTemplateData: function getTemplateData() {
	      return this.settings.pick('helpSupportNumber');
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 762 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(642), __webpack_require__(643), __webpack_require__(615), __webpack_require__(705), __webpack_require__(649)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormController, FormType, Enums, FooterSignout, TextBox) {
	
	  var _ = Okta._;
	  var API_RATE_LIMIT = 30000; //milliseconds
	
	  return FormController.extend({
	    className: 'recovery-challenge',
	    Model: {
	      props: {
	        passCode: ['string', true]
	      },
	      local: {
	        ableToResend: 'boolean'
	      },
	      resendCode: function resendCode() {
	        // Note: This does not require a trapAuthResponse because Backbone's
	        // router will not navigate if the url path is the same
	        this.limitResending();
	        return this.doTransaction(function (transaction) {
	          return transaction.resend();
	        });
	      },
	      limitResending: function limitResending() {
	        this.set({ ableToResend: false });
	        _.delay(_.bind(this.set, this), API_RATE_LIMIT, { ableToResend: true });
	      },
	      save: function save() {
	        return this.doTransaction(function (transaction) {
	          return transaction.verify({
	            passCode: this.get('passCode')
	          });
	        });
	      }
	    },
	    Form: {
	      autoSave: true,
	      save: _.partial(Okta.loc, 'mfa.challenge.verify', 'login'),
	      title: function title() {
	        if (this.options.appState.get('factorType') === Enums.RECOVERY_FACTOR_TYPE_CALL) {
	          return Okta.loc('recoveryChallenge.call.title', 'login');
	        } else {
	          return Okta.loc('recoveryChallenge.sms.title', 'login');
	        }
	      },
	      className: 'recovery-challenge',
	      initialize: function initialize() {
	        this.listenTo(this.model, 'error', function () {
	          this.clearErrors();
	        });
	      },
	      formChildren: function formChildren() {
	        return [FormType.Button({
	          title: Okta.loc('mfa.resendCode', 'login'),
	          attributes: { 'data-se': 'resend-button' },
	          className: 'button sms-request-button',
	          click: function click() {
	            this.model.resendCode();
	          },
	          initialize: function initialize() {
	            this.listenTo(this.model, 'change:ableToResend', function (model, ableToResend) {
	              if (ableToResend) {
	                this.options.title = Okta.loc('mfa.resendCode', 'login');
	                this.enable();
	                this.render();
	              } else {
	                this.options.title = Okta.loc('mfa.sent', 'login');
	                this.disable();
	                this.render();
	              }
	            });
	          }
	        }), FormType.Input({
	          placeholder: Okta.loc('mfa.challenge.enterCode.placeholder', 'login'),
	          className: 'enroll-sms-phone',
	          name: 'passCode',
	          input: TextBox,
	          type: 'text'
	        })];
	      }
	    },
	
	    events: {
	      'click .send-email-link': function clickSendEmailLink(e) {
	        e.preventDefault();
	        var settings = this.model.settings,
	            username = this.options.appState.get('username'),
	            recoveryType = this.options.appState.get('recoveryType');
	
	        this.model.startTransaction(function (authClient) {
	          // The user could have landed here via the Forgot Password/Unlock Account flow
	          switch (recoveryType) {
	            case Enums.RECOVERY_TYPE_PASSWORD:
	              return authClient.forgotPassword({
	                username: settings.transformUsername(username, Enums.FORGOT_PASSWORD),
	                factorType: Enums.RECOVERY_FACTOR_TYPE_EMAIL
	              });
	            case Enums.RECOVERY_TYPE_UNLOCK:
	              return authClient.unlockAccount({
	                username: settings.transformUsername(username, Enums.UNLOCK_ACCOUNT),
	                factorType: Enums.RECOVERY_FACTOR_TYPE_EMAIL
	              });
	            default:
	              return;
	          }
	        });
	      }
	    },
	
	    initialize: function initialize() {
	      var recoveryType = this.options.appState.get('recoveryType'),
	          sendEmailLink;
	
	      switch (recoveryType) {
	        case Enums.RECOVERY_TYPE_PASSWORD:
	          sendEmailLink = '\
	          <a href="#" class="link send-email-link" data-se="send-email-link">\
	            {{i18n code="password.forgot.code.notReceived" bundle="login"}}\
	          </a>';
	          break;
	        case Enums.RECOVERY_TYPE_UNLOCK:
	          sendEmailLink = '\
	          <a href="#" class="link send-email-link" data-se="send-email-link">\
	            {{i18n code="account.unlock.code.notReceived" bundle="login"}}\
	          </a>';
	          break;
	        default:
	          break;
	      }
	
	      if (sendEmailLink && this.settings.get('features.emailRecovery')) {
	        this.add(sendEmailLink);
	      }
	
	      this.add(new FooterSignout(_.extend(this.toJSON(), { linkText: Okta.loc('goback', 'login'), linkClassName: '' })));
	    },
	
	    postRender: function postRender() {
	      this.model.limitResending();
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 763 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(615), __webpack_require__(642), __webpack_require__(643)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Enums, FormController, FormType) {
	
	  var _ = Okta._;
	
	  return FormController.extend({
	    className: 'password-reset-email-sent',
	    Model: function Model() {
	      return {
	        local: {
	          userFullName: ['string', false, this.options.appState.get('userFullName')]
	        }
	      };
	    },
	
	    Form: {
	      title: _.partial(Okta.loc, 'password.forgot.emailSent.title', 'login'),
	      subtitle: function subtitle() {
	        var username = this.options.appState.get('username');
	        return Okta.loc('password.forgot.emailSent.desc', 'login', [username]);
	      },
	      noButtonBar: true,
	      attributes: { 'data-se': 'pwd-reset-email-sent' },
	      formChildren: function formChildren() {
	        return [FormType.View({
	          View: Okta.View.extend({
	            template: '\
	              <span class="accessibility-text" role="status">{{alert}}</span>\
	              ',
	            getTemplateData: function getTemplateData() {
	              return { 'alert': Okta.loc('password.forgot.emailSent.title', 'login') };
	            }
	          })
	        }), FormType.Button({
	          title: Okta.loc('goback', 'login'),
	          className: 'button button-primary button-wide',
	          attributes: { 'data-se': 'back-button' },
	          click: function click() {
	            var self = this;
	            return this.model.doTransaction(function (transaction) {
	              return transaction.cancel();
	            }).then(function () {
	              self.state.set('navigateDir', Enums.DIRECTION_BACK);
	              self.options.appState.trigger('navigate', '');
	            });
	          }
	        })];
	      }
	    },
	
	    initialize: function initialize(options) {
	      this.settings.callGlobalSuccess(Enums.FORGOT_PASSWORD_EMAIL_SENT, {
	        username: options.appState.get('username')
	      });
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 764 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(642), __webpack_require__(643), __webpack_require__(705), __webpack_require__(649)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormController, FormType, FooterSignout, TextBox) {
	
	  return FormController.extend({
	    className: 'recovery-question',
	    Model: {
	      props: {
	        answer: ['string', true],
	        showAnswer: 'boolean'
	      },
	      save: function save() {
	        return this.doTransaction(function (transaction) {
	          return transaction.answer({ answer: this.get('answer') });
	        });
	      }
	    },
	    Form: {
	      autoSave: true,
	      save: function save() {
	        switch (this.options.appState.get('recoveryType')) {
	          case 'PASSWORD':
	            return Okta.loc('password.forgot.question.submit', 'login');
	          case 'UNLOCK':
	            return Okta.loc('account.unlock.question.submit', 'login');
	          default:
	            return Okta.loc('mfa.challenge.verify', 'login');
	        }
	      },
	      title: function title() {
	        switch (this.options.appState.get('recoveryType')) {
	          case 'PASSWORD':
	            return Okta.loc('password.forgot.question.title', 'login');
	          case 'UNLOCK':
	            return Okta.loc('account.unlock.question.title', 'login');
	          default:
	            return '';
	        }
	      },
	      formChildren: function formChildren() {
	        return [FormType.Input({
	          label: this.options.appState.get('recoveryQuestion'),
	          placeholder: Okta.loc('mfa.challenge.answer.placeholder', 'login'),
	          name: 'answer',
	          input: TextBox,
	          type: 'password',
	          initialize: function initialize() {
	            this.listenTo(this.model, 'change:showAnswer', function () {
	              var type = this.model.get('showAnswer') ? 'text' : 'password';
	              this.getInputs()[0].changeType(type);
	            });
	          }
	        }), FormType.Input({
	          label: false,
	          'label-top': true,
	          placeholder: Okta.loc('mfa.challenge.answer.showAnswer', 'login'),
	          className: 'recovery-question-show margin-btm-0',
	          name: 'showAnswer',
	          type: 'checkbox'
	        })];
	      }
	    },
	    Footer: FooterSignout
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 765 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(642), __webpack_require__(643), __webpack_require__(757), __webpack_require__(641), __webpack_require__(705), __webpack_require__(649)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormController, FormType, ValidationUtil, FactorUtil, FooterSignout, TextBox) {
	
	  var _ = Okta._;
	
	  return FormController.extend({
	    className: 'password-reset',
	    Model: {
	      props: {
	        newPassword: ['string', true],
	        confirmPassword: ['string', true]
	      },
	      validate: function validate() {
	        return ValidationUtil.validatePasswordMatch(this);
	      },
	      save: function save() {
	        this.trigger('save');
	        var self = this;
	        return this.doTransaction(function (transaction) {
	          return transaction.resetPassword({
	            newPassword: self.get('newPassword')
	          });
	        });
	      }
	    },
	    Form: {
	      save: _.partial(Okta.loc, 'password.reset', 'login'),
	      title: _.partial(Okta.loc, 'password.reset.title', 'login'),
	      subtitle: function subtitle() {
	        var policy = this.options.appState.get('policy');
	        if (!policy) {
	          return;
	        }
	
	        return FactorUtil.getPasswordComplexityDescription(policy);
	      },
	      formChildren: function formChildren() {
	        return [FormType.Input({
	          placeholder: Okta.loc('password.newPassword.placeholder', 'login'),
	          name: 'newPassword',
	          input: TextBox,
	          type: 'password',
	          params: {
	            innerTooltip: Okta.loc('password.newPassword.tooltip', 'login'),
	            icon: 'credentials-16'
	          }
	        }), FormType.Input({
	          placeholder: Okta.loc('password.confirmPassword.placeholder', 'login'),
	          name: 'confirmPassword',
	          input: TextBox,
	          type: 'password',
	          params: {
	            innerTooltip: Okta.loc('password.confirmPassword.tooltip', 'login'),
	            icon: 'credentials-16'
	          }
	        })];
	      }
	    },
	    Footer: FooterSignout,
	
	    initialize: function initialize() {
	      this.listenTo(this.form, 'save', function () {
	        var creds = {
	          username: this.options.appState.get('userEmail'),
	          password: this.model.get('newPassword')
	        };
	        this.settings.processCreds(creds).then(_.bind(this.model.save, this.model));
	      });
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 766 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(642)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormController) {
	
	  return FormController.extend({
	    className: 'recovery-loading',
	
	    Model: {},
	    Form: {
	      noButtonBar: true
	    },
	
	    initialize: function initialize(options) {
	      var self = this;
	      return this.model.startTransaction(function (authClient) {
	        return authClient.verifyRecoveryToken({
	          recoveryToken: options.token
	        });
	      }).fail(function () {
	        self.options.appState.trigger('loading', false);
	        self.options.appState.trigger('removeLoading');
	      });
	    },
	
	    preRender: function preRender() {
	      this.options.appState.trigger('loading', true);
	    },
	
	    trapAuthResponse: function trapAuthResponse() {
	      this.options.appState.trigger('loading', false);
	      return false;
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 767 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(642), __webpack_require__(615), __webpack_require__(643), __webpack_require__(757), __webpack_require__(761), __webpack_require__(649)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FormController, Enums, FormType, ValidationUtil, ContactSupport, TextBox) {
	
	  var _ = Okta._;
	  var noFactorsError = '<div class="okta-form-infobox-error infobox infobox-error" role="alert">\
	    <span class="icon error-16"></span>\
	    <p>{{i18n code="account.unlock.noFactorsEnabled" bundle="login"}}</p>\
	  </div>';
	
	  var Footer = Okta.View.extend({
	    template: '\
	      <a href="#" class="link help js-back" data-se="back-link">\
	        {{i18n code="goback" bundle="login"}}\
	      </a>\
	      {{#if helpSupportNumber}}\
	      <a href="#" class="link goto js-contact-support">\
	        {{i18n code="mfa.noAccessToEmail" bundle="login"}}\
	      </a>\
	      {{/if}}\
	    ',
	    className: 'auth-footer',
	    events: {
	      'click .js-back': function clickJsBack(e) {
	        e.preventDefault();
	        this.back();
	      },
	      'click .js-contact-support': function clickJsContactSupport(e) {
	        e.preventDefault();
	        this.state.trigger('contactSupport');
	        this.$('.js-contact-support').hide();
	      }
	    },
	    getTemplateData: function getTemplateData() {
	      return this.settings.pick('helpSupportNumber');
	    },
	    back: function back() {
	      this.state.set('navigateDir', Enums.DIRECTION_BACK);
	      this.options.appState.trigger('navigate', '');
	    }
	  });
	
	  return FormController.extend({
	    className: 'account-unlock',
	    Model: {
	      props: {
	        username: ['string', true],
	        factorType: ['string', true]
	      },
	      validate: function validate() {
	        return ValidationUtil.validateUsername(this);
	      },
	      save: function save() {
	        var self = this;
	        return this.startTransaction(function (authClient) {
	          return authClient.unlockAccount({
	            username: self.settings.transformUsername(self.get('username'), Enums.UNLOCK_ACCOUNT),
	            factorType: self.get('factorType')
	          });
	        }).fail(function () {
	          //need empty fail handler on model to display errors on form
	        });
	      }
	    },
	    Form: {
	      noButtonBar: true,
	      title: _.partial(Okta.loc, 'account.unlock.title', 'login'),
	      formChildren: function formChildren() {
	        /*eslint complexity: [2, 9] max-statements: [2, 24] */
	        var smsEnabled = this.settings.get('features.smsRecovery');
	        var callEnabled = this.settings.get('features.callRecovery');
	        var emailEnabled = this.settings.get('features.emailRecovery');
	        var noFactorsEnabled = !(smsEnabled || callEnabled || emailEnabled);
	        var formChildren = [];
	        var form = this;
	
	        if (noFactorsEnabled) {
	          this.add(noFactorsError, '.o-form-error-container');
	        } else {
	          formChildren.push(FormType.Input({
	            placeholder: Okta.loc('account.unlock.email.or.username.placeholder', 'login'),
	            name: 'username',
	            input: TextBox,
	            type: 'text',
	            params: {
	              innerTooltip: Okta.loc('account.unlock.email.or.username.tooltip', 'login'),
	              icon: 'person-16-gray'
	            }
	          }));
	
	          if (smsEnabled || callEnabled) {
	            formChildren.push(FormType.View({
	              View: Okta.View.extend({
	                template: '\
	                  <p class="mobile-recovery-hint">\
	                    {{i18n code="recovery.mobile.hint" bundle="login" arguments="mobileFactors"}}\
	                  </p>',
	                getTemplateData: function getTemplateData() {
	                  var mobileFactors;
	                  if (smsEnabled && callEnabled) {
	                    mobileFactors = Okta.loc('recovery.smsOrCall');
	                  } else if (callEnabled) {
	                    mobileFactors = Okta.loc('recovery.call');
	                  } else {
	                    mobileFactors = Okta.loc('recovery.sms');
	                  }
	                  return { mobileFactors: mobileFactors };
	                }
	              })
	            }));
	          }
	
	          if (smsEnabled) {
	            this.$el.addClass('forgot-password-sms-enabled');
	            formChildren.push(this.createRecoveryFactorButton('sms-button', 'account.unlock.sendText', Enums.RECOVERY_FACTOR_TYPE_SMS, form));
	            this.setDefaultFactorType(Enums.RECOVERY_FACTOR_TYPE_SMS);
	          }
	          if (callEnabled) {
	            this.$el.addClass('forgot-password-call-enabled');
	            formChildren.push(this.createRecoveryFactorButton('call-button', 'account.unlock.voiceCall', Enums.RECOVERY_FACTOR_TYPE_CALL, form));
	            this.setDefaultFactorType(Enums.RECOVERY_FACTOR_TYPE_CALL);
	          }
	          if (emailEnabled) {
	            this.$el.addClass('forgot-password-email-enabled');
	            formChildren.push(this.createRecoveryFactorButton('email-button', 'account.unlock.sendEmail', Enums.RECOVERY_FACTOR_TYPE_EMAIL, form));
	            this.setDefaultFactorType(Enums.RECOVERY_FACTOR_TYPE_EMAIL);
	          }
	        }
	
	        return formChildren;
	      },
	      initialize: function initialize() {
	
	        this.listenTo(this, 'save', function () {
	          this.options.appState.set('username', this.model.get('username'));
	          this.model.save();
	        });
	
	        this.listenTo(this.state, 'contactSupport', function () {
	          this.add(ContactSupport, '.o-form-error-container');
	        });
	      },
	      setDefaultFactorType: function setDefaultFactorType(factorType) {
	        if (_.isEmpty(this.model.get('factorType'))) {
	          this.model.set('factorType', factorType);
	        }
	      },
	      createRecoveryFactorButton: function createRecoveryFactorButton(className, labelCode, factorType, form) {
	        return FormType.Button({
	          attributes: { 'data-se': className },
	          className: 'button button-primary button-wide ' + className,
	          title: Okta.loc(labelCode, 'login'),
	          click: function click() {
	            form.clearErrors();
	            if (this.model.isValid()) {
	              this.model.set('factorType', factorType);
	              form.trigger('save', this.model);
	            }
	          }
	        });
	      }
	    },
	    Footer: Footer
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 768 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(615), __webpack_require__(642), __webpack_require__(643)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Enums, FormController, FormType) {
	
	  var _ = Okta._;
	
	  return FormController.extend({
	    className: 'account-unlocked',
	    Model: function Model() {
	      return {
	        local: {
	          userFullName: ['string', false, this.options.appState.get('userFullName')]
	        }
	      };
	    },
	
	    Form: {
	      title: _.partial(Okta.loc, 'account.unlock.unlocked.title', 'login'),
	      subtitle: _.partial(Okta.loc, 'account.unlock.unlocked.desc', 'login'),
	      noButtonBar: true,
	      attributes: { 'data-se': 'account-unlocked' },
	      formChildren: function formChildren() {
	        return [FormType.Button({
	          title: Okta.loc('goback', 'login'),
	          className: 'button button-primary button-wide',
	          attributes: { 'data-se': 'back-button' },
	          click: function click() {
	            this.state.set('navigateDir', Enums.DIRECTION_BACK);
	            this.options.appState.trigger('navigate', '');
	          }
	        })];
	      }
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 769 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(615), __webpack_require__(642), __webpack_require__(643)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Enums, FormController, FormType) {
	
	  var _ = Okta._;
	
	  return FormController.extend({
	    className: 'account-unlock-email-sent',
	    Model: function Model() {
	      return {
	        local: {
	          userFullName: ['string', false, this.options.appState.get('userFullName')]
	        }
	      };
	    },
	
	    Form: {
	      title: _.partial(Okta.loc, 'account.unlock.emailSent.title', 'login'),
	      subtitle: function subtitle() {
	        var username = this.options.appState.get('username');
	        return Okta.loc('account.unlock.emailSent.desc', 'login', [username]);
	      },
	      noButtonBar: true,
	      attributes: { 'data-se': 'unlock-email-sent' },
	      formChildren: function formChildren() {
	        return [FormType.Button({
	          title: Okta.loc('goback', 'login'),
	          className: 'button button-primary button-wide',
	          attributes: { 'data-se': 'back-button' },
	          click: function click() {
	            this.state.set('navigateDir', Enums.DIRECTION_BACK);
	            this.options.appState.trigger('navigate', '');
	          }
	        })];
	      }
	    },
	
	    initialize: function initialize(options) {
	      this.settings.callGlobalSuccess(Enums.UNLOCK_ACCOUNT_EMAIL_SENT, {
	        username: options.appState.get('username')
	      });
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 770 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2017, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	/* eslint max-params: [2, 11]*/
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(401), __webpack_require__(772), __webpack_require__(775), __webpack_require__(644), __webpack_require__(615), __webpack_require__(771), __webpack_require__(646), __webpack_require__(638), __webpack_require__(776), __webpack_require__(616)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Backbone, RegistrationSchema, LoginModel, BaseLoginController, Enums, RegistrationFormFactory, RouterUtil, Util, SubSchema, Errors) {
	
	  var _ = Okta._;
	
	  var Footer = Okta.View.extend({
	    template: '\
	      <a href="#" class="link help" data-se="back-link">\
	        {{i18n code="goback" bundle="login"}}\
	      </a>\
	    ',
	    className: 'auth-footer',
	    events: {
	      'click .help': function clickHelp(e) {
	        e.preventDefault();
	        this.back();
	      }
	    },
	    back: function back() {
	      this.state.set('navigateDir', Enums.DIRECTION_BACK);
	      this.options.appState.trigger('navigate', '');
	    }
	  });
	
	  return BaseLoginController.extend({
	    className: 'registration',
	    initialize: function initialize() {
	      // setup schema
	      var Schema = RegistrationSchema.extend({
	        settings: this.options.settings,
	        url: this.options.settings.get('baseUrl') + '/api/v1/registration/form'
	      });
	      var schema = new Schema();
	      this.state.set('schema', schema);
	    },
	    getRegistrationApiUrl: function getRegistrationApiUrl() {
	      // default policyId
	      var defaultPolicyId = this.settings.get('defaultPolicyId');
	      // org policyId
	      var orgPolicyId = this.options.settings.get('policyId');
	      var apiUrl = defaultPolicyId ? this.getRegistrationPolicyApi(defaultPolicyId) : this.getRegistrationPolicyApi(orgPolicyId);
	      return apiUrl;
	    },
	    getRegistrationPolicyApi: function getRegistrationPolicyApi(policyId) {
	      return this.options.settings.get('baseUrl') + '/api/v1/registration/' + policyId;
	    },
	    doPostSubmit: function doPostSubmit() {
	      if (this.model.get('activationToken')) {
	        // register via activation token
	        var self = this;
	        self.settings.callGlobalSuccess(Enums.REGISTRATION_COMPLETE, {
	          activationToken: this.model.get('activationToken')
	        });
	
	        var loginModel = new LoginModel({
	          settings: self.model.appState.settings
	        });
	        loginModel.loginWithActivationToken(this.model.get('activationToken')).then(function (transaction) {
	          self.model.trigger('setTransaction', transaction);
	        });
	      } else {
	        // register via activation email
	        this.model.appState.set('username', this.model.get('email'));
	        this.model.appState.trigger('navigate', 'signin/register-complete');
	      }
	    },
	    registerUser: function registerUser(postData) {
	      var self = this;
	      this.model.attributes = postData;
	      Backbone.Model.prototype.save.call(this.model).then(function () {
	        var activationToken = self.model.get('activationToken');
	        var postSubmitData = activationToken ? activationToken : self.model.get('email');
	        self.settings.postSubmit(postSubmitData, function () {
	          self.doPostSubmit();
	        }, function (errors) {
	          self.showErrors(errors);
	        });
	      }).fail(function (err) {
	        var responseJSON = err.responseJSON;
	        if (responseJSON && responseJSON.errorCauses.length) {
	          var errMsg = responseJSON.errorCauses[0].errorSummary;
	          self.settings.callGlobalError(new Errors.RegistrationError(errMsg));
	        }
	      });
	    },
	    createRegistrationModel: function createRegistrationModel(modelProperties) {
	      var self = this;
	      var Model = Okta.Model.extend({
	        url: self.getRegistrationApiUrl() + '/register',
	        settings: this.settings,
	        appState: this.options.appState,
	        props: modelProperties,
	        local: {
	          activationToken: 'string'
	        },
	        toJSON: function toJSON() {
	          var data = Okta.Model.prototype.toJSON.apply(this, arguments);
	          return {
	            userProfile: data,
	            relayState: this.settings.get('relayState')
	          };
	        },
	        parse: function parse(resp) {
	          this.set('activationToken', resp.activationToken);
	          delete resp.activationToken;
	          return resp;
	        },
	        save: function save() {
	          this.settings.preSubmit(this.attributes, function (postData) {
	            self.registerUser(postData);
	          }, function (errors) {
	            self.showErrors(errors);
	          });
	        }
	      });
	      return new Model();
	    },
	    showErrors: function showErrors(error, hideRegisterButton) {
	      //for parseSchema error hide form and show error at form level
	      if (error.callback == 'parseSchema' && error.errorCauses) {
	        error.errorSummary = _.clone(error.errorCauses[0].errorSummary);
	        delete error.errorCauses;
	      }
	      //show error on form
	      this.model.trigger('error', this.model, {
	        responseJSON: error
	      });
	
	      //throw global error
	      var errMsg = error.callback ? error.callback + ':' + error.errorSummary : error.errorSummary;
	      this.settings.callGlobalError(new Errors.RegistrationError(errMsg));
	
	      if (hideRegisterButton) {
	        this.$el.find('.button-primary').hide();
	      }
	    },
	    fetchInitialData: function fetchInitialData() {
	      var self = this;
	      // register parse complete event listener
	      self.state.get('schema').on('parseComplete', function (updatedSchema) {
	        var modelProperties = updatedSchema.properties.createModelProperties();
	        self.settings.set('defaultPolicyId', updatedSchema.properties.defaultPolicyId);
	
	        // create model
	        self.model = self.createRegistrationModel(modelProperties);
	        // create form
	        var Form = Okta.Form.extend({
	          layout: 'o-form-theme',
	          autoSave: true,
	          noCancelButton: true,
	          title: Okta.loc('registration.form.title', 'login'),
	          save: Okta.loc('registration.form.submit', 'login')
	        });
	        var form = new Form(self.toJSON());
	        // add form
	        self.add(form);
	        // add footer
	        self.footer = new self.Footer(self.toJSON());
	        self.add(self.footer);
	        self.addListeners();
	        if (updatedSchema.error) {
	          self.showErrors(updatedSchema.error, true);
	        } else {
	          // add fields
	          updatedSchema.properties.each(function (schemaProperty) {
	            var inputOptions = RegistrationFormFactory.createInputOptions(schemaProperty);
	            var subSchemas = schemaProperty.get('subSchemas');
	            var name = schemaProperty.get('name');
	            form.addInput(inputOptions);
	            if (name === 'password' && subSchemas) {
	              form.add(SubSchema.extend({ id: 'subschemas-' + name, subSchemas: subSchemas }));
	            }
	          });
	          var requiredFieldsLabel = Okta.tpl('<span class="required-fields-label">{{label}}</span>')({
	            label: Okta.loc('registration.required.fields.label', 'login')
	          });
	          form.add(requiredFieldsLabel);
	        }
	      });
	      // fetch schema from API
	      return this.state.get('schema').fetch();
	    },
	    Footer: Footer
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 771 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/* eslint max-statements: [2, 20],  max-depth: [2, 3], complexity: [2, 9] */
	/*!
	 * Copyright (c) 2017, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(597), __webpack_require__(649)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, SchemaFormFactory, TextBox) {
	
	  var _ = Okta._;
	
	  var getParts = function getParts(username) {
	    var usernameArr = username.split('');
	    var minPartsLength = 3;
	    var userNameParts = [];
	    var delimiters = [',', '.', '-', '_', '#', '@'];
	    var userNamePart = '';
	
	    _.each(usernameArr, function (part) {
	      if (delimiters.indexOf(part) == -1) {
	        userNamePart += part;
	      } else {
	        if (userNamePart.length >= minPartsLength) {
	          userNameParts.push(_.clone(userNamePart));
	        }
	        userNamePart = '';
	      }
	    });
	    if (userNamePart.length >= minPartsLength) {
	      userNameParts.push(_.clone(userNamePart));
	    }
	    return userNameParts.filter(Boolean);
	  };
	
	  var passwordContainsUserName = function passwordContainsUserName(username, password) {
	    if (!username) {
	      return false;
	    }
	    username = username.toLowerCase();
	    password = password.toLowerCase();
	    var usernameArr = getParts(username);
	    //check if each username part contains password
	    for (var i = 0; i < usernameArr.length; i++) {
	      var usernamePart = usernameArr[i];
	      if (password.indexOf(usernamePart) !== -1) {
	        return true;
	      }
	    }
	    return false;
	  };
	
	  var checkSubSchema = function checkSubSchema(subSchema, value, model) {
	    var minLength = subSchema.get('minLength');
	    var maxLength = subSchema.get('maxLength');
	    var regex = subSchema.get('format');
	
	    if (_.isNumber(minLength)) {
	      if (value.length < minLength) {
	        return false;
	      }
	    }
	
	    if (_.isNumber(maxLength)) {
	      if (value.length > maxLength) {
	        return false;
	      }
	    }
	
	    if (_.isString(regex)) {
	      if (regex === '^[#/userName]') {
	        // with email as login enabled, we only have email populated
	        // Therefore we fallback and run validation with email attribute.
	        var username = model.has('userName') ? model.get('userName') : model.get('email');
	        var password = value;
	        return !passwordContainsUserName(username, password);
	      } else {
	        if (!new RegExp(regex).test(value)) {
	          return false;
	        }
	      }
	    }
	
	    return true;
	  };
	
	  var checkSubSchemas = function checkSubSchemas(fieldName, model, subSchemas, showError) {
	    var value = model.get(fieldName);
	    if (!_.isString(value)) {
	      return;
	    }
	
	    subSchemas.each(function (subSchema, index) {
	      var ele = Okta.$('#subschemas-' + fieldName + ' .subschema-' + index);
	      //hide password complexity if no password
	      if (value) {
	        ele.children('p').removeClass('default-schema');
	      } else {
	        ele.children('p').addClass('default-schema');
	      }
	      ele.removeClass('subschema-satisfied subschema-unsatisfied subschema-error');
	      if (checkSubSchema(subSchema, value, model)) {
	        ele.addClass('subschema-satisfied');
	        ele.find('p span').removeClass('error error-16-small');
	        ele.find('p span').addClass('confirm-16');
	      } else {
	        if (showError) {
	          ele.find('p span').removeClass('confirm-16');
	          ele.find('p span').addClass('error error-16-small');
	          ele.addClass('subschema-error subschema-unsatisfied');
	        }
	      }
	    });
	  };
	
	  var fnCreateInputOptions = function fnCreateInputOptions(schemaProperty) {
	    var inputOptions = SchemaFormFactory.createInputOptions(schemaProperty);
	    if (inputOptions.type === 'select') {
	      inputOptions = _.extend(inputOptions, {
	        label: schemaProperty.get('title')
	      });
	    } else {
	      var placeholder = schemaProperty.get('title');
	      if (schemaProperty.get('required')) {
	        placeholder += ' *';
	      }
	      inputOptions = _.extend(inputOptions, {
	        label: false,
	        'label-top': true,
	        placeholder: placeholder
	      });
	    }
	
	    var fieldName = schemaProperty.get('name');
	    switch (fieldName) {
	      case 'userName':
	        inputOptions.input = TextBox;
	        inputOptions.params = {
	          'icon': 'person-16-gray'
	        };
	        break;
	      case 'password':
	        inputOptions.type = 'password';
	        inputOptions.input = TextBox;
	        inputOptions.params = {
	          'icon': 'remote-lock-16'
	        };
	    }
	
	    var subSchemas = schemaProperty.get('subSchemas');
	    if (subSchemas) {
	      inputOptions.events = {
	        'input': function input() {
	          checkSubSchemas(fieldName, this.model, subSchemas, true);
	        },
	        'focusout': function focusout() {
	          checkSubSchemas(fieldName, this.model, subSchemas, true);
	        },
	        'change:userName': function changeUserName() {
	          checkSubSchemas(fieldName, this.model, subSchemas, true);
	        }
	      };
	    }
	
	    return inputOptions;
	  };
	
	  return {
	    createInputOptions: fnCreateInputOptions,
	    getUsernameParts: getParts,
	    passwordContainsUserName: passwordContainsUserName
	  };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 772 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2017, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(773), __webpack_require__(774)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, BaseSchema, SchemaProperty) {
	
	  var _ = Okta._;
	
	  var RegistrationSchemaPropertyCollection = SchemaProperty.Collection.extend({
	    createModelProperties: function createModelProperties() {
	      var modelProperties = SchemaProperty.Collection.prototype.createModelProperties.apply(this);
	      _.each(modelProperties, function (modelProperty, name) {
	        modelProperty.required = !!this.get(name).get('required');
	      }, this);
	      return modelProperties;
	    }
	  });
	
	  return BaseSchema.Model.extend({
	    expand: ['schema'],
	
	    constructor: function constructor() {
	      this.properties = new RegistrationSchemaPropertyCollection();
	      Okta.BaseModel.apply(this, arguments);
	    },
	
	    parse: function parse(resp) {
	
	      var parseResponseData = _.bind(function (resp) {
	        var requireFields = resp.schema.required;
	        if (_.isArray(requireFields)) {
	          _.each(requireFields, function (requireField) {
	            var field = this.properties.get(requireField);
	            if (field) {
	              field.set('required', true);
	            }
	          }, this);
	        }
	
	        var fieldOrderIds = resp.schema.fieldOrder;
	        if (_.isArray(fieldOrderIds)) {
	          _.each(fieldOrderIds, function (fieldOrderId, sortOrder) {
	            var field = this.properties.get(fieldOrderId);
	            if (field) {
	              field.set('sortOrder', sortOrder);
	            }
	          }, this);
	          this.properties.comparator = 'sortOrder';
	          this.properties.sort();
	        }
	        this.properties.defaultPolicyId = resp.policyId;
	        return resp;
	      }, this);
	
	      var self = this;
	      this.settings.parseSchema(resp, function (resp) {
	        if (resp.profileSchema) {
	          resp.schema = resp.profileSchema;
	          BaseSchema.Model.prototype.parse.apply(self, [resp]);
	          resp = parseResponseData(resp);
	        }
	        self.trigger('parseComplete', { properties: self.properties });
	      }, function (error) {
	        self.trigger('parseComplete', { properties: self.properties, error: error });
	      });
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 773 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(521), __webpack_require__(329), __webpack_require__(774)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, BaseModel, BaseCollection, SchemaProperty) {
	
	  var parseProperties = function parseProperties(resp) {
	    var schemaMeta = _.pick(resp, 'id', 'name', 'displayName');
	    var properties = _.map(resp.schema.properties, function (property, name) {
	      return _({ name: name }).chain().extend(property).omit('__metadata').value();
	    });
	    _.each(properties, function (property) {
	      property['__schemaMeta__'] = schemaMeta;
	    });
	    return properties;
	  };
	
	  var Schema = BaseModel.extend({
	
	    defaults: {
	      id: undefined,
	      displayName: undefined,
	      name: undefined
	    },
	
	    constructor: function constructor() {
	      this.properties = new SchemaProperty.Collection();
	      BaseModel.apply(this, arguments);
	    },
	
	    getProperties: function getProperties() {
	      return this.properties;
	    },
	
	    clone: function clone() {
	      var model = BaseModel.prototype.clone.apply(this, arguments);
	      model.getProperties().set(this.getProperties().toJSON({ verbose: true }));
	      return model;
	    },
	
	    parse: function parse(resp) {
	      var properties = parseProperties(resp);
	      this.properties.set(properties, { parse: true });
	      return _.omit(resp, 'schema');
	    },
	
	    trimProperty: function trimProperty(property) {
	      return _.omit(property, 'name');
	    },
	
	    toJSON: function toJSON() {
	      var json = BaseModel.prototype.toJSON.apply(this, arguments);
	      json.schema = { properties: {} };
	      this.getProperties().each(function (model) {
	        var property = model.toJSON();
	        json.schema.properties[property.name] = this.trimProperty(property);
	      }, this);
	      return json;
	    },
	
	    save: function save() {
	      this.getProperties().each(function (model) {
	        model.cleanup();
	      });
	      return BaseModel.prototype.save.apply(this, arguments);
	    }
	  });
	
	  var Schemas = BaseCollection.extend({
	    model: Schema
	  });
	
	  return {
	    parseProperties: parseProperties,
	    Model: Schema,
	    Collection: Schemas
	  };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 774 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _stringify = __webpack_require__(406);
	
	var _stringify2 = _interopRequireDefault(_stringify);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/* eslint max-statements: [2, 15], complexity: [2, 8], max-params: [2, 8] */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(330), __webpack_require__(404), __webpack_require__(329), __webpack_require__(521), __webpack_require__(520), __webpack_require__(559), __webpack_require__(405), __webpack_require__(595)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, $, BaseCollection, BaseModel, Logger, SchemaUtil, StringUtil, EnumTypeHelper) {
	
	  var loc = StringUtil.localize;
	
	  var STRING = SchemaUtil.STRING,
	      NUMBER = SchemaUtil.NUMBER,
	      INTEGER = SchemaUtil.INTEGER,
	      OBJECT = SchemaUtil.OBJECT;
	
	  var getArrayTypeName = function getArrayTypeName(type, elementType) {
	    return type + 'of' + elementType;
	  };
	
	  var SubSchema = BaseModel.extend({
	    defaults: {
	      description: undefined,
	      minLength: undefined,
	      maxLength: undefined,
	      format: undefined
	    },
	    parse: function parse(resp) {
	      if (_.isString(resp.format)) {
	        var matcher = /^\/(.+)\/$/.exec(resp.format);
	        if (matcher) {
	          resp.format = matcher[1];
	        }
	      }
	      return resp;
	    }
	  });
	
	  var SubSchemaCollection = BaseCollection.extend({
	    model: SubSchema
	  });
	
	  var SubSchemaAllOfCollection = SubSchemaCollection.extend({
	    _type: 'allOf'
	  });
	
	  var SubSchemaOneOfCollection = SubSchemaCollection.extend({
	    _type: 'oneOf'
	  });
	
	  var SubSchemaNoneOfCollection = SubSchemaCollection.extend({
	    _type: 'noneOf'
	  });
	
	  var constraintTypeErrorMessages = {
	    string: loc('schema.validation.field.value.must.string', 'courage'),
	    number: loc('schema.validation.field.value.must.number', 'courage'),
	    integer: loc('schema.validation.field.value.must.integer', 'courage'),
	    object: loc('schema.validation.field.value.must.object', 'courage')
	  };
	
	  var loginFormatNonePattern = '.+';
	
	  var escapedLoginCharsRe = /[^a-zA-Z0-9\-]/;
	
	  var SchemaProperty = BaseModel.extend({
	
	    constraintHandlers: {
	      between: '_checkBetweenConstraints',
	      greaterThan: '_checkGreaterThanConstraint',
	      lessThan: '_checkLessThanConstraint',
	      equals: '_checkEqualsConstraint'
	    },
	
	    idAttribute: 'name',
	
	    local: {
	      '__oneOf__': {
	        type: 'array',
	        minItems: 1
	      }
	    },
	
	    defaults: {
	      // OKTA-28445, set empty string by default as the key for each property when sycn with server
	      // so that server can respond with error when a name is not provided
	      name: '',
	      title: undefined,
	      type: undefined,
	      description: undefined,
	      required: false,
	      format: undefined,
	      // choose disable option be default.
	      union: undefined,
	      subSchemas: undefined,
	      settings: { permissions: { SELF: SchemaUtil.PERMISSION.READ_ONLY } },
	      '__isSensitive__': BaseModel.ComputedProperty(['settings'], function (settings) {
	        return !!(settings && settings.sensitive);
	      }),
	      '__userPermission__': SchemaUtil.PERMISSION.READ_ONLY,
	      '__displayType__': undefined,
	      '__displayTypeLabel__': BaseModel.ComputedProperty(['__displayType__'], function (displayType) {
	        return SchemaUtil.DATATYPE[displayType] || displayType;
	      }),
	      '__supportsMinMax__': false,
	      // use the private naming convention for these computed properties,
	      // to deal with the complexity in cloning schema with properties (toJSON({verbose: true})),
	      // to make sure these attributes are being excluded from api request
	      '__isReadOnly__': BaseModel.ComputedProperty(['mutability'], function (mutability) {
	        return mutability === SchemaUtil.MUTABILITY.READONLY;
	      }),
	      '__isWriteOnly__': BaseModel.ComputedProperty(['mutability'], function (mutability) {
	        return mutability === SchemaUtil.MUTABILITY.WRITEONLY;
	      }),
	      '__displayScope__': undefined,
	      '__isScopeSelf__': BaseModel.ComputedProperty(['scope'], function (scope) {
	        return scope === SchemaUtil.SCOPE.SELF;
	      }),
	      '__isNoneScopeArrayType__': BaseModel.ComputedProperty(['__isScopeSelf__', '__displayType__'], function (isScopeSelf, displayType) {
	        return !isScopeSelf && SchemaUtil.isArrayDataType(displayType);
	      }),
	      '__isImported__': BaseModel.ComputedProperty(['externalName'], function (externalName) {
	        return !!externalName;
	      }),
	      '__isFromBaseSchema__': BaseModel.ComputedProperty(['__schemaMeta__'], function (schemaMeta) {
	        return schemaMeta && schemaMeta.name === 'base';
	      }),
	      // Only UI can turn on __enumDefined__ and reprocess the enum/oneOf value; otherwise,
	      // it should leave existing value untouch
	      '__enumDefined__': false,
	      '__supportEnum__': BaseModel.ComputedProperty(['__displayType__'], function (displayType) {
	        return _.contains(SchemaUtil.SUPPORTENUM, displayType);
	      }),
	      '__isNumberTypeEnum__': BaseModel.ComputedProperty(['__displayType__'], function (displayType) {
	        return _.contains([SchemaUtil.NUMBER, SchemaUtil.ARRAYDISPLAYTYPE.arrayofnumber], displayType);
	      }),
	      '__isIntegerTypeEnum__': BaseModel.ComputedProperty(['__displayType__'], function (displayType) {
	        return _.contains([SchemaUtil.INTEGER, SchemaUtil.ARRAYDISPLAYTYPE.arrayofinteger], displayType);
	      }),
	      '__isObjectTypeEnum__': BaseModel.ComputedProperty(['__displayType__'], function (displayType) {
	        return _.contains([SchemaUtil.OBJECT, SchemaUtil.ARRAYDISPLAYTYPE.arrayofobject], displayType);
	      }),
	      '__isStringTypeEnum__': BaseModel.ComputedProperty(['__displayType__'], function (displayType) {
	        return _.contains([SchemaUtil.STRING, SchemaUtil.ARRAYDISPLAYTYPE.arrayofstring], displayType);
	      }),
	      '__enumConstraintType__': BaseModel.ComputedProperty(['__isStringTypeEnum__', '__isNumberTypeEnum__', '__isIntegerTypeEnum__', '__isObjectTypeEnum__'], function (isStringType, isNumberType, isIntegerType, isObjectType) {
	        if (isStringType) {
	          return STRING;
	        }
	        if (isNumberType) {
	          return NUMBER;
	        }
	        if (isIntegerType) {
	          return INTEGER;
	        }
	        if (isObjectType) {
	          return OBJECT;
	        }
	      }),
	      '__isEnumDefinedAndSupported__': BaseModel.ComputedProperty(['__enumDefined__', '__supportEnum__'], function (enumDefined, supportEnum) {
	        return enumDefined && supportEnum;
	      }),
	      '__isLoginOfBaseSchema__': BaseModel.ComputedProperty(['__isFromBaseSchema__', 'name'], function (isFromBaseSchema, name) {
	        return isFromBaseSchema && name === 'login';
	      })
	    },
	
	    initialize: function initialize() {
	      BaseModel.prototype.initialize.apply(this, arguments);
	      this.listenTo(this, 'change:__displayType__', this._updateTypeFormatConstraints);
	      this.listenTo(this, 'change:type change:format change:items', this._updateDisplayType);
	      this.listenTo(this, 'change:__minVal__ change:__maxVal__', this._updateMinMax);
	      this.listenTo(this, 'change:__equals__', this._convertEqualsToMinMax);
	      this.listenTo(this, 'change:__constraint__', this._setConstraintText);
	      this._setConstraintText();
	      this._setLoginPattern();
	    },
	
	    parse: function parse(resp) {
	      resp = _.clone(resp);
	
	      if (resp.type === 'object' && resp.extendedType === 'image') {
	        resp.type = 'image';
	      }
	      resp['__displayType__'] = SchemaUtil.getDisplayType(resp.type, resp.format, resp.items ? resp.items.format ? resp.items.format : resp.items.type : undefined);
	      this._setRangeConstraints(resp);
	      resp['__supportsMinMax__'] = SchemaUtil.SUPPORTSMINMAX.indexOf(resp['__displayType__']) != -1;
	      resp['__displayScope__'] = SchemaUtil.DISPLAYSCOPE[resp.scope] || SchemaUtil.DISPLAYSCOPE.NA;
	      if (resp.settings && resp.settings.permissions && resp.settings.permissions.SELF) {
	        resp['__userPermission__'] = resp.settings.permissions.SELF;
	      }
	      this._setMasterOverride(resp);
	      this._setSubSchemas(resp);
	      return resp;
	    },
	
	    validate: function validate() {
	      var enumValidationError = this._validateEnumOneOf();
	
	      if (enumValidationError) {
	        return enumValidationError;
	      }
	
	      if (!this.get('__supportsMinMax__') || !this.get('__constraint__')) {
	        return undefined;
	      }
	
	      var constraitType = this.get('__constraint__'),
	          constraitHandler = this[this.constraintHandlers[constraitType]];
	
	      if (_.isFunction(constraitHandler)) {
	        return constraitHandler.call(this);
	      } else {
	        Logger.warn('No constraint handler found for: ' + constraitType);
	        return undefined;
	      }
	    },
	
	    _checkBetweenConstraints: function _checkBetweenConstraints() {
	      var minVal = this.get('__minVal__'),
	          maxVal = this.get('__maxVal__');
	
	      if (!minVal && !maxVal) {
	        return;
	      }
	      if (!minVal) {
	        return { '__minVal__': 'Min value is required' };
	      }
	      if (!maxVal) {
	        return { '__maxVal__': 'Max value is required' };
	      }
	      var val = this._checkIntegerConstraints('__minVal__', 'Min value');
	      if (val) {
	        return val;
	      }
	      val = this._checkIntegerConstraints('__maxVal__', 'Max value');
	      if (val) {
	        return val;
	      }
	      if (+minVal >= +maxVal) {
	        return { '__maxVal__': 'Max val must be greater than min val' };
	      }
	    },
	
	    _checkGreaterThanConstraint: function _checkGreaterThanConstraint() {
	      var minVal = this.get('__minVal__');
	      if (!minVal) {
	        return;
	      }
	      var val = this._checkIntegerConstraints('__minVal__', 'Min value');
	      if (val) {
	        return val;
	      }
	    },
	
	    _checkLessThanConstraint: function _checkLessThanConstraint() {
	      var maxVal = this.get('__maxVal__');
	      if (!maxVal) {
	        return;
	      }
	      var val = this._checkIntegerConstraints('__maxVal__', 'Max value');
	      if (val) {
	        return val;
	      }
	    },
	
	    _checkEqualsConstraint: function _checkEqualsConstraint() {
	      var equals = this.get('__equals__');
	      if (!equals) {
	        return;
	      }
	      var val = this._checkIntegerConstraints('__equals__', 'Constraint');
	      if (val) {
	        return val;
	      }
	    },
	
	    _checkIntegerConstraints: function _checkIntegerConstraints(field, name) {
	      var val = this.get(field);
	
	      var error = {};
	      if (isNaN(val)) {
	        error[field] = name + ' must be a number';
	        return error;
	      }
	      if (+val < 0) {
	        error[field] = name + ' must be greater than 0';
	        return error;
	      }
	    },
	
	    _setMasterOverride: function _setMasterOverride(resp) {
	      if (resp.settings && resp.settings.masterOverride && resp.settings.masterOverride) {
	        var masterOverrideValue = resp.settings.masterOverride.value;
	        if (_.isArray(masterOverrideValue) && !_.isEmpty(masterOverrideValue)) {
	          resp['__masterOverrideType__'] = 'OVERRIDE';
	          resp['__masterOverrideValue__'] = masterOverrideValue || [];
	        } else {
	          resp['__masterOverrideType__'] = resp.settings.masterOverride.type;
	        }
	      } else {
	        resp['__masterOverrideType__'] = 'INHERIT';
	      }
	    },
	
	    _setRangeConstraints: function _setRangeConstraints(resp) {
	      if (resp['__displayType__'] == STRING) {
	        resp['__minVal__'] = resp.minLength;
	        resp['__maxVal__'] = resp.maxLength;
	      } else if (resp['__displayType__'] == INTEGER || resp['__displayType__'] == NUMBER) {
	        resp['__minVal__'] = resp.minimum;
	        resp['__maxVal__'] = resp.maximum;
	      }
	      if (resp['__minVal__'] && resp['__maxVal__']) {
	        if (resp['__minVal__'] === resp['__maxVal__']) {
	          resp['__constraint__'] = 'equals';
	          resp['__equals__'] = resp['__minVal__'];
	        } else {
	          resp['__constraint__'] = 'between';
	        }
	      } else if (!resp['__minVal__'] && resp['__maxVal__']) {
	        resp['__constraint__'] = 'lessThan';
	      } else if (!resp['__maxVal__'] && resp['__minVal__']) {
	        resp['__constraint__'] = 'greaterThan';
	      }
	    },
	
	    _setSubSchemas: function _setSubSchemas(resp) {
	      if (resp.allOf) {
	        resp['subSchemas'] = new SubSchemaAllOfCollection(resp.allOf, { parse: true });
	      } else if (resp.oneOf) {
	        resp['subSchemas'] = new SubSchemaOneOfCollection(resp.oneOf, { parse: true });
	      } else if (resp.noneOf) {
	        resp['subSchemas'] = new SubSchemaNoneOfCollection(resp.noneOf, { parse: true });
	      }
	    },
	
	    _setLoginPattern: function _setLoginPattern() {
	      if (!this.get('__isLoginOfBaseSchema__')) {
	        return;
	      }
	
	      var pattern = this.get('pattern');
	      if (pattern === loginFormatNonePattern) {
	        this.set('__loginFormatRestriction__', SchemaUtil.LOGINPATTERNFORMAT.NONE);
	      } else if (pattern) {
	        this.set('__loginFormatRestriction__', SchemaUtil.LOGINPATTERNFORMAT.CUSTOM);
	        this.set('__loginFormatRestrictionCustom__', this._extractLoginPattern(pattern));
	      } else {
	        this.set('__loginFormatRestriction__', SchemaUtil.LOGINPATTERNFORMAT.EMAIL);
	      }
	    },
	
	    _updateDisplayType: function _updateDisplayType() {
	      var type = this.get('type');
	      if (type === STRING && this.get('format')) {
	        this.set('__displayType__', SchemaUtil.FORMATDISPLAYTYPE[this.get('format')]);
	      } else {
	        var items = this.get('items');
	        var arraytype = items && (items.format ? items.format : items.type);
	        if (type && arraytype) {
	          this.set('__displayType__', SchemaUtil.ARRAYDISPLAYTYPE[getArrayTypeName(type, arraytype)]);
	        } else {
	          this.set('__displayType__', type);
	        }
	      }
	    },
	
	    _validateEnumOneOf: function _validateEnumOneOf() {
	      if (!this.get('__isEnumDefinedAndSupported__')) {
	        return;
	      }
	
	      var enumOneOf = this.get('__oneOf__') || [];
	
	      if (_.isEmpty(enumOneOf)) {
	        return { '__oneOf__': loc('model.validation.field.blank', 'courage') };
	      }
	
	      if (!this._isValidateOneOfConstraint(enumOneOf)) {
	        var constraintType = this.get('__enumConstraintType__'),
	            errorTypeMsg = constraintTypeErrorMessages[constraintType];
	
	        return { '__oneOf__': errorTypeMsg };
	      }
	    },
	
	    _isValidateOneOfConstraint: function _isValidateOneOfConstraint(values) {
	      var constraintType = this.get('__enumConstraintType__');
	
	      return _.all(values, function (value) {
	        return EnumTypeHelper.isConstraintValueMatchType(value.const, constraintType);
	      });
	    },
	
	    toJSON: function toJSON() {
	      var json = BaseModel.prototype.toJSON.apply(this, arguments);
	
	      json.settings = { permissions: {} };
	      json.settings.permissions['SELF'] = this.get('__userPermission__');
	
	      // omit "sensitive" filed will have default it value to false.
	      if (this.get('__isSensitive__')) {
	        json.settings.sensitive = this.get('__isSensitive__');
	      }
	      if (this.get('type') === 'image') {
	        json.type = 'object';
	        json.extendedType = 'image';
	      }
	
	      json = this._enumAssignment(json);
	      json = this._attributeOverrideToJson(json);
	      json = this._normalizeUnionValue(json);
	      json = this._patternAssignment(json);
	      return json;
	    },
	
	    _attributeOverrideToJson: function _attributeOverrideToJson(json) {
	      var masterOverrideType = this.get('__masterOverrideType__'),
	          masterOverrideValue = this.get('__masterOverrideValue__');
	      if (masterOverrideType === 'OKTA_MASTERED') {
	        json.settings.masterOverride = { type: 'OKTA_MASTERED' };
	      } else if (masterOverrideType === 'OVERRIDE') {
	        json.settings.masterOverride = { type: 'ORDERED_LIST', value: [] };
	        if (masterOverrideValue instanceof BaseCollection) {
	          _.each(masterOverrideValue.toJSON(), function (overrideProfile) {
	            json.settings.masterOverride.value.push(overrideProfile.id);
	          });
	        } else if (masterOverrideValue instanceof Array) {
	          json.settings.masterOverride.value = masterOverrideValue;
	        }
	        if (_.isEmpty(json.settings.masterOverride.value)) {
	          delete json.settings.masterOverride;
	        }
	      }
	
	      if (masterOverrideType === 'INHERIT') {
	        delete json.settings.masterOverride;
	      }
	      return json;
	    },
	
	    /**
	     * Only allow set "union" value when isScopeSelf is NONE and displayType is
	     * array of (string/number/integer), otherwise reset to default.
	     *
	     * @see /universal-directory/shared/views/components/UnionGroupValuesRadio.js
	     */
	    _normalizeUnionValue: function _normalizeUnionValue(json) {
	
	      if (!this.get('__isNoneScopeArrayType__')) {
	        json['union'] = undefined;
	      }
	
	      return json;
	    },
	
	    _enumAssignment: function _enumAssignment(json) {
	      if (!this.get('__isEnumDefinedAndSupported__')) {
	        return json;
	      }
	
	      // backfill empty title by constraint
	      var enumOneOf = this._getEnumOneOfWithTitleCheck();
	
	      if (this.get('type') === 'array') {
	        delete json.items.enum;
	        json.items.oneOf = enumOneOf;
	      } else {
	        delete json.enum;
	        json.oneOf = enumOneOf;
	      }
	
	      return json;
	    },
	
	    _patternAssignment: function _patternAssignment(json) {
	      if (!this.get('__isLoginOfBaseSchema__') || !this.get('__loginFormatRestriction__')) {
	        return json;
	      }
	
	      switch (this.get('__loginFormatRestriction__')) {
	        case SchemaUtil.LOGINPATTERNFORMAT.EMAIL:
	          delete json.pattern;
	          break;
	        case SchemaUtil.LOGINPATTERNFORMAT.CUSTOM:
	          json.pattern = this._buildLoginPattern(this.get('__loginFormatRestrictionCustom__'));
	          break;
	        case SchemaUtil.LOGINPATTERNFORMAT.NONE:
	          json.pattern = loginFormatNonePattern;
	          break;
	      }
	
	      return json;
	    },
	
	    /**
	     * Character should be escaped except letters, digits and hyphen
	     */
	    _escapedRegexChar: function _escapedRegexChar(pattern, index) {
	      var char = pattern.charAt(index);
	
	      if (escapedLoginCharsRe.test(char)) {
	        return '\\' + char;
	      }
	
	      return char;
	    },
	
	    _buildLoginPattern: function _buildLoginPattern(pattern) {
	      var result = '';
	
	      for (var i = 0; i < pattern.length; i++) {
	        result = result + this._escapedRegexChar(pattern, i);
	      }
	
	      return '[' + result + ']+';
	    },
	
	    _extractLoginPattern: function _extractLoginPattern(pattern) {
	      var re = /^\[(.*)\]\+/,
	          matches = pattern.match(re);
	      return matches ? matches[1].replace(/\\(.)/g, '$1') : pattern;
	    },
	
	    _getEnumOneOfWithTitleCheck: function _getEnumOneOfWithTitleCheck() {
	      var enumOneOf = this.get('__oneOf__');
	
	      return _.map(enumOneOf, function (value) {
	        if ($.trim(value.title) !== '') {
	          return value;
	        }
	
	        value.title = !_.isString(value.const) ? (0, _stringify2.default)(value.const) : value.const;
	
	        return value;
	      });
	    },
	
	    _updateTypeFormatConstraints: function _updateTypeFormatConstraints() {
	      var displayType = this.get('__displayType__');
	      // OKTA-31952 reset format according to its displayType
	      this.unset('format', { silent: true });
	      this.unset('items', { silent: true });
	      this.set(SchemaUtil.DISPLAYTYPES[displayType]);
	      if (displayType != NUMBER && displayType != INTEGER) {
	        this.unset('minimum');
	        this.unset('maximum');
	      }
	      if (displayType != STRING) {
	        this.unset('minLength');
	        this.unset('maxLength');
	      }
	
	      this.unset('__minVal__');
	      this.unset('__maxVal__');
	      this.unset('__equals__');
	      this.set('__supportsMinMax__', SchemaUtil.SUPPORTSMINMAX.indexOf(this.get('__displayType__')) != -1);
	    },
	
	    _updateMinMax: function _updateMinMax() {
	      var min,
	          max,
	          displayType = this.get('__displayType__');
	
	      if (displayType === STRING) {
	        min = 'minLength';
	        max = 'maxLength';
	      } else if (displayType == INTEGER || displayType == NUMBER) {
	        min = 'minimum';
	        max = 'maximum';
	      }
	
	      if (this.get('__minVal__')) {
	        this.set(min, parseInt(this.get('__minVal__'), 10));
	      } else {
	        this.unset(min);
	      }
	
	      if (this.get('__maxVal__')) {
	        this.set(max, parseInt(this.get('__maxVal__'), 10));
	      } else {
	        this.unset(max);
	      }
	    },
	
	    _convertEqualsToMinMax: function _convertEqualsToMinMax() {
	      var equals = this.get('__equals__');
	      if (equals) {
	        this.set('__minVal__', equals);
	        this.set('__maxVal__', equals);
	      }
	    },
	
	    /*
	     Normally we would use a derived property here but derived properties do not work with the model Clone function
	     so we use this workaround instead.
	     */
	    _setConstraintText: function _setConstraintText() {
	      var constraint = this.get('__constraint__'),
	          min = this.get('__minVal__'),
	          max = this.get('__maxVal__'),
	          equals = this.get('__equals__');
	
	      switch (constraint) {
	        case 'between':
	          this.set('__constraintText__', 'Between ' + min + ' and ' + max);
	          break;
	        case 'greaterThan':
	          this.set('__constraintText__', 'Greater than ' + min);
	          break;
	        case 'lessThan':
	          this.set('__constraintText__', 'Less than ' + max);
	          break;
	        case 'equals':
	          this.set('__constraintText__', 'Equals ' + equals);
	          break;
	        default:
	          this.set('__constraintText__', '');
	          break;
	      }
	    },
	
	    cleanup: function cleanup() {
	      if (this.get('__constraint__') === 'lessThan') {
	        this.unset('__minVal__');
	      } else if (this.get('__constraint__') === 'greaterThan') {
	        this.unset('__maxVal__');
	      }
	      if (this.get('scope') !== SchemaUtil.SCOPE.SYSTEM) {
	        if (this.get('__isScopeSelf__') === true) {
	          this.set({ 'scope': SchemaUtil.SCOPE.SELF }, { silent: true });
	        } else {
	          this.unset('scope');
	        }
	      }
	    },
	
	    /**
	     * Since there is not an dedicated attribute to flag enum type,
	     * use enum values to determine whether the property is enum type or not.
	     */
	    isEnumType: function isEnumType() {
	      return !!this.getEnumValues();
	    },
	
	    getEnumValues: function getEnumValues() {
	      return this.get('oneOf') || this.get('enum') || this.get('items') && this.get('items')['oneOf'] || this.get('items') && this.get('items')['enum'];
	    },
	
	    detectHasEnumDefined: function detectHasEnumDefined() {
	      var enumValues = this.getEnumValues();
	
	      if (!enumValues) {
	        return;
	      }
	
	      this.set('__oneOf__', EnumTypeHelper.convertToOneOf(enumValues));
	      this.set('__enumDefined__', true);
	    }
	
	  });
	
	  var SchemaProperties = BaseCollection.extend({
	    model: SchemaProperty,
	    clone: function clone() {
	      return new this.constructor(this.toJSON({ verbose: true }), { parse: true });
	    },
	    areAllReadOnly: function areAllReadOnly() {
	      return _.all(this.pluck('__isReadOnly__'));
	    },
	    createModelProperties: function createModelProperties() {
	      return this.reduce(function (p, schemaProperty) {
	        var type = schemaProperty.get('type');
	        p[schemaProperty.id] = _.clone(SchemaUtil.DISPLAYTYPES[type]);
	        if (SchemaUtil.SUPPORTSMINMAX.indexOf(type) != -1) {
	          p[schemaProperty.id].minLength = schemaProperty.get('minLength');
	          p[schemaProperty.id].maxLength = schemaProperty.get('maxLength');
	        }
	        if (type === 'string') {
	          p[schemaProperty.id].format = schemaProperty.get('format');
	        }
	        return p;
	      }, {});
	    }
	  });
	
	  return {
	    Model: SchemaProperty,
	    Collection: SchemaProperties
	  };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 775 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(645)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, BaseLoginModel) {
	
	  return BaseLoginModel.extend({
	    constructor: function constructor(options) {
	      this.settings = options && options.settings;
	      Okta.Model.apply(this, arguments);
	    },
	    loginWithActivationToken: function loginWithActivationToken(activationToken) {
	      return this.startTransaction(function (authClient) {
	        return authClient.signIn({ token: activationToken });
	      });
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 776 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2017, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta) {
	  var SubSchema = Okta.View.extend({
	    index: '',
	    message: '',
	    class: function _class() {
	      return;
	    },
	    className: function className() {
	      return 'subschema-unsatisfied subschema-' + this.index;
	    },
	    template: '\
	      <p class="default-schema">\
	        <span class="icon icon-16"/>\
	        {{message}}\
	      </p>\
	    ',
	    getTemplateData: function getTemplateData() {
	      return {
	        message: this.message
	      };
	    }
	  });
	
	  return Okta.View.extend({
	    className: 'subschema',
	
	    children: function children() {
	      return this.subSchemas.map(function (subSchema, index) {
	        var description = subSchema.get('description');
	        // TODO API should send translated strings instead of i18n code inside description
	        // or send param with i18n code
	        var message = description;
	        return SubSchema.extend({
	          index: index,
	          message: message
	        });
	      });
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 777 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2017, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(615), __webpack_require__(642), __webpack_require__(643)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Enums, FormController, FormType) {
	
	  return FormController.extend({
	    events: {
	      'click .back-btn': function clickBackBtn(e) {
	        e.preventDefault();
	        this.back();
	      }
	    },
	    back: function back() {
	      this.state.set('navigateDir', Enums.DIRECTION_BACK);
	      this.options.appState.trigger('navigate', '');
	    },
	    className: 'registration-complete',
	    Model: function Model() {},
	    initialize: function initialize() {
	      this.settings.callGlobalSuccess(Enums.ACTIVATION_EMAIL_SENT, {
	        username: this.options.appState.get('username')
	      });
	    },
	    Form: {
	      noButtonBar: true,
	      formChildren: function formChildren() {
	        return [FormType.View({
	          View: Okta.View.extend({
	            template: '\
	              <span class="title-icon icon icon-16 confirm-16-green"></span>\
	              <h2>{{title}}</h2>\
	              <span>{{desc}}</span>\
	              <a href="#" class="button button-primary button-wide back-btn" data-se="back-link">\
	                {{i18n code="goback" bundle="login"}}\
	              </a>\
	              ',
	            getTemplateData: function getTemplateData() {
	              var email = this.options.appState.get('username');
	              return {
	                'desc': Okta.loc('registration.complete.desc', 'login', [email]),
	                'title': Okta.loc('registration.complete.title', 'login')
	              };
	            }
	          })
	        })];
	      }
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 778 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2017, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	/* eslint max-len: [2, 160] */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(564), __webpack_require__(642), __webpack_require__(643), __webpack_require__(779)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Util, FormController, FormType, ScopeList) {
	
	  var _ = Okta._;
	
	  return FormController.extend({
	    className: 'consent-required',
	    initialize: function initialize() {
	      this.model.set('expiresAt', this.options.appState.get('expiresAt'));
	      this.model.set('scopes', this.options.appState.get('scopes'));
	      this.listenTo(this.form, 'cancel', _.bind(this.model.cancel, this.model));
	    },
	    Model: {
	      props: {
	        expiresAt: ['string', true],
	        scopes: ['array', true]
	      },
	      save: function save() {
	        return this.doTransaction(function (transaction) {
	          return transaction.consent({
	            consent: {
	              expiresAt: this.get('expiresAt'),
	              scopes: _.pluck(this.get('scopes'), 'name')
	            }
	          });
	        });
	      },
	      cancel: function cancel() {
	        var self = this;
	        return this.doTransaction(function (transaction) {
	          return transaction.cancel();
	        }).then(function () {
	          var consentCancelFn = self.settings.get('consent.cancel');
	          if (_.isFunction(consentCancelFn)) {
	            consentCancelFn();
	          }
	        });
	      }
	    },
	    Form: {
	      noCancelButton: false,
	      autoSave: true,
	      save: Okta.loc('consent.required.consentButton', 'login'),
	      cancel: Okta.loc('consent.required.cancelButton', 'login'),
	      formChildren: function formChildren() {
	        var appState = this.options.appState;
	        return [FormType.View({
	          View: Okta.View.extend({
	            className: 'consent-title',
	            template: '\
	                <p>{{{i18n code="consent.required.text" bundle="login" arguments="appName;userConsentName"}}}</p>\
	              ',
	            getTemplateData: function getTemplateData() {
	              return {
	                appName: appState.escape('targetLabel'),
	                userConsentName: appState.escape('userConsentName')
	              };
	            }
	          })
	        }), FormType.View({
	          View: new ScopeList({ model: this.model })
	        }), FormType.View({
	          View: Okta.View.extend({
	            className: 'consent-description',
	            template: '\
	                <p>{{i18n code="consent.required.description" bundle="login"}}</p>\
	                {{#if termsOfService}}\
	                  <a class="terms-of-service" href="{{termsOfService}}" target="_blank">{{i18n code="consent.required.termsOfService" bundle="login"}}</a>\
	                  {{#if privacyPolicy}}\
	                    &#8226\
	                  {{/if}}\
	                {{/if}}\
	                {{#if privacyPolicy}}\
	                  <a class="privacy-policy" href="{{privacyPolicy}}" target="_blank">{{i18n code="consent.required.privacyPolicy" bundle="login"}}</a>\
	                {{/if}}\
	              ',
	            getTemplateData: function getTemplateData() {
	              return {
	                termsOfService: appState.get('targetTermsOfService') && appState.get('targetTermsOfService').href,
	                privacyPolicy: appState.get('targetPrivacyPolicy') && appState.get('targetPrivacyPolicy').href
	              };
	            }
	          })
	        })];
	      }
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 779 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2017, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(780)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, ScopeItem) {
	
	  return Okta.View.extend({
	    className: 'scope-list',
	    template: '\
	      <div class="scope-list-wrapper" />\
	    ',
	
	    postRender: function postRender() {
	      var _this = this;
	
	      this.model.get('scopes').forEach(function (scope) {
	        var item = new ScopeItem({
	          name: scope.displayName || scope.name,
	          description: scope.description
	        });
	        _this.$('.scope-list-wrapper').append(item.$el);
	      });
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 780 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2017, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(587)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta) {
	
	  return Okta.View.extend({
	    className: 'scope-item',
	    template: '\
	      <div class="scope-item-text">\
	        <p>{{name}}</p>\
	      </div>\
	      {{#if description}}\
	        <span class="scope-item-tooltip icon info-16-gray" />\
	      {{/if}}\
	    ',
	
	    initialize: function initialize() {
	      this.render();
	    },
	
	    postRender: function postRender() {
	      this.$('.scope-item-tooltip').qtip({
	        content: {
	          text: this.options.description
	        },
	        style: { classes: 'okta-sign-in-tooltip qtip-custom qtip-shadow' },
	        position: {
	          my: 'bottom right',
	          target: 'mouse'
	        }
	      });
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 781 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	/* eslint complexity: [2, 8] */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(409), __webpack_require__(641), __webpack_require__(782), __webpack_require__(685)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, Q, FactorUtil, FactorsDropDown, Factor) {
	
	  var _ = Okta._;
	
	  return Okta.View.extend({
	
	    template: '\
	      <div class="beacon-blank auth-beacon">\
	        <div class="beacon-blank js-blank-beacon-border auth-beacon-border"></div>\
	      </div>\
	      <div class="bg-helper auth-beacon auth-beacon-factor {{className}}" data-se="factor-beacon">\
	        <div class="okta-sign-in-beacon-border auth-beacon-border"></div>\
	      </div>\
	      <div data-type="factor-types-dropdown" class="factors-dropdown-wrap"></div>\
	    ',
	
	    events: {
	      'click .auth-beacon-factor': function clickAuthBeaconFactor(e) {
	        e.preventDefault();
	        e.stopPropagation();
	        this.$('.dropdown .options').toggle();
	      }
	    },
	
	    initialize: function initialize() {
	      this.options.appState.set('beaconType', 'factor');
	    },
	
	    getTemplateData: function getTemplateData() {
	      var factors = this.options.appState.get('factors'),
	          factor,
	          className;
	      if (factors) {
	        factor = factors.findWhere(_.pick(this.options, 'provider', 'factorType'));
	      } else {
	        factor = new Factor.Model(this.options.appState.get('factor'), this.toJSON());
	      }
	      className = factor.get('iconClassName');
	      return { className: className || '' };
	    },
	
	    postRender: function postRender() {
	      if (this.options.animate) {
	        this.$('.auth-beacon-factor').fadeIn(200);
	      }
	      var appState = this.options.appState;
	      if (appState.get('hasMultipleFactorsAvailable')) {
	        this.add(FactorsDropDown, '[data-type="factor-types-dropdown"]');
	      }
	    },
	
	    fadeOut: function fadeOut() {
	      var deferred = Q.defer();
	      this.$('.auth-beacon-factor').fadeOut(200, function () {
	        deferred.resolve();
	      });
	      return deferred.promise;
	    },
	
	    equals: function equals(Beacon, options) {
	      return Beacon && this instanceof Beacon && options.provider === this.options.provider && (options.factorType === this.options.factorType || FactorUtil.isOktaVerify(options.provider, options.factorType) && FactorUtil.isOktaVerify(this.options.provider, this.options.factorType));
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 782 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(783), __webpack_require__(571)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, FactorsDropDownOptions, BaseDropDown) {
	  var _ = Okta._;
	  var $ = Okta.$;
	
	  $(document).click(function (e) {
	    var $target = $(e.target);
	    var isDropdown = $target.closest('.option-selected').length > 0 && $target.closest('.dropdown').length > 0;
	    if (!isDropdown) {
	      $('.dropdown .options').hide();
	    }
	  });
	
	  return BaseDropDown.extend({
	    className: 'bg-helper icon-button',
	    events: {
	      'click a.option-selected': function clickAOptionSelected(e) {
	        e.preventDefault();
	        if (_.result(this, 'disabled')) {
	          e.stopPropagation();
	        } else {
	          this.$('.options').toggle();
	        }
	      },
	      'click .dropdown-disabled': function clickDropdownDisabled(e) {
	        e.preventDefault();
	        e.stopPropagation();
	      }
	    },
	    initialize: function initialize() {
	      this.addOption(FactorsDropDownOptions.getDropdownOption('TITLE'));
	      this.options.appState.get('factors').each(function (factor) {
	        this.addOption(FactorsDropDownOptions.getDropdownOption(factor.get('factorName')), { model: factor });
	        this.listenTo(this.last(), 'options:toggle', function () {
	          this.$('.options').hide();
	        });
	      }, this);
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 783 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	/* eslint max-statements: [2, 16], complexity: [2, 10] */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328), __webpack_require__(646)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta, RouterUtil) {
	
	  var _ = Okta._;
	
	  var _action = function _action(model) {
	    var url = RouterUtil.createVerifyUrl(model.get('provider'), model.get('factorType')),
	        self = this;
	    this.options.appState.trigger('factorSwitched');
	    this.model.manageTransaction(function (transaction, setTransaction) {
	      if (transaction.status === 'MFA_CHALLENGE' && transaction.prev) {
	        this.options.appState.set('trapMfaRequiredResponse', true);
	        return transaction.prev().then(function (trans) {
	          self.trigger('options:toggle');
	          setTransaction(trans);
	          self.options.appState.trigger('navigate', url);
	        });
	      } else {
	        self.trigger('options:toggle');
	        self.options.appState.trigger('navigate', url);
	      }
	    });
	  };
	
	  var dropdownOptions = {
	    'TITLE': {
	      title: _.partial(Okta.loc, 'mfa.factors.dropdown.title', 'login'),
	      className: 'dropdown-list-title'
	    },
	
	    'OKTA_VERIFY': {
	      icon: 'factor-icon mfa-okta-verify-30',
	      title: function title() {
	        return this.model.get('factorLabel');
	      },
	      action: function action() {
	        _action.call(this, this.model);
	      }
	    },
	
	    'OKTA_VERIFY_PUSH': {
	      icon: 'factor-icon mfa-okta-verify-30',
	      title: function title() {
	        return this.model.get('factorLabel');
	      },
	      action: function action() {
	        _action.call(this, this.model);
	      }
	    },
	
	    'GOOGLE_AUTH': {
	      icon: 'factor-icon mfa-google-auth-30',
	      title: function title() {
	        return this.model.get('factorLabel');
	      },
	      action: function action() {
	        _action.call(this, this.model);
	      }
	    },
	
	    'SYMANTEC_VIP': {
	      icon: 'factor-icon mfa-symantec-30',
	      title: function title() {
	        return this.model.get('factorLabel');
	      },
	      action: function action() {
	        _action.call(this, this.model);
	      }
	    },
	
	    'RSA_SECURID': {
	      icon: 'factor-icon mfa-rsa-30',
	      title: _.partial(Okta.loc, 'factor.totpHard.rsaSecurId', 'login'),
	      action: function action() {
	        _action.call(this, this.model);
	      }
	    },
	
	    'ON_PREM': {
	      icon: 'factor-icon mfa-onprem-30',
	      title: function title() {
	        return this.model.get('factorLabel');
	      },
	      action: function action() {
	        _action.call(this, this.model);
	      }
	    },
	
	    'DUO': {
	      icon: 'factor-icon mfa-duo-30',
	      title: function title() {
	        return this.model.get('factorLabel');
	      },
	      action: function action() {
	        _action.call(this, this.model);
	      }
	    },
	
	    'DUO_PUSH': {
	      icon: 'duo-push-16',
	      className: 'suboption',
	      // TODO: add phone number here
	      title: _.partial(Okta.loc, 'mfa.duoSecurity.push', 'login', ['XXX-XXX-7890'])
	    },
	
	    'DUO_SMS': {
	      icon: 'duo-sms-16',
	      className: 'suboption',
	      // TODO: add phone number here
	      title: _.partial(Okta.loc, 'mfa.duoSecurity.sms', 'login', ['XXX-XXX-7890'])
	    },
	
	    'DUO_CALL': {
	      icon: 'duo-call-16',
	      className: 'suboption',
	      // TODO: add phone number here
	      title: _.partial(Okta.loc, 'mfa.duoSecurity.call', 'login', ['XXX-XXX-7890'])
	    },
	
	    'YUBIKEY': {
	      icon: 'factor-icon mfa-yubikey-30',
	      title: function title() {
	        return this.model.get('factorLabel');
	      },
	      action: function action() {
	        _action.call(this, this.model);
	      }
	    },
	
	    'SMS': {
	      icon: 'factor-icon mfa-sms-30',
	      title: function title() {
	        return this.model.get('factorLabel');
	      },
	      action: function action() {
	        _action.call(this, this.model);
	      }
	    },
	
	    'CALL': {
	      icon: 'factor-icon mfa-call-30',
	      title: function title() {
	        return this.model.get('factorLabel');
	      },
	      action: function action() {
	        _action.call(this, this.model);
	      }
	    },
	
	    'QUESTION': {
	      icon: 'factor-icon mfa-question-30',
	      title: function title() {
	        return this.model.get('factorLabel');
	      },
	      action: function action() {
	        _action.call(this, this.model);
	      }
	    },
	
	    'PASSWORD': {
	      icon: 'factor-icon mfa-password-30',
	      title: function title() {
	        return this.model.get('factorLabel');
	      },
	      action: function action() {
	        _action.call(this, this.model);
	      }
	    },
	
	    'WINDOWS_HELLO': {
	      icon: 'factor-icon mfa-windows-hello-30',
	      title: function title() {
	        return this.model.get('factorLabel');
	      },
	      action: function action() {
	        _action.call(this, this.model);
	      }
	    },
	
	    'U2F': {
	      icon: 'factor-icon mfa-u2f-30',
	      title: function title() {
	        return this.model.get('factorLabel');
	      },
	      action: function action() {
	        _action.call(this, this.model);
	      }
	    },
	
	    'EMAIL': {
	      icon: 'factor-icon mfa-email-30',
	      title: function title() {
	        return this.model.get('factorLabel');
	      },
	      action: function action() {
	        _action.call(this, this.model);
	      }
	    },
	
	    'GENERIC_SAML': {
	      icon: 'factor-icon mfa-custom-factor-30',
	      title: function title() {
	        return this.model.get('factorLabel');
	      },
	      action: function action() {
	        _action.call(this, this.model);
	      }
	    }
	  };
	
	  return {
	    getDropdownOption: function getDropdownOption(factorName) {
	      return dropdownOptions[factorName];
	    }
	  };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 784 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*!
	 * Copyright (c) 2017, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 *
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and limitations under the License.
	 */
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(328)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Okta) {
	
	  return Okta.View.extend({
	
	    className: 'consent-beacon',
	    template: '\
	      <div class="logo-wrapper consent-beacon-user">\
	        <div class="consent-beacon-border">\
	          <span class="user-logo icon person-16-gray" />\
	        </div>\
	      </div>\
	      <div class="arrows-wrapper">\
	        <div class="arrow-left">\
	          <span class="arrow icon arrow-right-16" />\
	        </div>\
	        <div class="arrow-right">\
	          <span class="arrow icon arrow-left-16" />\
	        </div>\
	      </div>\
	      <div class="logo-wrapper consent-beacon-client">\
	        {{#if clientURI}}\
	          <a href="{{clientURI}}" class="client-logo-link" target="_blank">\
	        {{/if}}\
	        <div class="consent-beacon-border"/>\
	        {{#if clientURI}}\
	          </a>\
	        {{/if}}\
	        {{#if customLogo}}\
	          <img class="client-logo custom-logo" src="{{customLogo}}" />\
	        {{else}}\
	          <img class="client-logo default-logo" src="{{defaultLogo}}" />\
	        {{/if}}\
	      </div>\
	    ',
	
	    getTemplateData: function getTemplateData() {
	      return {
	        customLogo: this.options.appState.get('targetLogo') && this.options.appState.get('targetLogo').href,
	        defaultLogo: this.options.appState.get('defaultAppLogo'),
	        clientURI: this.options.appState.get('targetClientURI') && this.options.appState.get('targetClientURI').href
	      };
	    },
	
	    equals: function equals(Beacon) {
	      return Beacon && this instanceof Beacon;
	    }
	
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }
/******/ ])
});
;
//# sourceMappingURL=okta-sign-in.js.map